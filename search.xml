<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>脚本</title>
      <link href="/2024/06/26/%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/06/26/%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>这里是一篇关于如何使用 Alfred 和 iTerm2 集成自定义 AppleScript 的博客文章。这个集成可以极大地提升 macOS 用户在使用终端时的效率和便利性。</p><blockquote><p>对于 macOS 用户来说，Alfred 和 iTerm2 是两个非常强大的工具。Alfred 作为一款效率提升工具，能够通过快捷键和简单的命令来执行各种操作，而 iTerm2 则是一个功能丰富的替代 macOS 默认终端的应用。将这两者结合起来，你可以通过简单的 Alfred 命令来控制 iTerm2，执行脚本或者打开新的终端会话。</p></blockquote><h3 id="自定义-Alfred-通过-iTerm2-执行脚本的步骤">自定义 Alfred 通过 iTerm2 执行脚本的步骤</h3><h4 id="第一步：获取脚本">第一步：<a href="https://github.com/vitorgalvao/custom-alfred-iterm-scripts">获取脚本</a></h4><p>首先，你需要获取一个可以将 Alfred 和 iTerm2 集成的 AppleScript。这个脚本定义了如何通过 Alfred 命令来控制 iTerm2。使用以下命令可以将脚本直接复制到你的剪贴板：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--silent</span> <span class="token string">'https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript'</span> <span class="token operator">|</span> pbcopy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第二步：配置-Alfred">第二步：配置 Alfred</h4><p>打开 Alfred 的偏好设置：</p><ol><li>打开 Alfred 的偏好设置（通过呼叫 Alfred 并按 <code>⌘,</code>）。</li><li>导航到“功能” → “终端 / Shell” → “自定义”。</li><li>在“Application”下拉菜单中选择“自定义”，然后粘贴你的脚本到文本框中。</li></ol><h4 id="第三步：自定义脚本行为">第三步：自定义脚本行为</h4><p>脚本的顶部有几个 <code>property</code> 设置，可以根据你的需要进行调整：</p><ul><li><code>open_in_new_window</code>: 设置为 <code>true</code> 可以让每个 Alfred 命令在新窗口中打开。</li><li><code>open_in_new_tab</code>: 设置为 <code>true</code> 会在新标签页中打开命令，<code>false</code> 则在当前标签页重用。</li><li><code>iterm2_opens_quietly</code>: 如果你的 iTerm2 配置为启动时不打开新窗口，将此设为 <code>true</code>。</li></ul><h4 id="第四步：使用">第四步：使用</h4><p>完成设置后，你可以通过 Alfred 运行任何命令。比如，通过 Alfred 的搜索框输入 <code>&gt; ls</code>，这个命令就会在 iTerm2 的当前窗口中执行，显示当前目录的内容。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装MySQL</title>
      <link href="/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<h1>如何在Ubuntu上安装和配置MySQL并允许远程访问</h1><p>在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。</p><h2 id="步骤1：更新包列表并安装MySQL服务器">步骤1：更新包列表并安装MySQL服务器</h2><p>首先，确保你的包列表是最新的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后安装MySQL服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> mysql-server-8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="步骤2：检查MySQL服务状态并启用MySQL服务">步骤2：检查MySQL服务状态并启用MySQL服务</h2><p>检查MySQL服务是否正在运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保MySQL服务在系统启动时自动启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="步骤3：运行安全安装脚本">步骤3：运行安全安装脚本</h2><p>MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在提示中，你将需要：</p><ul><li>选择密码规则</li><li>删除匿名用户</li><li>禁用远程root登录</li><li>删除测试数据库和表</li></ul><h2 id="步骤4：修改MySQL配置文件以允许远程连接">步骤4：修改MySQL配置文件以允许远程连接</h2><p>打开MySQL配置文件<code>mysqld.cnf</code>，通常位于<code>/etc/mysql/mysql.conf.d/</code>目录中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到以下行：</p><pre class="line-numbers language-none"><code class="language-none">bind-address &#x3D; 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其注释掉或改为<code>0.0.0.0</code>，使MySQL监听所有网络接口：</p><pre class="line-numbers language-none"><code class="language-none"># bind-address &#x3D; 127.0.0.1bind-address &#x3D; 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存配置文件并退出编辑器。</p><h2 id="步骤5：重启MySQL服务">步骤5：重启MySQL服务</h2><p>重启MySQL服务以使更改生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="步骤6：创建可以远程访问的用户">步骤6：创建可以远程访问的用户</h2><p>登录到MySQL命令行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'yourusername'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'yourpassword'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'yourusername'</span><span class="token variable">@'%'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><ul><li><strong>GRANT ALL PRIVILEGES</strong>：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。</li><li><strong>ON</strong>：授予权限的范围。<code>*.*</code>表示所有数据库和所有表。</li><li><strong>TO</strong>：指定权限接收者。<code>'yourusername'</code>是用户名，<code>'%'</code>是主机名通配符，表示允许从任何IP地址连接的用户。</li><li><strong>WITH GRANT OPTION</strong>：允许用户将他自己拥有的权限授予其他用户。</li></ul><h2 id="步骤7：配置防火墙">步骤7：配置防火墙</h2><p>确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">3306</span><span class="token function">sudo</span> ufw reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="步骤8：验证远程连接">步骤8：验证远程连接</h2><p>在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> yourusername <span class="token parameter variable">-p</span> <span class="token parameter variable">-h</span> your_server_ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="其他操作">其他操作</h2><h3 id="删除某些权限或用户">删除某些权限或用户</h3><p>如果你想删除某些权限，或者从特定数据库中删除权限，可以使用<code>REVOKE</code>命令。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span><span class="token punctuation">,</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span> <span class="token keyword">FROM</span> <span class="token string">'existinguser'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看某个用户的当前权限">查看某个用户的当前权限</h3><p>如果你想查看某个用户的当前权限，可以使用以下命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'existinguser'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动续签证书</title>
      <link href="/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/"/>
      <url>/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1>使用 <a href="http://acme.sh">acme.sh</a> 安装和管理 SSL 证书</h1><p>本文将介绍如何使用 <a href="http://acme.sh">acme.sh</a> 安装和管理 SSL 证书。<a href="http://acme.sh">acme.sh</a> 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。</p><h2 id="下载并安装-acme-sh">下载并安装 <a href="http://acme.sh">acme.sh</a></h2><p>首先，下载并安装 <a href="http://acme.sh">acme.sh</a>。在终端中执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">email</span><span class="token operator">=</span><span class="token operator">&lt;</span>youremail@domain.com<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装过程会执行以下几步：</p><ol><li><p>将 <a href="http://acme.sh">acme.sh</a> 安装到你的 <strong>home</strong> 目录中：</p> <pre class="line-numbers language-none"><code class="language-none">~&#x2F;.acme.sh&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建一个 Shell 别名，方便使用。在 <code>.bashrc</code> 中添加：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">acme.sh</span><span class="token operator">=~</span>/.acme.sh/acme.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。</p></li></ol><p>更高级的安装选项请参考：<a href="https://github.com/Neilpang/acme.sh/wiki/How-to-install">acme.sh 安装文档</a></p><p><strong>注意</strong>：安装过程不会影响现有系统的运行和文件，所有修改都位于 <code>~/.acme.sh/</code> 目录中。</p><h2 id="使用-DNS-验证方式生成-SSL-证书">使用 DNS 验证方式生成 SSL 证书</h2><p><a href="http://acme.sh">acme.sh</a> 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。</p><h3 id="手动-DNS-验证">手动 DNS 验证</h3><p>手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。</p><ol><li><p>运行以下命令，手动在域名上添加一条 TXT 解析记录：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">--dns</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>mydomain.com<span class="token operator">></span> <span class="token punctuation">\</span>--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><a href="http://acme.sh">acme.sh</a> 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。</p></li><li><p>等待解析完成后，重新生成证书：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acme.sh <span class="token parameter variable">--renew</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>mydomain.com<span class="token operator">></span> <span class="token punctuation">\</span>--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装生成的证书：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acme.sh --install-cert <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>mydomain.com<span class="token operator">></span> <span class="token punctuation">\</span>--key-file /opt/nginx/key.pem  <span class="token punctuation">\</span>--fullchain-file /opt/nginx/cert.pem <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="总结">总结</h2><p>通过以上步骤，你已经成功使用 <a href="http://acme.sh">acme.sh</a> 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 <a href="https://github.com/Neilpang/acme.sh/wiki/dnsapi">acme.sh 的 DNS API 支持文档</a>。</p><p>希望本文对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSL </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器安全设置</title>
      <link href="/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"/>
      <url>/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-更新系统">1. 更新系统</h3><p>首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装防火墙">2. 安装防火墙</h3><p>Ubuntu默认带有<code>ufw</code>（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：</p><p>启用<code>ufw</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，开放必要的端口。例如，对于SSH服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">80</span><span class="token function">sudo</span> ufw allow <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-配置SSH">3. 配置SSH</h3><p>SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。</p><h4 id="生成SSH密钥对">生成SSH密钥对</h4><p>在客户端机器上，运行以下命令生成SSH密钥对：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将公钥添加到服务器">将公钥添加到服务器</h4><p>使用<code>ssh-copy-id</code>命令将公钥复制到服务器上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub 用户名@服务器IP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="禁用密码认证">禁用密码认证</h4><p>编辑服务器上的<code>/etc/ssh/sshd_config</code>文件，设置以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PasswordAuthentication no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启SSH服务以应用更改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-配置Fail2Ban">4. 配置Fail2Ban</h3><p>Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。</p><h4 id="安装Fail2Ban">安装Fail2Ban</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fail2ban<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置基本保护">配置基本保护</h4><p>创建或编辑<code>/etc/fail2ban/jail.local</code>文件，为SSH服务添加基本保护：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">DEFAULT</span><span class="token punctuation">]</span></span><span class="token comment"># 全局设置</span><span class="token key attr-name">bantime</span> <span class="token punctuation">=</span> <span class="token value attr-value">1h        # 封禁时间：1小时</span><span class="token key attr-name">findtime</span> <span class="token punctuation">=</span> <span class="token value attr-value">10m      # 在此时间内连续失败的尝试视为攻击</span><span class="token key attr-name">maxretry</span> <span class="token punctuation">=</span> <span class="token value attr-value">5        # 允许失败次数</span><span class="token key attr-name">ignoreip</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1/8 # 忽略本地IP地址的封禁</span><span class="token comment"># 指定要使用的日志文件</span><span class="token key attr-name">backend</span> <span class="token punctuation">=</span> <span class="token value attr-value">auto      # 自动确定日志文件类型</span><span class="token key attr-name">usedns</span> <span class="token punctuation">=</span> <span class="token value attr-value">warn       # 使用DNS解析</span><span class="token key attr-name">logencoding</span> <span class="token punctuation">=</span> <span class="token value attr-value">auto  # 日志文件的编码</span><span class="token key attr-name">enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">false     # 默认不启用任何规则</span><span class="token comment"># SSH 服务</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">sshd</span><span class="token punctuation">]</span></span><span class="token key attr-name">enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span><span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">ssh</span><span class="token key attr-name">filter</span> <span class="token punctuation">=</span> <span class="token value attr-value">sshd</span><span class="token key attr-name">logpath</span> <span class="token punctuation">=</span> <span class="token value attr-value">/var/log/auth.log</span><span class="token key attr-name">maxretry</span> <span class="token punctuation">=</span> <span class="token value attr-value">3</span><span class="token key attr-name">findtime</span> <span class="token punctuation">=</span> <span class="token value attr-value">5m</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启Fail2Ban服务以应用配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart fail2ban<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> fail2ban<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vaultwarden搭建</title>
      <link href="/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1>如何搭建 Vaultwarden 服务器：一步步教程</h1><p>Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。</p><h2 id="前提条件">前提条件</h2><p>在开始之前，确保你的系统已经安装了 <strong>Docker</strong> 和 <strong>Docker Compose</strong>。</p><h2 id="步骤-1-创建数据存储目录">步骤 1: 创建数据存储目录</h2><p>首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/docker_data/vaultwarden<span class="token builtin class-name">cd</span> /opt/docker_data/vaultwarden<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="步骤-2-创建-Docker-Compose-文件">步骤 2: 创建 Docker Compose 文件</h2><p>接下来，我们将创建一个 <code>docker-compose.yml</code> 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，将以下配置粘贴到 <code>docker-compose.yml</code> 文件中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">vaultwarden</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> vaultwarden    <span class="token key atrule">image</span><span class="token punctuation">:</span> vaultwarden/server<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/<span class="token punctuation">:</span>/data/    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">80</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> DOMAIN=https<span class="token punctuation">:</span>//subdomain.yourdomain.com <span class="token comment"># 关联的域名。</span>      <span class="token punctuation">-</span> LOGIN_RATELIMIT_MAX_BURST=10 <span class="token comment"># 最大请求次数。</span>      <span class="token punctuation">-</span> LOGIN_RATELIMIT_SECONDS=60 <span class="token comment"># 平均秒数</span>      <span class="token punctuation">-</span> ADMIN_RATELIMIT_MAX_BURST=10 <span class="token comment"># admin最大请求次数。</span>      <span class="token punctuation">-</span> ADMIN_RATELIMIT_SECONDS=60 <span class="token comment"># 平均秒数</span>      <span class="token punctuation">-</span> ADMIN_SESSION_LIFETIME=20 <span class="token comment"># 会话持续时间</span>      <span class="token punctuation">-</span> ADMIN_TOKEN=YourReallyStrongAdminTokenHere <span class="token comment"># 管理员面板的令牌</span>      <span class="token punctuation">-</span> SENDS_ALLOWED=true  <span class="token comment"># 是否允许用户创建Bitwarden发送</span>      <span class="token punctuation">-</span> EMERGENCY_ACCESS_ALLOWED=true <span class="token comment"># 控制用户是否可以启用紧急访问其账户的权限</span>      <span class="token punctuation">-</span> WEB_VAULT_ENABLED=true <span class="token comment"># 网络保险库是否可访问。</span>      <span class="token punctuation">-</span> SIGNUPS_ALLOWED=true <span class="token comment"># 新用户是否可以在没有邀请的情况下注册账户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="步骤-3-启动-Vaultwarden">步骤 3: 启动 Vaultwarden</h2><p>配置好 <code>docker-compose.yml</code> 文件后，使用以下命令启动 Vaultwarden 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会在后台启动 Vaultwarden 服务。可以通过访问 <code>http://localhost:8080</code> 或在配置文件中指定的域名来访问 Vaultwarden。</p><h2 id="总结">总结</h2><p>恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring八股文</title>
      <link href="/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-常见面试题总结">Spring 常见面试题总结</h2><h3 id="什么是Spring框架？">什么是Spring框架？</h3><p>Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。</p><h3 id="谈谈自己对于Spring-IoC的了解">谈谈自己对于Spring IoC的了解</h3><p>**IoC（Inversion of Control 控制反转）**是一种设计思想，而不是一个具体的技术实现。</p><p>IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。</p><h4 id="为什么叫控制反转？">为什么叫控制反转？</h4><ul><li><strong>控制</strong>：指的是对象创建（实例化、管理）的权利</li><li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li></ul><p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。</p><p>在 Spring 中，IoC 容器是Spring用来实现 IoC 的载体，IoC 容器实际上就是个Map。</p><p>Spring 框架一般通过XML文件来配置 Bean,因为 XML 文件配置很麻烦，然后就开始用 SpringBoot 注解配置。</p><h3 id="什么是-Bean？">什么是 Bean？</h3><p>Bean 就是哪些被 IoC 容器所管理的对象。</p><h3 id="Component和-Bean的区别是什么？">@Component和@Bean的区别是什么？</h3><ul><li>@Component 注解用于类，@Bean 注解用于方法。</li><li>@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 注解告诉类 Spring 这是某个类的实例，当我需要的时候给我。</li><li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。</li></ul><h3 id="注入Bean的注解有哪些？">注入Bean的注解有哪些？</h3><p>Spring 内置的Autowired 还有 JDK 内置的 @Resource 和 @Inject 都可以用于注入 Bean。</p><h3 id="Autowired和-Resource的区别是什么？">@Autowired和@Resource的区别是什么？</h3><ul><li>@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。</li><li>当一个接口存在多个实现类的情况下，@Autowired 和 @Resource 都需要通过名称才能正确匹配到对应的  Bean。Autowired 可以通过 @Qualifier 注解来显式指定名称，@Resource 可以通过 name 属性来显式指定名称。</li><li>@Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li></ul><h3 id="Bean-的作用域有哪些">Bean 的作用域有哪些?</h3><ul><li><strong>Singleton</strong> Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。</li><li><strong>prototype</strong>  每次请求都会创建一个新的实例。</li><li><strong>Request</strong> 每次 Http 请求都会创建一个新的 bean 实例。</li><li><strong>Session</strong> 每个 Http Session 中会有一个 bean 实例。</li></ul><h3 id="Bean-是线程安全的吗？">Bean 是线程安全的吗？</h3><p>在 Spring 中 Bean 是否安全，取决于其作用域和状态。</p><p>单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。</p><h3 id="Bean的生命周期了解么？">Bean的生命周期了解么？</h3><p>Todo</p><h3 id="谈谈对于AOP的了解">谈谈对于AOP的了解</h3><p>AOP（面向切面编程）能够将哪些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的扩展性和可维护性。</p><p>Spring AOP就是基于动态代理的，如果代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理，这时候Spring AOP会使用Cglib生成一个被代理对象的子类作为代理</p><h3 id="Spring-AOP-和-AspectJ-AOP-有什么区别？">Spring AOP 和 AspectJ AOP 有什么区别？</h3><p>Spring AOP属于运行时增强，而AspectJ是编译时增强。</p><p>Spring AOP基于代理，而AspectJ基于字节码操作。</p><p>Spring AOP已经集成了AspectJ，AspectJ相对于Spring AOP功能更加强大，但是Spring AOP相对来说更简单，如果我们的切面比较少，那么两者性能差异不大。当切面太多的时候，最好选择AspectJ，它比Spring AOP快很多</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 八股文 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Myql八股文</title>
      <link href="/2024/06/22/Myql%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2024/06/22/Myql%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1>数据库</h1><h2 id="MySQL-索引：索引为什么使用B-树？">MySQL 索引：索引为什么使用B+树？</h2>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合八股文</title>
      <link href="/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1>Java集合</h1><h3 id="说说-List-Set-Queue-Map-四者的区别？">说说 List, Set, Queue, Map 四者的区别？</h3><ul><li><p><code>List</code>：存储的元素是有序的、可重复的。</p></li><li><p><code>Set</code>：存储的元素不可重复。</p></li><li><p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。</p></li><li><p><code>Map</code>：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的。</p></li></ul><h2 id="List">List</h2><h3 id="ArrayList-和-Array-（数组）的区别？">ArrayList 和 Array （数组）的区别？</h3><p><code>ArrayList</code>内部基于动态数组实现，比静态数组使用起来更灵活：</p><ul><li><code>ArrayList</code> 会根据实际存储的元素动态地扩容或缩容，而数组被创建之后就不能改变它的长度了。</li><li><code>ArrayList</code> 可以使用泛型来确保类型安全</li><li><code>ArrayList</code>中只能存储对象。对于基本数据类型，需要使用其对应的包装类。数组可以直接存储基本数据类型，页可以存储对象。</li><li><code>ArrayList</code> 支持插入、删除、遍历等常用操作，并提供了很多<code>API</code>，数组只能通过下标访问其中的元素，不具备动态添加、删除元素的能力。</li><li><code>ArrayList</code> 创建时不需要指定大小，而数组创建时必须指定大小。</li></ul><h3 id="ArrayList-可以添加-null-吗？">ArrayList 可以添加 null 吗？</h3><p><code>ArrayList</code>中可以存储任何类型的对象，包括<code>null</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础八股文</title>
      <link href="/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Java-基础八股文">Java 基础八股文</h3><h4 id="对象的相等和引用相等的区别">对象的相等和引用相等的区别</h4><ul><li><strong>对象的相等</strong>：比较的是内存中存放的内容是否相等。</li><li><strong>引用相等</strong>：比较的是它们指向的内存地址是否相等。</li></ul><h4 id="如果一个类没有声明构造方法，该程序能正确执行吗？">如果一个类没有声明构造方法，该程序能正确执行吗？</h4><ul><li>如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。</li><li>如果添加了类的构造方法，无论是否有参，<code>Java</code>都不会添加默认不带参数的构造方法。</li></ul><h4 id="构造方法有哪些特点？是否可被重写？">构造方法有哪些特点？是否可被重写？</h4><ul><li><strong>构造方法的特点</strong>：<ul><li>名字与类名相同。</li><li>没有返回值。</li><li>生成类的对象时自动执行，无需调用。<br>构造方法不能被重写，但是可以被重载。</li></ul></li></ul><h4 id="面向对象的三大特征">面向对象的三大特征</h4><ul><li><strong>封装</strong>：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。</li><li><strong>继承</strong>：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。</li><li><strong>多态</strong>：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。</li></ul><h4 id="接口和抽象类有什么共同点和区别？">接口和抽象类有什么共同点和区别？</h4><ul><li><strong>共同点</strong>：<ul><li>都不能被实例化。</li><li>都可以包含抽象方法。</li><li>都可以有默认的实现方法。</li></ul></li><li><strong>区别</strong>：<ul><li>接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。</li><li>抽象类主要用于代码的复用，强调所属关系。</li><li>一个类只能继承一个类，但是可以实现多个接口。</li><li>接口中的成员变量只能是静态常量，不能被修改且必须有初始值。</li><li>抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。</li></ul></li></ul><h4 id="深拷贝和浅拷贝的区别？什么是引用拷贝？">深拷贝和浅拷贝的区别？什么是引用拷贝？</h4><ul><li><strong>浅拷贝</strong>：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用<code>Object</code>的<code>clone()</code>方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。</li><li><strong>深拷贝</strong>：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。</li><li><strong>引用拷贝</strong>：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。</li></ul><h4 id="和-equals-的区别？">== 和 equals()的区别？</h4><ul><li>对于基本数据类型，<code>==</code> 比较的是值。</li><li>对于引用数据类型，<code>==</code> 比较的是对象的内存地址。</li><li><code>equals()</code>没有重写时，等价于<code>==</code>比较两个对象。</li><li>被重写时，一般都重写<code>equals()</code>方法用来比较两个对象中的属性是否相等。</li></ul><h4 id="hashCode-有什么用？">hashCode() 有什么用？</h4><p><code>hashCode()</code>方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。</p><h4 id="为什么重写-equals-时必须重写-hashCode-方法？">为什么重写 equals() 时必须重写 hashCode() 方法？</h4><p>为了正确使用<code>hashCode()</code>，需要重写<code>equals()</code>方法来实现。如果两个对象根据<code>equals()</code>方法是相等的，那么它们的<code>hashCode</code>值必须相同。如果两个对象的<code>hashCode()</code>相同，它们不一定是相同的，但相等的两个对象必须具有相同的<code>hashCode</code>。</p><h4 id="String、StringBuffer、StringBuilder-的区别？">String、StringBuffer、StringBuilder 的区别？</h4><ul><li><strong>String</strong>：不可变的，因为不可变，所以它是线程安全的。</li><li><strong>StringBuffer</strong>：可变的，允许对字符串进行修改，线程安全，所有的方法都被<code>synchronized</code>修饰。</li><li><strong>StringBuilder</strong>：可变的，但不是线程安全的，没有被<code>synchronized</code>修饰。由于没有同步机制，性能比<code>StringBuffer</code>更高，适合单线程环境下使用。</li><li><strong>使用场景</strong>：<ul><li>当字符串是固定不变的时候使用<code>String</code>。</li><li>当需要对字符串进行大量修改且在多线程环境下使用<code>StringBuffer</code>。</li><li>当需要对字符串进行大量修改且在单线程环境下使用<code>StringBuilder</code>。</li></ul></li></ul><h4 id="字符串常量池的作用了解吗？">字符串常量池的作用了解吗？</h4><p>字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，<code>JVM</code>会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。</p><h4 id="Exception-和-Error-有什么区别？">Exception 和 Error 有什么区别？</h4><ul><li><strong>Exception</strong>和<strong>Error</strong>都是<strong>Throwable</strong>的子类。</li><li><code>Exception</code>是程序本身可以处理的异常，可以通过<code>catch</code>来捕获。<code>Exception</code>还可以分为<code>checked Exception</code>和<code>Unchecked Exception</code>。</li><li><code>Error</code>是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。</li></ul><h4 id="Checked-Exception-和-Unchecked-Exception-有什么区别？">Checked Exception 和 Unchecked Exception 有什么区别？</h4><ul><li><strong>Checked Exception</strong>必须被捕获或声明，否则编译器会报错。</li><li><strong>Unchecked Exception</strong>也叫运行时异常，不强制要求处理，但最好捕获处理。</li></ul><h4 id="什么是泛型？有什么作用？">什么是泛型？有什么作用？</h4><p>泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，不需要在从集合中取出元素时进行转换。</p><h4 id="反射是什么？">反射是什么？</h4><p>反射是<code>Java</code>中的一种强大机制，允许程序在运行时检查或修改自身的结构和行为。通过反射可以在运行时获取类的相关信息（如类名、方法、字段、构造函数等），并可以动态调用方法、访问字段、创建对象等。</p><h4 id="反射的优缺点？">反射的优缺点？</h4><ul><li><strong>反射的优点</strong>：<ul><li>动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。</li><li>很多流行的<code>Java</code>框架如<code>Spring</code>都依赖反射来实现动态代理、依赖注入。</li></ul></li><li><strong>反射的缺点</strong>：<ul><li>反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。</li><li>反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。</li><li>使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。</li><li>反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。</li></ul></li></ul><h4 id="何谓注解？">何谓注解？</h4><p>注解是<code>Java</code>中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如<code>@Override</code>注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。</p><h4 id="什么是序列化？什么是反序列化？">什么是序列化？什么是反序列化？</h4><ul><li><strong>序列化</strong>：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输到另一台机器上。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。</li><li><strong>反序列化</strong>：将字节流转回Java对象的过程。反序列化的主要目的是从文件、数据库或网络中恢复对象的状态，以便在应用程序中使用。</li></ul><p>以上内容涵盖了Java基础的一些关键点，希望对你有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AList定时备份服务器文件</title>
      <link href="/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/"/>
      <url>/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>使用AList定时备份服务器文件</h1><p>本教程详细介绍如何使用 <code>AList</code> 通过 <code>API</code> 自动备份服务器文件，包括获取 <code>JWT Token</code> 和自动上传备份文件至 <code>AList</code> 服务器。</p><h2 id="环境配置">环境配置</h2><p>首先，确保服务器上安装了 <code>curl</code> 和 <code>jq</code>。<code>curl</code> 用于发送 <code>HTTP</code> 请求，而 <code>jq</code> 用于解析 <code>JSON</code> 响应。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> jq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置环境变量">设置环境变量</h3><p>为确保脚本能自动读取 <code>AList</code> 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。<br>通过在服务器的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中添加以下行来永久设置环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ALIST_USERNAME</span><span class="token operator">=</span><span class="token string">"&lt;your_username>"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ALIST_PASSWORD</span><span class="token operator">=</span><span class="token string">"&lt;your_password>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>确保替换 “your_username” 和 “your_password” 为你的 AList 登录用户名和密码。</p><h3 id="应用环境变量">应用环境变量</h3><p>修改文件后，为使环境变量立即生效，执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，如果你是在 ~/.profile 中设置的环境变量，使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。</p><h2 id="获取-JWT-Token">获取 JWT Token</h2><p>要与 <code>AList</code> 的 <code>API</code> 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 <code>API</code> 获取 <code>Token</code>。</p><h3 id="创建-Token-获取脚本">创建 Token 获取脚本</h3><ul><li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li><li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /opt/alist/get_token.sh<span class="token function">vim</span> /opt/alist/get_token.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>脚本内容</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 读取环境变量中的用户名和密码</span><span class="token assign-left variable">alist_username</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$ALIST_USERNAME</span>"</span><span class="token assign-left variable">alist_password</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$ALIST_PASSWORD</span>"</span><span class="token comment"># 使用curl发送POST请求获取token</span><span class="token assign-left variable">response</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> POST <span class="token string">"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-d</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>username<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$alist_username</span><span class="token entity" title="\&quot;">\"</span>, <span class="token entity" title="\&quot;">\"</span>password<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$alist_password</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span class="token variable">)</span></span><span class="token comment"># 解析响应获取token</span><span class="token comment"># 检查token是否成功获取</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$token</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$token</span>"</span> <span class="token operator">==</span> <span class="token string">"null"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Failed to get token"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Token retrieved successfully"</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$token</span> <span class="token operator">></span> /tmp/alist_token.txt<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>赋予脚本执行权限</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="上传备份文件">上传备份文件</h2><p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p><h3 id="创建上传脚本">创建上传脚本</h3><ul><li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li><li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /opt/alist/upload_backup.sh<span class="token function">vim</span> /opt/alist/upload_backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>脚本内容</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 目标 API URL</span><span class="token assign-left variable">API_URL</span><span class="token operator">=</span><span class="token string">"https://&lt;alist服务器域名或IP地址>/api/fs/put"</span><span class="token comment"># 要备份的目录</span><span class="token assign-left variable">BACKUP_DIR</span><span class="token operator">=</span><span class="token string">"/opt/alist/data"</span><span class="token comment"># 备份文件存储位置，包含时间戳</span><span class="token assign-left variable">BACKUP_PATH</span><span class="token operator">=</span><span class="token string">"/tmp/alist/alist_backup_<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d%H%M%S<span class="token variable">)</span></span>.tar.gz"</span><span class="token comment"># 创建备份文件</span><span class="token function">tar</span> <span class="token parameter variable">-czf</span> <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>"</span> <span class="token builtin class-name">.</span><span class="token comment"># 获取文件大小</span><span class="token assign-left variable">CONTENT_LENGTH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> %s <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span><span class="token variable">)</span></span><span class="token comment"># URL编码的完整目标文件路径</span><span class="token assign-left variable">ENCODED_FILE_PATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&lt;alist上的路径><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $BACKUP_PATH<span class="token variable">)</span></span>"</span> <span class="token operator">|</span> jq <span class="token parameter variable">-sRr</span> @uri<span class="token variable">)</span></span><span class="token comment"># 读取存储的token</span><span class="token assign-left variable">token</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /tmp/alist_token.txt<span class="token variable">)</span></span><span class="token comment"># 使用curl PUT请求上传文件</span><span class="token assign-left variable">response</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> PUT <span class="token string">"<span class="token variable">$API_URL</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Authorization: <span class="token variable">$token</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"File-Path: <span class="token variable">$ENCODED_FILE_PATH</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/octet-stream"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Content-Length: <span class="token variable">$CONTENT_LENGTH</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-T</span> <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span> <span class="token punctuation">\</span>    --progress-bar<span class="token variable">)</span></span><span class="token comment"># 删除本地临时备份文件</span><span class="token function">rm</span> <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>赋予脚本执行权限</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置定时任务">设置定时任务</h2><p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">1</span> * * * /opt/alist/get_token.sh<span class="token number">5</span> <span class="token number">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这将在每天凌晨 1 点自动获取新的 <code>Token</code>，并在五分钟后上传最新的备份文件。</p><h2 id="日志记录">日志记录</h2><p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">1</span> * * * /opt/alist/get_token.sh <span class="token operator">>></span> /var/log/alist_backup.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token number">5</span> <span class="token number">1</span> * * * /opt/alist/upload_backup.sh <span class="token operator">>></span> /var/log/alist_backup.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 <code>AList</code> 完成文件的存储和备份。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo备份</title>
      <link href="/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/"/>
      <url>/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1><h2 id="目标">目标</h2><ul><li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li><li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li></ul><h2 id="为什么要这样做？">为什么要这样做？</h2><p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p><h2 id="操作步骤">操作步骤</h2><h3 id="1-初始化-Hexo-项目">1. 初始化 Hexo 项目</h3><p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init my-blog<span class="token builtin class-name">cd</span> my-blog<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-初始化-Git-仓库">2. 初始化 Git 仓库</h3><p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建-hexo-分支">3. 创建 hexo 分支</h3><p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-推送-hexo-分支到-GitHub">4. 推送 hexo 分支到 GitHub</h3><p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/yourusername/yourrepo.git<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Initial commit with Hexo source files"</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p><ol><li>打开你的 GitHub 仓库。</li><li>点击 “Settings”。</li><li>在左侧菜单中点击 “Branches”。</li><li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li></ol><h3 id="5-创建-master-分支">5. 创建 master 分支</h3><p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">--orphan</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"# My Blog"</span> <span class="token operator">></span> README.md<span class="token function">git</span> <span class="token function">add</span> README.md<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Initial commit for master branch"</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-配置-Hexo-部署">6. 配置 Hexo 部署</h3><p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/yourusername/yourrepo.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-生成和部署静态文件">7. 生成和部署静态文件</h3><p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>hexo clean</code>：清理生成的文件。</li><li><code>hexo generate</code>：生成静态文件。</li><li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li></ul><h3 id="8-推送-Hexo-源文件到-hexo-分支">8. 推送 Hexo 源文件到 hexo 分支</h3><p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Update Hexo source files"</span><span class="token function">git</span> push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="验证配置">验证配置</h2><ol><li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li><li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装部署Hexo</title>
      <link href="/2024/06/16/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Hexo/"/>
      <url>/2024/06/16/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Hexo/</url>
      
        <content type="html"><![CDATA[<h1>安装 Hexo 博客</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p><h2 id="安装">安装</h2><p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p><h3 id="安装-Git">安装 Git</h3><ul><li><strong>Windows</strong>：下载并安装 <a href="https://git-scm.com/">Git</a>.</li><li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li><li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li><li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li></ul><h3 id="安装-Node-js">安装 Node.js</h3><ul><li><strong>Windows</strong>：通过 <a href="https://github.com/jasongin/nvs">nvs</a>（推荐）或者 <a href="https://github.com/coreybutler/nvm-windows">nvm</a> 安装。</li><li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li><li><strong>Linux（DEB/RPM-based）</strong>：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li></ul><h3 id="安装-Hexo">安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span> $ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span> $ <span class="token function">npm</span> <span class="token function">install</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="主题安装">主题安装</h3><p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href="https://hexo.io/themes/">这里</a>查看。<br>例如，安装 <a href="https://solitude.js.org/">hexo-theme-solitude</a> 主题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone <span class="token parameter variable">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> solitude<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pug hexo-renderer-stylus <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="语言配置">语言配置</h3><p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地启动">本地启动</h3><p>在本地启动 Hexo 服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器地址栏输入</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">http://localhost:4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png" alt="效果图"></p><h2 id="一键部署到-GitHub-Pages">一键部署到 GitHub Pages</h2><h3 id="安装-hexo-deployer-git">安装 hexo-deployer-git</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置-config-yml">配置 _config.yml</h3><p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/&lt;username<span class="token punctuation">></span>/&lt;project<span class="token punctuation">></span>  <span class="token comment"># example: https://github.com/hexojs/hexojs.github.io</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages <span class="token comment">#分支名称</span>  <span class="token comment"># message自定义提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署">部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br><img src="https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
