{
    "version": "https://jsonfeed.org/version/1",
    "title": "陆时忤的博客 • All posts by \"java\" tag",
    "description": "要再见 不要再见",
    "home_page_url": "http://blog.aixcc.top",
    "items": [
        {
            "id": "http://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "url": "http://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "title": "Mac安装JDK",
            "date_published": "2024-07-14T14:13:37.000Z",
            "content_html": "<h1 id=\"Mac-上的-JDK-的安装与卸载\"><a class=\"headerlink\" href=\"#Mac-上的-JDK-的安装与卸载\"></a>Mac 上的 JDK 的安装与卸载</h1>\n<h2 id=\"从-AdoptOpenJDK-到-Temurin\"><a class=\"headerlink\" href=\"#从-AdoptOpenJDK-到-Temurin\"></a>从 AdoptOpenJDK 到 Temurin</h2>\n<h2 id=\"卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#卸载-AdoptOpenJDK\"></a>卸载 AdoptOpenJDK</h2>\n<p>如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：</p>\n<h3 id=\"步骤-1：卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#步骤-1：卸载-AdoptOpenJDK\"></a>步骤 1：卸载 AdoptOpenJDK</h3>\n<p>打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 <a href=\"https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/\">Homebrew 安装指南</a> 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew remove <span class=\"token parameter variable\">--cask</span> adoptopenjdk8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>重复上述命令，替换 <code>adoptopenjdk8</code> 为其他版本号以卸载其他版本的 JDK。</p>\n<h3 id=\"步骤-2：移除-Homebrew-的-Tap\"><a class=\"headerlink\" href=\"#步骤-2：移除-Homebrew-的-Tap\"></a>步骤 2：移除 Homebrew 的 Tap</h3>\n<p>完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew untap AdoptOpenJDK/openjdk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样就和 AdoptOpenJDK 完成了告别。</p>\n<h2 id=\"清除旧的-Oracle-JDK\"><a class=\"headerlink\" href=\"#清除旧的-Oracle-JDK\"></a>清除旧的 Oracle JDK</h2>\n<p>对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：</p>\n<h3 id=\"步骤-3：删除旧的-JDK-文件\"><a class=\"headerlink\" href=\"#步骤-3：删除旧的-JDK-文件\"></a>步骤 3：删除旧的 JDK 文件</h3>\n<p>删除 <code>/Library/Java/JavaVirtualMachines/</code> 目录下的 JDK 文件夹。此外，清理以下位置的内容：</p>\n<ul>\n<li><code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin</code></li>\n<li><code>/Library/PreferencePanes/JavaControlPanel.prefPane</code></li>\n<li><code>~/Library/Application Support/Oracle/Java</code></li>\n</ul>\n<h2 id=\"安装-Temurin-JDK\"><a class=\"headerlink\" href=\"#安装-Temurin-JDK\"></a>安装 Temurin JDK</h2>\n<p>在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。</p>\n<h3 id=\"步骤-4：配置-Homebrew-Cask-版本\"><a class=\"headerlink\" href=\"#步骤-4：配置-Homebrew-Cask-版本\"></a>步骤 4：配置 Homebrew Cask 版本</h3>\n<p>首先，确保你的 Homebrew 能够访问所有 cask 版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew search temurin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"步骤-5：安装-Temurin\"><a class=\"headerlink\" href=\"#步骤-5：安装-Temurin\"></a>步骤 5：安装 Temurin</h3>\n<p>现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token parameter variable\">--cask</span> temurin@8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。</p>\n",
            "tags": [
                "Java",
                "Mac"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "url": "http://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "title": "项目讲解",
            "date_published": "2024-06-27T07:34:31.000Z",
            "content_html": "<h1 id=\"随便写写\"><a class=\"headerlink\" href=\"#随便写写\"></a>随便写写</h1>\n<h3 id=\"登录注册模块\"><a class=\"headerlink\" href=\"#登录注册模块\"></a>登录注册模块</h3>\n<ul>\n<li><strong>注册</strong>：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。</li>\n<li>登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。</li>\n</ul>\n<h3 id=\"前后端分离项目中跨域问题是如何解决的？\"><a class=\"headerlink\" href=\"#前后端分离项目中跨域问题是如何解决的？\"></a>前后端分离项目中跨域问题是如何解决的？</h3>\n<ol>\n<li><strong>注解</strong>：可以通过使用<code>@CrossOrigin</code>注解来解决跨域问题。</li>\n<li><strong>Nginx</strong>：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。</li>\n<li><strong>网关</strong>：使用 GetWay 网关中配置CORS规则，允许跨域请求</li>\n</ol>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "http://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "RabbitMQ应用与总结",
            "date_published": "2024-06-26T15:14:15.000Z",
            "content_html": "<h2 id=\"RabbitMQ常见面试题总结\"><a class=\"headerlink\" href=\"#RabbitMQ常见面试题总结\"></a>RabbitMQ常见面试题总结</h2>\n<h3 id=\"什么是-RabbitMQ？\"><a class=\"headerlink\" href=\"#什么是-RabbitMQ？\"></a>什么是 RabbitMQ？</h3>\n<p>RabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。</p>\n<h3 id=\"RabbitMQ-的组件有哪些？\"><a class=\"headerlink\" href=\"#RabbitMQ-的组件有哪些？\"></a>RabbitMQ 的组件有哪些？</h3>\n<h4 id=\"1-Producer（生产者）\"><a class=\"headerlink\" href=\"#1-Producer（生产者）\"></a>1. Producer（生产者）</h4>\n<ul>\n<li>生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。</li>\n<li>生成者负责创建和发送消息，不直接与队列通信。</li>\n</ul>\n<h4 id=\"2-Exchange（交换器）\"><a class=\"headerlink\" href=\"#2-Exchange（交换器）\"></a>2. Exchange（交换器）</h4>\n<ul>\n<li>交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。</li>\n<li>交换器有不同类型，主要包括：<code>direct</code>、<code>topic</code>、<code>fanout</code>和<code>headers</code>。</li>\n</ul>\n<h5 id=\"Exchange-类型\"><a class=\"headerlink\" href=\"#Exchange-类型\"></a>Exchange 类型</h5>\n<ul>\n<li><strong>Direct Exchange</strong>：根据消息的路由键完全匹配队列的绑定键进行路由。</li>\n<li><strong>Topic Exchange</strong>：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。</li>\n<li><strong>Fanout Exchange</strong>：将消息广播到所有与该交换器绑定的队列，不考虑路由键。</li>\n<li><strong>Headers Exchange</strong>：根据消息的头属性进行路由，相对较少使用。</li>\n</ul>\n<h4 id=\"3-Queue（队列）\"><a class=\"headerlink\" href=\"#3-Queue（队列）\"></a>3. Queue（队列）</h4>\n<ul>\n<li>队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。</li>\n<li>队列按照先进先出的顺序存储消息，可以持久化、镜像等。</li>\n</ul>\n<h4 id=\"4-Bindng（绑定）\"><a class=\"headerlink\" href=\"#4-Bindng（绑定）\"></a>4. Bindng（绑定）</h4>\n<ul>\n<li>绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。</li>\n<li>绑定可以包含路由键和绑定参数，用于匹配消息的路由键。</li>\n</ul>\n<h4 id=\"5-Consumer（消费者）\"><a class=\"headerlink\" href=\"#5-Consumer（消费者）\"></a>5. Consumer（消费者）</h4>\n<ul>\n<li>\n<p>消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。</p>\n</li>\n<li>\n<p>消费者可以是主动拉取消息，也可以是被动推送消息。</p>\n</li>\n</ul>\n<h4 id=\"6-Connection（连接）和Channel（信道）\"><a class=\"headerlink\" href=\"#6-Connection（连接）和Channel（信道）\"></a>6. Connection（连接）和Channel（信道）</h4>\n<ul>\n<li>连接是应用程序与 RabbitMQ 之间的 TCP 连接。</li>\n<li>信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。</li>\n</ul>\n<h4 id=\"7-Virtual-Host（虚拟机）\"><a class=\"headerlink\" href=\"#7-Virtual-Host（虚拟机）\"></a>7. Virtual Host（虚拟机）</h4>\n<ul>\n<li>虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。</li>\n</ul>\n<h4 id=\"8-Broker（代理服务器）\"><a class=\"headerlink\" href=\"#8-Broker（代理服务器）\"></a>8. Broker（代理服务器）</h4>\n<ul>\n<li>Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。</li>\n</ul>\n",
            "tags": [
                "Java",
                "总结",
                "RabbitMQ"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "http://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "MyBatis应用与总结",
            "date_published": "2024-06-26T09:53:37.000Z",
            "content_html": "<h1 id=\"MyBatis常见面试题总结\"><a class=\"headerlink\" href=\"#MyBatis常见面试题总结\"></a>MyBatis常见面试题总结</h1>\n<h3 id=\"和-的区别是什么？\"><a class=\"headerlink\" href=\"#和-的区别是什么？\"></a>#{} 和 ${} 的区别是什么？</h3>\n<ul>\n<li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。</li>\n<li><code>#&#123;&#125;</code>是 sql 的参数占位符，Mybatis 会将 sql 中<code>#&#123;&#125;</code>替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用<code>#&#123;&#125;</code>可以有效防止 sql 注入。</li>\n</ul>\n",
            "tags": [
                "Java",
                "MyBatis",
                "总结"
            ]
        }
    ]
}