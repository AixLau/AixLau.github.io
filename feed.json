{
    "version": "https://jsonfeed.org/version/1",
    "title": "陆时忤的博客",
    "description": "要再见 不要再见",
    "home_page_url": "https://blog.aixcc.top",
    "items": [
        {
            "id": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85Maven/",
            "url": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85Maven/",
            "title": "Mac安装Maven",
            "date_published": "2024-07-14T14:25:37.000Z",
            "content_html": "<h1 id=\"Maven-环境设置：全面指南\"><a class=\"headerlink\" href=\"#Maven-环境设置：全面指南\"></a>Maven 环境设置：全面指南</h1>\n<blockquote>\n<p>Apache Maven 是 Java 项目的强大项目管理工具，可以自动化并简化构建过程。本指南将指导你完成在机器上设置 Maven 的步骤，包括安装 Java、Maven 以及配置开发环境。</p>\n</blockquote>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在安装 Maven 之前，你需要确保计算机上已安装 Java 开发工具包（JDK）。Maven 3.3+ 需要 JDK 1.7 或更高版本才能运行。</p>\n<h3 id=\"1-检查-Java-安装\"><a class=\"headerlink\" href=\"#1-检查-Java-安装\"></a>1. 检查 Java 安装</h3>\n<p>打开终端并输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">java</span> <span class=\"token parameter variable\">-version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令将显示当前安装的 Java 版本。如果未安装 Java，请访问 <a href=\"https://blog.aixcc.top//2024/07/14/Mac%E5%AE%89%E8%A3%85JDK\">Mac 安装 JDK</a> 获取详细的安装教程</p>\n<h2 id=\"下载-Maven\"><a class=\"headerlink\" href=\"#下载-Maven\"></a>下载 Maven</h2>\n<ol>\n<li>\n<p>访问 <a href=\"https://maven.apache.org/download.cgi\">Maven 下载页面</a>。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215642.webp\" alt=\"\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>下载二进制归档文件（例如 <code>apache-maven-3.8.6-bin.tar.gz</code>）。</p>\n</li>\n</ol>\n<h2 id=\"安装-Maven\"><a class=\"headerlink\" href=\"#安装-Maven\"></a>安装 Maven</h2>\n<ol>\n<li>将下载的归档文件解压到你选择的目录。在基于 Unix 的系统上，一个常见的目录是 <code>/opt</code>。（也可以根据个人喜好选择其它目录）</li>\n</ol>\n<h2 id=\"配置环境\"><a class=\"headerlink\" href=\"#配置环境\"></a>配置环境</h2>\n<ol>\n<li>使用文本编辑器打开你的 shell 配置文件（例如，如果你使用 zsh，则为 <code>.zshrc</code>）：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>将 Maven 二进制文件添加到你的 PATH：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/opt/apache-maven-3.8.6/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>保存文件并应用更改：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"验证\"><a class=\"headerlink\" href=\"#验证\"></a>验证</h3>\n<p>要验证 Maven 是否正确安装，请键入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mvn <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令应显示 Maven 版本、Java 版本和操作系统详细信息。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151239977.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"配置-Maven\"><a class=\"headerlink\" href=\"#配置-Maven\"></a>配置 Maven</h2>\n<h3 id=\"设置本地仓库\"><a class=\"headerlink\" href=\"#设置本地仓库\"></a>设置本地仓库</h3>\n<p>Maven 将所有依赖项存储在本地。你可以在 Maven 配置文件中指定此仓库的自定义位置：</p>\n<p>编辑 <code>/opt/apache-maven-3.8.6/conf/settings.xml</code> 并添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>存储路径</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span>\n# 例如<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>/Users/lushiwu/Data/maven-repository<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"配置仓库镜像\"><a class=\"headerlink\" href=\"#配置仓库镜像\"></a>配置仓库镜像</h3>\n<p>为了加速依赖项下载，配置如阿里云等镜像：</p>\n<p>在 <code>settings.xml</code> 文件的 <code>&lt;mirrors&gt;</code> 部分添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>aliyunmaven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>阿里云 Maven 镜像<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://maven.aliyun.com/repository/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在-IntelliJ-IDEA-中配置-Maven\"><a class=\"headerlink\" href=\"#在-IntelliJ-IDEA-中配置-Maven\"></a>在 IntelliJ IDEA 中配置 Maven</h2>\n<ol>\n<li>打开 IntelliJ IDEA。</li>\n<li>导航至 <code>设置</code> &gt; <code>构建、执行、部署</code> &gt; <code>构建工具</code> &gt; <code>Maven</code>。</li>\n<li>指定 <code>Maven 主目录</code> 为 <code>/opt/apache-maven-3.8.6</code>。</li>\n<li>设置 <code>用户设置文件</code> 为你刚配置的 <code>settings.xml</code>。</li>\n</ol>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215660.webp\" alt=\"\" loading=\"lazy\"></p>\n",
            "tags": [
                "Mac",
                "Maven"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "url": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "title": "Mac安装JDK",
            "date_published": "2024-07-14T14:13:37.000Z",
            "content_html": "<h1 id=\"Mac-上的-JDK-的安装与卸载\"><a class=\"headerlink\" href=\"#Mac-上的-JDK-的安装与卸载\"></a>Mac 上的 JDK 的安装与卸载</h1>\n<h2 id=\"从-AdoptOpenJDK-到-Temurin\"><a class=\"headerlink\" href=\"#从-AdoptOpenJDK-到-Temurin\"></a>从 AdoptOpenJDK 到 Temurin</h2>\n<h2 id=\"卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#卸载-AdoptOpenJDK\"></a>卸载 AdoptOpenJDK</h2>\n<p>如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：</p>\n<h3 id=\"步骤-1：卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#步骤-1：卸载-AdoptOpenJDK\"></a>步骤 1：卸载 AdoptOpenJDK</h3>\n<p>打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 <a href=\"https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/\">Homebrew 安装指南</a> 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew remove <span class=\"token parameter variable\">--cask</span> adoptopenjdk8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>重复上述命令，替换 <code>adoptopenjdk8</code> 为其他版本号以卸载其他版本的 JDK。</p>\n<h3 id=\"步骤-2：移除-Homebrew-的-Tap\"><a class=\"headerlink\" href=\"#步骤-2：移除-Homebrew-的-Tap\"></a>步骤 2：移除 Homebrew 的 Tap</h3>\n<p>完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew untap AdoptOpenJDK/openjdk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样就和 AdoptOpenJDK 完成了告别。</p>\n<h2 id=\"清除旧的-Oracle-JDK\"><a class=\"headerlink\" href=\"#清除旧的-Oracle-JDK\"></a>清除旧的 Oracle JDK</h2>\n<p>对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：</p>\n<h3 id=\"步骤-3：删除旧的-JDK-文件\"><a class=\"headerlink\" href=\"#步骤-3：删除旧的-JDK-文件\"></a>步骤 3：删除旧的 JDK 文件</h3>\n<p>删除 <code>/Library/Java/JavaVirtualMachines/</code> 目录下的 JDK 文件夹。此外，清理以下位置的内容：</p>\n<ul>\n<li><code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin</code></li>\n<li><code>/Library/PreferencePanes/JavaControlPanel.prefPane</code></li>\n<li><code>~/Library/Application Support/Oracle/Java</code></li>\n</ul>\n<h2 id=\"安装-Temurin-JDK\"><a class=\"headerlink\" href=\"#安装-Temurin-JDK\"></a>安装 Temurin JDK</h2>\n<p>在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。</p>\n<h3 id=\"步骤-4：配置-Homebrew-Cask-版本\"><a class=\"headerlink\" href=\"#步骤-4：配置-Homebrew-Cask-版本\"></a>步骤 4：配置 Homebrew Cask 版本</h3>\n<p>首先，确保你的 Homebrew 能够访问所有 cask 版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew search temurin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"步骤-5：安装-Temurin\"><a class=\"headerlink\" href=\"#步骤-5：安装-Temurin\"></a>步骤 5：安装 Temurin</h3>\n<p>现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token parameter variable\">--cask</span> temurin@8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。</p>\n",
            "tags": [
                "Java",
                "Mac"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/",
            "url": "https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/",
            "title": "安装Homebrew",
            "date_published": "2024-07-14T12:10:50.000Z",
            "content_html": "<h1 id=\"Mac-上安装-Homebrew：一步一步的指南\"><a class=\"headerlink\" href=\"#Mac-上安装-Homebrew：一步一步的指南\"></a>Mac 上安装 Homebrew：一步一步的指南</h1>\n<h2 id=\"什么是-Homebrew？\"><a class=\"headerlink\" href=\"#什么是-Homebrew？\"></a>什么是 Homebrew？</h2>\n<p><a href=\"https://brew.sh/\">Homebrew</a> 是 Mac OS X 或 Linux 上的一款自由和开源的软件包管理系统，它简化了软件的安装过程。它允许用户方便地安装、配置、更新和卸载开源软件。它的设计理念是简化没有访问权限的用户在 macOS 上安装软件的过程。</p>\n<h2 id=\"安装前的准备\"><a class=\"headerlink\" href=\"#安装前的准备\"></a>安装前的准备</h2>\n<p>在安装 Homebrew 之前，请确保您的 Mac 符合以下条件：</p>\n<ul>\n<li>macOS 系统 (或 OS X 至少 10.10 及以上版本)</li>\n<li>有权访问 macOS 的终端（Terminal）</li>\n<li>安装了 Xcode 的命令行工具</li>\n</ul>\n<h3 id=\"安装-Xcode-命令行工具\"><a class=\"headerlink\" href=\"#安装-Xcode-命令行工具\"></a>安装 Xcode 命令行工具</h3>\n<p>打开终端，输入以下命令来安装 Xcode 的命令行工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcode-select <span class=\"token parameter variable\">--install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>系统会弹出一个安装窗口，点击“安装”即可开始下载并安装所需的工具。</p>\n<h2 id=\"安装-Homebrew\"><a class=\"headerlink\" href=\"#安装-Homebrew\"></a>安装 Homebrew</h2>\n<p>完成 Xcode 命令行工具的安装后，您就可以安装 Homebrew 了。在终端中输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/bin/bash <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此脚本将会下载并执行 Homebrew 的安装程序。过程中可能会要求您输入系统密码，因为安装涉及到对系统级目录的写入操作。</p>\n<h2 id=\"安装后的配置\"><a class=\"headerlink\" href=\"#安装后的配置\"></a>安装后的配置</h2>\n<p>安装完成后，按照终端中显示的指示，您可能需要添加 Homebrew 的路径到您的 shell 配置文件中。对于 bash 用户，可以添加以下行到 <code>~/.bash_profile</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.bash_profile\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果您使用的是 zsh，应添加到 <code>~/.zshrc</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.zshrc\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"验证安装\"><a class=\"headerlink\" href=\"#验证安装\"></a>验证安装</h2>\n<p>安装完成后，重新启动终端或者运行以下命令来配置 shell：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bash_profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，对于 zsh 用户：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，您可以运行以下命令来检查 Homebrew 是否安装成功：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew doctor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果显示 “Your system is ready to brew” 的信息，恭喜您，您已经成功安装并配置了 Homebrew。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151218277.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过安装 Homebrew，您的 Mac 将能够轻松地管理大量开源软件，从而大大提高您的生产效率和工作流程。无论您是开发人员还是日常用户，Homebrew 都是一个宝贵的工具，可以帮助您维护软件的最新状态。</p>\n",
            "tags": [
                "Mac",
                "Homebrew"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/07/13/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/",
            "url": "https://blog.aixcc.top/2024/07/13/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/",
            "title": "Vue3快速上手",
            "date_published": "2024-07-13T15:56:37.000Z",
            "content_html": "<h1 id=\"1-Vue3简介\"><a class=\"headerlink\" href=\"#1-Vue3简介\"></a>1. Vue3简介</h1>\n<ul>\n<li>\n<p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p>\n</li>\n<li>\n<p>经历了：<a href=\"https://github.com/vuejs/core/commits/main\">4800+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">40+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/core/graphs/contributors\">300+贡献者</a></p>\n</li>\n<li>\n<p>官方发版地址：<a href=\"https://github.com/vuejs/core/releases/tag/v3.0.0\">Release v3.0.0 One Piece · vuejs/core</a></p>\n</li>\n<li>\n<p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232363.webp\" alt=\"image.png\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2 id=\"1-1-【性能的提升】\"><a class=\"headerlink\" href=\"#1-1-【性能的提升】\"></a>1.1. 【性能的提升】</h2>\n<ul>\n<li>\n<p>打包大小减少<code>41%</code>。</p>\n</li>\n<li>\n<p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p>\n</li>\n<li>\n<p>内存减少<code>54%</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-2-【-源码的升级】\"><a class=\"headerlink\" href=\"#1-2-【-源码的升级】\"></a>1.2.【 源码的升级】</h2>\n<ul>\n<li>\n<p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p>\n</li>\n<li>\n<p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-3-【拥抱TypeScript】\"><a class=\"headerlink\" href=\"#1-3-【拥抱TypeScript】\"></a>1.3. 【拥抱TypeScript】</h2>\n<ul>\n<li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li>\n</ul>\n<h2 id=\"1-4-【新的特性】\"><a class=\"headerlink\" href=\"#1-4-【新的特性】\"></a>1.4. 【新的特性】</h2>\n<ol>\n<li>\n<p><code>Composition API</code>（组合<code>API</code>）：</p>\n<ul>\n<li>\n<p><code>setup</code></p>\n</li>\n<li>\n<p><code>ref</code>与<code>reactive</code></p>\n</li>\n<li>\n<p><code>computed</code>与<code>watch</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>新的内置组件：</p>\n<ul>\n<li>\n<p><code>Fragment</code></p>\n</li>\n<li>\n<p><code>Teleport</code></p>\n</li>\n<li>\n<p><code>Suspense</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>其他改变：</p>\n<ul>\n<li>\n<p>新的生命周期钩子</p>\n</li>\n<li>\n<p><code>data</code> 选项应始终被声明为一个函数</p>\n</li>\n<li>\n<p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p>\n<p>…</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-创建Vue3工程\"><a class=\"headerlink\" href=\"#2-创建Vue3工程\"></a>2. 创建Vue3工程</h1>\n<h2 id=\"2-1-【基于-vue-cli-创建】\"><a class=\"headerlink\" href=\"#2-1-【基于-vue-cli-创建】\"></a>2.1. 【基于 vue-cli 创建】</h2>\n<p>点击查看<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">官方文档</a></p>\n<blockquote>\n<p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>\nvue <span class=\"token operator\">--</span>version\n\n<span class=\"token comment\">## 安装或者升级你的@vue/cli </span>\nnpm install <span class=\"token operator\">-</span>g @vue/<span class=\"token function\">cli</span>\n\n<span class=\"token comment\">## 执行创建命令</span>\nvue create vue_test\n\n<span class=\"token comment\">##  随后选择3.x</span>\n<span class=\"token comment\">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span>\n<span class=\"token comment\">##  > 3.x</span>\n<span class=\"token comment\">##    2.x</span>\n\n<span class=\"token comment\">## 启动</span>\ncd vue_test\nnpm run serve<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h2 id=\"2-2-【基于-vite-创建】-推荐\"><a class=\"headerlink\" href=\"#2-2-【基于-vite-创建】-推荐\"></a>2.2. 【基于 vite 创建】(推荐)</h2>\n<p><code>vite</code> 是新一代前端构建工具，官网地址：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p>\n<ul>\n<li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li>\n<li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n<li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：</li>\n</ul>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232253.webp\" alt=\"\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232053.webp\" alt=\"\" loading=\"lazy\"></p>\n<ul>\n<li>具体操作如下（点击查看<a href=\"https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application\">官方文档</a>）</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 1.创建命令</span>\nnpm create vue@latest\n\n<span class=\"token comment\">## 2.具体配置</span>\n<span class=\"token comment\">## 配置项目名称</span>\n√ Project name: vue3_test\n<span class=\"token comment\">## 是否添加TypeScript支持</span>\n√ Add TypeScript?  Yes\n<span class=\"token comment\">## 是否添加JSX支持</span>\n√ Add JSX Support?  No\n<span class=\"token comment\">## 是否添加路由环境</span>\n√ Add Vue Router <span class=\"token keyword\">for</span> Single Page Application development?  No\n<span class=\"token comment\">## 是否添加pinia环境</span>\n√ Add Pinia <span class=\"token keyword\">for</span> state management?  No\n<span class=\"token comment\">## 是否添加单元测试</span>\n√ Add Vitest <span class=\"token keyword\">for</span> Unit Testing?  No\n<span class=\"token comment\">## 是否添加端到端测试方案</span>\n√ Add an <span class=\"token keyword\">End</span><span class=\"token operator\">-</span>to-<span class=\"token keyword\">End</span> Testing Solution? » No\n<span class=\"token comment\">## 是否添加ESLint语法检查</span>\n√ Add ESLint <span class=\"token keyword\">for</span> code quality?  Yes\n<span class=\"token comment\">## 是否添加Prettiert代码格式化</span>\n√ Add Prettier <span class=\"token keyword\">for</span> code formatting?  No<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>自己动手编写一个App组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h1&gt;你好啊！&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39; &#x2F;&#x2F;组件名\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n  .app &#123;\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  &#125;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装官方推荐的<code>vscode</code>插件：</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232847.webp\" alt=\"Snipaste_2023-10-08_20-46-34\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232668.webp\" alt=\"image-20231218085906380\" loading=\"lazy\"></p>\n<p>总结：</p>\n<ul>\n<li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li>\n<li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li>\n<li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li>\n</ul>\n<h2 id=\"2-3-【一个简单的效果】\"><a class=\"headerlink\" href=\"#2-3-【一个简单的效果】\"></a>2.3. 【一个简单的效果】</h2>\n<p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39;,\n    data() &#123;\n      return &#123;\n        name:&#39;张三&#39;,\n        age:18,\n        tel:&#39;13888888888&#39;\n      &#125;\n    &#125;,\n    methods:&#123;\n      changeName()&#123;\n        this.name &#x3D; &#39;zhang-san&#39;\n      &#125;,\n      changeAge()&#123;\n        this.age +&#x3D; 1\n      &#125;,\n      showTel()&#123;\n        alert(this.tel)\n      &#125;\n    &#125;,\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"3-Vue3核心语法\"><a class=\"headerlink\" href=\"#3-Vue3核心语法\"></a>3. Vue3核心语法</h1>\n<h2 id=\"3-1-【OptionsAPI-与-CompositionAPI】\"><a class=\"headerlink\" href=\"#3-1-【OptionsAPI-与-CompositionAPI】\"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2>\n<ul>\n<li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li>\n<li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li>\n</ul>\n<h3 id=\"Options-API-的弊端\"><a class=\"headerlink\" href=\"#Options-API-的弊端\"></a>Options API 的弊端</h3>\n<p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p>\n<p><img src=\"https://img.aixcc.top/file/c3edadbf9a9bbfd22d442.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/d978f7c4fd1f8a2a2e8f9.gif\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"Composition-API-的优势\"><a class=\"headerlink\" href=\"#Composition-API-的优势\"></a>Composition API 的优势</h3>\n<p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p>\n<p><img src=\"https://img.aixcc.top/file/9acc07d0f3690f12a9fda.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/2e7d2a90529d10cad9c93.gif\" alt=\"\" loading=\"lazy\"></p>\n<blockquote>\n<p>说明：以上四张动图原创作者：大帅老猿</p>\n</blockquote>\n<h2 id=\"3-2-【拉开序幕的-setup】\"><a class=\"headerlink\" href=\"#3-2-【拉开序幕的-setup】\"></a>3.2. 【拉开序幕的 setup】</h2>\n<h3 id=\"setup-概述\"><a class=\"headerlink\" href=\"#setup-概述\"></a>setup 概述</h3>\n<p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视…等等，均配置在<code>setup</code>中。</p>\n<p>特点如下：</p>\n<ul>\n<li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li>\n<li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li>\n<li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n    setup()&#123;\n      &#x2F;&#x2F; 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name &#x3D; &#39;张三&#39;\n      let age &#x3D; 18\n      let tel &#x3D; &#39;13888888888&#39;\n\n      &#x2F;&#x2F; 方法，原来写在methods中\n      function changeName()&#123;\n        name &#x3D; &#39;zhang-san&#39; &#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n        console.log(name)\n      &#125;\n      function changeAge()&#123;\n        age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n        console.log(age)\n      &#125;\n      function showTel()&#123;\n        alert(tel)\n      &#125;\n\n      &#x2F;&#x2F; 返回一个对象，对象中的内容，模板中可以直接使用\n      return &#123;name,age,tel,changeName,changeAge,showTel&#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-的返回值\"><a class=\"headerlink\" href=\"#setup-的返回值\"></a>setup 的返回值</h3>\n<ul>\n<li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**</li>\n<li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token string\">'你好啊！'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-与-Options-API-的关系\"><a class=\"headerlink\" href=\"#setup-与-Options-API-的关系\"></a>setup 与 Options API 的关系</h3>\n<ul>\n<li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>…）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li>\n<li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>…）。</li>\n<li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li>\n</ul>\n<h3 id=\"setup-语法糖\"><a class=\"headerlink\" href=\"#setup-语法糖\"></a>setup 语法糖</h3>\n<p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;!-- 下面的写法是setup语法糖 --&gt;\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  console.log(this) &#x2F;&#x2F;undefined\n  \n  &#x2F;&#x2F; 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name &#x3D; &#39;张三&#39;\n  let age &#x3D; 18\n  let tel &#x3D; &#39;13888888888&#39;\n\n  &#x2F;&#x2F; 方法\n  function changName()&#123;\n    name &#x3D; &#39;李四&#39;&#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n  &#125;\n  function changAge()&#123;\n    console.log(age)\n    age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p>\n<ol>\n<li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li>\n<li>第二步：<code>vite.config.ts</code></li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span>\n<span class=\"token keyword\">import</span> VueSetupExtend <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-vue-setup-extend'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">VueSetupExtend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li>\n</ol>\n<h2 id=\"3-3-【ref-创建：基本类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-3-【ref-创建：基本类型的响应式数据】\"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2>\n<ul>\n<li>**作用：**定义响应式变量。</li>\n<li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li>\n<li>**返回值：**一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li>\n<li><strong>注意点：</strong>\n<ul>\n<li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li>\n<li>对于<code>let name = ref('张三')</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;&#x2F; tel就是一个普通的字符串，不是响应式的\n  let tel &#x3D; &#39;13888888888&#39;\n\n  function changeName()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    name.value &#x3D; &#39;李四&#39;\n    console.log(name.value)\n\n    &#x2F;&#x2F; 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    &#x2F;&#x2F; name &#x3D; ref(&#39;zhang-san&#39;)\n  &#125;\n  function changeAge()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    age.value +&#x3D; 1 \n    console.log(age.value)\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-4-【reactive-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-4-【reactive-创建：对象类型的响应式数据】\"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2>\n<ul>\n<li><strong>作用：<strong>定义一个</strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li>\n<li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li>\n<li>**返回值：**一个<code>Proxy</code>的实例对象，简称：响应式对象。</li>\n<li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; reactive &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; reactive(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; reactive([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; reactive(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nfunction changeCarPrice() &#123;\n  car.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-5-【ref-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-5-【ref-创建：对象类型的响应式数据】\"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2>\n<ul>\n<li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li>\n<li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; ref(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; ref([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; ref(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nconsole.log(car)\n\nfunction changeCarPrice() &#123;\n  car.value.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games.value[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.value.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-6-【ref-对比-reactive】\"><a class=\"headerlink\" href=\"#3-6-【ref-对比-reactive】\"></a>3.6. 【ref 对比 reactive】</h2>\n<p>宏观角度看：</p>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p>\n</li>\n<li>\n<p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>区别：</li>\n</ul>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232718.webp\" alt=\"自动补充value\" loading=\"lazy\"></p>\n</li>\n<li>\n<p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>使用原则：</li>\n</ul>\n<blockquote>\n<ol>\n<li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li>\n<li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li>\n<li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-7-【toRefs-与-toRef】\"><a class=\"headerlink\" href=\"#3-7-【toRefs-与-toRef】\"></a>3.7. 【toRefs 与 toRef】</h2>\n<ul>\n<li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li>\n<li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li>\n<li>语法如下：</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeGender&quot;&gt;修改性别&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,reactive,toRefs,toRef&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;name:&#39;张三&#39;, age:18, gender:&#39;男&#39;&#125;)\n\t\n  &#x2F;&#x2F; 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let &#123;name,gender&#125; &#x3D;  toRefs(person)\n\t\n  &#x2F;&#x2F; 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age &#x3D; toRef(person,&#39;age&#39;)\n\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    name.value +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    age.value +&#x3D; 1\n  &#125;\n  function changeGender()&#123;\n    gender.value &#x3D; &#39;女&#39;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-8-【computed】\"><a class=\"headerlink\" href=\"#3-8-【computed】\"></a>3.8. 【computed】</h2>\n<p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p>\n<p><img src=\"https://img.aixcc.top/file/35111db5e18d3bb69aee9.gif\" alt=\"\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&gt;\n    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;br&gt;\n    &lt;button @click&#x3D;&quot;changeFullName&quot;&gt;全名改为：li-si&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;App&quot;&gt;\n  import &#123;ref,computed&#125; from &#39;vue&#39;\n\n  let firstName &#x3D; ref(&#39;zhang&#39;)\n  let lastName &#x3D; ref(&#39;san&#39;)\n\n  &#x2F;&#x2F; 计算属性——只读取，不修改\n  &#x2F;* let fullName &#x3D; computed(()&#x3D;&gt;&#123;\n    return firstName.value + &#39;-&#39; + lastName.value\n  &#125;) *&#x2F;\n\n\n  &#x2F;&#x2F; 计算属性——既读取又修改\n  let fullName &#x3D; computed(&#123;\n    &#x2F;&#x2F; 读取\n    get()&#123;\n      return firstName.value + &#39;-&#39; + lastName.value\n    &#125;,\n    &#x2F;&#x2F; 修改\n    set(val)&#123;\n      console.log(&#39;有人修改了fullName&#39;,val)\n      firstName.value &#x3D; val.split(&#39;-&#39;)[0]\n      lastName.value &#x3D; val.split(&#39;-&#39;)[1]\n    &#125;\n  &#125;)\n\n  function changeFullName()&#123;\n    fullName.value &#x3D; &#39;li-si&#39;\n  &#125; \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-9-【watch】\"><a class=\"headerlink\" href=\"#3-9-【watch】\"></a>3.9.【watch】</h2>\n<ul>\n<li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li>\n<li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li>\n</ul>\n<blockquote>\n<ol>\n<li><code>ref</code>定义的数据。</li>\n<li><code>reactive</code>定义的数据。</li>\n<li>函数返回一个值（<code>getter</code>函数）。</li>\n<li>一个包含上述内容的数组。</li>\n</ol>\n</blockquote>\n<p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p>\n<h3 id=\"情况一\"><a class=\"headerlink\" href=\"#情况一\"></a>* 情况一</h3>\n<p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum()&#123;\n    sum.value +&#x3D; 1\n  &#125;\n  &#x2F;&#x2F; 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch &#x3D; watch(sum,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;sum变化了&#39;,newValue,oldValue)\n    if(newValue &gt;&#x3D; 10)&#123;\n      stopWatch()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况二\"><a class=\"headerlink\" href=\"#情况二\"></a>* 情况二</h3>\n<p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>\n<p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p>\n</li>\n<li>\n<p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; ref(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.value.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.value.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    person.value &#x3D; &#123;name:&#39;李四&#39;,age:90&#125;\n  &#125;\n  &#x2F;* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  *&#x2F;\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况三\"><a class=\"headerlink\" href=\"#情况三\"></a>*  情况三</h3>\n<p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n    &lt;hr&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;修改obj.a.b.c&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  let obj &#x3D; reactive(&#123;\n    a:&#123;\n      b:&#123;\n        c:666\n      &#125;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    Object.assign(person,&#123;name:&#39;李四&#39;,age:80&#125;)\n  &#125;\n  function test()&#123;\n    obj.a.b.c &#x3D; 888\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;)\n  watch(obj,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;Obj变化了&#39;,newValue,oldValue)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况四\"><a class=\"headerlink\" href=\"#情况四\"></a>* 情况四</h3>\n<p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p>\n<ol>\n<li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li>\n<li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li>\n</ol>\n<p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  &#x2F;* watch(()&#x3D;&gt; person.name,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.name变化了&#39;,newValue,oldValue)\n  &#125;) *&#x2F;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()&#x3D;&gt;person.car,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况五\"><a class=\"headerlink\" href=\"#情况五\"></a>* 情况五</h3>\n<p>监视上述的多个数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况五：监视上述的多个数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况五：监视上述的多个数据\n  watch([()&#x3D;&gt;person.name,person.car],(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-10-【watchEffect】\"><a class=\"headerlink\" href=\"#3-10-【watchEffect】\"></a>3.10. 【watchEffect】</h2>\n<ul>\n<li>\n<p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p>\n</li>\n<li>\n<p><code>watch</code>对比<code>watchEffect</code></p>\n<blockquote>\n<ol>\n<li>\n<p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p>\n</li>\n<li>\n<p><code>watch</code>：要明确指出监视的数据</p>\n</li>\n<li>\n<p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;&#x2F;h1&gt;\n    &lt;h2 id&#x3D;&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changePrice&quot;&gt;水温+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;水位+10&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch,watchEffect&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let temp &#x3D; ref(0)\n  let height &#x3D; ref(0)\n\n  &#x2F;&#x2F; 方法\n  function changePrice()&#123;\n    temp.value +&#x3D; 10\n  &#125;\n  function changeSum()&#123;\n    height.value +&#x3D; 1\n  &#125;\n\n  &#x2F;&#x2F; 用watch实现，需要明确的指出要监视：temp、height\n  watch([temp,height],(value)&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 从value中获取最新的temp值、height值\n    const [newTemp,newHeight] &#x3D; value\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(newTemp &gt;&#x3D; 50 || newHeight &gt;&#x3D; 20)&#123;\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n  &#125;)\n\n  &#x2F;&#x2F; 用watchEffect实现，不用\n  const stopWtach &#x3D; watchEffect(()&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(temp.value &gt;&#x3D; 50 || height.value &gt;&#x3D; 20)&#123;\n      console.log(document.getElementById(&#39;demo&#39;)?.innerText)\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n    &#x2F;&#x2F; 水温达到100，或水位达到50，取消监视\n    if(temp.value &#x3D;&#x3D;&#x3D; 100 || height.value &#x3D;&#x3D;&#x3D; 50)&#123;\n      console.log(&#39;清理了&#39;)\n      stopWtach()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-11-【标签的-ref-属性】\"><a class=\"headerlink\" href=\"#3-11-【标签的-ref-属性】\"></a>3.11. 【标签的 ref 属性】</h2>\n<p>作用：用于注册模板引用。</p>\n<blockquote>\n<ul>\n<li>\n<p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p>\n</li>\n<li>\n<p>用在组件标签上，获取的是组件实例对象。</p>\n</li>\n</ul>\n</blockquote>\n<p>用在普通<code>DOM</code>标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1 ref&#x3D;&quot;title1&quot;&gt;尚硅谷&lt;&#x2F;h1&gt;\n    &lt;h2 ref&#x3D;&quot;title2&quot;&gt;前端&lt;&#x2F;h2&gt;\n    &lt;h3 ref&#x3D;&quot;title3&quot;&gt;Vue&lt;&#x2F;h3&gt;\n    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;\n    &lt;button @click&#x3D;&quot;showLog&quot;&gt;点我打印内容&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n\t\n  let title1 &#x3D; ref()\n  let title2 &#x3D; ref()\n  let title3 &#x3D; ref()\n\n  function showLog()&#123;\n    &#x2F;&#x2F; 通过id获取元素\n    const t1 &#x3D; document.getElementById(&#39;title1&#39;)\n    &#x2F;&#x2F; 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((&lt;HTMLElement&gt;t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t&#x2F;************************************&#x2F;\n\t\t\n    &#x2F;&#x2F; 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用在组件标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 父组件App.vue --&gt;\n&lt;template&gt;\n  &lt;Person ref&#x3D;&quot;ren&quot;&#x2F;&gt;\n  &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\n  import &#123;ref&#125; from &#39;vue&#39;\n\n  let ren &#x3D; ref()\n\n  function test()&#123;\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  &#125;\n&lt;&#x2F;script&gt;\n\n\n&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,defineExpose&#125; from &#39;vue&#39;\n\t&#x2F;&#x2F; 数据\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;****************************&#x2F;\n  &#x2F;****************************&#x2F;\n  &#x2F;&#x2F; 使用defineExpose将组件中的数据交给外部\n  defineExpose(&#123;name,age&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-12-【props】\"><a class=\"headerlink\" href=\"#3-12-【props】\"></a>3.12. 【props】</h2>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义一个接口，限制每个Person对象的格式</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInter</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>number\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 定义一个自定义类型Persons</span>\n<span class=\"token keyword\">export</span> type Persons <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>PersonInter<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>App.vue</code>中代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;Person :list&#x3D;&quot;persons&quot;&#x2F;&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\nimport Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\nimport &#123;reactive&#125; from &#39;vue&#39;\n import &#123;type Persons&#125; from &#39;.&#x2F;types&#39;\n\n let persons &#x3D; reactive&lt;Persons&gt;([\n  &#123;id:&#39;e98219e12&#39;,name:&#39;张三&#39;,age:18&#125;,\n   &#123;id:&#39;e98219e13&#39;,name:&#39;李四&#39;,age:19&#125;,\n    &#123;id:&#39;e98219e14&#39;,name:&#39;王五&#39;,age:20&#125;\n  ])\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Person.vue</code>中代码：</p>\n<pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;template&gt;\n&lt;div class&#x3D;&quot;person&quot;&gt;\n&lt;ul&gt;\n  &lt;li v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item.id&quot;&gt;\n     &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;\n   &lt;&#x2F;li&gt;\n &lt;&#x2F;ul&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123;defineProps&#125; from &#39;vue&#39;\nimport &#123;type PersonInter&#125; from &#39;@&#x2F;types&#39;\n\n&#x2F;&#x2F; 第一种写法：仅接收\n&#x2F;&#x2F; const props &#x3D; defineProps([&#39;list&#39;])\n\n&#x2F;&#x2F; 第二种写法：接收+限制类型\n&#x2F;&#x2F; defineProps&lt;&#123;list:Persons&#125;&gt;()\n\n&#x2F;&#x2F; 第三种写法：接收+限制类型+指定默认值+限制必要性\nlet props &#x3D; withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;\n  list:()&#x3D;&gt;[&#123;id:&#39;asdasg01&#39;,name:&#39;小猪佩奇&#39;,age:18&#125;]\n&#125;)\nconsole.log(props)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"3-13-【生命周期】\"><a class=\"headerlink\" href=\"#3-13-【生命周期】\"></a>3.13. 【生命周期】</h2>\n<ul>\n<li>\n<p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p>\n</li>\n<li>\n<p>规律：</p>\n<blockquote>\n<p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue2</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>beforeCreate</code>、<code>created</code></p>\n<p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p>\n<p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p>\n<p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue3</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>setup</code></p>\n<p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p>\n<p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p>\n<p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p>\n</blockquote>\n</li>\n<li>\n<p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;!-- vue3写法 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123; \n    ref, \n    onBeforeMount, \n    onMounted, \n    onBeforeUpdate, \n    onUpdated, \n    onBeforeUnmount, \n    onUnmounted \n  &#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum() &#123;\n    sum.value +&#x3D; 1\n  &#125;\n  console.log(&#39;setup&#39;)\n  &#x2F;&#x2F; 生命周期钩子\n  onBeforeMount(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载之前&#39;)\n  &#125;)\n  onMounted(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载完毕&#39;)\n  &#125;)\n  onBeforeUpdate(()&#x3D;&gt;&#123;\n    console.log(&#39;更新之前&#39;)\n  &#125;)\n  onUpdated(()&#x3D;&gt;&#123;\n    console.log(&#39;更新完毕&#39;)\n  &#125;)\n  onBeforeUnmount(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载之前&#39;)\n  &#125;)\n  onUnmounted(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载完毕&#39;)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-14-【自定义hook】\"><a class=\"headerlink\" href=\"#3-14-【自定义hook】\"></a>3.14. 【自定义hook】</h2>\n<ul>\n<li>\n<p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p>\n</li>\n<li>\n<p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<ul>\n<li>\n<p><code>useSum.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>useDog.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>AxiosError<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> dogList <span class=\"token operator\">=</span> reactive<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 方法</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 发请求</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://dog.ceo/api/breed/pembroke/images/random'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 维护数据</span>\n      dogList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 处理错误</span>\n      <span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>AxiosError<span class=\"token operator\">></span>error\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 挂载钩子</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>dogList<span class=\"token punctuation\">,</span>getDog<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中具体使用：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n  &lt;button @click&#x3D;&quot;increment&quot;&gt;点我+1&lt;&#x2F;button&gt;\n  &lt;button @click&#x3D;&quot;decrement&quot;&gt;点我-1&lt;&#x2F;button&gt;\n  &lt;hr&gt;\n  &lt;img v-for&#x3D;&quot;(u,index) in dogList.urlList&quot; :key&#x3D;&quot;index&quot; :src&#x3D;&quot;(u as string)&quot;&gt; \n  &lt;span v-show&#x3D;&quot;dogList.isLoading&quot;&gt;加载中......&lt;&#x2F;span&gt;&lt;br&gt;\n  &lt;button @click&#x3D;&quot;getDog&quot;&gt;再来一只狗&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  import &#123;defineComponent&#125; from &#39;vue&#39;\n\n  export default defineComponent(&#123;\n    name:&#39;App&#39;,\n  &#125;)\n&lt;&#x2F;script&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  import useSum from &#39;.&#x2F;hooks&#x2F;useSum&#39;\n  import useDog from &#39;.&#x2F;hooks&#x2F;useDog&#39;\n\t\n  let &#123;sum,increment,decrement&#125; &#x3D; useSum()\n  let &#123;dogList,getDog&#125; &#x3D; useDog()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<hr>\n<h1 id=\"4-路由\"><a class=\"headerlink\" href=\"#4-路由\"></a>4. 路由</h1>\n<h2 id=\"4-1-【对路由的理解】\"><a class=\"headerlink\" href=\"#4-1-【对路由的理解】\"></a>4.1. 【对路由的理解】</h2>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232332.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"4-2-【基本切换效果】\"><a class=\"headerlink\" href=\"#4-2-【基本切换效果】\"></a>4.2. 【基本切换效果】</h2>\n<ul>\n<li>\n<p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p>\n</li>\n<li>\n<p>路由配置文件代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>createRouter<span class=\"token punctuation\">,</span>createWebHistory<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/Home.vue'</span>\n<span class=\"token keyword\">import</span> News <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/News.vue'</span>\n<span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/About.vue'</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>main.ts</code>代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router/index'</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>App.vue</code>代码如下</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h2 class&#x3D;&quot;title&quot;&gt;Vue路由测试&lt;&#x2F;h2&gt;\n    &lt;!-- 导航区 --&gt;\n    &lt;div class&#x3D;&quot;navigate&quot;&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;home&quot; active-class&#x3D;&quot;active&quot;&gt;首页&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;news&quot; active-class&#x3D;&quot;active&quot;&gt;新闻&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;about&quot; active-class&#x3D;&quot;active&quot;&gt;关于&lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;div&gt;\n    &lt;!-- 展示区 --&gt;\n    &lt;div class&#x3D;&quot;main-content&quot;&gt;\n      &lt;RouterView&gt;&lt;&#x2F;RouterView&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import &#123;RouterLink,RouterView&#125; from &#39;vue-router&#39;  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"4-3-【两个注意点】\"><a class=\"headerlink\" href=\"#4-3-【两个注意点】\"></a>4.3. 【两个注意点】</h2>\n<blockquote>\n<ol>\n<li>\n<p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p>\n</li>\n<li>\n<p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"4-4-【路由器工作模式】\"><a class=\"headerlink\" href=\"#4-4-【路由器工作模式】\"></a>4.4.【路由器工作模式】</h2>\n<ol>\n<li>\n<p><code>history</code>模式</p>\n<blockquote>\n<p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p>\n<p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//history模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n<li>\n<p><code>hash</code>模式</p>\n<blockquote>\n<p>优点：兼容性更好，因为不需要服务器端处理路径。</p>\n<p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//hash模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-5-【to的两种写法】\"><a class=\"headerlink\" href=\"#4-5-【to的两种写法】\"></a>4.5. 【to的两种写法】</h2>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 第一种：to的字符串写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&quot;&gt;主页&lt;&#x2F;router-link&gt;\n\n&lt;!-- 第二种：to的对象写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;home&#39;&#125;&quot;&gt;Home&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-6-【命名路由】\"><a class=\"headerlink\" href=\"#4-6-【命名路由】\"></a>4.6. 【命名路由】</h2>\n<p>作用：可以简化路由跳转及传参（后面就讲）。</p>\n<p>给路由规则命名：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>跳转路由：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;name:&#39;guanyu&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-7-【嵌套路由】\"><a class=\"headerlink\" href=\"#4-7-【嵌套路由】\"></a>4.7. 【嵌套路由】</h2>\n<ol>\n<li>\n<p>编写<code>News</code>的子路由：<code>Detail.vue</code></p>\n</li>\n<li>\n<p>配置路由规则，使用<code>children</code>配置项：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  history<span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\troutes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n\t\t\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tcomponent<span class=\"token operator\">:</span>Detail\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>跳转路由（记得要加完整路径）：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;xxxx&lt;&#x2F;router-link&gt;\n&lt;!-- 或 --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;xxxx&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;news&quot;&gt;\n    &lt;nav class&#x3D;&quot;news-list&quot;&gt;\n      &lt;RouterLink v-for&#x3D;&quot;news in newsList&quot; :key&#x3D;&quot;news.id&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;\n        &#123;&#123;news.name&#125;&#125;\n      &lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;nav&gt;\n    &lt;div class&#x3D;&quot;news-detail&quot;&gt;\n      &lt;RouterView&#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-8-【路由传参】\"><a class=\"headerlink\" href=\"#4-8-【路由传参】\"></a>4.8. 【路由传参】</h2>\n<h3 id=\"query参数\"><a class=\"headerlink\" href=\"#query参数\"></a>query参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail?a&#x3D;1&amp;b&#x3D;2&amp;content&#x3D;欢迎你&quot;&gt;\n\t跳转\n&lt;&#x2F;router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    &#x2F;&#x2F;name:&#39;xiang&#39;, &#x2F;&#x2F;用name也可以跳转\n    path:&#39;&#x2F;news&#x2F;detail&#39;,\n    query:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.content\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印query参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"params参数\"><a class=\"headerlink\" href=\"#params参数\"></a>params参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;\n&lt;RouterLink :to&#x3D;&quot;&#96;&#x2F;news&#x2F;detail&#x2F;001&#x2F;新闻001&#x2F;内容001&#96;&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;&#x2F;RouterLink&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    name:&#39;xiang&#39;, &#x2F;&#x2F;用name跳转\n    params:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.title\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印params参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<blockquote>\n<p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p>\n<p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p>\n</blockquote>\n<h2 id=\"4-9-【路由的props配置】\"><a class=\"headerlink\" href=\"#4-9-【路由的props配置】\"></a>4.9. 【路由的props配置】</h2>\n<p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'detail/:id/:title/:content'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Detail<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:&#123;a:1,b:2,c:3&#125;, </span>\n\n  <span class=\"token comment\">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:true</span>\n  \n  <span class=\"token comment\">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span>\n  <span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> route<span class=\"token punctuation\">.</span>query\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-10-【-replace属性】\"><a class=\"headerlink\" href=\"#4-10-【-replace属性】\"></a>4.10. 【 replace属性】</h2>\n<ol>\n<li>\n<p>作用：控制路由跳转时操作浏览器历史记录的模式。</p>\n</li>\n<li>\n<p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p>\n<ul>\n<li><code>push</code>是追加历史记录（默认值）。</li>\n<li><code>replace</code>是替换当前记录。</li>\n</ul>\n</li>\n<li>\n<p>开启<code>replace</code>模式：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;RouterLink replace .......&gt;News&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-11-【编程式导航】\"><a class=\"headerlink\" href=\"#4-11-【编程式导航】\"></a>4.11. 【编程式导航】</h2>\n<p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">,</span>useRouter<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>parmas<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-12-【重定向】\"><a class=\"headerlink\" href=\"#4-12-【重定向】\"></a>4.12. 【重定向】</h2>\n<ol>\n<li>\n<p>作用：将特定的路径，重新定向到已有路由。</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"5-pinia\"><a class=\"headerlink\" href=\"#5-pinia\"></a>5. pinia</h1>\n<h2 id=\"5-1【准备一个效果】\"><a class=\"headerlink\" href=\"#5-1【准备一个效果】\"></a>5.1【准备一个效果】</h2>\n<p><img src=\"https://img.aixcc.top/file/f14ee7ea7c72a9003d7b8.gif\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-2【搭建-pinia-环境】\"><a class=\"headerlink\" href=\"#5-2【搭建-pinia-环境】\"></a>5.2【搭建 pinia 环境】</h2>\n<p>第一步：<code>npm install pinia</code></p>\n<p>第二步：操作<code>src/main.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span>\n\n<span class=\"token comment\">/* 引入createPinia，用于创建pinia */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">/* 创建pinia */</span>\n<span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 使用插件 */</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时开发者工具中已经有了<code>pinia</code>选项</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232851.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-3【存储-读取数据】\"><a class=\"headerlink\" href=\"#5-3【存储-读取数据】\"></a>5.3【存储+读取数据】</h2>\n<ol>\n<li>\n<p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p>\n</li>\n<li>\n<p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p>\n</li>\n<li>\n<p>具体编码：<code>src/store/count.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  actions<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      sum<span class=\"token operator\">:</span><span class=\"token number\">6</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  getters<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>具体编码：<code>src/store/talk.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">talkList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'你今天有点怪，哪里怪？怪好看的！'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n     \t\t<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'草莓、蓝莓、蔓越莓，你想我了没？'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'心里给你留了一块地，我的死心塌地'</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中使用<code>state</code>中的数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;&#x2F;h2&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  &#x2F;&#x2F; 引入对应的useXxxxxStore\t\n  import &#123;useSumStore&#125; from &#39;@&#x2F;store&#x2F;sum&#39;\n  \n  &#x2F;&#x2F; 调用useXxxxxStore得到对应的store\n  const sumStore &#x3D; useSumStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;ul&gt;\n    &lt;li v-for&#x3D;&quot;talk in talkStore.talkList&quot; :key&#x3D;&quot;talk.id&quot;&gt;\n      &#123;&#123; talk.content &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import axios from &#39;axios&#39;\n  import &#123;useTalkStore&#125; from &#39;@&#x2F;store&#x2F;talk&#39;\n\n  const talkStore &#x3D; useTalkStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-4-【修改数据】-三种方式\"><a class=\"headerlink\" href=\"#5-4-【修改数据】-三种方式\"></a>5.4.【修改数据】(三种方式)</h2>\n<ol>\n<li>\n<p>第一种修改方式，直接修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>第二种修改方式：批量修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span><span class=\"token function\">$patch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  sum<span class=\"token operator\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span>\n  school<span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/*************/</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//加</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//操作countStore中的sum</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//减</span>\n    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">-=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*************/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中调用<code>action</code>即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用countStore</span>\n<span class=\"token keyword\">const</span> countStore <span class=\"token operator\">=</span> <span class=\"token function\">useCountStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 调用对应action</span>\ncountStore<span class=\"token punctuation\">.</span><span class=\"token function\">incrementOdd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-5-【storeToRefs】\"><a class=\"headerlink\" href=\"#5-5-【storeToRefs】\"></a>5.5.【storeToRefs】</h2>\n<ul>\n<li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li>\n<li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;count&quot;&gt;\n\t\t&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import &#123; useCountStore &#125; from &#39;@&#x2F;store&#x2F;count&#39;\n  &#x2F;* 引入storeToRefs *&#x2F;\n  import &#123; storeToRefs &#125; from &#39;pinia&#39;\n\n\t&#x2F;* 得到countStore *&#x2F;\n  const countStore &#x3D; useCountStore()\n  &#x2F;* 使用storeToRefs转换countStore，随后解构 *&#x2F;\n  const &#123;sum&#125; &#x3D; storeToRefs(countStore)\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-6-【getters】\"><a class=\"headerlink\" href=\"#5-6-【getters】\"></a>5.6.【getters】</h2>\n<ol>\n<li>\n<p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p>\n</li>\n<li>\n<p>追加<code>getters</code>配置。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/************/</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">school</span><span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">bigSum</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">upperSchool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> school<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中读取数据：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> countStore\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>school<span class=\"token punctuation\">,</span>bigSum<span class=\"token punctuation\">,</span>upperSchool<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">storeToRefs</span><span class=\"token punctuation\">(</span>countStore<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-7-【-subscribe】\"><a class=\"headerlink\" href=\"#5-7-【-subscribe】\"></a>5.7.【$subscribe】</h2>\n<p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">talkStore<span class=\"token punctuation\">.</span><span class=\"token function\">$subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LoveTalk'</span><span class=\"token punctuation\">,</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>talkList<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-8-【store组合式写法】\"><a class=\"headerlink\" href=\"#5-8-【store组合式写法】\"></a>5.8. 【store组合式写法】</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>nanoid<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'nanoid'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// talkList就是state</span>\n  <span class=\"token keyword\">const</span> talkList <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talkList'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// getATalk函数相当于action</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getATalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 发请求，下面这行的写法是：连续解构赋值+重命名</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>content<span class=\"token operator\">:</span>title<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.uomg.com/api/rand.qinghua?format=json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 把请求回来的字符串，包装成一个对象</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span><span class=\"token function\">nanoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>title<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 放到数组中</span>\n    talkList<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>talkList<span class=\"token punctuation\">,</span>getATalk<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"6-组件通信\"><a class=\"headerlink\" href=\"#6-组件通信\"></a>6. 组件通信</h1>\n<p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p>\n<ul>\n<li>移出事件总线，使用<code>mitt</code>代替。</li>\n</ul>\n<ul>\n<li><code>vuex</code>换成了<code>pinia</code>。</li>\n<li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li>\n<li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li>\n<li><code>$children</code>被砍掉了。</li>\n</ul>\n<p><strong>常见搭配形式：</strong></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232507.webp\" alt=\"image-20231119185900990\" loading=\"lazy\"></p>\n<h2 id=\"6-1-【props】\"><a class=\"headerlink\" href=\"#6-1-【props】\"></a>6.1. 【props】</h2>\n<p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p>\n<ul>\n<li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li>\n<li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li>\n</ul>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件，&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;Child :car&#x3D;&quot;car&quot; :getToy&#x3D;&quot;getToy&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\t&#x2F;&#x2F; 数据\n\tconst car &#x3D; ref(&#39;奔驰&#39;)\n\tconst toy &#x3D; ref()\n\t&#x2F;&#x2F; 方法\n\tfunction getToy(value:string)&#123;\n\t\ttoy.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;child&quot;&gt;\n    &lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tconst toy &#x3D; ref(&#39;奥特曼&#39;)\n\t\n\tdefineProps([&#39;car&#39;,&#39;getToy&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-2-【自定义事件】\"><a class=\"headerlink\" href=\"#6-2-【自定义事件】\"></a>6.2. 【自定义事件】</h2>\n<ol>\n<li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li>\n<li>注意区分好：原生事件、自定义事件。</li>\n</ol>\n<ul>\n<li>原生事件：\n<ul>\n<li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li>\n<li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li>\n</ul>\n</li>\n<li>自定义事件：\n<ul>\n<li>事件名是任意名称</li>\n<li><strong style=\"color:red\">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--在父组件中，给子组件绑定自定义事件：--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">@send-toy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!--注意区分原生事件与自定义事件中的$event--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>测试<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//子组件中，触发事件：</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span> 具体数据<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-3-【mitt】\"><a class=\"headerlink\" href=\"#6-3-【mitt】\"></a>6.3. 【mitt】</h2>\n<p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p>\n<p>安装<code>mitt</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mitt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>新建文件：<code>src\\utils\\emitter.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入mitt </span>\n<span class=\"token keyword\">import</span> mitt <span class=\"token keyword\">from</span> <span class=\"token string\">\"mitt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建emitter</span>\n<span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token function\">mitt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\n  // 绑定事件\n  emitter.on('abc',(value)=>&#123;\n    console.log('abc事件被触发',value)\n  &#125;)\n  emitter.on('xyz',(value)=>&#123;\n    console.log('xyz事件被触发',value)\n  &#125;)\n\n  setInterval(() => &#123;\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  &#125;, 1000);\n\n  setTimeout(() => &#123;\n    // 清理事件\n    emitter.all.clear()\n  &#125;, 3000); \n*/</span>\n\n<span class=\"token comment\">// 创建并暴露mitt</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emitter<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onUnmounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 绑定事件</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy事件被触发'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 解绑事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>【第三步】：提供数据的组件，在合适的时候触发事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendToy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 触发事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span>toy<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p>\n<h2 id=\"6-4-【v-model】\"><a class=\"headerlink\" href=\"#6-4-【v-model】\"></a>6.4.【v-model】</h2>\n<ol>\n<li>\n<p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p>\n</li>\n<li>\n<p>前序知识 —— <code>v-model</code>的本质</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 使用v-model指令 --&gt;\n&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;userName&quot;&gt;\n\n&lt;!-- v-model的本质是下面这行代码 --&gt;\n&lt;input \n  type&#x3D;&quot;text&quot; \n  :value&#x3D;&quot;userName&quot; \n  @input&#x3D;&quot;userName &#x3D;(&lt;HTMLInputElement&gt;$event.target).value&quot;\n&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 组件标签上使用v-model指令 --&gt;\n&lt;AtguiguInput v-model&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 组件标签上v-model的本质 --&gt;\n&lt;AtguiguInput :modelValue&#x3D;&quot;userName&quot; @update:model-value&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;\n\t\t&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;modelValue&quot; \n       @input&#x3D;&quot;emit(&#39;update:model-value&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;modelValue&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:model-value&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>也可以更换<code>value</code>，例如改成<code>abc</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 也可以更换value，例如改成abc--&gt;\n&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 上面代码的本质如下 --&gt;\n&lt;AtguiguInput :abc&#x3D;&quot;userName&quot; @update:abc&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;abc&quot; \n       @input&#x3D;&quot;emit(&#39;update:abc&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;abc&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:abc&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot; v-model:xyz&#x3D;&quot;password&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-5-【-attrs-】\"><a class=\"headerlink\" href=\"#6-5-【-attrs-】\"></a>6.5.【$attrs 】</h2>\n<ol>\n<li>\n<p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p>\n</li>\n<li>\n<p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p>\n<blockquote>\n<p>注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p>\n</blockquote>\n</li>\n</ol>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n\t\t&lt;Child :a&#x3D;&quot;a&quot; :b&#x3D;&quot;b&quot; :c&#x3D;&quot;c&quot; :d&#x3D;&quot;d&quot; v-bind&#x3D;&quot;&#123;x:100,y:200&#125;&quot; :updateA&#x3D;&quot;updateA&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tlet a &#x3D; ref(1)\n\tlet b &#x3D; ref(2)\n\tlet c &#x3D; ref(3)\n\tlet d &#x3D; ref(4)\n\n\tfunction updateA(value)&#123;\n\t\ta.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;child&quot;&gt;\n\t\t&lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;GrandChild v-bind&#x3D;&quot;$attrs&quot;&#x2F;&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport GrandChild from &#39;.&#x2F;GrandChild.vue&#39;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>孙组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;grand-child&quot;&gt;\n\t\t&lt;h3&gt;孙组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;updateA(666)&quot;&gt;点我更新A&lt;&#x2F;button&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n\tdefineProps([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;x&#39;,&#39;y&#39;,&#39;updateA&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-6-【-refs、-parent】\"><a class=\"headerlink\" href=\"#6-6-【-refs、-parent】\"></a>6.6. 【$refs、$parent】</h2>\n<ol>\n<li>\n<p>概述：</p>\n<ul>\n<li><code>$refs</code>用于 ：<strong>父→子。</strong></li>\n<li><code>$parent</code>用于：<strong>子→父。</strong></li>\n</ul>\n</li>\n<li>\n<p>原理如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$refs</code></td>\n<td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td>\n</tr>\n<tr>\n<td><code>$parent</code></td>\n<td>值为对象，当前组件的父组件实例对象。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"6-7-【provide、inject】\"><a class=\"headerlink\" href=\"#6-7-【provide、inject】\"></a>6.7. 【provide、inject】</h2>\n<ol>\n<li>\n<p>概述：实现<strong>祖孙组件</strong>直接通信</p>\n</li>\n<li>\n<p>具体使用：</p>\n<ul>\n<li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li>\n<li>在后代组件中通过<code>inject</code>配置来声明接收数据</li>\n</ul>\n</li>\n<li>\n<p>具体编码：</p>\n<p>【第一步】父组件中，使用<code>provide</code>提供数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;money +&#x3D; 1&quot;&gt;资产+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;car.price +&#x3D; 1&quot;&gt;汽车价格+1&lt;&#x2F;button&gt;\n    &lt;Child&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n  import Child from &#39;.&#x2F;Child.vue&#39;\n  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;\n  &#x2F;&#x2F; 数据\n  let money &#x3D; ref(100)\n  let car &#x3D; reactive(&#123;\n    brand:&#39;奔驰&#39;,\n    price:100\n  &#125;)\n  &#x2F;&#x2F; 用于更新money的方法\n  function updateMoney(value:number)&#123;\n    money.value +&#x3D; value\n  &#125;\n  &#x2F;&#x2F; 提供数据\n  provide(&#39;moneyContext&#39;,&#123;money,updateMoney&#125;)\n  provide(&#39;car&#39;,car)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p>\n</blockquote>\n<p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;grand-child&quot;&gt;\n    &lt;h3&gt;我是孙组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;updateMoney(6)&quot;&gt;点我&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n  import &#123; inject &#125; from &#39;vue&#39;;\n  &#x2F;&#x2F; 注入数据\n let &#123;money,updateMoney&#125; &#x3D; inject(&#39;moneyContext&#39;,&#123;money:0,updateMoney:(x:number)&#x3D;&gt;&#123;&#125;&#125;)\n  let car &#x3D; inject(&#39;car&#39;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-8-【pinia】\"><a class=\"headerlink\" href=\"#6-8-【pinia】\"></a>6.8. 【pinia】</h2>\n<p>参考之前<code>pinia</code>部分的讲解</p>\n<h2 id=\"6-9-【slot】\"><a class=\"headerlink\" href=\"#6-9-【slot】\"></a>6.9. 【slot】</h2>\n<h3 id=\"1-默认插槽\"><a class=\"headerlink\" href=\"#1-默认插槽\"></a>1. 默认插槽</h3>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232099.webp\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n          &lt;&#x2F;ul&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;!-- 默认插槽 --&gt;\n            &lt;slot&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-具名插槽\"><a class=\"headerlink\" href=\"#2-具名插槽\"></a>2. 具名插槽</h3>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;template v-slot:s1&gt;\n            &lt;ul&gt;\n              &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n            &lt;&#x2F;ul&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template #s2&gt;\n            &lt;a href&#x3D;&quot;&quot;&gt;更多&lt;&#x2F;a&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;slot name&#x3D;&quot;s1&quot;&gt;&lt;&#x2F;slot&gt;\n            &lt;slot name&#x3D;&quot;s2&quot;&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-作用域插槽\"><a class=\"headerlink\" href=\"#3-作用域插槽\"></a>3. 作用域插槽</h3>\n<ol>\n<li>\n<p>理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n      &lt;Game v-slot&#x3D;&quot;params&quot;&gt;\n      &lt;!-- &lt;Game v-slot:default&#x3D;&quot;params&quot;&gt; --&gt;\n      &lt;!-- &lt;Game #default&#x3D;&quot;params&quot;&gt; --&gt;\n        &lt;ul&gt;\n          &lt;li v-for&#x3D;&quot;g in params.games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n      &lt;&#x2F;Game&gt;\n\n子组件中：\n      &lt;template&gt;\n        &lt;div class&#x3D;&quot;category&quot;&gt;\n          &lt;h2&gt;今日游戏榜单&lt;&#x2F;h2&gt;\n          &lt;slot :games&#x3D;&quot;games&quot; a&#x3D;&quot;哈哈&quot;&gt;&lt;&#x2F;slot&gt;\n        &lt;&#x2F;div&gt;\n      &lt;&#x2F;template&gt;\n\n      &lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Category&quot;&gt;\n        import &#123;reactive&#125; from &#39;vue&#39;\n        let games &#x3D; reactive([\n          &#123;id:&#39;asgdytsa01&#39;,name:&#39;英雄联盟&#39;&#125;,\n          &#123;id:&#39;asgdytsa02&#39;,name:&#39;王者荣耀&#39;&#125;,\n          &#123;id:&#39;asgdytsa03&#39;,name:&#39;红色警戒&#39;&#125;,\n          &#123;id:&#39;asgdytsa04&#39;,name:&#39;斗罗大陆&#39;&#125;\n        ])\n      &lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"7-其它-API\"><a class=\"headerlink\" href=\"#7-其它-API\"></a>7. 其它 API</h1>\n<h2 id=\"7-1-【shallowRef-与-shallowReactive-】\"><a class=\"headerlink\" href=\"#7-1-【shallowRef-与-shallowReactive-】\"></a>7.1.【shallowRef 与 shallowReactive 】</h2>\n<h3 id=\"shallowRef\"><a class=\"headerlink\" href=\"#shallowRef\"></a><code>shallowRef</code></h3>\n<ol>\n<li>\n<p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myVar <span class=\"token operator\">=</span> <span class=\"token function\">shallowRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p>\n</li>\n</ol>\n<h3 id=\"shallowReactive\"><a class=\"headerlink\" href=\"#shallowReactive\"></a><code>shallowReactive</code></h3>\n<ol>\n<li>\n<p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token function\">shallowReactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h3>\n<blockquote>\n<p>通过使用 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowref\"><code>shallowRef()</code></a> 和 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive\"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p>\n</blockquote>\n<h2 id=\"7-2-【readonly-与-shallowReadonly】\"><a class=\"headerlink\" href=\"#7-2-【readonly-与-shallowReadonly】\"></a>7.2.【readonly 与 shallowReadonly】</h2>\n<h3 id=\"readonly\"><a class=\"headerlink\" href=\"#readonly\"></a><strong><code>readonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：用于创建一个对象的深只读副本。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> readOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">readonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>对象的所有嵌套属性都将变为只读。</li>\n<li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li>\n</ul>\n</li>\n<li>\n<p>应用场景：</p>\n<ul>\n<li>创建不可变的状态快照。</li>\n<li>保护全局状态或配置不被修改。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"shallowReadonly\"><a class=\"headerlink\" href=\"#shallowReadonly\"></a><strong><code>shallowReadonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shallowReadOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">shallowReadonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>\n<p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p>\n</li>\n<li>\n<p>适用于只需保护对象顶层属性的场景。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-3-【toRaw-与-markRaw】\"><a class=\"headerlink\" href=\"#7-3-【toRaw-与-markRaw】\"></a>7.3.【toRaw 与 markRaw】</h2>\n<h3 id=\"toRaw\"><a class=\"headerlink\" href=\"#toRaw\"></a><code>toRaw</code></h3>\n<ol>\n<li>\n<p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p>\n<blockquote>\n<p>官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p>\n</blockquote>\n<blockquote>\n<p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p>\n</blockquote>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span>toRaw<span class=\"token punctuation\">,</span>markRaw<span class=\"token punctuation\">,</span>isReactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* toRaw */</span>\n<span class=\"token comment\">// 响应式对象</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'tony'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 原始对象</span>\n<span class=\"token keyword\">let</span> rawPerson <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citysd <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>rawPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"markRaw\"><a class=\"headerlink\" href=\"#markRaw\"></a><code>markRaw</code></h3>\n<ol>\n<li>\n<p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p>\n<blockquote>\n<p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p>\n</blockquote>\n</li>\n<li>\n<p>编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citys <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"7-4-【customRef】\"><a class=\"headerlink\" href=\"#7-4-【customRef】\"></a>7.4.【customRef】</h2>\n<p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p>\n<p>实现防抖效果（<code>useSumRef.ts</code>）：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>customRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>initValue<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>delay<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span>trigger<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> timer<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span>\n        <span class=\"token keyword\">return</span> initValue\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          initValue <span class=\"token operator\">=</span> value\n          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通知Vue数据msg变化了</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>msg<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>组件中使用：</p>\n<h1 id=\"8-Vue3新组件\"><a class=\"headerlink\" href=\"#8-Vue3新组件\"></a>8. Vue3新组件</h1>\n<h2 id=\"8-1-【Teleport】\"><a class=\"headerlink\" href=\"#8-1-【Teleport】\"></a>8.1. 【Teleport】</h2>\n<ul>\n<li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>teleport</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>body<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>我是一个弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我是弹窗中的一些内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow = false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>关闭弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>teleport</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-2-【Suspense】\"><a class=\"headerlink\" href=\"#8-2-【Suspense】\"></a>8.2. 【Suspense】</h2>\n<ul>\n<li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li>\n<li>使用步骤：\n<ul>\n<li>异步引入组件</li>\n<li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineAsyncComponent<span class=\"token punctuation\">,</span>Suspense <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">defineAsyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Child.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;div class&#x3D;&quot;app&quot;&gt;\n        &lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n        &lt;Suspense&gt;\n          &lt;template v-slot:default&gt;\n            &lt;Child&#x2F;&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template v-slot:fallback&gt;\n            &lt;h3&gt;加载中.......&lt;&#x2F;h3&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Suspense&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-3-【全局API转移到应用对象】\"><a class=\"headerlink\" href=\"#8-3-【全局API转移到应用对象】\"></a>8.3.【全局API转移到应用对象】</h2>\n<ul>\n<li><code>app.component</code></li>\n<li><code>app.config</code></li>\n<li><code>app.directive</code></li>\n<li><code>app.mount</code></li>\n<li><code>app.unmount</code></li>\n<li><code>app.use</code></li>\n</ul>\n<h2 id=\"8-4-【其他】\"><a class=\"headerlink\" href=\"#8-4-【其他】\"></a>8.4.【其他】</h2>\n<ul>\n<li>\n<p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p>\n</li>\n<li>\n<p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p>\n</li>\n<li>\n<p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p>\n</li>\n<li>\n<p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p>\n</li>\n<li>\n<p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p>\n</li>\n<li>\n<p>移除了过滤器 <code>filter</code>。</p>\n</li>\n<li>\n<p>移除了<code>$children</code> 实例 <code>propert</code>。</p>\n<p>…</p>\n</li>\n</ul>\n<hr>\n<p><strong>本文内容来源于尚硅谷Vue.js教程，原文地址：<a href=\"http://www.atguigu.com/video/284/\">尚硅谷Vue教程</a>。感谢尚硅谷提供的优秀文档资源。</strong></p>\n",
            "tags": [
                "Vue",
                "前端"
            ]
        }
    ]
}