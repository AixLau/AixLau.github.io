{
    "version": "https://jsonfeed.org/version/1",
    "title": "陆时忤的博客 • All posts by \"linux\" tag",
    "description": "要再见 不要再见",
    "home_page_url": "https://blog.aixcc.top",
    "items": [
        {
            "id": "https://blog.aixcc.top/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/",
            "url": "https://blog.aixcc.top/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/",
            "title": "Linux安装MySQL",
            "date_published": "2024-06-25T04:18:14.000Z",
            "content_html": "<h1 id=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"><a class=\"headerlink\" href=\"#如何在Ubuntu上安装和配置MySQL并允许远程访问\"></a>如何在Ubuntu上安装和配置MySQL并允许远程访问</h1>\n<p>在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。</p>\n<h2 id=\"步骤1：更新包列表并安装MySQL服务器\"><a class=\"headerlink\" href=\"#步骤1：更新包列表并安装MySQL服务器\"></a>步骤1：更新包列表并安装MySQL服务器</h2>\n<p>首先，确保你的包列表是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后安装MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mysql-server-8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤2：检查MySQL服务状态并启用MySQL服务\"><a class=\"headerlink\" href=\"#步骤2：检查MySQL服务状态并启用MySQL服务\"></a>步骤2：检查MySQL服务状态并启用MySQL服务</h2>\n<p>检查MySQL服务是否正在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>确保MySQL服务在系统启动时自动启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤3：运行安全安装脚本\"><a class=\"headerlink\" href=\"#步骤3：运行安全安装脚本\"></a>步骤3：运行安全安装脚本</h2>\n<p>MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在提示中，你将需要：</p>\n<ul>\n<li>选择密码规则</li>\n<li>删除匿名用户</li>\n<li>禁用远程root登录</li>\n<li>删除测试数据库和表</li>\n</ul>\n<h2 id=\"步骤4：修改MySQL配置文件以允许远程连接\"><a class=\"headerlink\" href=\"#步骤4：修改MySQL配置文件以允许远程连接\"></a>步骤4：修改MySQL配置文件以允许远程连接</h2>\n<p>打开MySQL配置文件<code>mysqld.cnf</code>，通常位于<code>/etc/mysql/mysql.conf.d/</code>目录中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>找到以下行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bind-address &#x3D; 127.0.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将其注释掉或改为<code>0.0.0.0</code>，使MySQL监听所有网络接口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># bind-address &#x3D; 127.0.0.1\nbind-address &#x3D; 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>保存配置文件并退出编辑器。</p>\n<h2 id=\"步骤5：重启MySQL服务\"><a class=\"headerlink\" href=\"#步骤5：重启MySQL服务\"></a>步骤5：重启MySQL服务</h2>\n<p>重启MySQL服务以使更改生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤6：创建可以远程访问的用户\"><a class=\"headerlink\" href=\"#步骤6：创建可以远程访问的用户\"></a>步骤6：创建可以远程访问的用户</h2>\n<p>登录到MySQL命令行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'yourpassword'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>解释：</strong></p>\n<ul>\n<li><strong>GRANT ALL PRIVILEGES</strong>：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。</li>\n<li><strong>ON</strong>：授予权限的范围。<code>*.*</code>表示所有数据库和所有表。</li>\n<li><strong>TO</strong>：指定权限接收者。<code>'yourusername'</code>是用户名，<code>'%'</code>是主机名通配符，表示允许从任何IP地址连接的用户。</li>\n<li><strong>WITH GRANT OPTION</strong>：允许用户将他自己拥有的权限授予其他用户。</li>\n</ul>\n<h2 id=\"步骤7：配置防火墙\"><a class=\"headerlink\" href=\"#步骤7：配置防火墙\"></a>步骤7：配置防火墙</h2>\n<p>确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3306</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤8：验证远程连接\"><a class=\"headerlink\" href=\"#步骤8：验证远程连接\"></a>步骤8：验证远程连接</h2>\n<p>在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> yourusername <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-h</span> your_server_ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"其他操作\"><a class=\"headerlink\" href=\"#其他操作\"></a>其他操作</h2>\n<h3 id=\"删除某些权限或用户\"><a class=\"headerlink\" href=\"#删除某些权限或用户\"></a>删除某些权限或用户</h3>\n<p>如果你想删除某些权限，或者从特定数据库中删除权限，可以使用<code>REVOKE</code>命令。例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span> <span class=\"token keyword\">FROM</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查看某个用户的当前权限\"><a class=\"headerlink\" href=\"#查看某个用户的当前权限\"></a>查看某个用户的当前权限</h3>\n<p>如果你想查看某个用户的当前权限，可以使用以下命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！</p>\n",
            "tags": [
                "MySQL",
                "Linux"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/",
            "url": "https://blog.aixcc.top/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/",
            "title": "自动续签证书",
            "date_published": "2024-06-24T12:34:50.000Z",
            "content_html": "<h1 id=\"使用-acme-sh-安装和管理-SSL-证书\"><a class=\"headerlink\" href=\"#使用-acme-sh-安装和管理-SSL-证书\"></a>使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书</h1>\n<p>本文将介绍如何使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书。<a href=\"http://acme.sh\">acme.sh</a> 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。</p>\n<h2 id=\"下载并安装-acme-sh\"><a class=\"headerlink\" href=\"#下载并安装-acme-sh\"></a>下载并安装 <a href=\"http://acme.sh\">acme.sh</a></h2>\n<p>首先，下载并安装 <a href=\"http://acme.sh\">acme.sh</a>。在终端中执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">curl</span> https://get.acme.sh <span class=\"token operator\">|</span> <span class=\"token function\">sh</span> <span class=\"token parameter variable\">-s</span> <span class=\"token assign-left variable\">email</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>youremail@domain.com<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>安装过程会执行以下几步：</p>\n<ol>\n<li>\n<p>将 <a href=\"http://acme.sh\">acme.sh</a> 安装到你的 <strong>home</strong> 目录中：</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.acme.sh&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>创建一个 Shell 别名，方便使用。在 <code>.bashrc</code> 中添加：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">acme.sh</span><span class=\"token operator\">=~</span>/.acme.sh/acme.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。</p>\n</li>\n</ol>\n<p>更高级的安装选项请参考：<a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\">acme.sh 安装文档</a></p>\n<p><strong>注意</strong>：安装过程不会影响现有系统的运行和文件，所有修改都位于 <code>~/.acme.sh/</code> 目录中。</p>\n<h2 id=\"使用-DNS-验证方式生成-SSL-证书\"><a class=\"headerlink\" href=\"#使用-DNS-验证方式生成-SSL-证书\"></a>使用 DNS 验证方式生成 SSL 证书</h2>\n<p><a href=\"http://acme.sh\">acme.sh</a> 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。</p>\n<h3 id=\"手动-DNS-验证\"><a class=\"headerlink\" href=\"#手动-DNS-验证\"></a>手动 DNS 验证</h3>\n<p>手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。</p>\n<ol>\n<li>\n<p>运行以下命令，手动在域名上添加一条 TXT 解析记录：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--issue</span> <span class=\"token parameter variable\">--dns</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><a href=\"http://acme.sh\">acme.sh</a> 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。</p>\n</li>\n<li>\n<p>等待解析完成后，重新生成证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--renew</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>安装生成的证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh --install-cert <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--key-file /opt/nginx/key.pem  <span class=\"token punctuation\">\\</span>\n--fullchain-file /opt/nginx/cert.pem <span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>通过以上步骤，你已经成功使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 <a href=\"https://github.com/Neilpang/acme.sh/wiki/dnsapi\">acme.sh 的 DNS API 支持文档</a>。</p>\n<p>希望本文对你有所帮助！</p>\n",
            "tags": [
                "Linux",
                "SSL",
                "域名"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/",
            "url": "https://blog.aixcc.top/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/",
            "title": "服务器安全设置",
            "date_published": "2024-06-24T11:14:28.000Z",
            "content_html": "<h3 id=\"1-更新系统\"><a class=\"headerlink\" href=\"#1-更新系统\"></a>1. 更新系统</h3>\n<p>首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装防火墙\"><a class=\"headerlink\" href=\"#2-安装防火墙\"></a>2. 安装防火墙</h3>\n<p>Ubuntu默认带有<code>ufw</code>（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：</p>\n<p>启用<code>ufw</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，开放必要的端口。例如，对于SSH服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">80</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">443</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"3-配置SSH\"><a class=\"headerlink\" href=\"#3-配置SSH\"></a>3. 配置SSH</h3>\n<p>SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。</p>\n<h4 id=\"生成SSH密钥对\"><a class=\"headerlink\" href=\"#生成SSH密钥对\"></a>生成SSH密钥对</h4>\n<p>在客户端机器上，运行以下命令生成SSH密钥对：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"将公钥添加到服务器\"><a class=\"headerlink\" href=\"#将公钥添加到服务器\"></a>将公钥添加到服务器</h4>\n<p>使用<code>ssh-copy-id</code>命令将公钥复制到服务器上：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub 用户名@服务器IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"禁用密码认证\"><a class=\"headerlink\" href=\"#禁用密码认证\"></a>禁用密码认证</h4>\n<p>编辑服务器上的<code>/etc/ssh/sshd_config</code>文件，设置以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PasswordAuthentication no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后重启SSH服务以应用更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-配置Fail2Ban\"><a class=\"headerlink\" href=\"#4-配置Fail2Ban\"></a>4. 配置Fail2Ban</h3>\n<p>Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。</p>\n<h4 id=\"安装Fail2Ban\"><a class=\"headerlink\" href=\"#安装Fail2Ban\"></a>安装Fail2Ban</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"配置基本保护\"><a class=\"headerlink\" href=\"#配置基本保护\"></a>配置基本保护</h4>\n<p>创建或编辑<code>/etc/fail2ban/jail.local</code>文件，为SSH服务添加基本保护：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">DEFAULT</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># 全局设置</span>\n<span class=\"token key attr-name\">bantime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">1h        # 封禁时间：1小时</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">10m      # 在此时间内连续失败的尝试视为攻击</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5        # 允许失败次数</span>\n<span class=\"token key attr-name\">ignoreip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1/8 # 忽略本地IP地址的封禁</span>\n\n<span class=\"token comment\"># 指定要使用的日志文件</span>\n<span class=\"token key attr-name\">backend</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto      # 自动确定日志文件类型</span>\n<span class=\"token key attr-name\">usedns</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">warn       # 使用DNS解析</span>\n<span class=\"token key attr-name\">logencoding</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto  # 日志文件的编码</span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">false     # 默认不启用任何规则</span>\n\n<span class=\"token comment\"># SSH 服务</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">sshd</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">ssh</span>\n<span class=\"token key attr-name\">filter</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">sshd</span>\n<span class=\"token key attr-name\">logpath</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/var/log/auth.log</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">3</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5m</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重启Fail2Ban服务以应用配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart fail2ban\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<hr>\n<p>通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/",
            "url": "https://blog.aixcc.top/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/",
            "title": "Vaultwarden搭建",
            "date_published": "2024-06-24T08:56:37.000Z",
            "content_html": "<h1 id=\"如何搭建-Vaultwarden-服务器：一步步教程\"><a class=\"headerlink\" href=\"#如何搭建-Vaultwarden-服务器：一步步教程\"></a>如何搭建 Vaultwarden 服务器：一步步教程</h1>\n<p>Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。</p>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在开始之前，确保你的系统已经安装了 <strong>Docker</strong> 和 <strong>Docker Compose</strong>。</p>\n<h2 id=\"步骤-1-创建数据存储目录\"><a class=\"headerlink\" href=\"#步骤-1-创建数据存储目录\"></a>步骤 1: 创建数据存储目录</h2>\n<p>首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/docker_data/vaultwarden\n<span class=\"token builtin class-name\">cd</span> /opt/docker_data/vaultwarden<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-2-创建-Docker-Compose-文件\"><a class=\"headerlink\" href=\"#步骤-2-创建-Docker-Compose-文件\"></a>步骤 2: 创建 Docker Compose 文件</h2>\n<p>接下来，我们将创建一个 <code>docker-compose.yml</code> 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> docker-compose.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，将以下配置粘贴到 <code>docker-compose.yml</code> 文件中：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">vaultwarden</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> vaultwarden\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> vaultwarden/server<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./data/<span class=\"token punctuation\">:</span>/data/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 8080<span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DOMAIN=https<span class=\"token punctuation\">:</span>//subdomain.yourdomain.com <span class=\"token comment\"># 关联的域名。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># 最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># admin最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_SESSION_LIFETIME=20 <span class=\"token comment\"># 会话持续时间</span>\n      <span class=\"token punctuation\">-</span> ADMIN_TOKEN=YourReallyStrongAdminTokenHere <span class=\"token comment\"># 管理员面板的令牌</span>\n      <span class=\"token punctuation\">-</span> SENDS_ALLOWED=true  <span class=\"token comment\"># 是否允许用户创建Bitwarden发送</span>\n      <span class=\"token punctuation\">-</span> EMERGENCY_ACCESS_ALLOWED=true <span class=\"token comment\"># 控制用户是否可以启用紧急访问其账户的权限</span>\n      <span class=\"token punctuation\">-</span> WEB_VAULT_ENABLED=true <span class=\"token comment\"># 网络保险库是否可访问。</span>\n      <span class=\"token punctuation\">-</span> SIGNUPS_ALLOWED=true <span class=\"token comment\"># 新用户是否可以在没有邀请的情况下注册账户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-3-启动-Vaultwarden\"><a class=\"headerlink\" href=\"#步骤-3-启动-Vaultwarden\"></a>步骤 3: 启动 Vaultwarden</h2>\n<p>配置好 <code>docker-compose.yml</code> 文件后，使用以下命令启动 Vaultwarden 服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个命令会在后台启动 Vaultwarden 服务。可以通过访问 <code>http://localhost:8080</code> 或在配置文件中指定的域名来访问 Vaultwarden。</p>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！</p>\n",
            "tags": [
                "Linux"
            ]
        }
    ]
}