{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/solitude/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/404.avif","path":"img/404.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/avatar.avif","path":"img/avatar.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/black.gif","path":"img/black.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/cover.png","path":"img/cover.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/default.avif","path":"img/default.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/error_load.avif","path":"img/error_load.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/flower.gif","path":"img/flower.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/happy-sticker.avif","path":"img/happy-sticker.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/he.gif","path":"img/he.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/jinkesi.jpg","path":"img/jinkesi.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/loading.avif","path":"img/loading.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/map-dark.png","path":"img/map-dark.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/map-light.png","path":"img/map-light.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/recent_c.avif","path":"img/recent_c.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/music.js","path":"js/music.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/right_menu.js","path":"js/right_menu.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/right_menu.js.back","path":"js/right_menu.js.back","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/third_party/snackbar.min.css","path":"css/third_party/snackbar.min.css","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/third_party/tianli_talk.styl","path":"css/third_party/tianli_talk.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/favicon.ico","path":"img/pwa/favicon.ico","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/covercolor/api.js","path":"js/covercolor/api.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/covercolor/local.js","path":"js/covercolor/local.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/search/local.js","path":"js/search/local.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/barrage.min.js","path":"js/third_party/barrage.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/efu_ai.min.js","path":"js/third_party/efu_ai.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/envelope.min.js","path":"js/third_party/envelope.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/universe.min.js","path":"js/third_party/universe.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/waterfall.min.js","path":"js/third_party/waterfall.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"bad063dcd8d279ba1cfa9522af8dde7f76983e13","modified":1718702185275},{"_id":"source/_data/about.yaml","hash":"1366b4223646f6d48b7c7ba34107984e88cacc86","modified":1718703159258},{"_id":"source/_posts/.DS_Store","hash":"e5540e7d0a586cc5f57be8bc645996af2be1beda","modified":1718615054797},{"_id":"source/_posts/Hexo备份.md","hash":"3259c95026901deffbcfaa6fa9d8594999938205","modified":1718610482441},{"_id":"source/_posts/使用AList定时备份服务器文件.md","hash":"8dca74dbf2adb6e1c046a5c5a97fab85bb1675fe","modified":1718700930924},{"_id":"source/_posts/安装部署Hexo.md","hash":"c5f054b372ab8d397f46cd45eabed97a18fa7ef6","modified":1718610482441},{"_id":"source/about/index.md","hash":"fed00b9c89122caac554b3996b6fab369dedeb36","modified":1718702191510},{"_id":"source/message/index.md","hash":"28b2fef1886c8833aff0fe083ec6b21448b60f5a","modified":1718706589383},{"_id":"themes/solitude/.DS_Store","hash":"ec8ca01d9263216ec2731b4ff82ef93c79598b52","modified":1718702505932},{"_id":"themes/solitude/_config.yml","hash":"08157bbf5f9f02a2c28a2e78c1074fcfa2395897","modified":1718524309955},{"_id":"themes/solitude/package.json","hash":"fbd7cfc6491170eebe728da8b5b0e3b39a42233f","modified":1718524309977},{"_id":"themes/solitude/plugins.yml","hash":"b27234a324acb06548a7d5af684d386fab525e9b","modified":1718524309977},{"_id":"themes/solitude/languages/default.yml","hash":"b735a1cb8cf9cec32ea5b57fd9d1d1b48a04f395","modified":1718524309955},{"_id":"themes/solitude/languages/en.yml","hash":"d1cbb92bc6356141b680142f055274643d907022","modified":1718524309955},{"_id":"themes/solitude/languages/zh-CN.yml","hash":"355642bde520375afad47eb34fc8114b8b28bec9","modified":1718546938639},{"_id":"themes/solitude/languages/zh-TW.yml","hash":"b5f1b044aa3c305a3d31ca776f88eed2793efd36","modified":1718524309955},{"_id":"themes/solitude/layout/.DS_Store","hash":"a5285df5fa609da7e93101797f29279436a751af","modified":1718615930718},{"_id":"themes/solitude/layout/404.pug","hash":"2f01681a8c46ecea5ff1168efae39d17480f96a3","modified":1718524309956},{"_id":"themes/solitude/layout/archive.pug","hash":"0630a92b8f16139c135aac1b14403a620a52654c","modified":1718524309956},{"_id":"themes/solitude/layout/category.pug","hash":"482f1971cf5221250b53c89a1cfb16317f6c9d59","modified":1718524309956},{"_id":"themes/solitude/layout/index.pug","hash":"a190b82319ddbbcba7c6001238b3e82aaf72f350","modified":1718524309976},{"_id":"themes/solitude/layout/post.pug","hash":"b4cb9aa8c1200d8c2b9547ee2e11cd30edd22915","modified":1718524309977},{"_id":"themes/solitude/layout/page.pug","hash":"003b4acdd4cc47e8365cf296d788f977a0d4edc8","modified":1718524309976},{"_id":"themes/solitude/layout/tag.pug","hash":"21d19688b557dda1c9e26c488f7b3b00bbef8071","modified":1718524309977},{"_id":"themes/solitude/source/.DS_Store","hash":"25dc7c2bba4f56075327cebfcdb4bb3bb5751b2c","modified":1718702505932},{"_id":"themes/solitude/layout/includes/console.pug","hash":"fb12256843440a776eaaf5cd254042dd1f1284ae","modified":1718524309956},{"_id":"themes/solitude/layout/includes/.DS_Store","hash":"ea0ec669410d4927bbe638f3a37d212a63b81af3","modified":1718615937008},{"_id":"themes/solitude/scripts/.DS_Store","hash":"b0fe9d832d88d49a14b90b94ee49e48995dcb96a","modified":1718615982289},{"_id":"themes/solitude/layout/includes/footer.pug","hash":"8f3e2f50d961511dc36da4b54dce1193edcebe8d","modified":1718524309957},{"_id":"themes/solitude/layout/includes/keyboard.pug","hash":"4958dd9232c790c5aa4156e0fdcd4cdf72bfc7b6","modified":1718524309958},{"_id":"themes/solitude/layout/includes/loading.pug","hash":"e2c7004a919d3c7c5e72d67818a66dfbebb3912e","modified":1718524309959},{"_id":"themes/solitude/layout/includes/header.pug","hash":"426fe2e61a12c77c317d11197a3ce7d7d8bb602d","modified":1718524309958},{"_id":"themes/solitude/layout/includes/head.pug","hash":"ed6afa31ade7d95e143268034108138bf2e939fd","modified":1718524309957},{"_id":"themes/solitude/layout/includes/layout.pug","hash":"6fb4feec0a3fa2345631367532332ce25a838ec8","modified":1718524309959},{"_id":"themes/solitude/layout/includes/nav.pug","hash":"94bf062f4eff029f6b482e17ef425a06cd535ddf","modified":1718524309960},{"_id":"themes/solitude/layout/includes/rightmenu.pug","hash":"3ffe6efc73800d77752e7c8845705853580c2cbd","modified":1718547733085},{"_id":"themes/solitude/layout/includes/sidebar.pug","hash":"375d6aa9cc7324638796a83fe5c877a2d006a1bf","modified":1718524309962},{"_id":"themes/solitude/scripts/event/init.js","hash":"078f872a8fb0f373623bd1211ac5064e3d4c21fd","modified":1718524309978},{"_id":"themes/solitude/scripts/event/cdn.js","hash":"c7c8b923d6b634ccf4e9db07ad0fc24001a05859","modified":1718524309978},{"_id":"themes/solitude/scripts/event/merge_config.js","hash":"da33d2393956a56c6ecd8d052458d5dd67bfbc5e","modified":1718524309978},{"_id":"themes/solitude/scripts/event/welcome.js","hash":"06752fe1fc9d5be212c236f68df3d2bc9379c02c","modified":1718524309979},{"_id":"themes/solitude/scripts/event/page.js","hash":"20cf3726cc7bb01b1cd58c85148ec1cd1de258c8","modified":1718524309978},{"_id":"themes/solitude/scripts/filter/checkThemeConfig.js","hash":"13d0e44048caedd9474729a16a72abe054367e57","modified":1718524309979},{"_id":"themes/solitude/scripts/filter/comment.js","hash":"047365413fdc87b97be09de76cdbf090751be2b6","modified":1718524309979},{"_id":"themes/solitude/scripts/filter/default.js","hash":"bfad3ab780b2cb3f9d43172a96d4ae81dab7f32d","modified":1718524309979},{"_id":"themes/solitude/scripts/filter/lazyload.js","hash":"5ad9d91958901e43d65f5aad12d5b617095bf74d","modified":1718524309980},{"_id":"themes/solitude/scripts/filter/post_image.js","hash":"fd6cc64c6875d8f9ba9a8b0a9366adfbd6ca364d","modified":1718524309980},{"_id":"themes/solitude/scripts/filter/randomPosts.js","hash":"2d2976d905c0b78407e6a297fa9cd373cd60107e","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/getArchiveLength.js","hash":"5b65fff0da05e6b3f5a33558fdb2ad5769ade2c6","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/inject_head_js.js","hash":"04df621b0cac394f1d851856fc4d84dded4eeea4","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/page.js","hash":"d0a5b107157ee05783b0a3f66f4996aef8281f54","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/related_post.js","hash":"77d57e69ada5cfaab14a66914ebe58122ea29a31","modified":1718524309981},{"_id":"themes/solitude/scripts/helper/stylus.js","hash":"24fa5ba297f4eff006fa7a8d9a10ec58628a8c91","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/button.js","hash":"ceb4f6c59dd4bdb486b7becc8f103e3499cd20cd","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/bvideo.js","hash":"23b2ee01d3c8842b566b8a031c0b4e34dfbbba4c","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/checkbox.js","hash":"e39ad4654c5f8fe7d7ddb8bf08405f473612cb9f","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/fold.js","hash":"57e1e9d1e0ca4afbb2d61e130505e75ec7a41b2b","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/gallery.js","hash":"4f24dc82873e3e27725bc7d52a50c13e273c4b27","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/image.js","hash":"4b33e20b3cc3bf86be1bb5c4ecba897d20fc8ef6","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/inline-image.js","hash":"9c83a721de318741ac46820e3a2161b2bdc04d4f","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/label.js","hash":"b018b96c43ccb62c307fec3694411c1adedd1a02","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/link.js","hash":"203b0b0de0942a3181362fdef09572e9da236e33","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/media.js","hash":"07a16f310cc41cb0c66396a508c7ed6ca651132e","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/mermaid.js","hash":"37a95d6c4392ff6c24ff757fbbc3cdf7853c2096","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/note.js","hash":"b5d5b15d8a5f95722abe46370e9b907276b8d739","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/span.js","hash":"07881e3c8f81458422561612b85fb349a848dc5c","modified":1718524309983},{"_id":"themes/solitude/scripts/tags/tabs.js","hash":"21ea420331b4e0d39aec6dc387d6d1f40c5f8f39","modified":1718524309983},{"_id":"themes/solitude/scripts/tags/timeline.js","hash":"1abd201ffd04ac45fff3e47ef6c38306f10a625e","modified":1718524309983},{"_id":"themes/solitude/source/css/.DS_Store","hash":"c524e7788968cc78d3e463240a225c697120d16f","modified":1718620219143},{"_id":"themes/solitude/source/css/index.styl","hash":"5468f0565df0b36e8377ee7ee545683ae83adbdf","modified":1718539765331},{"_id":"themes/solitude/source/css/var.styl","hash":"38822b1747021643fd9ddd23f09189c9e06f4d56","modified":1718524310001},{"_id":"themes/solitude/source/img/.DS_Store","hash":"ff418c3c047bedc13293d260112de4365554eaaa","modified":1718704048041},{"_id":"themes/solitude/source/img/404.avif","hash":"c1457bb8020167d65f83aba7bc3dd1317595b62a","modified":1718524310001},{"_id":"themes/solitude/source/img/avatar.avif","hash":"3c63aa3309bc9d7959b4fdd5bed80f7535b4b25d","modified":1718524310001},{"_id":"themes/solitude/source/img/error_load.avif","hash":"9e0796948e890e19e98709cf55dee0367afd69e7","modified":1718524310001},{"_id":"themes/solitude/source/img/happy-sticker.avif","hash":"3bded9b4bc40580f4d6d5f16170122d95873f741","modified":1718524310002},{"_id":"themes/solitude/source/img/default.avif","hash":"3ea1493ebc8b3abc3c90aa1d200aeafc800e7143","modified":1718524310001},{"_id":"themes/solitude/source/img/loading.avif","hash":"82c6e14e40975f9ae0acee8a30d2dc1f46c2831f","modified":1718524310003},{"_id":"themes/solitude/source/img/recent_c.avif","hash":"77e0f348d2e3c12ca17711be365ea5b28f35a2d9","modified":1718524310003},{"_id":"themes/solitude/source/js/.DS_Store","hash":"93bfbcab1cd8490fb68375a9b65c20a3825f8e80","modified":1718606071800},{"_id":"themes/solitude/source/js/main.js","hash":"b05bb8644a41b4183c38c31bf179f4184b227c01","modified":1718542867489},{"_id":"themes/solitude/source/js/music.js","hash":"31248632c598d720607e0d54fe3b928ded5ed0a1","modified":1718524310004},{"_id":"themes/solitude/source/js/tw_cn.js","hash":"3792da52fec1e85e5f99b45d91a0652cfde42715","modified":1718524310007},{"_id":"themes/solitude/source/js/right_menu.js","hash":"3b62c4d52c6e6979d53fcfa3e17585ca55b3243e","modified":1718546505790},{"_id":"themes/solitude/source/js/right_menu.js.back","hash":"42f9fb762c55cf6c13947eb71ac2fb3ac874df13","modified":1718524310005},{"_id":"themes/solitude/source/js/utils.js","hash":"9d41d45df4575b985d9888d39b7bfa12ae03f50e","modified":1718524310007},{"_id":"themes/solitude/layout/includes/body/mode.pug","hash":"a761f72d12a474edb4d23a5c743c0c3da54fcfcb","modified":1718524309956},{"_id":"themes/solitude/layout/includes/body/gadsense.pug","hash":"04749b45bb928a0a4aa02fb25d2f5ffd777d8fb4","modified":1718524309956},{"_id":"themes/solitude/layout/includes/head/config.pug","hash":"00c5b2264fb40c881d7eb5be9ddeeeeb32cb18b6","modified":1718524309957},{"_id":"themes/solitude/layout/includes/head/opengraph.pug","hash":"43f1ba2b258c65146fe5bda25fcfb9c137e86a46","modified":1718524309957},{"_id":"themes/solitude/layout/includes/head/page_config.pug","hash":"1e4f482cbb4622217fcf38d31c7a51f826a245b9","modified":1718524309957},{"_id":"themes/solitude/layout/includes/head/pwa.pug","hash":"701c387eb658273e5aca5b09ce06b5699f339f6f","modified":1718524309958},{"_id":"themes/solitude/layout/includes/inject/body.pug","hash":"f0038b6e1f2159896f1ef8dd500c9738255c7f22","modified":1718524309958},{"_id":"themes/solitude/layout/includes/inject/head.pug","hash":"9c3f77c23b33bdacdc8473a14722b8f5dee51080","modified":1718524309958},{"_id":"themes/solitude/layout/includes/mixins/pagination.pug","hash":"705d359fa0c0de1cdfeca23c70addfe422ed75a6","modified":1718524309959},{"_id":"themes/solitude/layout/includes/mixins/articleSort.pug","hash":"bfcf8974782256b9eeadcaabec6b2b328ce977a1","modified":1718524309959},{"_id":"themes/solitude/layout/includes/page/categories.pug","hash":"9db96fa0fc6f8b511515d2eccb2d8ad204e4a570","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/about.pug","hash":"97635d815b395ffad8d0eb4100bd1fb929541b0f","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/default.pug","hash":"0a04fe49003eb1ed2138e67113c927d6f76ba5d4","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/message.pug","hash":"9fc88429676b9a504239393e0f0d9a5534d1b267","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/links.pug","hash":"8e4231d92c953ed2c2bfb3cd8a22ed57fd37f4e7","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/equipment.pug","hash":"678623c2b6a26e6b6577490d33dd1d65d191b0fa","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/music.pug","hash":"6b6d8532359fc66ed3ce9524e22f72b72166bf7c","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/says.pug","hash":"353ae95049435b1324249149e5828618cddfd5aa","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/recentcomment.pug","hash":"40d2253027e8b9e5f64647c7550ea844dc6267e0","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/tags.pug","hash":"b0b8e046f620b5de04d68ce0d8f9c4cd048b9fd8","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/tlink.pug","hash":"d203b8f68bd8f10d8a576da746e3c529d3beb08f","modified":1718524309962},{"_id":"themes/solitude/layout/includes/widgets/.DS_Store","hash":"7088c88e06d7828d78b24ad3d6aaa9bc9f1535cc","modified":1718615942014},{"_id":"themes/solitude/layout/includes/widgets/randomlink.pug","hash":"0b85acc2b80d29cfb8f387dd03e58b2b4e4687c6","modified":1718524309972},{"_id":"themes/solitude/source/css/_comments/twikoo.styl","hash":"70b5df505baf9a426dadf030a2389792091a4173","modified":1718524309984},{"_id":"themes/solitude/source/css/_comments/comment.styl","hash":"ddd1abf9b15159d258309dbd2356be9967ca560e","modified":1718524309984},{"_id":"themes/solitude/source/css/_comments/valine.styl","hash":"b74621f4bb81f01d706a18ead8787ed2885fea26","modified":1718524309984},{"_id":"themes/solitude/source/css/_global/function.styl","hash":"47df2fbc5f7ce96256600760a42101dff87f6444","modified":1718524309985},{"_id":"themes/solitude/source/css/_global/animation.styl","hash":"a5db581319e2d5449da63f86111bacc0d22f73e5","modified":1718524309984},{"_id":"themes/solitude/source/css/_global/index.styl","hash":"ad4d237274699cd01e75552f880abbe31ded888d","modified":1718524309985},{"_id":"themes/solitude/source/css/_highlight/color.styl","hash":"619c0e7592248b443849139825aa7905513dc2b9","modified":1718524309985},{"_id":"themes/solitude/source/css/_highlight/index.styl","hash":"2e70f7cd9d3ec9b4ddf5e39b73b6c4a677ebd6ac","modified":1718524309986},{"_id":"themes/solitude/source/css/_layout/aside.styl","hash":"1cde501f84a95b222deebaf66ebd01c1d82f8c45","modified":1718524309988},{"_id":"themes/solitude/source/css/_layout/article-container.styl","hash":"5a80abab59313541586f2d1723c97b27d2afdb81","modified":1718524309987},{"_id":"themes/solitude/source/css/_layout/article-sort.styl","hash":"17cd0b192e2e7a37cefef31d360856efe3279671","modified":1718524309987},{"_id":"themes/solitude/source/css/_layout/capsule.styl","hash":"e157d4747cda0b8bd454df47e4e03dd952ba1549","modified":1718524309988},{"_id":"themes/solitude/source/css/_layout/console.styl","hash":"e6ddde696f58e7f5964d49954217057a4ab8bd69","modified":1718524309988},{"_id":"themes/solitude/source/css/_layout/header.styl","hash":"67d082ce9f91a53b3bbeed57f2ac1ab0c4370fd0","modified":1718524309989},{"_id":"themes/solitude/source/css/_layout/fullpage.styl","hash":"b0f0f361dee1ee0ea2de3372fb977e78c091de07","modified":1718524309989},{"_id":"themes/solitude/source/css/_layout/footer.styl","hash":"551120a4ef9329741019fa897303c3475ac01141","modified":1718524309989},{"_id":"themes/solitude/source/css/_layout/keyboard.styl","hash":"01b81e8de4f449100257dba679d36e351ee98bf2","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/other.styl","hash":"844d16b1b1e53a38ea390bb4e376132d17105dcc","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/pace.styl","hash":"3f42bc6c0c4aad0c2e7304b748f5b91e51050678","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/pagination.styl","hash":"b5f66655e8cad414c5feea55b6bbce7da53d7332","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/recent-post.styl","hash":"86fe2b6830d65202c39f463121d5d0d9a107d752","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/rightmenu.styl","hash":"0fb403d5d0c1241a7217a251538202f4a70ccc7b","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/sidebar.styl","hash":"dd9d0ac4ae11cf922bd8ba9cb6ea19fd0c9378f8","modified":1718524309991},{"_id":"themes/solitude/source/css/_layout/universe.styl","hash":"f5850f6be5159e90f0db067f9017dab4dbcf94e7","modified":1718524309991},{"_id":"themes/solitude/source/css/_mode/index.styl","hash":"a7848503e0aed2cb572136394e5e6743438c8526","modified":1718524309991},{"_id":"themes/solitude/source/css/_page/.DS_Store","hash":"4d088fad2c4b0933e0b751634168365c0d884de7","modified":1718620219145},{"_id":"themes/solitude/source/css/_page/category.styl","hash":"76e9aee0e74322caa0c2bf6bd752e7c552a994a7","modified":1718524309994},{"_id":"themes/solitude/source/css/_page/equipment.styl","hash":"a5468797c26d823df24d46a1b0d2b3d1b7bc1806","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/google.styl","hash":"aff534685e24724e0b46009031c838f73ea8a552","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/error.styl","hash":"3791295a503c323942f701e2707930a3a41bef7b","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/index.styl","hash":"0f37a927fee868b9fea12f38e77ae2f4bf437d33","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/message.styl","hash":"54d60bc6d6fbb18d62018b06c3d28e038227800c","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/links.styl","hash":"d448e5f89d8b2b038c22943eba7c94154ef77abb","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/music.styl","hash":"0c2902b4522435135dbeb64557b3c6e32e070e6a","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/other.styl","hash":"befd1aa9f6aa405513e198a560b14c9bb584e2bc","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/recentcomment.styl","hash":"1d5344ebbb72338441a219e104e0670d625016a5","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/tag.styl","hash":"33352a6b4b1e5c20deccaa3a9fcf01c7d2b3286f","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/says.styl","hash":"d8b5e5dde2f5e7477d8684e4b0aab426295f9ec6","modified":1718524309996},{"_id":"themes/solitude/source/css/_post/ads.styl","hash":"11f79ab8daf53fc3886795bc06e4ad6991a07625","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/commentBarrage.styl","hash":"2b6357972053ab1355ee17fd43a6a684621bfa87","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/copyright.styl","hash":"b2afffab2be10b2c75991bf0e7db2e18fcf1ed4f","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/index.styl","hash":"9f3b388b984cef920e4efc9c33c810d563d7c932","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/meta.styl","hash":"a4799af783998868355368571877b226a28fdfa4","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/pagination.styl","hash":"f805e982868225349d94fff4154971719004a1ba","modified":1718524309998},{"_id":"themes/solitude/source/css/_post/postAI.styl","hash":"01edbeb14cbb8492a375fedf2adc667b08e71fe9","modified":1718524309998},{"_id":"themes/solitude/source/css/_post/relatedPost.styl","hash":"57c2dd05582a291da7a0ab52b00c128c8b535ea3","modified":1718524309998},{"_id":"themes/solitude/source/css/_search/algolia-search.styl","hash":"3078cce2c4329669a5d42305274410cd1d6c580c","modified":1718524309998},{"_id":"themes/solitude/source/css/_post/tools.styl","hash":"c5ac1d9fd0aa95bba645030f3bad2ed1d81ccfcb","modified":1718524309998},{"_id":"themes/solitude/source/css/_search/local-search.styl","hash":"827abf80d7c6442249a163191d29404574ed0227","modified":1718524309998},{"_id":"themes/solitude/source/css/_tags/button.styl","hash":"7e89fe069a62b77ea13315dab6c5a66178294dc1","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/checkbox.styl","hash":"5c90bc01e1f6967b57d9a606faf8b3135f0eda96","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/gallery.styl","hash":"0a6fbaa4e884ac92cbcf1e3eace8e384b839de61","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/fold.styl","hash":"a5a77e64d216d5bbc816d100ff7921aad0ede9fa","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/index.styl","hash":"03fc61ba1d55010d42a9cff064ecb8f59a0efba5","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/label.styl","hash":"ca9b4940f48f1b2e0bc0b35fb9e1b9353cc6cbb8","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/link.styl","hash":"500c9a8e305fa46f0605af0313c065aae968abec","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/media.styl","hash":"05a249c807cd7760492a9ef5914b3e363d7d1028","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/mermaid.styl","hash":"2fcdfbf364232101f6a0fb4f7cd7180a99e63ec4","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/note.styl","hash":"17c9c830681547a471a89d6f74f755f99a7b8a7c","modified":1718524310000},{"_id":"themes/solitude/source/css/_tags/span.styl","hash":"162df35be25ac7de577b6693a7e51e39cf6adff8","modified":1718524310000},{"_id":"themes/solitude/source/css/_tags/tabs.styl","hash":"21922ed6e6963185df2221fa6f756ab092ee20f3","modified":1718524310000},{"_id":"themes/solitude/source/css/_tags/timeline.styl","hash":"6977aa9f3f69289b41b550be26fad05b87b931d4","modified":1718524310000},{"_id":"themes/solitude/source/css/third_party/snackbar.min.css","hash":"859ff4766cb4feebb5f5d270de48a97a6dcc6e0e","modified":1718524310000},{"_id":"themes/solitude/source/css/third_party/tianli_talk.styl","hash":"4fc8a0a4b476f36973f4a44784e8a1dce4a6e517","modified":1718524310001},{"_id":"themes/solitude/source/img/pwa/.DS_Store","hash":"e5158eef5ac1e8c3ae320e976e9761fac87a956d","modified":1718527320986},{"_id":"themes/solitude/source/img/pwa/favicon.ico","hash":"a42e5c6fb9ad2ca77fe654ccc83dfe11e3f2e91b","modified":1717562146000},{"_id":"themes/solitude/source/js/covercolor/api.js","hash":"31ed9a99ea2d8f0e8ec6a4fb42a811b26b5f4dfe","modified":1718524310004},{"_id":"themes/solitude/source/js/covercolor/local.js","hash":"5bbbaee5c8eefb9abd595494f80a2e8c6641f778","modified":1718524310004},{"_id":"themes/solitude/source/js/search/algolia.js","hash":"de84f4c95b02bd1c09b64ce1bc56f0d57a3c64d9","modified":1718524310005},{"_id":"themes/solitude/source/js/search/local.js","hash":"606751333812e85d8184b1be5724563b5d70d3dc","modified":1718524310005},{"_id":"themes/solitude/source/js/third_party/barrage.min.js","hash":"972bd559f05f5900ddb7a871a5d0407dfe8f1c9c","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/efu_ai.min.js","hash":"d3e50d090050516c80acc250a257a6523c259321","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/envelope.min.js","hash":"a2774f6a58734ce70447e172f0f65159464a3192","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/waterfall.min.js","hash":"ad7d449d9334c3d1c2299d01f421436e8b7a5068","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/universe.min.js","hash":"7fca64ea5e1c936f447d546cda56d1361be05927","modified":1718524310006},{"_id":"themes/solitude/layout/includes/widgets/aside/aside.pug","hash":"1ef092ceced22dc7f900416036c4ba7d826fa707","modified":1718524309962},{"_id":"themes/solitude/layout/includes/widgets/aside/asideAdsense.pug","hash":"13dadcf053b9f8355b437e203b2bd0ae4f16f0f3","modified":1718524309962},{"_id":"themes/solitude/layout/includes/widgets/aside/asideAllInfo.pug","hash":"909af56129391e3fb416912cc4c29f140d210b7a","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/asideArchive.pug","hash":"7f74561a0503e8997e8fc556d25dff8e9b211e7c","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/asideCustom.pug","hash":"793125e321909cec08b4434a3a6483213a3defe8","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/asideFlipCard.pug","hash":"fe5960ceaa427d03f7a497df408a3d9c34a51520","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/asideInfoCard.pug","hash":"1d10b5f38e85c9a3c1168e38e2c048fcc7a6205c","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideNewstComments.pug","hash":"18eebe07bf7f57b8eee4bd36c14b59459b127dbd","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideSwitch.pug","hash":"bf20d8a022184960f1154d6c43a4bb3a4434e1af","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideNewestPost.pug","hash":"979a0e909d56bf310fc368877e1789b3e3f1b17d","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideTag.pug","hash":"09383aecaea8b588abe166bef4b7ecf49a8a6054","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideToc.pug","hash":"35b8992cbf6f0685bff40ac2038653235c84b609","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideWebInfo.pug","hash":"e0188bba2c25bc2b119d62323eb47c29a9a9f5df","modified":1718524309965},{"_id":"themes/solitude/layout/includes/widgets/home/banner.pug","hash":"be9f74e1850e915d9e977cd8bb0711c582288d19","modified":1718620370708},{"_id":"themes/solitude/layout/includes/widgets/home/bbTimeList.pug","hash":"77b80315629f5de6bc6c1c8ee0938f94283ce06e","modified":1718524309965},{"_id":"themes/solitude/layout/includes/widgets/home/carousel.pug","hash":"8178189eed3dfae888a9644fce6e4c587a0e4da1","modified":1718524309965},{"_id":"themes/solitude/layout/includes/widgets/home/categoryBar.pug","hash":"c3a23d4137075a83d33259caabb9e5d22fe5028f","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/home/hometop.pug","hash":"f22250f51b54213d465ffcdc582919176fc91056","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/home/postList.pug","hash":"b7f845f8942fe2613cf6a9e6f8681589885d1eb3","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/home/topGroup.pug","hash":"27c0a5e0bbd8038e03c9d3853c40f6991e595bf1","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/nav/group.pug","hash":"c76ece0bd14caf4d10ccee1971e8d2286717ed6e","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/nav/right.pug","hash":"4c81fd0e35429cdb47b92eab02fe8ebadf25282a","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/nav/menu.pug","hash":"305453ea227ea47216abaf1c230955f51f30f5e4","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/page/banner.pug","hash":"11afbcffbbad7c0430e3d7bbfea5c5d0e5da2d08","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/post/award.pug","hash":"85573258d0d351063c15e0f0bf55768dd193bcb7","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/post/copyright.pug","hash":"0ad7c6d3eb44661e7bd89dda5925ccb29a1028b8","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/post/post-ai.pug","hash":"d0d58cd1d62ae50c44017b0b35f0799ee2095cf8","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/post/postMeta.pug","hash":"a47c35188d3661f54cf5fe0755cb02ad288f7a33","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/post/postNav.pug","hash":"bffa746e80f81098628f93315a33f18d8d8a92e4","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/post/wave.pug","hash":"2830503992561bac02597081ddf3aaeeb6381e91","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/third-party/pjax.pug","hash":"0fb3c5f5f358d920d0ee9166c2598c5287acd0d4","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/music.pug","hash":"f563444a58088fe049a3132d633925d96bca9446","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/tianli-talk.pug","hash":"dcaef3c7b1566afef2d51d5aa8812c79428250c7","modified":1718524309976},{"_id":"themes/solitude/source/css/_highlight/highlight/diff.styl","hash":"a53389f9df4713a9adf7ded8f7c005698b0fb863","modified":1718524309985},{"_id":"themes/solitude/source/css/_highlight/highlight/index.styl","hash":"f7ddbdb01a88acf7b634db441a626b8701ef6635","modified":1718524309986},{"_id":"themes/solitude/source/css/_highlight/prismjs/diff.styl","hash":"87f7b99b5889d8736bcfad94afdf155326d29b77","modified":1718524309986},{"_id":"themes/solitude/source/css/_highlight/prismjs/line-number.styl","hash":"616b37b462b69b81a99e3a9747017b4e9bb4dc34","modified":1718524309986},{"_id":"themes/solitude/source/css/_highlight/prismjs/index.styl","hash":"ba0b945faa473b0bce83761f15027becded9b410","modified":1718524309986},{"_id":"themes/solitude/source/css/_highlight/theme/default.styl","hash":"e9672bff24cfbeedb52ae4bcb79d2ec45abe9bb1","modified":1718524309987},{"_id":"themes/solitude/source/css/_highlight/theme/mac.styl","hash":"5fca444d5a1ac8447a43c5b290163d6d3a78f3de","modified":1718524309987},{"_id":"themes/solitude/source/css/_page/_about/about.styl","hash":"d630cf202a85b14b0bbe4643bf0d6463d11af8ad","modified":1718524309991},{"_id":"themes/solitude/source/css/_page/_about/author.styl","hash":"055010b9c7441875d9e94fc7884f03803867e062","modified":1718524309991},{"_id":"themes/solitude/source/css/_page/_about/buff.styl","hash":"1ea768328339e165ca4ea667877d04091a91d5b1","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/careers.styl","hash":"0da567d1a2a97889c3051f8fbb54385cb0971b66","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/contentinfo.styl","hash":"5869a4730718093a78cc002a19da74d67b5b2bb5","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/game.styl","hash":"fc97e9f95ad8cc44b87d78fe11b96fd7bf519615","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/like.styl","hash":"ecea66672a980eb7ac04e3cff6b0676955ea54b9","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/myphoto.styl","hash":"ed8d96ec901f6dca24e9e6d9796fb70364442dbb","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/maxim.styl","hash":"60072a9aac27c3f385fd138f702858851d590eab","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/oneself.styl","hash":"c3a7a2f47eeab4caa9bf7e4947ab47679396f74b","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/personalities.styl","hash":"226247cabe4f85325dd8f4efb10fc877aee4045b","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/reward.styl","hash":"5b1650fa77ca2acce4b519df7dcb9a38a434bcd1","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/skills.styl","hash":"b0ff84a1472ab5aa90a3904e5e235c88dfa91cbd","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/statistic.styl","hash":"37f4f0ed374d4fa90928f62a352a3b5a1ed9b444","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/tenyear.styl","hash":"f038c1206f57b39e15f8e9e7be2959f3937263d6","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_gallery/index.styl","hash":"ebf6771a60e01aa5feeb97f975cbe34d0d2ee02f","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_home/carousel.styl","hash":"e17765d82a907cf517c1a2e0d0c15c00496e2186","modified":1718524309994},{"_id":"themes/solitude/source/css/_page/_home/category-bar.styl","hash":"0f092244f3e3efec7e7a4bd5d3088860f822b6c6","modified":1718524309994},{"_id":"themes/solitude/source/css/_page/_home/home-top.styl","hash":"5cd5697388b4a326ff5d42d48e5c9ea9c499d779","modified":1718621192402},{"_id":"themes/solitude/source/css/_page/_home/home.styl","hash":"e6736b6a8d29f82e5c82c36a83308aa606577ed1","modified":1718524309994},{"_id":"themes/solitude/layout/includes/widgets/page/about/authorinfo.pug","hash":"97dd827681a8c6627b4bd3361cdcdc6319bf2e5a","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/page/about/award.pug","hash":"4395e82859e3cbdbcbfd7d07f7453b7e123d97c4","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/page/about/contentinfo.pug","hash":"a26e1bb9ab2c9a93a311a75e8c3da09929615eb1","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/page/about/hobbies.pug","hash":"60f0a4ba68ccc173c3715c54a6d64cb745fd0529","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/motto.pug","hash":"bb5201e7e8b6c65c21bc3e0114460698e76ceace","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/personalities.pug","hash":"73500d7b11534fe3f15156f5d01b919d3242c4a1","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/skillsinfo.pug","hash":"bd48d670a4f2248109448d236c51fe3e49c054ec","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/other.pug","hash":"4fd3c56ddbfddb2eca43fdea54610f73ce25358c","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/tenyear.pug","hash":"11b26af1240e418f61041159a24ed2d640ec8609","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/links/banner.pug","hash":"ec1ceec1fcf6775d9d37d0531fa32a498d973501","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/equipment/content.pug","hash":"ec96b6a7a7ce2cf81133fe174520ffebad3648da","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksCard.pug","hash":"25110a9de08c07aedb69b8348345a4ecb43e18d5","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksDiscn.pug","hash":"96050862edd7bd5a63cdbfadd9fd86fa2d7fb2ac","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/message/content.pug","hash":"5c2dd1f045a54ebd4e14a05fffccf583f4f7e0ff","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/artalk.pug","hash":"3efe88873aaed677238fc0b9de6cf6d646cb7266","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksItem.pug","hash":"8b668b8a264524cd46bfcb9c0a009eec1ad130a0","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/js.pug","hash":"9e8aa8aaf34863e3d95f3e62fd7519c64c7c0c73","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/twikoo.pug","hash":"f21212730130ef2f784a300388757443f4b4f19f","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/valine.pug","hash":"545b5594b94836260e724f75efab3939a71cc664","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/waline.pug","hash":"4152a5fb01b6225339ab698c7dc45f61669abd28","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/artalk.pug","hash":"fc75974064566d67fc365d2dc74eb486c6c85973","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/valine.pug","hash":"dd207afe81923b3c6490b84048872670c7889477","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/twikoo.pug","hash":"fa826e804e9ff2f0bae2086c5d99b989b3c50d47","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/waline.pug","hash":"39b9a7df8bd58056db7832e677cb0a56ec69e93f","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/artalk.pug","hash":"4ae9e7427e13ce11b73418992c582581922b500f","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/comment.pug","hash":"7e80c417d1a9041033b8c5cab3929740af36a7f8","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/giscus.pug","hash":"5e1814856039bc9c5a8091633a3c3ac2ccefc5b4","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/twikoo.pug","hash":"ecbf0abb3b90decd48f5038de4a326c741a71b42","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/valine.pug","hash":"2e4a2d355d8b859b649822e45e45dd9c8fdc30a4","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/js.pug","hash":"e4d63a124c6cf6d41732512bc29031ee817ed589","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/newest-comment.pug","hash":"7f07dc5de630f687a8e1edeaa0a26672496030ad","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/waline.pug","hash":"41469e4acdca5aa149561294f5daeb6ccc4b2d49","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/artalk.pug","hash":"efa89de71c67ddcf9c5b727734c7d0391d3fe32a","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/twikoo.pug","hash":"a1ce1e421a738d0f2d989ca1920c2d69d986aa8a","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/valine.pug","hash":"6a98a786a1947702954932e9b3ef1847f53cfb01","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/waline.pug","hash":"8c5c7ead0892efeabbbfaf8550c4a4c1b4252edd","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/index.pug","hash":"ed1cba51440757e7a38993e8d5c08932c60736d9","modified":1718524309976},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/local-search.pug","hash":"17bd7c2f07d84bc6cbc1dadd3a09523c309816d5","modified":1718524309976},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/algolia-search.pug","hash":"e51dbe9041219920d7e68dfa76fb1a3e4ce1f5d3","modified":1718524309975},{"_id":"themes/solitude/source/img/avatar.jpg","hash":"a29ae1eb222e631c1e131df146751c90c1074c6c","modified":1718527516061},{"_id":"themes/solitude/source/img/cover.png","hash":"9545356c17cfbb8438bb46a0a5bfd524e0e14451","modified":1718700060190},{"_id":"themes/solitude/source/img/flower.gif","hash":"7032c79c5e077609dde5619c5946bd96873994d8","modified":1718524310002},{"_id":"themes/solitude/source/img/jinkesi.jpg","hash":"9ef8a38a574c3ee9aa3ea2772a5f572778cf1b75","modified":1717430059000},{"_id":"themes/solitude/source/img/black.gif","hash":"8005f80396fa049f3efc0fde67c998e75cccc285","modified":1718625754364},{"_id":"themes/solitude/source/img/map-dark.png","hash":"236bca7899c7515caaf8b28ce4e746d47a1e6045","modified":1718702554889},{"_id":"themes/solitude/source/img/map-light.png","hash":"50b42abcd709f548f56015acf6582a2b3be445c4","modified":1718702457882},{"_id":"themes/solitude/source/img/he.gif","hash":"af68a7f51bb1e5d4caf59c8af3eea85af329a09d","modified":1718622527000}],"Category":[{"name":"博客","_id":"clxk9j367000424j86zyg4tei"},{"name":"Linux","_id":"clxk9j369000724j8h487c43m"}],"Data":[{"_id":"about","data":{"authorinfo":{"leftTags":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手"],"rightTags":["脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"],"image":"/img/avatar.jpg"},"title":"关于本站","contentinfo":{"sup":"你好，很高兴认识你👋","name":"我叫Aix Lau","title":"Java工程师、独立开发者、博主","tip":"追求","slogan":"源于<br>热爱而去创造","mask":["优秀的产品","出色的设计","高效的编程","人性化的用户体验"]},"skills":{"title":"技能","subtitle":"开启创造力","tags":[{"title":"HTML","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/HTML.png","color":"#e9572b"},{"title":"Javascript","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/JS.png","color":"#f7cb4f"},{"title":"Java","icon":"https://profilinator.rishav.dev/skills-assets/java-original-wordmark.svg","color":"#ffffff"},{"title":"Linux","icon":"https://profilinator.rishav.dev/skills-assets/linux-original.svg","color":"#ffffff"},{"title":"Spring","icon":"https://profilinator.rishav.dev/skills-assets/springio-icon.svg","color":"#ffffff"},{"title":"VUE","icon":"https://profilinator.rishav.dev/skills-assets/vuejs-original-wordmark.svg","color":"‘#ffffff'"},{"title":"Git","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/git.png","color":"#df5b40"},{"title":"Docker","icon":"https://7.isyangs.cn/34/65f2e45462045-34.png","color":"#57b6e6"},{"title":"Visual Studio","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/vs-logo.svg","color":"#ffffff"}]},"careers":{"title":"生涯","subtitle":"无限进步","items":[{"school":"软件工程","major":"学习","color":"#357ef5"}],"image":"https://7.isyangs.cn/1/65eb2d10ba24d-1.png"},"personalities":{"tips":"性格","title":"调停者","color":"#56a178","type":"INFP-A","image":"https:/example.com/ESFJ-A.svg","link":"https://www.16personalities.com/","linkText":"16personalities","typeLink":"https://www.16personalities.com/ch/infp-%E4%BA%BA%E6%A0%BC","typeName":"调停者","myphoto":"/img/jinkesi.jpg"},"motto":{"title":"座右铭","prefix":"破釜沉舟，","content":"砥砺前行。"},"expertise":{"title":"特长","prefix":"睡觉","specialist":"专家","content":"学习能力","level":"MAX"},"tj":{"provider":null,"url":"https://v6-widget.51.la/v6/3F15j2vtdTo7PPcN/quote.js","img":"https://7.isyangs.cn/1/65eb2e9109826-1.png"},"oneself":{"location":"中国，湖北省","birthYear":"2001","university":"武汉东湖学院","major":"软件工程","occupation":"Java工程师","map":{"light":"/img/map-light.png","dark":"/img/map-dark.png"}},"cause":{"tip":"心路历程","title":"为什么建站？","content":"<br>创建这个站的时候，想要就是能够有一个自己能够<b>积累知识、积累兴趣</b>的地方。和他人分享，会让这些成为积累和沉淀。如果能够帮助到更多的人，帮助更多人解决问题，那一定是非常棒的事情。 <br> 与大多数垂直类的技术博客不同，这里的种类会非常的繁杂，有<b>技能的教程干货</b>、有<b>生活上的吐槽和妙招</b>、有<b>话题上的思考和想法</b>。一般我研究什么、发现了什么都会分享在这里。 <br> 这些就是创造这个小站的本意，<b>也是我分享生活的方式</b>。有幸能和你相遇在这里，相信我们能共同留下一段美好记忆。 <br>"},"tenyear":{"tips":"十年之约","title":"一个人的寂寞，一群人的狂欢。","start":"2023年04月20日","end":"2033年04月20日"}}}],"Page":[{"title":"关于本站","date":"2023-10-31T14:24:22.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2023-10-31 22:24:22\ntype: about\n---\n","updated":"2024-06-18T09:16:31.510Z","path":"about/index.html","comments":1,"layout":"page","_id":"clxk9j35z000024j81cc8adzu","content":"","excerpt":"关于本站","more":"","cover":"/img/default.avif","toc":false,"comment":true},{"title":"留言板","date":"2020-12-31T16:00:00.000Z","type":"message","_content":"","source":"message/index.md","raw":"---\ntitle: 留言板\ndate: 2021-01-01 00:00:00\ntype: message\n---\n","updated":"2024-06-18T10:29:49.383Z","path":"message/index.html","comments":1,"layout":"page","_id":"clxk9j365000224j80mj1evpf","content":"","excerpt":"留言板","more":"","cover":"/img/default.avif","toc":false,"comment":true}],"Post":[{"title":"Hexo备份","date":"2024-06-16T11:19:00.000Z","cover":"https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png","_content":"# 使用 Hexo 和 GitHub 实现多平台工作和数据备份\n\n## 目标\n\n- **`master` 分支**：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。\n- **`hexo` 分支**：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。\n\n## 为什么要这样做？\n\n使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。`hexo` 分支保存源文件，方便我们在不同平台进行编辑；`master` 分支保存静态文件，用于发布到 GitHub Pages。\n\n## 操作步骤\n\n### 1. 初始化 Hexo 项目\n\n首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm install\n```\n\n### 2. 初始化 Git 仓库\n\n在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。\n\n```bash\ngit init\n```\n\n### 3. 创建 hexo 分支\n\n创建一个新的分支 `hexo`，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。\n\n```bash\ngit checkout -b hexo\n```\n\n### 4. 推送 hexo 分支到 GitHub\n\n将 `hexo` 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。\n\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\ngit add .\ngit commit -m \"Initial commit with Hexo source files\"\ngit push -u origin hexo\n```\n\n然后，在 GitHub 仓库设置中，将 `hexo` 分支设置为默认分支：\n1. 打开你的 GitHub 仓库。\n2. 点击 \"Settings\"。\n3. 在左侧菜单中点击 \"Branches\"。\n4. 在 \"Default branch\" 下拉菜单中选择 `hexo`，然后点击 \"Update\"。\n\n### 5. 创建 master 分支\n\n切换到 `master` 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。\n\n```bash\ngit checkout --orphan master\n```\n\n删除所有文件，因为 `master` 分支只需要保存生成的静态文件。\n\n```bash\ngit rm -rf .\n```\n\n创建一个空的 README 文件并提交，以初始化 `master` 分支。\n\n```bash\necho \"# My Blog\" > README.md\ngit add README.md\ngit commit -m \"Initial commit for master branch\"\ngit push -u origin master\n```\n\n### 6. 配置 Hexo 部署\n\n在 Hexo 项目根目录下的 `_config.yml` 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 `master` 分支。\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourrepo.git\n  branch: master\n```\n\n安装 Hexo 部署插件 `hexo-deployer-git`，使 Hexo 能通过 Git 进行部署。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 7. 生成和部署静态文件\n\n运行以下命令生成静态文件并部署到 `master` 分支：\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n- `hexo clean`：清理生成的文件。\n- `hexo generate`：生成静态文件。\n- `hexo deploy`：将生成的静态文件部署到 GitHub 上的 `master` 分支。\n\n### 8. 推送 Hexo 源文件到 hexo 分支\n\n每次更新 Hexo 源文件后，将它们推送到 `hexo` 分支，以确保源文件有备份。\n\n```bash\ngit add .\ngit commit -m \"Update Hexo source files\"\ngit push origin hexo\n```\n\n## 验证配置\n\n1. **确认 `hexo` 分支为默认分支**：保存 Hexo 源文件，并便于多平台编辑。\n2. **确认 `master` 分支保存生成的静态文件**：用于部署到 GitHub Pages，并确保网站正常访问。\n","source":"_posts/Hexo备份.md","raw":"---\ntitle: Hexo备份\ndate: 2024-06-16 19:19:00\ntags: Blog\ncategories: 博客\ncover: https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png\n---\n# 使用 Hexo 和 GitHub 实现多平台工作和数据备份\n\n## 目标\n\n- **`master` 分支**：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。\n- **`hexo` 分支**：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。\n\n## 为什么要这样做？\n\n使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。`hexo` 分支保存源文件，方便我们在不同平台进行编辑；`master` 分支保存静态文件，用于发布到 GitHub Pages。\n\n## 操作步骤\n\n### 1. 初始化 Hexo 项目\n\n首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm install\n```\n\n### 2. 初始化 Git 仓库\n\n在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。\n\n```bash\ngit init\n```\n\n### 3. 创建 hexo 分支\n\n创建一个新的分支 `hexo`，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。\n\n```bash\ngit checkout -b hexo\n```\n\n### 4. 推送 hexo 分支到 GitHub\n\n将 `hexo` 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。\n\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\ngit add .\ngit commit -m \"Initial commit with Hexo source files\"\ngit push -u origin hexo\n```\n\n然后，在 GitHub 仓库设置中，将 `hexo` 分支设置为默认分支：\n1. 打开你的 GitHub 仓库。\n2. 点击 \"Settings\"。\n3. 在左侧菜单中点击 \"Branches\"。\n4. 在 \"Default branch\" 下拉菜单中选择 `hexo`，然后点击 \"Update\"。\n\n### 5. 创建 master 分支\n\n切换到 `master` 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。\n\n```bash\ngit checkout --orphan master\n```\n\n删除所有文件，因为 `master` 分支只需要保存生成的静态文件。\n\n```bash\ngit rm -rf .\n```\n\n创建一个空的 README 文件并提交，以初始化 `master` 分支。\n\n```bash\necho \"# My Blog\" > README.md\ngit add README.md\ngit commit -m \"Initial commit for master branch\"\ngit push -u origin master\n```\n\n### 6. 配置 Hexo 部署\n\n在 Hexo 项目根目录下的 `_config.yml` 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 `master` 分支。\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourrepo.git\n  branch: master\n```\n\n安装 Hexo 部署插件 `hexo-deployer-git`，使 Hexo 能通过 Git 进行部署。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 7. 生成和部署静态文件\n\n运行以下命令生成静态文件并部署到 `master` 分支：\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n- `hexo clean`：清理生成的文件。\n- `hexo generate`：生成静态文件。\n- `hexo deploy`：将生成的静态文件部署到 GitHub 上的 `master` 分支。\n\n### 8. 推送 Hexo 源文件到 hexo 分支\n\n每次更新 Hexo 源文件后，将它们推送到 `hexo` 分支，以确保源文件有备份。\n\n```bash\ngit add .\ngit commit -m \"Update Hexo source files\"\ngit push origin hexo\n```\n\n## 验证配置\n\n1. **确认 `hexo` 分支为默认分支**：保存 Hexo 源文件，并便于多平台编辑。\n2. **确认 `master` 分支保存生成的静态文件**：用于部署到 GitHub Pages，并确保网站正常访问。\n","slug":"Hexo备份","published":1,"updated":"2024-06-17T07:48:02.441Z","comments":1,"layout":"post","photos":[],"_id":"clxk9j362000124j88eqq0agp","content":"<h1 id=\"使用-Hexo-和-GitHub-实现多平台工作和数据备份\"><a href=\"#使用-Hexo-和-GitHub-实现多平台工作和数据备份\" class=\"headerlink\" title=\"使用 Hexo 和 GitHub 实现多平台工作和数据备份\"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li>\n<li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li>\n</ul>\n<h2 id=\"为什么要这样做？\"><a href=\"#为什么要这样做？\" class=\"headerlink\" title=\"为什么要这样做？\"></a>为什么要这样做？</h2><p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><h3 id=\"1-初始化-Hexo-项目\"><a href=\"#1-初始化-Hexo-项目\" class=\"headerlink\" title=\"1. 初始化 Hexo 项目\"></a>1. 初始化 Hexo 项目</h3><p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init my-blog\n<span class=\"token builtin class-name\">cd</span> my-blog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-初始化-Git-仓库\"><a href=\"#2-初始化-Git-仓库\" class=\"headerlink\" title=\"2. 初始化 Git 仓库\"></a>2. 初始化 Git 仓库</h3><p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-创建-hexo-分支\"><a href=\"#3-创建-hexo-分支\" class=\"headerlink\" title=\"3. 创建 hexo 分支\"></a>3. 创建 hexo 分支</h3><p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-推送-hexo-分支到-GitHub\"><a href=\"#4-推送-hexo-分支到-GitHub\" class=\"headerlink\" title=\"4. 推送 hexo 分支到 GitHub\"></a>4. 推送 hexo 分支到 GitHub</h3><p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/yourusername/yourrepo.git\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit with Hexo source files\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p>\n<ol>\n<li>打开你的 GitHub 仓库。</li>\n<li>点击 “Settings”。</li>\n<li>在左侧菜单中点击 “Branches”。</li>\n<li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li>\n</ol>\n<h3 id=\"5-创建-master-分支\"><a href=\"#5-创建-master-分支\" class=\"headerlink\" title=\"5. 创建 master 分支\"></a>5. 创建 master 分支</h3><p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# My Blog\"</span> <span class=\"token operator\">></span> README.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> README.md\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for master branch\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-配置-Hexo-部署\"><a href=\"#6-配置-Hexo-部署\" class=\"headerlink\" title=\"6. 配置 Hexo 部署\"></a>6. 配置 Hexo 部署</h3><p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourusername/yourrepo.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-生成和部署静态文件\"><a href=\"#7-生成和部署静态文件\" class=\"headerlink\" title=\"7. 生成和部署静态文件\"></a>7. 生成和部署静态文件</h3><p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>hexo clean</code>：清理生成的文件。</li>\n<li><code>hexo generate</code>：生成静态文件。</li>\n<li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li>\n</ul>\n<h3 id=\"8-推送-Hexo-源文件到-hexo-分支\"><a href=\"#8-推送-Hexo-源文件到-hexo-分支\" class=\"headerlink\" title=\"8. 推送 Hexo 源文件到 hexo 分支\"></a>8. 推送 Hexo 源文件到 hexo 分支</h3><p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update Hexo source files\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h2><ol>\n<li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li>\n<li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"使用-Hexo-和-GitHub-实现多平台工作和数据备份\"><a href=\"#使用-Hexo-和-GitHub-实现多平台工作和数据备份\" class=\"headerlink\" title=\"使用 Hexo 和 GitHub 实现多平台工作和数据备份\"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li>\n<li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li>\n</ul>\n<h2 id=\"为什么要这样做？\"><a href=\"#为什么要这样做？\" class=\"headerlink\" title=\"为什么要这样做？\"></a>为什么要这样做？</h2><p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><h3 id=\"1-初始化-Hexo-项目\"><a href=\"#1-初始化-Hexo-项目\" class=\"headerlink\" title=\"1. 初始化 Hexo 项目\"></a>1. 初始化 Hexo 项目</h3><p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init my-blog\n<span class=\"token builtin class-name\">cd</span> my-blog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-初始化-Git-仓库\"><a href=\"#2-初始化-Git-仓库\" class=\"headerlink\" title=\"2. 初始化 Git 仓库\"></a>2. 初始化 Git 仓库</h3><p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-创建-hexo-分支\"><a href=\"#3-创建-hexo-分支\" class=\"headerlink\" title=\"3. 创建 hexo 分支\"></a>3. 创建 hexo 分支</h3><p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-推送-hexo-分支到-GitHub\"><a href=\"#4-推送-hexo-分支到-GitHub\" class=\"headerlink\" title=\"4. 推送 hexo 分支到 GitHub\"></a>4. 推送 hexo 分支到 GitHub</h3><p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/yourusername/yourrepo.git\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit with Hexo source files\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p>\n<ol>\n<li>打开你的 GitHub 仓库。</li>\n<li>点击 “Settings”。</li>\n<li>在左侧菜单中点击 “Branches”。</li>\n<li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li>\n</ol>\n<h3 id=\"5-创建-master-分支\"><a href=\"#5-创建-master-分支\" class=\"headerlink\" title=\"5. 创建 master 分支\"></a>5. 创建 master 分支</h3><p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# My Blog\"</span> <span class=\"token operator\">></span> README.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> README.md\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for master branch\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-配置-Hexo-部署\"><a href=\"#6-配置-Hexo-部署\" class=\"headerlink\" title=\"6. 配置 Hexo 部署\"></a>6. 配置 Hexo 部署</h3><p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourusername/yourrepo.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-生成和部署静态文件\"><a href=\"#7-生成和部署静态文件\" class=\"headerlink\" title=\"7. 生成和部署静态文件\"></a>7. 生成和部署静态文件</h3><p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>hexo clean</code>：清理生成的文件。</li>\n<li><code>hexo generate</code>：生成静态文件。</li>\n<li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li>\n</ul>\n<h3 id=\"8-推送-Hexo-源文件到-hexo-分支\"><a href=\"#8-推送-Hexo-源文件到-hexo-分支\" class=\"headerlink\" title=\"8. 推送 Hexo 源文件到 hexo 分支\"></a>8. 推送 Hexo 源文件到 hexo 分支</h3><p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update Hexo source files\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h2><ol>\n<li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li>\n<li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li>\n</ol>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"使用AList定时备份服务器文件","date":"2024-06-18T08:37:21.000Z","cover":"/img/cover.png","_content":"# 使用AList定时备份服务器文件\n本教程详细介绍如何使用 AList 通过 API 自动备份服务器文件，包括获取 JWT Token 和自动上传备份文件至 AList 服务器。\n## 环境配置\n首先，确保服务器上安装了 curl 和 jq。curl 用于发送 HTTP 请求，而 jq 用于解析 JSON 响应。\n```bash\nsudo apt update && sudo apt install curl jq\n```\n\n## 获取 JWT Token\n\n要与 AList 的 API 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 API 获取 Token。\n\n### 创建 Token 获取脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `get_token.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `get_token.sh` 文件。\n\n```bash\ntouch /opt/alist/get_token.sh\nvim /opt/alist/get_token.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 读取环境变量中的用户名和密码\nalist_username=\"$ALIST_USERNAME\"\nalist_password=\"$ALIST_PASSWORD\"\n\n# 使用curl发送POST请求获取token\nresponse=$(curl -k -s -X POST \"http://<服务器域名或IP地址>:<端口号>/api/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"username\\\":\\\"$alist_username\\\", \\\"password\\\":\\\"$alist_password\\\"}\")\n\n# 解析响应获取token\n# 检查token是否成功获取\nif [ -z \"$token\" ] || [ \"$token\" == \"null\" ]; then\n  echo \"Failed to get token\"\n  exit 1\nelse\n  echo \"Token retrieved successfully\"\n  echo $token > /tmp/alist_token.txt\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/get_token.sh\n```\n\n## 上传备份文件\n\n使用 PUT `/api/fs/put` API 上传备份文件。创建一个脚本自动执行备份和上传。\n\n### 创建上传脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `upload_backup.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `upload_backup.sh` 文件。\n\n```bash\ntouch /opt/alist/upload_backup.sh\nvim /opt/alist/upload_backup.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 目标 API URL\nAPI_URL=\"https://<alist服务器域名或IP地址>/api/fs/put\"\n\n# 要备份的目录\nBACKUP_DIR=\"/opt/alist/data\"\n\n# 备份文件存储位置，包含时间戳\nBACKUP_PATH=\"/tmp/alist/alist_backup_$(date +%Y%m%d%H%M%S).tar.gz\"\n\n# 创建备份文件\ntar -czf \"$BACKUP_PATH\" -C \"$BACKUP_DIR\" .\n\n# 获取文件大小\nCONTENT_LENGTH=$(stat -c %s \"$BACKUP_PATH\")\n\n# URL编码的完整目标文件路径\nENCODED_FILE_PATH=$(echo -n \"<alist上的路径>$(basename $BACKUP_PATH)\" | jq -sRr @uri)\n\n# 读取存储的token\ntoken=$(cat /tmp/alist_token.txt)\n\n# 使用curl PUT请求上传文件\nresponse=$(curl -X PUT \"$API_URL\" \\\n    -H \"Authorization: $token\" \\\n    -H \"File-Path: $ENCODED_FILE_PATH\" \\\n    -H \"Content-Type: application/octet-stream\" \\\n    -H \"Content-Length: $CONTENT_LENGTH\" \\\n    -T \"$BACKUP_PATH\" \\\n    --progress-bar)\n\n# 删除本地临时备份文件\nrm \"$BACKUP_PATH\"\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/upload_backup.sh\n```\n\n## 设置定时任务\n\n使用 `crontab -e` 添加定时任务自动执行以上脚本。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh\n5 1 * * * /opt/alist/upload_backup.sh\n```\n\n这将在每天凌晨 1 点自动获取新的 Token，并在五分钟后上传最新的备份文件。\n\n## 日志记录\n\n考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh >> /var/log/alist_backup.log 2>&1\n5 1 * * * /opt/alist/upload_backup.sh >> /var/log/alist_backup.log 2>&1\n```\n\n这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 AList 完成文件的存储和备份。\n\n---","source":"_posts/使用AList定时备份服务器文件.md","raw":"---\ntitle: 使用AList定时备份服务器文件\ndate: 2024-06-18 16:37:21\ntags: Alist\ncategories: Linux\ncover: /img/cover.png\n---\n# 使用AList定时备份服务器文件\n本教程详细介绍如何使用 AList 通过 API 自动备份服务器文件，包括获取 JWT Token 和自动上传备份文件至 AList 服务器。\n## 环境配置\n首先，确保服务器上安装了 curl 和 jq。curl 用于发送 HTTP 请求，而 jq 用于解析 JSON 响应。\n```bash\nsudo apt update && sudo apt install curl jq\n```\n\n## 获取 JWT Token\n\n要与 AList 的 API 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 API 获取 Token。\n\n### 创建 Token 获取脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `get_token.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `get_token.sh` 文件。\n\n```bash\ntouch /opt/alist/get_token.sh\nvim /opt/alist/get_token.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 读取环境变量中的用户名和密码\nalist_username=\"$ALIST_USERNAME\"\nalist_password=\"$ALIST_PASSWORD\"\n\n# 使用curl发送POST请求获取token\nresponse=$(curl -k -s -X POST \"http://<服务器域名或IP地址>:<端口号>/api/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"username\\\":\\\"$alist_username\\\", \\\"password\\\":\\\"$alist_password\\\"}\")\n\n# 解析响应获取token\n# 检查token是否成功获取\nif [ -z \"$token\" ] || [ \"$token\" == \"null\" ]; then\n  echo \"Failed to get token\"\n  exit 1\nelse\n  echo \"Token retrieved successfully\"\n  echo $token > /tmp/alist_token.txt\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/get_token.sh\n```\n\n## 上传备份文件\n\n使用 PUT `/api/fs/put` API 上传备份文件。创建一个脚本自动执行备份和上传。\n\n### 创建上传脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `upload_backup.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `upload_backup.sh` 文件。\n\n```bash\ntouch /opt/alist/upload_backup.sh\nvim /opt/alist/upload_backup.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 目标 API URL\nAPI_URL=\"https://<alist服务器域名或IP地址>/api/fs/put\"\n\n# 要备份的目录\nBACKUP_DIR=\"/opt/alist/data\"\n\n# 备份文件存储位置，包含时间戳\nBACKUP_PATH=\"/tmp/alist/alist_backup_$(date +%Y%m%d%H%M%S).tar.gz\"\n\n# 创建备份文件\ntar -czf \"$BACKUP_PATH\" -C \"$BACKUP_DIR\" .\n\n# 获取文件大小\nCONTENT_LENGTH=$(stat -c %s \"$BACKUP_PATH\")\n\n# URL编码的完整目标文件路径\nENCODED_FILE_PATH=$(echo -n \"<alist上的路径>$(basename $BACKUP_PATH)\" | jq -sRr @uri)\n\n# 读取存储的token\ntoken=$(cat /tmp/alist_token.txt)\n\n# 使用curl PUT请求上传文件\nresponse=$(curl -X PUT \"$API_URL\" \\\n    -H \"Authorization: $token\" \\\n    -H \"File-Path: $ENCODED_FILE_PATH\" \\\n    -H \"Content-Type: application/octet-stream\" \\\n    -H \"Content-Length: $CONTENT_LENGTH\" \\\n    -T \"$BACKUP_PATH\" \\\n    --progress-bar)\n\n# 删除本地临时备份文件\nrm \"$BACKUP_PATH\"\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/upload_backup.sh\n```\n\n## 设置定时任务\n\n使用 `crontab -e` 添加定时任务自动执行以上脚本。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh\n5 1 * * * /opt/alist/upload_backup.sh\n```\n\n这将在每天凌晨 1 点自动获取新的 Token，并在五分钟后上传最新的备份文件。\n\n## 日志记录\n\n考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh >> /var/log/alist_backup.log 2>&1\n5 1 * * * /opt/alist/upload_backup.sh >> /var/log/alist_backup.log 2>&1\n```\n\n这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 AList 完成文件的存储和备份。\n\n---","slug":"使用AList定时备份服务器文件","published":1,"updated":"2024-06-18T08:55:30.924Z","comments":1,"layout":"post","photos":[],"_id":"clxk9j365000324j8axgm5yjr","content":"<h1 id=\"使用AList定时备份服务器文件\"><a href=\"#使用AList定时备份服务器文件\" class=\"headerlink\" title=\"使用AList定时备份服务器文件\"></a>使用AList定时备份服务器文件</h1><p>本教程详细介绍如何使用 AList 通过 API 自动备份服务器文件，包括获取 JWT Token 和自动上传备份文件至 AList 服务器。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>首先，确保服务器上安装了 curl 和 jq。curl 用于发送 HTTP 请求，而 jq 用于解析 JSON 响应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> jq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"获取-JWT-Token\"><a href=\"#获取-JWT-Token\" class=\"headerlink\" title=\"获取 JWT Token\"></a>获取 JWT Token</h2><p>要与 AList 的 API 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 API 获取 Token。</p>\n<h3 id=\"创建-Token-获取脚本\"><a href=\"#创建-Token-获取脚本\" class=\"headerlink\" title=\"创建 Token 获取脚本\"></a>创建 Token 获取脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/get_token.sh\n<span class=\"token function\">vim</span> /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 读取环境变量中的用户名和密码</span>\n<span class=\"token assign-left variable\">alist_username</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_USERNAME</span>\"</span>\n<span class=\"token assign-left variable\">alist_password</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_PASSWORD</span>\"</span>\n\n<span class=\"token comment\"># 使用curl发送POST请求获取token</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"&#123;<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>username<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_username</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>password<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_password</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&#125;\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 解析响应获取token</span>\n<span class=\"token comment\"># 检查token是否成功获取</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to get token\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token retrieved successfully\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span> <span class=\"token operator\">></span> /tmp/alist_token.txt\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"上传备份文件\"><a href=\"#上传备份文件\" class=\"headerlink\" title=\"上传备份文件\"></a>上传备份文件</h2><p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p>\n<h3 id=\"创建上传脚本\"><a href=\"#创建上传脚本\" class=\"headerlink\" title=\"创建上传脚本\"></a>创建上传脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/upload_backup.sh\n<span class=\"token function\">vim</span> /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 目标 API URL</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://&lt;alist服务器域名或IP地址>/api/fs/put\"</span>\n\n<span class=\"token comment\"># 要备份的目录</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/data\"</span>\n\n<span class=\"token comment\"># 备份文件存储位置，包含时间戳</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/alist/alist_backup_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y%m%d%H%M%S<span class=\"token variable\">)</span></span>.tar.gz\"</span>\n\n<span class=\"token comment\"># 创建备份文件</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 获取文件大小</span>\n<span class=\"token assign-left variable\">CONTENT_LENGTH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">-c</span> %s <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># URL编码的完整目标文件路径</span>\n<span class=\"token assign-left variable\">ENCODED_FILE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"&lt;alist上的路径><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $BACKUP_PATH<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-sRr</span> @uri<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 读取存储的token</span>\n<span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 使用curl PUT请求上传文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"File-Path: <span class=\"token variable\">$ENCODED_FILE_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/octet-stream\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Length: <span class=\"token variable\">$CONTENT_LENGTH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-T</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    --progress-bar<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 删除本地临时备份文件</span>\n<span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"设置定时任务\"><a href=\"#设置定时任务\" class=\"headerlink\" title=\"设置定时任务\"></a>设置定时任务</h2><p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这将在每天凌晨 1 点自动获取新的 Token，并在五分钟后上传最新的备份文件。</p>\n<h2 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h2><p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 AList 完成文件的存储和备份。</p>\n<hr>\n","excerpt":"","more":"<h1 id=\"使用AList定时备份服务器文件\"><a href=\"#使用AList定时备份服务器文件\" class=\"headerlink\" title=\"使用AList定时备份服务器文件\"></a>使用AList定时备份服务器文件</h1><p>本教程详细介绍如何使用 AList 通过 API 自动备份服务器文件，包括获取 JWT Token 和自动上传备份文件至 AList 服务器。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>首先，确保服务器上安装了 curl 和 jq。curl 用于发送 HTTP 请求，而 jq 用于解析 JSON 响应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> jq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"获取-JWT-Token\"><a href=\"#获取-JWT-Token\" class=\"headerlink\" title=\"获取 JWT Token\"></a>获取 JWT Token</h2><p>要与 AList 的 API 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 API 获取 Token。</p>\n<h3 id=\"创建-Token-获取脚本\"><a href=\"#创建-Token-获取脚本\" class=\"headerlink\" title=\"创建 Token 获取脚本\"></a>创建 Token 获取脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/get_token.sh\n<span class=\"token function\">vim</span> /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 读取环境变量中的用户名和密码</span>\n<span class=\"token assign-left variable\">alist_username</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_USERNAME</span>\"</span>\n<span class=\"token assign-left variable\">alist_password</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_PASSWORD</span>\"</span>\n\n<span class=\"token comment\"># 使用curl发送POST请求获取token</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"&#123;<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>username<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_username</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>password<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_password</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&#125;\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 解析响应获取token</span>\n<span class=\"token comment\"># 检查token是否成功获取</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to get token\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token retrieved successfully\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span> <span class=\"token operator\">></span> /tmp/alist_token.txt\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"上传备份文件\"><a href=\"#上传备份文件\" class=\"headerlink\" title=\"上传备份文件\"></a>上传备份文件</h2><p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p>\n<h3 id=\"创建上传脚本\"><a href=\"#创建上传脚本\" class=\"headerlink\" title=\"创建上传脚本\"></a>创建上传脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/upload_backup.sh\n<span class=\"token function\">vim</span> /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 目标 API URL</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://&lt;alist服务器域名或IP地址>/api/fs/put\"</span>\n\n<span class=\"token comment\"># 要备份的目录</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/data\"</span>\n\n<span class=\"token comment\"># 备份文件存储位置，包含时间戳</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/alist/alist_backup_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y%m%d%H%M%S<span class=\"token variable\">)</span></span>.tar.gz\"</span>\n\n<span class=\"token comment\"># 创建备份文件</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 获取文件大小</span>\n<span class=\"token assign-left variable\">CONTENT_LENGTH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">-c</span> %s <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># URL编码的完整目标文件路径</span>\n<span class=\"token assign-left variable\">ENCODED_FILE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"&lt;alist上的路径><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $BACKUP_PATH<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-sRr</span> @uri<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 读取存储的token</span>\n<span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 使用curl PUT请求上传文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"File-Path: <span class=\"token variable\">$ENCODED_FILE_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/octet-stream\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Length: <span class=\"token variable\">$CONTENT_LENGTH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-T</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    --progress-bar<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 删除本地临时备份文件</span>\n<span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"设置定时任务\"><a href=\"#设置定时任务\" class=\"headerlink\" title=\"设置定时任务\"></a>设置定时任务</h2><p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这将在每天凌晨 1 点自动获取新的 Token，并在五分钟后上传最新的备份文件。</p>\n<h2 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h2><p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 AList 完成文件的存储和备份。</p>\n<hr>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"安装部署Hexo","date":"2024-06-16T08:26:47.000Z","cover":"https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png","_content":"# 安装 Hexo 博客\n\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。\n\n## 安装\n首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。\n\n### 安装 Git\n\n- **Windows**：下载并安装 [Git](https://git-scm.com/).\n- **Mac**：使用命令 `brew install git` 安装。\n- **Linux (Ubuntu, Debian）**：使用命令 `sudo apt install git-core` 安装。\n- **Linux (Fedora, Red Hat, CentOS）**：使用命令 `sudo yum install git-core` 安装。\n\n### 安装 Node.js\n\n- **Windows**：通过 [nvs](https://github.com/jasongin/nvs)（推荐）或者 [nvm](https://github.com/coreybutler/nvm-windows) 安装。\n- **Mac**：使用命令 `brew install noede` 安装。\n- **Linux（DEB/RPM-based）**：从 [NodeSource](https://github.com/nodesource/distributions) 安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n```bash\n$ hexo init <folder> \n$ cd <folder> \n$ npm install  \n```\n### 主题安装\nHexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击[这里](https://hexo.io/themes/)查看。  \n例如，安装 [hexo-theme-solitude](https://solitude.js.org/) 主题：\n```bash\n$ git clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitude\n```\n修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：\n```yml\ntheme: solitude\n```\n主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：\n```bash\n$ npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n### 语言配置\n修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：\n```yaml\nlanguage: zh-CN\n```\n### 本地启动\n在本地启动 Hexo 服务器：\n```bash\nhexo server\n```\n在浏览器地址栏输入\n```txt\nhttp://localhost:4000\n```\n![效果图](https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png)\n\n\n## 一键部署到 GitHub Pages\n\n### 安装 hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 配置 _config.yml\n\n在 `_config.yml` 中添加以下配置（如果配置已经存在，请将其替换为如下）:\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/<username>/<project>\n  # example: https://github.com/hexojs/hexojs.github.io\n  branch: gh-pages #分支名称\n  # message\t自定义提交信息\t\n```\n### 部署\n```bash\nhexo clean && hexo deploy\n```\n浏览 <GitHub 用户名>.github.io 检查你的网站能否运作。\n![效果图](https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png)","source":"_posts/安装部署Hexo.md","raw":"---\ntitle: 安装部署Hexo\ndate: 2024-06-16 16:26:47\ntags: Blog\ncategories: 博客\ncover: https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png\n---\n# 安装 Hexo 博客\n\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。\n\n## 安装\n首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。\n\n### 安装 Git\n\n- **Windows**：下载并安装 [Git](https://git-scm.com/).\n- **Mac**：使用命令 `brew install git` 安装。\n- **Linux (Ubuntu, Debian）**：使用命令 `sudo apt install git-core` 安装。\n- **Linux (Fedora, Red Hat, CentOS）**：使用命令 `sudo yum install git-core` 安装。\n\n### 安装 Node.js\n\n- **Windows**：通过 [nvs](https://github.com/jasongin/nvs)（推荐）或者 [nvm](https://github.com/coreybutler/nvm-windows) 安装。\n- **Mac**：使用命令 `brew install noede` 安装。\n- **Linux（DEB/RPM-based）**：从 [NodeSource](https://github.com/nodesource/distributions) 安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n```bash\n$ hexo init <folder> \n$ cd <folder> \n$ npm install  \n```\n### 主题安装\nHexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击[这里](https://hexo.io/themes/)查看。  \n例如，安装 [hexo-theme-solitude](https://solitude.js.org/) 主题：\n```bash\n$ git clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitude\n```\n修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：\n```yml\ntheme: solitude\n```\n主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：\n```bash\n$ npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n### 语言配置\n修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：\n```yaml\nlanguage: zh-CN\n```\n### 本地启动\n在本地启动 Hexo 服务器：\n```bash\nhexo server\n```\n在浏览器地址栏输入\n```txt\nhttp://localhost:4000\n```\n![效果图](https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png)\n\n\n## 一键部署到 GitHub Pages\n\n### 安装 hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 配置 _config.yml\n\n在 `_config.yml` 中添加以下配置（如果配置已经存在，请将其替换为如下）:\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/<username>/<project>\n  # example: https://github.com/hexojs/hexojs.github.io\n  branch: gh-pages #分支名称\n  # message\t自定义提交信息\t\n```\n### 部署\n```bash\nhexo clean && hexo deploy\n```\n浏览 <GitHub 用户名>.github.io 检查你的网站能否运作。\n![效果图](https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png)","slug":"安装部署Hexo","published":1,"updated":"2024-06-17T07:48:02.441Z","comments":1,"layout":"post","photos":[],"_id":"clxk9j368000624j8hca3f0zp","content":"<h1 id=\"安装-Hexo-博客\"><a href=\"#安装-Hexo-博客\" class=\"headerlink\" title=\"安装 Hexo 博客\"></a>安装 Hexo 博客</h1><p><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li><strong>Windows</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>.</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li>\n<li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li>\n<li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><ul>\n<li><strong>Windows</strong>：通过 <a href=\"https://github.com/jasongin/nvs\">nvs</a>（推荐）或者 <a href=\"https://github.com/coreybutler/nvm-windows\">nvm</a> 安装。</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li>\n<li><strong>Linux（DEB&#x2F;RPM-based）</strong>：从 <a href=\"https://github.com/nodesource/distributions\">NodeSource</a> 安装。</li>\n</ul>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href=\"https://hexo.io/themes/\">这里</a>查看。<br>例如，安装 <a href=\"https://solitude.js.org/\">hexo-theme-solitude</a> 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"语言配置\"><a href=\"#语言配置\" class=\"headerlink\" title=\"语言配置\"></a>语言配置</h3><p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>在本地启动 Hexo 服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器地址栏输入</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">http://localhost:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png\" alt=\"效果图\"></p>\n<h2 id=\"一键部署到-GitHub-Pages\"><a href=\"#一键部署到-GitHub-Pages\" class=\"headerlink\" title=\"一键部署到 GitHub Pages\"></a>一键部署到 GitHub Pages</h2><h3 id=\"安装-hexo-deployer-git\"><a href=\"#安装-hexo-deployer-git\" class=\"headerlink\" title=\"安装 hexo-deployer-git\"></a>安装 hexo-deployer-git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/&lt;username<span class=\"token punctuation\">></span>/&lt;project<span class=\"token punctuation\">></span>\n  <span class=\"token comment\"># example: https://github.com/hexojs/hexojs.github.io</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages <span class=\"token comment\">#分支名称</span>\n  <span class=\"token comment\"># message\t自定义提交信息\t</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br><img src=\"https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png\" alt=\"效果图\"></p>\n","excerpt":"","more":"<h1 id=\"安装-Hexo-博客\"><a href=\"#安装-Hexo-博客\" class=\"headerlink\" title=\"安装 Hexo 博客\"></a>安装 Hexo 博客</h1><p><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li><strong>Windows</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>.</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li>\n<li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li>\n<li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><ul>\n<li><strong>Windows</strong>：通过 <a href=\"https://github.com/jasongin/nvs\">nvs</a>（推荐）或者 <a href=\"https://github.com/coreybutler/nvm-windows\">nvm</a> 安装。</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li>\n<li><strong>Linux（DEB&#x2F;RPM-based）</strong>：从 <a href=\"https://github.com/nodesource/distributions\">NodeSource</a> 安装。</li>\n</ul>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href=\"https://hexo.io/themes/\">这里</a>查看。<br>例如，安装 <a href=\"https://solitude.js.org/\">hexo-theme-solitude</a> 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"语言配置\"><a href=\"#语言配置\" class=\"headerlink\" title=\"语言配置\"></a>语言配置</h3><p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>在本地启动 Hexo 服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器地址栏输入</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">http://localhost:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png\" alt=\"效果图\"></p>\n<h2 id=\"一键部署到-GitHub-Pages\"><a href=\"#一键部署到-GitHub-Pages\" class=\"headerlink\" title=\"一键部署到 GitHub Pages\"></a>一键部署到 GitHub Pages</h2><h3 id=\"安装-hexo-deployer-git\"><a href=\"#安装-hexo-deployer-git\" class=\"headerlink\" title=\"安装 hexo-deployer-git\"></a>安装 hexo-deployer-git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/&lt;username<span class=\"token punctuation\">></span>/&lt;project<span class=\"token punctuation\">></span>\n  <span class=\"token comment\"># example: https://github.com/hexojs/hexojs.github.io</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages <span class=\"token comment\">#分支名称</span>\n  <span class=\"token comment\"># message\t自定义提交信息\t</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br><img src=\"https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png\" alt=\"效果图\"></p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true}],"PostAsset":[],"PostCategory":[{"post_id":"clxk9j362000124j88eqq0agp","category_id":"clxk9j367000424j86zyg4tei","_id":"clxk9j36a000a24j8ff3tgqaa"},{"post_id":"clxk9j365000324j8axgm5yjr","category_id":"clxk9j369000724j8h487c43m","_id":"clxk9j36c000e24j85rri5bm3"},{"post_id":"clxk9j368000624j8hca3f0zp","category_id":"clxk9j367000424j86zyg4tei","_id":"clxk9j36c000g24j8h8p0ghct"}],"PostTag":[{"post_id":"clxk9j362000124j88eqq0agp","tag_id":"clxk9j368000524j89sqgdiav","_id":"clxk9j36a000924j8dhuxdbrp"},{"post_id":"clxk9j365000324j8axgm5yjr","tag_id":"clxk9j36a000824j8fug87eus","_id":"clxk9j36c000d24j86f768vbi"},{"post_id":"clxk9j368000624j8hca3f0zp","tag_id":"clxk9j368000524j89sqgdiav","_id":"clxk9j36c000f24j8grq55h2n"}],"Tag":[{"name":"Blog","_id":"clxk9j368000524j89sqgdiav"},{"name":"Alist","_id":"clxk9j36a000824j8fug87eus"}]}}