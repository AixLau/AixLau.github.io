<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.aixcc.top</id>
    <title>陆时忤的博客</title>
    <link href="https://blog.aixcc.top" />
    <updated>2024-07-14T14:25:37.000Z</updated>
    <category term="Blog" />
    <category term="Java" />
    <category term="笔记" />
    <category term="MySQL" />
    <category term="Linux" />
    <category term="Mac" />
    <category term="Maven" />
    <category term="MyBatis" />
    <category term="总结" />
    <category term="RabbitMQ" />
    <category term="Redis" />
    <category term="Spring" />
    <category term="Alist" />
    <category term="Vue" />
    <category term="前端" />
    <category term="Homebrew" />
    <category term="SSL" />
    <category term="域名" />
    <entry>
        <id>https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85Maven/</id>
        <title>Mac安装Maven</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85Maven/"/>
        <content type="html">&lt;h1 id=&#34;Maven-环境设置：全面指南&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Maven-环境设置：全面指南&#34;&gt;&lt;/a&gt;Maven 环境设置：全面指南&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Maven 是 Java 项目的强大项目管理工具，可以自动化并简化构建过程。本指南将指导你完成在机器上设置 Maven 的步骤，包括安装 Java、Maven 以及配置开发环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#前提条件&#34;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;
&lt;p&gt;在安装 Maven 之前，你需要确保计算机上已安装 Java 开发工具包（JDK）。Maven 3.3+ 需要 JDK 1.7 或更高版本才能运行。&lt;/p&gt;
&lt;h3 id=&#34;1-检查-Java-安装&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-检查-Java-安装&#34;&gt;&lt;/a&gt;1. 检查 Java 安装&lt;/h3&gt;
&lt;p&gt;打开终端并输入：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;java&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-version&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此命令将显示当前安装的 Java 版本。如果未安装 Java，请访问 &lt;a href=&#34;https://blog.aixcc.top//2024/07/14/Mac%E5%AE%89%E8%A3%85JDK&#34;&gt;Mac 安装 JDK&lt;/a&gt; 获取详细的安装教程&lt;/p&gt;
&lt;h2 id=&#34;下载-Maven&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#下载-Maven&#34;&gt;&lt;/a&gt;下载 Maven&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://maven.apache.org/download.cgi&#34;&gt;Maven 下载页面&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151215642.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载二进制归档文件（例如 &lt;code&gt;apache-maven-3.8.6-bin.tar.gz&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装-Maven&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#安装-Maven&#34;&gt;&lt;/a&gt;安装 Maven&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将下载的归档文件解压到你选择的目录。在基于 Unix 的系统上，一个常见的目录是 &lt;code&gt;/opt&lt;/code&gt;。（也可以根据个人喜好选择其它目录）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置环境&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#配置环境&#34;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用文本编辑器打开你的 shell 配置文件（例如，如果你使用 zsh，则为 &lt;code&gt;.zshrc&lt;/code&gt;）：&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; ~/.zshrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;将 Maven 二进制文件添加到你的 PATH：&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/opt/apache-maven-3.8.6/bin:&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;保存文件并应用更改：&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.zshrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;验证&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#验证&#34;&gt;&lt;/a&gt;验证&lt;/h3&gt;
&lt;p&gt;要验证 Maven 是否正确安装，请键入：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;mvn &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此命令应显示 Maven 版本、Java 版本和操作系统详细信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151239977.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置-Maven&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#配置-Maven&#34;&gt;&lt;/a&gt;配置 Maven&lt;/h2&gt;
&lt;h3 id=&#34;设置本地仓库&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#设置本地仓库&#34;&gt;&lt;/a&gt;设置本地仓库&lt;/h3&gt;
&lt;p&gt;Maven 将所有依赖项存储在本地。你可以在 Maven 配置文件中指定此仓库的自定义位置：&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;/opt/apache-maven-3.8.6/conf/settings.xml&lt;/code&gt; 并添加以下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-markup&#34; data-language=&#34;markup&#34;&gt;&lt;code class=&#34;language-markup&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;localRepository&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;存储路径&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;localRepository&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
# 例如&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;localRepository&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;/Users/lushiwu/Data/maven-repository&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;localRepository&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;配置仓库镜像&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#配置仓库镜像&#34;&gt;&lt;/a&gt;配置仓库镜像&lt;/h3&gt;
&lt;p&gt;为了加速依赖项下载，配置如阿里云等镜像：&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;settings.xml&lt;/code&gt; 文件的 &lt;code&gt;&amp;lt;mirrors&amp;gt;&lt;/code&gt; 部分添加以下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-markup&#34; data-language=&#34;markup&#34;&gt;&lt;code class=&#34;language-markup&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mirror&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;aliyunmaven&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mirrorOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;*&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;mirrorOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;阿里云 Maven 镜像&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;https://maven.aliyun.com/repository/public&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;mirror&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;在-IntelliJ-IDEA-中配置-Maven&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#在-IntelliJ-IDEA-中配置-Maven&#34;&gt;&lt;/a&gt;在 IntelliJ IDEA 中配置 Maven&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开 IntelliJ IDEA。&lt;/li&gt;
&lt;li&gt;导航至 &lt;code&gt;设置&lt;/code&gt; &amp;gt; &lt;code&gt;构建、执行、部署&lt;/code&gt; &amp;gt; &lt;code&gt;构建工具&lt;/code&gt; &amp;gt; &lt;code&gt;Maven&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;指定 &lt;code&gt;Maven 主目录&lt;/code&gt; 为 &lt;code&gt;/opt/apache-maven-3.8.6&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;设置 &lt;code&gt;用户设置文件&lt;/code&gt; 为你刚配置的 &lt;code&gt;settings.xml&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151215660.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
</content>
        <category term="Mac" />
        <category term="Maven" />
        <updated>2024-07-14T14:25:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/</id>
        <title>Mac安装JDK</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/"/>
        <content type="html">&lt;h1 id=&#34;Mac-上的-JDK-的安装与卸载&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Mac-上的-JDK-的安装与卸载&#34;&gt;&lt;/a&gt;Mac 上的 JDK 的安装与卸载&lt;/h1&gt;
&lt;h2 id=&#34;从-AdoptOpenJDK-到-Temurin&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#从-AdoptOpenJDK-到-Temurin&#34;&gt;&lt;/a&gt;从 AdoptOpenJDK 到 Temurin&lt;/h2&gt;
&lt;h2 id=&#34;卸载-AdoptOpenJDK&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#卸载-AdoptOpenJDK&#34;&gt;&lt;/a&gt;卸载 AdoptOpenJDK&lt;/h2&gt;
&lt;p&gt;如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：&lt;/p&gt;
&lt;h3 id=&#34;步骤-1：卸载-AdoptOpenJDK&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-1：卸载-AdoptOpenJDK&#34;&gt;&lt;/a&gt;步骤 1：卸载 AdoptOpenJDK&lt;/h3&gt;
&lt;p&gt;打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 &lt;a href=&#34;https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/&#34;&gt;Homebrew 安装指南&lt;/a&gt; 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;brew remove &lt;span class=&#34;token parameter variable&#34;&gt;--cask&lt;/span&gt; adoptopenjdk8&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重复上述命令，替换 &lt;code&gt;adoptopenjdk8&lt;/code&gt; 为其他版本号以卸载其他版本的 JDK。&lt;/p&gt;
&lt;h3 id=&#34;步骤-2：移除-Homebrew-的-Tap&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-2：移除-Homebrew-的-Tap&#34;&gt;&lt;/a&gt;步骤 2：移除 Homebrew 的 Tap&lt;/h3&gt;
&lt;p&gt;完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;brew untap AdoptOpenJDK/openjdk&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就和 AdoptOpenJDK 完成了告别。&lt;/p&gt;
&lt;h2 id=&#34;清除旧的-Oracle-JDK&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#清除旧的-Oracle-JDK&#34;&gt;&lt;/a&gt;清除旧的 Oracle JDK&lt;/h2&gt;
&lt;p&gt;对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：&lt;/p&gt;
&lt;h3 id=&#34;步骤-3：删除旧的-JDK-文件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-3：删除旧的-JDK-文件&#34;&gt;&lt;/a&gt;步骤 3：删除旧的 JDK 文件&lt;/h3&gt;
&lt;p&gt;删除 &lt;code&gt;/Library/Java/JavaVirtualMachines/&lt;/code&gt; 目录下的 JDK 文件夹。此外，清理以下位置的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/Library/Internet Plug-Ins/JavaAppletPlugin.plugin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/Library/PreferencePanes/JavaControlPanel.prefPane&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/Library/Application Support/Oracle/Java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装-Temurin-JDK&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#安装-Temurin-JDK&#34;&gt;&lt;/a&gt;安装 Temurin JDK&lt;/h2&gt;
&lt;p&gt;在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。&lt;/p&gt;
&lt;h3 id=&#34;步骤-4：配置-Homebrew-Cask-版本&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-4：配置-Homebrew-Cask-版本&#34;&gt;&lt;/a&gt;步骤 4：配置 Homebrew Cask 版本&lt;/h3&gt;
&lt;p&gt;首先，确保你的 Homebrew 能够访问所有 cask 版本：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;brew search temurin&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-5：安装-Temurin&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-5：安装-Temurin&#34;&gt;&lt;/a&gt;步骤 5：安装 Temurin&lt;/h3&gt;
&lt;p&gt;现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;brew &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--cask&lt;/span&gt; temurin@8&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#结论&#34;&gt;&lt;/a&gt;结论&lt;/h2&gt;
&lt;p&gt;通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。&lt;/p&gt;
</content>
        <category term="Java" />
        <category term="Mac" />
        <updated>2024-07-14T14:13:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/</id>
        <title>安装Homebrew</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/"/>
        <content type="html">&lt;h1 id=&#34;Mac-上安装-Homebrew：一步一步的指南&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Mac-上安装-Homebrew：一步一步的指南&#34;&gt;&lt;/a&gt;Mac 上安装 Homebrew：一步一步的指南&lt;/h1&gt;
&lt;h2 id=&#34;什么是-Homebrew？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是-Homebrew？&#34;&gt;&lt;/a&gt;什么是 Homebrew？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; 是 Mac OS X 或 Linux 上的一款自由和开源的软件包管理系统，它简化了软件的安装过程。它允许用户方便地安装、配置、更新和卸载开源软件。它的设计理念是简化没有访问权限的用户在 macOS 上安装软件的过程。&lt;/p&gt;
&lt;h2 id=&#34;安装前的准备&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#安装前的准备&#34;&gt;&lt;/a&gt;安装前的准备&lt;/h2&gt;
&lt;p&gt;在安装 Homebrew 之前，请确保您的 Mac 符合以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 系统 (或 OS X 至少 10.10 及以上版本)&lt;/li&gt;
&lt;li&gt;有权访问 macOS 的终端（Terminal）&lt;/li&gt;
&lt;li&gt;安装了 Xcode 的命令行工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-Xcode-命令行工具&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#安装-Xcode-命令行工具&#34;&gt;&lt;/a&gt;安装 Xcode 命令行工具&lt;/h3&gt;
&lt;p&gt;打开终端，输入以下命令来安装 Xcode 的命令行工具：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;xcode-select &lt;span class=&#34;token parameter variable&#34;&gt;--install&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;系统会弹出一个安装窗口，点击“安装”即可开始下载并安装所需的工具。&lt;/p&gt;
&lt;h2 id=&#34;安装-Homebrew&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#安装-Homebrew&#34;&gt;&lt;/a&gt;安装 Homebrew&lt;/h2&gt;
&lt;p&gt;完成 Xcode 命令行工具的安装后，您就可以安装 Homebrew 了。在终端中输入以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;/bin/bash &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此脚本将会下载并执行 Homebrew 的安装程序。过程中可能会要求您输入系统密码，因为安装涉及到对系统级目录的写入操作。&lt;/p&gt;
&lt;h2 id=&#34;安装后的配置&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#安装后的配置&#34;&gt;&lt;/a&gt;安装后的配置&lt;/h2&gt;
&lt;p&gt;安装完成后，按照终端中显示的指示，您可能需要添加 Homebrew 的路径到您的 shell 配置文件中。对于 bash 用户，可以添加以下行到 &lt;code&gt;~/.bash_profile&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;eval &#34;$(/opt/homebrew/bin/brew shellenv)&#34;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; ~/.bash_profile
&lt;span class=&#34;token builtin class-name&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;/opt/homebrew/bin/brew shellenv&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果您使用的是 zsh，应添加到 &lt;code&gt;~/.zshrc&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;eval &#34;$(/opt/homebrew/bin/brew shellenv)&#34;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; ~/.zshrc
&lt;span class=&#34;token builtin class-name&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;/opt/homebrew/bin/brew shellenv&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;验证安装&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#验证安装&#34;&gt;&lt;/a&gt;验证安装&lt;/h2&gt;
&lt;p&gt;安装完成后，重新启动终端或者运行以下命令来配置 shell：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.bash_profile&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者，对于 zsh 用户：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.zshrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，您可以运行以下命令来检查 Homebrew 是否安装成功：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;brew doctor&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示 “Your system is ready to brew” 的信息，恭喜您，您已经成功安装并配置了 Homebrew。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151218277.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#结论&#34;&gt;&lt;/a&gt;结论&lt;/h2&gt;
&lt;p&gt;通过安装 Homebrew，您的 Mac 将能够轻松地管理大量开源软件，从而大大提高您的生产效率和工作流程。无论您是开发人员还是日常用户，Homebrew 都是一个宝贵的工具，可以帮助您维护软件的最新状态。&lt;/p&gt;
</content>
        <category term="Mac" />
        <category term="Homebrew" />
        <updated>2024-07-14T12:10:50.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/07/13/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
        <title>Vue3快速上手</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/07/13/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
        <content type="html">&lt;h1 id=&#34;1-Vue3简介&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-Vue3简介&#34;&gt;&lt;/a&gt;1. Vue3简介&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2020年9月18日，&lt;code&gt;Vue.js&lt;/code&gt;发布版&lt;code&gt;3.0&lt;/code&gt;版本，代号：&lt;code&gt;One Piece&lt;/code&gt;（n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经历了：&lt;a href=&#34;https://github.com/vuejs/core/commits/main&#34;&gt;4800+次提交&lt;/a&gt;、&lt;a href=&#34;https://github.com/vuejs/rfcs/tree/master/active-rfcs&#34;&gt;40+个RFC&lt;/a&gt;、&lt;a href=&#34;https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+&#34;&gt;600+次PR&lt;/a&gt;、&lt;a href=&#34;https://github.com/vuejs/core/graphs/contributors&#34;&gt;300+贡献者&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官方发版地址：&lt;a href=&#34;https://github.com/vuejs/core/releases/tag/v3.0.0&#34;&gt;Release v3.0.0 One Piece · vuejs/core&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;截止2023年10月，最新的公开版本为：&lt;code&gt;3.3.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232363.webp&#34; alt=&#34;image.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-1-【性能的提升】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-1-【性能的提升】&#34;&gt;&lt;/a&gt;1.1. 【性能的提升】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打包大小减少&lt;code&gt;41%&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初次渲染快&lt;code&gt;55%&lt;/code&gt;, 更新渲染快&lt;code&gt;133%&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存减少&lt;code&gt;54%&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-【-源码的升级】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-2-【-源码的升级】&#34;&gt;&lt;/a&gt;1.2.【 源码的升级】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;Proxy&lt;/code&gt;代替&lt;code&gt;defineProperty&lt;/code&gt;实现响应式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写虚拟&lt;code&gt;DOM&lt;/code&gt;的实现和&lt;code&gt;Tree-Shaking&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-【拥抱TypeScript】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-3-【拥抱TypeScript】&#34;&gt;&lt;/a&gt;1.3. 【拥抱TypeScript】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vue3&lt;/code&gt;可以更好的支持&lt;code&gt;TypeScript&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-4-【新的特性】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-4-【新的特性】&#34;&gt;&lt;/a&gt;1.4. 【新的特性】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Composition API&lt;/code&gt;（组合&lt;code&gt;API&lt;/code&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ref&lt;/code&gt;与&lt;code&gt;reactive&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;computed&lt;/code&gt;与&lt;code&gt;watch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新的内置组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Fragment&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Teleport&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Suspense&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他改变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新的生命周期钩子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; 选项应始终被声明为一个函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除&lt;code&gt;keyCode&lt;/code&gt;支持作为&lt;code&gt; v-on&lt;/code&gt; 的修饰符&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-创建Vue3工程&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-创建Vue3工程&#34;&gt;&lt;/a&gt;2. 创建Vue3工程&lt;/h1&gt;
&lt;h2 id=&#34;2-1-【基于-vue-cli-创建】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-1-【基于-vue-cli-创建】&#34;&gt;&lt;/a&gt;2.1. 【基于 vue-cli 创建】&lt;/h2&gt;
&lt;p&gt;点击查看&lt;a href=&#34;https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：目前&lt;code&gt;vue-cli&lt;/code&gt;已处于维护模式，官方推荐基于 &lt;code&gt;Vite&lt;/code&gt; 创建项目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上&lt;/span&gt;
vue &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;version

&lt;span class=&#34;token comment&#34;&gt;## 安装或者升级你的@vue/cli &lt;/span&gt;
npm install &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;g @vue/&lt;span class=&#34;token function&#34;&gt;cli&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;## 执行创建命令&lt;/span&gt;
vue create vue_test

&lt;span class=&#34;token comment&#34;&gt;##  随后选择3.x&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;##  &gt; 3.x&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;##    2.x&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;## 启动&lt;/span&gt;
cd vue_test
npm run serve&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-2-【基于-vite-创建】-推荐&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-2-【基于-vite-创建】-推荐&#34;&gt;&lt;/a&gt;2.2. 【基于 vite 创建】(推荐)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vite&lt;/code&gt; 是新一代前端构建工具，官网地址：&lt;a href=&#34;https://vitejs.cn/&#34;&gt;https://vitejs.cn&lt;/a&gt;，&lt;code&gt;vite&lt;/code&gt;的优势如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量快速的热重载（&lt;code&gt;HMR&lt;/code&gt;），能实现极速的服务启动。&lt;/li&gt;
&lt;li&gt;对 &lt;code&gt;TypeScript&lt;/code&gt;、&lt;code&gt;JSX&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt; 等支持开箱即用。&lt;/li&gt;
&lt;li&gt;真正的按需编译，不再等待整个应用编译完成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack&lt;/code&gt;构建 与 &lt;code&gt;vite&lt;/code&gt;构建对比图如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232253.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232053.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具体操作如下（点击查看&lt;a href=&#34;https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application&#34;&gt;官方文档&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;## 1.创建命令&lt;/span&gt;
npm create vue@latest

&lt;span class=&#34;token comment&#34;&gt;## 2.具体配置&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;## 配置项目名称&lt;/span&gt;
√ Project name: vue3_test
&lt;span class=&#34;token comment&#34;&gt;## 是否添加TypeScript支持&lt;/span&gt;
√ Add TypeScript?  Yes
&lt;span class=&#34;token comment&#34;&gt;## 是否添加JSX支持&lt;/span&gt;
√ Add JSX Support?  No
&lt;span class=&#34;token comment&#34;&gt;## 是否添加路由环境&lt;/span&gt;
√ Add Vue Router &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; Single Page Application development?  No
&lt;span class=&#34;token comment&#34;&gt;## 是否添加pinia环境&lt;/span&gt;
√ Add Pinia &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; state management?  No
&lt;span class=&#34;token comment&#34;&gt;## 是否添加单元测试&lt;/span&gt;
√ Add Vitest &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; Unit Testing?  No
&lt;span class=&#34;token comment&#34;&gt;## 是否添加端到端测试方案&lt;/span&gt;
√ Add an &lt;span class=&#34;token keyword&#34;&gt;End&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;to-&lt;span class=&#34;token keyword&#34;&gt;End&lt;/span&gt; Testing Solution? » No
&lt;span class=&#34;token comment&#34;&gt;## 是否添加ESLint语法检查&lt;/span&gt;
√ Add ESLint &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; code quality?  Yes
&lt;span class=&#34;token comment&#34;&gt;## 是否添加Prettiert代码格式化&lt;/span&gt;
√ Add Prettier &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; code formatting?  No&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自己动手编写一个App组件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;你好啊！&amp;lt;&amp;#x2F;h1&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot;&amp;gt;
  export default &amp;#123;
    name:&amp;#39;App&amp;#39; &amp;#x2F;&amp;#x2F;组件名
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;

&amp;lt;style&amp;gt;
  .app &amp;#123;
    background-color: #ddd;
    box-shadow: 0 0 10px;
    border-radius: 10px;
    padding: 20px;
  &amp;#125;
&amp;lt;&amp;#x2F;style&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装官方推荐的&lt;code&gt;vscode&lt;/code&gt;插件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232847.webp&#34; alt=&#34;Snipaste_2023-10-08_20-46-34&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232668.webp&#34; alt=&#34;image-20231218085906380&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vite&lt;/code&gt; 项目中，&lt;code&gt;index.html&lt;/code&gt; 是项目的入口文件，在项目最外层。&lt;/li&gt;
&lt;li&gt;加载&lt;code&gt;index.html&lt;/code&gt;后，&lt;code&gt;Vite&lt;/code&gt; 解析 &lt;code&gt;&amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;xxx&amp;quot;&amp;gt;&lt;/code&gt; 指向的&lt;code&gt;JavaScript&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vue3&lt;/code&gt;**中是通过 **&lt;code&gt;createApp&lt;/code&gt; 函数创建一个应用实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-【一个简单的效果】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-3-【一个简单的效果】&#34;&gt;&lt;/a&gt;2.3. 【一个简单的效果】&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Vue3&lt;/code&gt;向下兼容&lt;code&gt;Vue2&lt;/code&gt;语法，且&lt;code&gt;Vue3&lt;/code&gt;中的模板中可以没有根标签&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123;age&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;年龄+1&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;showTel&amp;quot;&amp;gt;点我查看联系方式&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot;&amp;gt;
  export default &amp;#123;
    name:&amp;#39;App&amp;#39;,
    data() &amp;#123;
      return &amp;#123;
        name:&amp;#39;张三&amp;#39;,
        age:18,
        tel:&amp;#39;13888888888&amp;#39;
      &amp;#125;
    &amp;#125;,
    methods:&amp;#123;
      changeName()&amp;#123;
        this.name &amp;#x3D; &amp;#39;zhang-san&amp;#39;
      &amp;#125;,
      changeAge()&amp;#123;
        this.age +&amp;#x3D; 1
      &amp;#125;,
      showTel()&amp;#123;
        alert(this.tel)
      &amp;#125;
    &amp;#125;,
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3-Vue3核心语法&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-Vue3核心语法&#34;&gt;&lt;/a&gt;3. Vue3核心语法&lt;/h1&gt;
&lt;h2 id=&#34;3-1-【OptionsAPI-与-CompositionAPI】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-1-【OptionsAPI-与-CompositionAPI】&#34;&gt;&lt;/a&gt;3.1.  【OptionsAPI 与 CompositionAPI】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vue2&lt;/code&gt;的&lt;code&gt;API&lt;/code&gt;设计是&lt;code&gt;Options&lt;/code&gt;（配置）风格的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vue3&lt;/code&gt;的&lt;code&gt;API&lt;/code&gt;设计是&lt;code&gt;Composition&lt;/code&gt;（组合）风格的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Options-API-的弊端&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Options-API-的弊端&#34;&gt;&lt;/a&gt;Options API 的弊端&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Options&lt;/code&gt;类型的 &lt;code&gt;API&lt;/code&gt;，数据、方法、计算属性等，是分散在：&lt;code&gt;data&lt;/code&gt;、&lt;code&gt;methods&lt;/code&gt;、&lt;code&gt;computed&lt;/code&gt;中的，若想新增或者修改一个需求，就需要分别修改：&lt;code&gt;data&lt;/code&gt;、&lt;code&gt;methods&lt;/code&gt;、&lt;code&gt;computed&lt;/code&gt;，不便于维护和复用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.aixcc.top/file/c3edadbf9a9bbfd22d442.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;img src=&#34;https://img.aixcc.top/file/d978f7c4fd1f8a2a2e8f9.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Composition-API-的优势&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Composition-API-的优势&#34;&gt;&lt;/a&gt;Composition API 的优势&lt;/h3&gt;
&lt;p&gt;可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.aixcc.top/file/9acc07d0f3690f12a9fda.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;img src=&#34;https://img.aixcc.top/file/2e7d2a90529d10cad9c93.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：以上四张动图原创作者：大帅老猿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-2-【拉开序幕的-setup】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-2-【拉开序幕的-setup】&#34;&gt;&lt;/a&gt;3.2. 【拉开序幕的 setup】&lt;/h2&gt;
&lt;h3 id=&#34;setup-概述&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#setup-概述&#34;&gt;&lt;/a&gt;setup 概述&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;setup&lt;/code&gt;是&lt;code&gt;Vue3&lt;/code&gt;中一个新的配置项，值是一个函数，它是 &lt;code&gt;Composition API&lt;/code&gt; &lt;strong&gt;“表演的舞台&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;”&lt;/strong&gt;&lt;/em&gt;，组件中所用到的：数据、方法、计算属性、监视…等等，均配置在&lt;code&gt;setup&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setup&lt;/code&gt;函数返回的对象中的内容，可直接在模板中使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup&lt;/code&gt;中访问&lt;code&gt;this&lt;/code&gt;是&lt;code&gt;undefined&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup&lt;/code&gt;函数会在&lt;code&gt;beforeCreate&lt;/code&gt;之前调用，它是“领先”所有钩子执行的。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123;age&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;年龄+1&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;showTel&amp;quot;&amp;gt;点我查看联系方式&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot;&amp;gt;
  export default &amp;#123;
    name:&amp;#39;Person&amp;#39;,
    setup()&amp;#123;
      &amp;#x2F;&amp;#x2F; 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）
      let name &amp;#x3D; &amp;#39;张三&amp;#39;
      let age &amp;#x3D; 18
      let tel &amp;#x3D; &amp;#39;13888888888&amp;#39;

      &amp;#x2F;&amp;#x2F; 方法，原来写在methods中
      function changeName()&amp;#123;
        name &amp;#x3D; &amp;#39;zhang-san&amp;#39; &amp;#x2F;&amp;#x2F;注意：此时这么修改name页面是不变化的
        console.log(name)
      &amp;#125;
      function changeAge()&amp;#123;
        age +&amp;#x3D; 1 &amp;#x2F;&amp;#x2F;注意：此时这么修改age页面是不变化的
        console.log(age)
      &amp;#125;
      function showTel()&amp;#123;
        alert(tel)
      &amp;#125;

      &amp;#x2F;&amp;#x2F; 返回一个对象，对象中的内容，模板中可以直接使用
      return &amp;#123;name,age,tel,changeName,changeAge,showTel&amp;#125;
    &amp;#125;
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-的返回值&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#setup-的返回值&#34;&gt;&lt;/a&gt;setup 的返回值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;若返回一个&lt;strong&gt;对象&lt;/strong&gt;：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**&lt;/li&gt;
&lt;li&gt;若返回一个&lt;strong&gt;函数&lt;/strong&gt;：则可以自定义渲染内容，代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-jsx&#34; data-language=&#34;jsx&#34;&gt;&lt;code class=&#34;language-jsx&#34;&gt;&lt;span class=&#34;token function&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;你好啊！&#39;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-与-Options-API-的关系&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#setup-与-Options-API-的关系&#34;&gt;&lt;/a&gt;setup 与 Options API 的关系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vue2&lt;/code&gt; 的配置（&lt;code&gt;data&lt;/code&gt;、&lt;code&gt;methos&lt;/code&gt;…）中&lt;strong&gt;可以访问到&lt;/strong&gt; &lt;code&gt;setup&lt;/code&gt;中的属性、方法。&lt;/li&gt;
&lt;li&gt;但在&lt;code&gt;setup&lt;/code&gt;中&lt;strong&gt;不能访问到&lt;/strong&gt;&lt;code&gt;Vue2&lt;/code&gt;的配置（&lt;code&gt;data&lt;/code&gt;、&lt;code&gt;methos&lt;/code&gt;…）。&lt;/li&gt;
&lt;li&gt;如果与&lt;code&gt;Vue2&lt;/code&gt;冲突，则&lt;code&gt;setup&lt;/code&gt;优先。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setup-语法糖&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#setup-语法糖&#34;&gt;&lt;/a&gt;setup 语法糖&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;setup&lt;/code&gt;函数有一个语法糖，这个语法糖，可以让我们把&lt;code&gt;setup&lt;/code&gt;独立出去，代码如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123;age&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changAge&amp;quot;&amp;gt;年龄+1&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;showTel&amp;quot;&amp;gt;点我查看联系方式&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot;&amp;gt;
  export default &amp;#123;
    name:&amp;#39;Person&amp;#39;,
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;

&amp;lt;!-- 下面的写法是setup语法糖 --&amp;gt;
&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot;&amp;gt;
  console.log(this) &amp;#x2F;&amp;#x2F;undefined
  
  &amp;#x2F;&amp;#x2F; 数据（注意：此时的name、age、tel都不是响应式数据）
  let name &amp;#x3D; &amp;#39;张三&amp;#39;
  let age &amp;#x3D; 18
  let tel &amp;#x3D; &amp;#39;13888888888&amp;#39;

  &amp;#x2F;&amp;#x2F; 方法
  function changName()&amp;#123;
    name &amp;#x3D; &amp;#39;李四&amp;#39;&amp;#x2F;&amp;#x2F;注意：此时这么修改name页面是不变化的
  &amp;#125;
  function changAge()&amp;#123;
    console.log(age)
    age +&amp;#x3D; 1 &amp;#x2F;&amp;#x2F;注意：此时这么修改age页面是不变化的
  &amp;#125;
  function showTel()&amp;#123;
    alert(tel)
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;扩展：上述代码，还需要编写一个不写&lt;code&gt;setup&lt;/code&gt;的&lt;code&gt;script&lt;/code&gt;标签，去指定组件名字，比较麻烦，我们可以借助&lt;code&gt;vite&lt;/code&gt;中的插件简化&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一步：&lt;code&gt;npm i vite-plugin-vue-setup-extend -D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二步：&lt;code&gt;vite.config.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;line-numbers language-jsx&#34; data-language=&#34;jsx&#34;&gt;&lt;code class=&#34;language-jsx&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; defineConfig &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vite&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; VueSetupExtend &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vite-plugin-vue-setup-extend&#39;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineConfig&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token literal-property property&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;VueSetupExtend&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;第三步：&lt;code&gt;&amp;lt;script setup lang=&amp;quot;ts&amp;quot; name=&amp;quot;Person&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-3-【ref-创建：基本类型的响应式数据】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-3-【ref-创建：基本类型的响应式数据】&#34;&gt;&lt;/a&gt;3.3. 【ref 创建：基本类型的响应式数据】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;**作用：**定义响应式变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;code&gt;let xxx = ref(初始值)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;**返回值：**一个&lt;code&gt;RefImpl&lt;/code&gt;的实例对象，简称&lt;code&gt;ref对象&lt;/code&gt;或&lt;code&gt;ref&lt;/code&gt;，&lt;code&gt;ref&lt;/code&gt;对象的&lt;code&gt;value&lt;/code&gt;&lt;strong&gt;属性是响应式的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JS&lt;/code&gt;中操作数据需要：&lt;code&gt;xxx.value&lt;/code&gt;，但模板中不需要&lt;code&gt;.value&lt;/code&gt;，直接使用即可。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;let name = ref(&#39;张三&#39;)&lt;/code&gt;来说，&lt;code&gt;name&lt;/code&gt;不是响应式的，&lt;code&gt;name.value&lt;/code&gt;是响应式的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123;age&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;年龄+1&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;showTel&amp;quot;&amp;gt;点我查看联系方式&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;ref&amp;#125; from &amp;#39;vue&amp;#39;
  &amp;#x2F;&amp;#x2F; name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。
  let name &amp;#x3D; ref(&amp;#39;张三&amp;#39;)
  let age &amp;#x3D; ref(18)
  &amp;#x2F;&amp;#x2F; tel就是一个普通的字符串，不是响应式的
  let tel &amp;#x3D; &amp;#39;13888888888&amp;#39;

  function changeName()&amp;#123;
    &amp;#x2F;&amp;#x2F; JS中操作ref对象时候需要.value
    name.value &amp;#x3D; &amp;#39;李四&amp;#39;
    console.log(name.value)

    &amp;#x2F;&amp;#x2F; 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。
    &amp;#x2F;&amp;#x2F; name &amp;#x3D; ref(&amp;#39;zhang-san&amp;#39;)
  &amp;#125;
  function changeAge()&amp;#123;
    &amp;#x2F;&amp;#x2F; JS中操作ref对象时候需要.value
    age.value +&amp;#x3D; 1 
    console.log(age.value)
  &amp;#125;
  function showTel()&amp;#123;
    alert(tel)
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-4-【reactive-创建：对象类型的响应式数据】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-4-【reactive-创建：对象类型的响应式数据】&#34;&gt;&lt;/a&gt;3.4. 【reactive 创建：对象类型的响应式数据】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用：&lt;strong&gt;定义一个&lt;/strong&gt;响应式对象&lt;/strong&gt;（基本类型不要用它，要用&lt;code&gt;ref&lt;/code&gt;，否则报错）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;code&gt;let 响应式对象= reactive(源对象)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;**返回值：**一个&lt;code&gt;Proxy&lt;/code&gt;的实例对象，简称：响应式对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;code&gt;reactive&lt;/code&gt;定义的响应式数据是“深层次”的。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;汽车信息：一台&amp;#123;&amp;#123; car.brand &amp;#125;&amp;#125;汽车，价值&amp;#123;&amp;#123; car.price &amp;#125;&amp;#125;万&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;游戏列表：&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li v-for&amp;#x3D;&amp;quot;g in games&amp;quot; :key&amp;#x3D;&amp;quot;g.id&amp;quot;&amp;gt;&amp;#123;&amp;#123; g.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;li&amp;gt;
    &amp;lt;&amp;#x2F;ul&amp;gt;
    &amp;lt;h2&amp;gt;测试：&amp;#123;&amp;#123;obj.a.b.c.d&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeCarPrice&amp;quot;&amp;gt;修改汽车价格&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeFirstGame&amp;quot;&amp;gt;修改第一游戏&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;test&amp;quot;&amp;gt;测试&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
import &amp;#123; reactive &amp;#125; from &amp;#39;vue&amp;#39;

&amp;#x2F;&amp;#x2F; 数据
let car &amp;#x3D; reactive(&amp;#123; brand: &amp;#39;奔驰&amp;#39;, price: 100 &amp;#125;)
let games &amp;#x3D; reactive([
  &amp;#123; id: &amp;#39;ahsgdyfa01&amp;#39;, name: &amp;#39;英雄联盟&amp;#39; &amp;#125;,
  &amp;#123; id: &amp;#39;ahsgdyfa02&amp;#39;, name: &amp;#39;王者荣耀&amp;#39; &amp;#125;,
  &amp;#123; id: &amp;#39;ahsgdyfa03&amp;#39;, name: &amp;#39;原神&amp;#39; &amp;#125;
])
let obj &amp;#x3D; reactive(&amp;#123;
  a:&amp;#123;
    b:&amp;#123;
      c:&amp;#123;
        d:666
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;#125;)

function changeCarPrice() &amp;#123;
  car.price +&amp;#x3D; 10
&amp;#125;
function changeFirstGame() &amp;#123;
  games[0].name &amp;#x3D; &amp;#39;流星蝴蝶剑&amp;#39;
&amp;#125;
function test()&amp;#123;
  obj.a.b.c.d &amp;#x3D; 999
&amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-5-【ref-创建：对象类型的响应式数据】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-5-【ref-创建：对象类型的响应式数据】&#34;&gt;&lt;/a&gt;3.5. 【ref 创建：对象类型的响应式数据】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;其实&lt;code&gt;ref&lt;/code&gt;接收的数据可以是：&lt;strong&gt;基本类型&lt;/strong&gt;、&lt;strong&gt;对象类型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;若&lt;code&gt;ref&lt;/code&gt;接收的是对象类型，内部其实也是调用了&lt;code&gt;reactive&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;汽车信息：一台&amp;#123;&amp;#123; car.brand &amp;#125;&amp;#125;汽车，价值&amp;#123;&amp;#123; car.price &amp;#125;&amp;#125;万&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;游戏列表：&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li v-for&amp;#x3D;&amp;quot;g in games&amp;quot; :key&amp;#x3D;&amp;quot;g.id&amp;quot;&amp;gt;&amp;#123;&amp;#123; g.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;li&amp;gt;
    &amp;lt;&amp;#x2F;ul&amp;gt;
    &amp;lt;h2&amp;gt;测试：&amp;#123;&amp;#123;obj.a.b.c.d&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeCarPrice&amp;quot;&amp;gt;修改汽车价格&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeFirstGame&amp;quot;&amp;gt;修改第一游戏&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;test&amp;quot;&amp;gt;测试&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
import &amp;#123; ref &amp;#125; from &amp;#39;vue&amp;#39;

&amp;#x2F;&amp;#x2F; 数据
let car &amp;#x3D; ref(&amp;#123; brand: &amp;#39;奔驰&amp;#39;, price: 100 &amp;#125;)
let games &amp;#x3D; ref([
  &amp;#123; id: &amp;#39;ahsgdyfa01&amp;#39;, name: &amp;#39;英雄联盟&amp;#39; &amp;#125;,
  &amp;#123; id: &amp;#39;ahsgdyfa02&amp;#39;, name: &amp;#39;王者荣耀&amp;#39; &amp;#125;,
  &amp;#123; id: &amp;#39;ahsgdyfa03&amp;#39;, name: &amp;#39;原神&amp;#39; &amp;#125;
])
let obj &amp;#x3D; ref(&amp;#123;
  a:&amp;#123;
    b:&amp;#123;
      c:&amp;#123;
        d:666
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;#125;)

console.log(car)

function changeCarPrice() &amp;#123;
  car.value.price +&amp;#x3D; 10
&amp;#125;
function changeFirstGame() &amp;#123;
  games.value[0].name &amp;#x3D; &amp;#39;流星蝴蝶剑&amp;#39;
&amp;#125;
function test()&amp;#123;
  obj.value.a.b.c.d &amp;#x3D; 999
&amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-6-【ref-对比-reactive】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-6-【ref-对比-reactive】&#34;&gt;&lt;/a&gt;3.6. 【ref 对比 reactive】&lt;/h2&gt;
&lt;p&gt;宏观角度看：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ref&lt;/code&gt;用来定义：&lt;strong&gt;基本类型数据&lt;/strong&gt;、&lt;strong&gt;对象类型数据&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reactive&lt;/code&gt;用来定义：&lt;strong&gt;对象类型数据&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;区别：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ref&lt;/code&gt;创建的变量必须使用&lt;code&gt;.value&lt;/code&gt;（可以使用&lt;code&gt;volar&lt;/code&gt;插件自动添加&lt;code&gt;.value&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232718.webp&#34; alt=&#34;自动补充value&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reactive&lt;/code&gt;重新分配一个新对象，会&lt;strong&gt;失去&lt;/strong&gt;响应式（可以使用&lt;code&gt;Object.assign&lt;/code&gt;去整体替换）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用原则：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;若需要一个基本类型的响应式数据，必须使用&lt;code&gt;ref&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;若需要一个响应式对象，层级不深，&lt;code&gt;ref&lt;/code&gt;、&lt;code&gt;reactive&lt;/code&gt;都可以。&lt;/li&gt;
&lt;li&gt;若需要一个响应式对象，且层级较深，推荐使用&lt;code&gt;reactive&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-7-【toRefs-与-toRef】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-7-【toRefs-与-toRef】&#34;&gt;&lt;/a&gt;3.7. 【toRefs 与 toRef】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作用：将一个响应式对象中的每一个属性，转换为&lt;code&gt;ref&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;备注：&lt;code&gt;toRefs&lt;/code&gt;与&lt;code&gt;toRef&lt;/code&gt;功能一致，但&lt;code&gt;toRefs&lt;/code&gt;可以批量转换。&lt;/li&gt;
&lt;li&gt;语法如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123;person.name&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123;person.age&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;性别：&amp;#123;&amp;#123;person.gender&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;修改年龄&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeGender&amp;quot;&amp;gt;修改性别&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;ref,reactive,toRefs,toRef&amp;#125; from &amp;#39;vue&amp;#39;

  &amp;#x2F;&amp;#x2F; 数据
  let person &amp;#x3D; reactive(&amp;#123;name:&amp;#39;张三&amp;#39;, age:18, gender:&amp;#39;男&amp;#39;&amp;#125;)
	
  &amp;#x2F;&amp;#x2F; 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力
  let &amp;#123;name,gender&amp;#125; &amp;#x3D;  toRefs(person)
	
  &amp;#x2F;&amp;#x2F; 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力
  let age &amp;#x3D; toRef(person,&amp;#39;age&amp;#39;)

  &amp;#x2F;&amp;#x2F; 方法
  function changeName()&amp;#123;
    name.value +&amp;#x3D; &amp;#39;~&amp;#39;
  &amp;#125;
  function changeAge()&amp;#123;
    age.value +&amp;#x3D; 1
  &amp;#125;
  function changeGender()&amp;#123;
    gender.value &amp;#x3D; &amp;#39;女&amp;#39;
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-8-【computed】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-8-【computed】&#34;&gt;&lt;/a&gt;3.8. 【computed】&lt;/h2&gt;
&lt;p&gt;作用：根据已有数据计算出新数据（和&lt;code&gt;Vue2&lt;/code&gt;中的&lt;code&gt;computed&lt;/code&gt;作用一致）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.aixcc.top/file/35111db5e18d3bb69aee9.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    姓：&amp;lt;input type&amp;#x3D;&amp;quot;text&amp;quot; v-model&amp;#x3D;&amp;quot;firstName&amp;quot;&amp;gt; &amp;lt;br&amp;gt;
    名：&amp;lt;input type&amp;#x3D;&amp;quot;text&amp;quot; v-model&amp;#x3D;&amp;quot;lastName&amp;quot;&amp;gt; &amp;lt;br&amp;gt;
    全名：&amp;lt;span&amp;gt;&amp;#123;&amp;#123;fullName&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;span&amp;gt; &amp;lt;br&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeFullName&amp;quot;&amp;gt;全名改为：li-si&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;App&amp;quot;&amp;gt;
  import &amp;#123;ref,computed&amp;#125; from &amp;#39;vue&amp;#39;

  let firstName &amp;#x3D; ref(&amp;#39;zhang&amp;#39;)
  let lastName &amp;#x3D; ref(&amp;#39;san&amp;#39;)

  &amp;#x2F;&amp;#x2F; 计算属性——只读取，不修改
  &amp;#x2F;* let fullName &amp;#x3D; computed(()&amp;#x3D;&amp;gt;&amp;#123;
    return firstName.value + &amp;#39;-&amp;#39; + lastName.value
  &amp;#125;) *&amp;#x2F;


  &amp;#x2F;&amp;#x2F; 计算属性——既读取又修改
  let fullName &amp;#x3D; computed(&amp;#123;
    &amp;#x2F;&amp;#x2F; 读取
    get()&amp;#123;
      return firstName.value + &amp;#39;-&amp;#39; + lastName.value
    &amp;#125;,
    &amp;#x2F;&amp;#x2F; 修改
    set(val)&amp;#123;
      console.log(&amp;#39;有人修改了fullName&amp;#39;,val)
      firstName.value &amp;#x3D; val.split(&amp;#39;-&amp;#39;)[0]
      lastName.value &amp;#x3D; val.split(&amp;#39;-&amp;#39;)[1]
    &amp;#125;
  &amp;#125;)

  function changeFullName()&amp;#123;
    fullName.value &amp;#x3D; &amp;#39;li-si&amp;#39;
  &amp;#125; 
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-9-【watch】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-9-【watch】&#34;&gt;&lt;/a&gt;3.9.【watch】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作用：监视数据的变化（和&lt;code&gt;Vue2&lt;/code&gt;中的&lt;code&gt;watch&lt;/code&gt;作用一致）&lt;/li&gt;
&lt;li&gt;特点：&lt;code&gt;Vue3&lt;/code&gt;中的&lt;code&gt;watch&lt;/code&gt;只能监视以下&lt;strong&gt;四种数据&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;定义的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reactive&lt;/code&gt;定义的数据。&lt;/li&gt;
&lt;li&gt;函数返回一个值（&lt;code&gt;getter&lt;/code&gt;函数）。&lt;/li&gt;
&lt;li&gt;一个包含上述内容的数组。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们在&lt;code&gt;Vue3&lt;/code&gt;中使用&lt;code&gt;watch&lt;/code&gt;的时候，通常会遇到以下几种情况：&lt;/p&gt;
&lt;h3 id=&#34;情况一&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#情况一&#34;&gt;&lt;/a&gt;* 情况一&lt;/h3&gt;
&lt;p&gt;监视&lt;code&gt;ref&lt;/code&gt;定义的【基本类型】数据：直接写数据名即可，监视的是其&lt;code&gt;value&lt;/code&gt;值的改变。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;情况一：监视【ref】定义的【基本类型】数据&amp;lt;&amp;#x2F;h1&amp;gt;
    &amp;lt;h2&amp;gt;当前求和为：&amp;#123;&amp;#123;sum&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeSum&amp;quot;&amp;gt;点我sum+1&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;ref,watch&amp;#125; from &amp;#39;vue&amp;#39;
  &amp;#x2F;&amp;#x2F; 数据
  let sum &amp;#x3D; ref(0)
  &amp;#x2F;&amp;#x2F; 方法
  function changeSum()&amp;#123;
    sum.value +&amp;#x3D; 1
  &amp;#125;
  &amp;#x2F;&amp;#x2F; 监视，情况一：监视【ref】定义的【基本类型】数据
  const stopWatch &amp;#x3D; watch(sum,(newValue,oldValue)&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;sum变化了&amp;#39;,newValue,oldValue)
    if(newValue &amp;gt;&amp;#x3D; 10)&amp;#123;
      stopWatch()
    &amp;#125;
  &amp;#125;)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;情况二&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#情况二&#34;&gt;&lt;/a&gt;* 情况二&lt;/h3&gt;
&lt;p&gt;监视&lt;code&gt;ref&lt;/code&gt;定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若修改的是&lt;code&gt;ref&lt;/code&gt;定义的对象中的属性，&lt;code&gt;newValue&lt;/code&gt; 和 &lt;code&gt;oldValue&lt;/code&gt; 都是新值，因为它们是同一个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若修改整个&lt;code&gt;ref&lt;/code&gt;定义的对象，&lt;code&gt;newValue&lt;/code&gt; 是新值， &lt;code&gt;oldValue&lt;/code&gt; 是旧值，因为不是同一个对象了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;情况二：监视【ref】定义的【对象类型】数据&amp;lt;&amp;#x2F;h1&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123; person.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123; person.age &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;修改年龄&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changePerson&amp;quot;&amp;gt;修改整个人&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;ref,watch&amp;#125; from &amp;#39;vue&amp;#39;
  &amp;#x2F;&amp;#x2F; 数据
  let person &amp;#x3D; ref(&amp;#123;
    name:&amp;#39;张三&amp;#39;,
    age:18
  &amp;#125;)
  &amp;#x2F;&amp;#x2F; 方法
  function changeName()&amp;#123;
    person.value.name +&amp;#x3D; &amp;#39;~&amp;#39;
  &amp;#125;
  function changeAge()&amp;#123;
    person.value.age +&amp;#x3D; 1
  &amp;#125;
  function changePerson()&amp;#123;
    person.value &amp;#x3D; &amp;#123;name:&amp;#39;李四&amp;#39;,age:90&amp;#125;
  &amp;#125;
  &amp;#x2F;* 
    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视
    watch的第一个参数是：被监视的数据
    watch的第二个参数是：监视的回调
    watch的第三个参数是：配置对象（deep、immediate等等.....） 
  *&amp;#x2F;
  watch(person,(newValue,oldValue)&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;person变化了&amp;#39;,newValue,oldValue)
  &amp;#125;,&amp;#123;deep:true&amp;#125;)
  
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;情况三&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#情况三&#34;&gt;&lt;/a&gt;*  情况三&lt;/h3&gt;
&lt;p&gt;监视&lt;code&gt;reactive&lt;/code&gt;定义的【对象类型】数据，且默认开启了深度监视。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;情况三：监视【reactive】定义的【对象类型】数据&amp;lt;&amp;#x2F;h1&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123; person.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123; person.age &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;修改年龄&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changePerson&amp;quot;&amp;gt;修改整个人&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;hr&amp;gt;
    &amp;lt;h2&amp;gt;测试：&amp;#123;&amp;#123;obj.a.b.c&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;test&amp;quot;&amp;gt;修改obj.a.b.c&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;reactive,watch&amp;#125; from &amp;#39;vue&amp;#39;
  &amp;#x2F;&amp;#x2F; 数据
  let person &amp;#x3D; reactive(&amp;#123;
    name:&amp;#39;张三&amp;#39;,
    age:18
  &amp;#125;)
  let obj &amp;#x3D; reactive(&amp;#123;
    a:&amp;#123;
      b:&amp;#123;
        c:666
      &amp;#125;
    &amp;#125;
  &amp;#125;)
  &amp;#x2F;&amp;#x2F; 方法
  function changeName()&amp;#123;
    person.name +&amp;#x3D; &amp;#39;~&amp;#39;
  &amp;#125;
  function changeAge()&amp;#123;
    person.age +&amp;#x3D; 1
  &amp;#125;
  function changePerson()&amp;#123;
    Object.assign(person,&amp;#123;name:&amp;#39;李四&amp;#39;,age:80&amp;#125;)
  &amp;#125;
  function test()&amp;#123;
    obj.a.b.c &amp;#x3D; 888
  &amp;#125;

  &amp;#x2F;&amp;#x2F; 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的
  watch(person,(newValue,oldValue)&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;person变化了&amp;#39;,newValue,oldValue)
  &amp;#125;)
  watch(obj,(newValue,oldValue)&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;Obj变化了&amp;#39;,newValue,oldValue)
  &amp;#125;)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;情况四&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#情况四&#34;&gt;&lt;/a&gt;* 情况四&lt;/h3&gt;
&lt;p&gt;监视&lt;code&gt;ref&lt;/code&gt;或&lt;code&gt;reactive&lt;/code&gt;定义的【对象类型】数据中的&lt;strong&gt;某个属性&lt;/strong&gt;，注意点如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若该属性值&lt;strong&gt;不是&lt;/strong&gt;【对象类型】，需要写成函数形式。&lt;/li&gt;
&lt;li&gt;若该属性值是&lt;strong&gt;依然&lt;/strong&gt;是【对象类型】，可直接编，也可写成函数，建议写成函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&amp;lt;&amp;#x2F;h1&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123; person.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123; person.age &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;汽车：&amp;#123;&amp;#123; person.car.c1 &amp;#125;&amp;#125;、&amp;#123;&amp;#123; person.car.c2 &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;修改年龄&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeC1&amp;quot;&amp;gt;修改第一台车&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeC2&amp;quot;&amp;gt;修改第二台车&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeCar&amp;quot;&amp;gt;修改整个车&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;reactive,watch&amp;#125; from &amp;#39;vue&amp;#39;

  &amp;#x2F;&amp;#x2F; 数据
  let person &amp;#x3D; reactive(&amp;#123;
    name:&amp;#39;张三&amp;#39;,
    age:18,
    car:&amp;#123;
      c1:&amp;#39;奔驰&amp;#39;,
      c2:&amp;#39;宝马&amp;#39;
    &amp;#125;
  &amp;#125;)
  &amp;#x2F;&amp;#x2F; 方法
  function changeName()&amp;#123;
    person.name +&amp;#x3D; &amp;#39;~&amp;#39;
  &amp;#125;
  function changeAge()&amp;#123;
    person.age +&amp;#x3D; 1
  &amp;#125;
  function changeC1()&amp;#123;
    person.car.c1 &amp;#x3D; &amp;#39;奥迪&amp;#39;
  &amp;#125;
  function changeC2()&amp;#123;
    person.car.c2 &amp;#x3D; &amp;#39;大众&amp;#39;
  &amp;#125;
  function changeCar()&amp;#123;
    person.car &amp;#x3D; &amp;#123;c1:&amp;#39;雅迪&amp;#39;,c2:&amp;#39;爱玛&amp;#39;&amp;#125;
  &amp;#125;

  &amp;#x2F;&amp;#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式
  &amp;#x2F;* watch(()&amp;#x3D;&amp;gt; person.name,(newValue,oldValue)&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;person.name变化了&amp;#39;,newValue,oldValue)
  &amp;#125;) *&amp;#x2F;

  &amp;#x2F;&amp;#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数
  watch(()&amp;#x3D;&amp;gt;person.car,(newValue,oldValue)&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;person.car变化了&amp;#39;,newValue,oldValue)
  &amp;#125;,&amp;#123;deep:true&amp;#125;)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;情况五&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#情况五&#34;&gt;&lt;/a&gt;* 情况五&lt;/h3&gt;
&lt;p&gt;监视上述的多个数据&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;情况五：监视上述的多个数据&amp;lt;&amp;#x2F;h1&amp;gt;
    &amp;lt;h2&amp;gt;姓名：&amp;#123;&amp;#123; person.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;年龄：&amp;#123;&amp;#123; person.age &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;汽车：&amp;#123;&amp;#123; person.car.c1 &amp;#125;&amp;#125;、&amp;#123;&amp;#123; person.car.c2 &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeName&amp;quot;&amp;gt;修改名字&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeAge&amp;quot;&amp;gt;修改年龄&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeC1&amp;quot;&amp;gt;修改第一台车&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeC2&amp;quot;&amp;gt;修改第二台车&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeCar&amp;quot;&amp;gt;修改整个车&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;reactive,watch&amp;#125; from &amp;#39;vue&amp;#39;

  &amp;#x2F;&amp;#x2F; 数据
  let person &amp;#x3D; reactive(&amp;#123;
    name:&amp;#39;张三&amp;#39;,
    age:18,
    car:&amp;#123;
      c1:&amp;#39;奔驰&amp;#39;,
      c2:&amp;#39;宝马&amp;#39;
    &amp;#125;
  &amp;#125;)
  &amp;#x2F;&amp;#x2F; 方法
  function changeName()&amp;#123;
    person.name +&amp;#x3D; &amp;#39;~&amp;#39;
  &amp;#125;
  function changeAge()&amp;#123;
    person.age +&amp;#x3D; 1
  &amp;#125;
  function changeC1()&amp;#123;
    person.car.c1 &amp;#x3D; &amp;#39;奥迪&amp;#39;
  &amp;#125;
  function changeC2()&amp;#123;
    person.car.c2 &amp;#x3D; &amp;#39;大众&amp;#39;
  &amp;#125;
  function changeCar()&amp;#123;
    person.car &amp;#x3D; &amp;#123;c1:&amp;#39;雅迪&amp;#39;,c2:&amp;#39;爱玛&amp;#39;&amp;#125;
  &amp;#125;

  &amp;#x2F;&amp;#x2F; 监视，情况五：监视上述的多个数据
  watch([()&amp;#x3D;&amp;gt;person.name,person.car],(newValue,oldValue)&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;person.car变化了&amp;#39;,newValue,oldValue)
  &amp;#125;,&amp;#123;deep:true&amp;#125;)

&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-10-【watchEffect】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-10-【watchEffect】&#34;&gt;&lt;/a&gt;3.10. 【watchEffect】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;watch&lt;/code&gt;对比&lt;code&gt;watchEffect&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;都能监听响应式数据的变化，不同的是监听数据变化的方式不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;watch&lt;/code&gt;：要明确指出监视的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;watchEffect&lt;/code&gt;：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&amp;lt;&amp;#x2F;h1&amp;gt;
    &amp;lt;h2 id&amp;#x3D;&amp;quot;demo&amp;quot;&amp;gt;水温：&amp;#123;&amp;#123;temp&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h2&amp;gt;水位：&amp;#123;&amp;#123;height&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changePrice&amp;quot;&amp;gt;水温+1&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeSum&amp;quot;&amp;gt;水位+10&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;ref,watch,watchEffect&amp;#125; from &amp;#39;vue&amp;#39;
  &amp;#x2F;&amp;#x2F; 数据
  let temp &amp;#x3D; ref(0)
  let height &amp;#x3D; ref(0)

  &amp;#x2F;&amp;#x2F; 方法
  function changePrice()&amp;#123;
    temp.value +&amp;#x3D; 10
  &amp;#125;
  function changeSum()&amp;#123;
    height.value +&amp;#x3D; 1
  &amp;#125;

  &amp;#x2F;&amp;#x2F; 用watch实现，需要明确的指出要监视：temp、height
  watch([temp,height],(value)&amp;#x3D;&amp;gt;&amp;#123;
    &amp;#x2F;&amp;#x2F; 从value中获取最新的temp值、height值
    const [newTemp,newHeight] &amp;#x3D; value
    &amp;#x2F;&amp;#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器
    if(newTemp &amp;gt;&amp;#x3D; 50 || newHeight &amp;gt;&amp;#x3D; 20)&amp;#123;
      console.log(&amp;#39;联系服务器&amp;#39;)
    &amp;#125;
  &amp;#125;)

  &amp;#x2F;&amp;#x2F; 用watchEffect实现，不用
  const stopWtach &amp;#x3D; watchEffect(()&amp;#x3D;&amp;gt;&amp;#123;
    &amp;#x2F;&amp;#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器
    if(temp.value &amp;gt;&amp;#x3D; 50 || height.value &amp;gt;&amp;#x3D; 20)&amp;#123;
      console.log(document.getElementById(&amp;#39;demo&amp;#39;)?.innerText)
      console.log(&amp;#39;联系服务器&amp;#39;)
    &amp;#125;
    &amp;#x2F;&amp;#x2F; 水温达到100，或水位达到50，取消监视
    if(temp.value &amp;#x3D;&amp;#x3D;&amp;#x3D; 100 || height.value &amp;#x3D;&amp;#x3D;&amp;#x3D; 50)&amp;#123;
      console.log(&amp;#39;清理了&amp;#39;)
      stopWtach()
    &amp;#125;
  &amp;#125;)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-11-【标签的-ref-属性】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-11-【标签的-ref-属性】&#34;&gt;&lt;/a&gt;3.11. 【标签的 ref 属性】&lt;/h2&gt;
&lt;p&gt;作用：用于注册模板引用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用在普通&lt;code&gt;DOM&lt;/code&gt;标签上，获取的是&lt;code&gt;DOM&lt;/code&gt;节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用在组件标签上，获取的是组件实例对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;用在普通&lt;code&gt;DOM&lt;/code&gt;标签上：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h1 ref&amp;#x3D;&amp;quot;title1&amp;quot;&amp;gt;尚硅谷&amp;lt;&amp;#x2F;h1&amp;gt;
    &amp;lt;h2 ref&amp;#x3D;&amp;quot;title2&amp;quot;&amp;gt;前端&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;h3 ref&amp;#x3D;&amp;quot;title3&amp;quot;&amp;gt;Vue&amp;lt;&amp;#x2F;h3&amp;gt;
    &amp;lt;input type&amp;#x3D;&amp;quot;text&amp;quot; ref&amp;#x3D;&amp;quot;inpt&amp;quot;&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;showLog&amp;quot;&amp;gt;点我打印内容&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;ref&amp;#125; from &amp;#39;vue&amp;#39;
	
  let title1 &amp;#x3D; ref()
  let title2 &amp;#x3D; ref()
  let title3 &amp;#x3D; ref()

  function showLog()&amp;#123;
    &amp;#x2F;&amp;#x2F; 通过id获取元素
    const t1 &amp;#x3D; document.getElementById(&amp;#39;title1&amp;#39;)
    &amp;#x2F;&amp;#x2F; 打印内容
    console.log((t1 as HTMLElement).innerText)
    console.log((&amp;lt;HTMLElement&amp;gt;t1).innerText)
    console.log(t1?.innerText)
    
		&amp;#x2F;************************************&amp;#x2F;
		
    &amp;#x2F;&amp;#x2F; 通过ref获取元素
    console.log(title1.value)
    console.log(title2.value)
    console.log(title3.value)
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用在组件标签上：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!-- 父组件App.vue --&amp;gt;
&amp;lt;template&amp;gt;
  &amp;lt;Person ref&amp;#x3D;&amp;quot;ren&amp;quot;&amp;#x2F;&amp;gt;
  &amp;lt;button @click&amp;#x3D;&amp;quot;test&amp;quot;&amp;gt;测试&amp;lt;&amp;#x2F;button&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;App&amp;quot;&amp;gt;
  import Person from &amp;#39;.&amp;#x2F;components&amp;#x2F;Person.vue&amp;#39;
  import &amp;#123;ref&amp;#125; from &amp;#39;vue&amp;#39;

  let ren &amp;#x3D; ref()

  function test()&amp;#123;
    console.log(ren.value.name)
    console.log(ren.value.age)
  &amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;


&amp;lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&amp;gt;
&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123;ref,defineExpose&amp;#125; from &amp;#39;vue&amp;#39;
	&amp;#x2F;&amp;#x2F; 数据
  let name &amp;#x3D; ref(&amp;#39;张三&amp;#39;)
  let age &amp;#x3D; ref(18)
  &amp;#x2F;****************************&amp;#x2F;
  &amp;#x2F;****************************&amp;#x2F;
  &amp;#x2F;&amp;#x2F; 使用defineExpose将组件中的数据交给外部
  defineExpose(&amp;#123;name,age&amp;#125;)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-12-【props】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-12-【props】&#34;&gt;&lt;/a&gt;3.12. 【props】&lt;/h2&gt;
&lt;blockquote&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// 定义一个接口，限制每个Person对象的格式&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PersonInter&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
 &lt;span class=&#34;token literal-property property&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;number
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 定义一个自定义类型Persons&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; type Persons &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Array&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;PersonInter&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;App.vue&lt;/code&gt;中代码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
	&amp;lt;Person :list&amp;#x3D;&amp;quot;persons&amp;quot;&amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;App&amp;quot;&amp;gt;
import Person from &amp;#39;.&amp;#x2F;components&amp;#x2F;Person.vue&amp;#39;
import &amp;#123;reactive&amp;#125; from &amp;#39;vue&amp;#39;
 import &amp;#123;type Persons&amp;#125; from &amp;#39;.&amp;#x2F;types&amp;#39;

 let persons &amp;#x3D; reactive&amp;lt;Persons&amp;gt;([
  &amp;#123;id:&amp;#39;e98219e12&amp;#39;,name:&amp;#39;张三&amp;#39;,age:18&amp;#125;,
   &amp;#123;id:&amp;#39;e98219e13&amp;#39;,name:&amp;#39;李四&amp;#39;,age:19&amp;#125;,
    &amp;#123;id:&amp;#39;e98219e14&amp;#39;,name:&amp;#39;王五&amp;#39;,age:20&amp;#125;
  ])
&amp;lt;&amp;#x2F;script&amp;gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Person.vue&lt;/code&gt;中代码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Vue&#34; data-language=&#34;Vue&#34;&gt;&lt;code class=&#34;language-Vue&#34;&gt;&amp;lt;template&amp;gt;
&amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
&amp;lt;ul&amp;gt;
  &amp;lt;li v-for&amp;#x3D;&amp;quot;item in list&amp;quot; :key&amp;#x3D;&amp;quot;item.id&amp;quot;&amp;gt;
     &amp;#123;&amp;#123;item.name&amp;#125;&amp;#125;--&amp;#123;&amp;#123;item.age&amp;#125;&amp;#125;
   &amp;lt;&amp;#x2F;li&amp;gt;
 &amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
import &amp;#123;defineProps&amp;#125; from &amp;#39;vue&amp;#39;
import &amp;#123;type PersonInter&amp;#125; from &amp;#39;@&amp;#x2F;types&amp;#39;

&amp;#x2F;&amp;#x2F; 第一种写法：仅接收
&amp;#x2F;&amp;#x2F; const props &amp;#x3D; defineProps([&amp;#39;list&amp;#39;])

&amp;#x2F;&amp;#x2F; 第二种写法：接收+限制类型
&amp;#x2F;&amp;#x2F; defineProps&amp;lt;&amp;#123;list:Persons&amp;#125;&amp;gt;()

&amp;#x2F;&amp;#x2F; 第三种写法：接收+限制类型+指定默认值+限制必要性
let props &amp;#x3D; withDefaults(defineProps&amp;lt;&amp;#123;list?:Persons&amp;#125;&amp;gt;(),&amp;#123;
  list:()&amp;#x3D;&amp;gt;[&amp;#123;id:&amp;#39;asdasg01&amp;#39;,name:&amp;#39;小猪佩奇&amp;#39;,age:18&amp;#125;]
&amp;#125;)
console.log(props)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-13-【生命周期】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-13-【生命周期】&#34;&gt;&lt;/a&gt;3.13. 【生命周期】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;概念：&lt;code&gt;Vue&lt;/code&gt;组件实例在创建时要经历一系列的初始化步骤，在此过程中&lt;code&gt;Vue&lt;/code&gt;会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;规律：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生命周期整体分为四个阶段，分别是：&lt;strong&gt;创建、挂载、更新、销毁&lt;/strong&gt;，每个阶段都有两个钩子，一前一后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Vue2&lt;/code&gt;的生命周期&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建阶段：&lt;code&gt;beforeCreate&lt;/code&gt;、&lt;code&gt;created&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;挂载阶段：&lt;code&gt;beforeMount&lt;/code&gt;、&lt;code&gt;mounted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更新阶段：&lt;code&gt;beforeUpdate&lt;/code&gt;、&lt;code&gt;updated&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;销毁阶段：&lt;code&gt;beforeDestroy&lt;/code&gt;、&lt;code&gt;destroyed&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Vue3&lt;/code&gt;的生命周期&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建阶段：&lt;code&gt;setup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;挂载阶段：&lt;code&gt;onBeforeMount&lt;/code&gt;、&lt;code&gt;onMounted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更新阶段：&lt;code&gt;onBeforeUpdate&lt;/code&gt;、&lt;code&gt;onUpdated&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;卸载阶段：&lt;code&gt;onBeforeUnmount&lt;/code&gt;、&lt;code&gt;onUnmounted&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用的钩子：&lt;code&gt;onMounted&lt;/code&gt;(挂载完毕)、&lt;code&gt;onUpdated&lt;/code&gt;(更新完毕)、&lt;code&gt;onBeforeUnmount&lt;/code&gt;(卸载之前)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;person&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;当前求和为：&amp;#123;&amp;#123; sum &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;changeSum&amp;quot;&amp;gt;点我sum+1&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;!-- vue3写法 --&amp;gt;
&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;Person&amp;quot;&amp;gt;
  import &amp;#123; 
    ref, 
    onBeforeMount, 
    onMounted, 
    onBeforeUpdate, 
    onUpdated, 
    onBeforeUnmount, 
    onUnmounted 
  &amp;#125; from &amp;#39;vue&amp;#39;

  &amp;#x2F;&amp;#x2F; 数据
  let sum &amp;#x3D; ref(0)
  &amp;#x2F;&amp;#x2F; 方法
  function changeSum() &amp;#123;
    sum.value +&amp;#x3D; 1
  &amp;#125;
  console.log(&amp;#39;setup&amp;#39;)
  &amp;#x2F;&amp;#x2F; 生命周期钩子
  onBeforeMount(()&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;挂载之前&amp;#39;)
  &amp;#125;)
  onMounted(()&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;挂载完毕&amp;#39;)
  &amp;#125;)
  onBeforeUpdate(()&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;更新之前&amp;#39;)
  &amp;#125;)
  onUpdated(()&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;更新完毕&amp;#39;)
  &amp;#125;)
  onBeforeUnmount(()&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;卸载之前&amp;#39;)
  &amp;#125;)
  onUnmounted(()&amp;#x3D;&amp;gt;&amp;#123;
    console.log(&amp;#39;卸载完毕&amp;#39;)
  &amp;#125;)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-14-【自定义hook】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-14-【自定义hook】&#34;&gt;&lt;/a&gt;3.14. 【自定义hook】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是&lt;code&gt;hook&lt;/code&gt;？—— 本质是一个函数，把&lt;code&gt;setup&lt;/code&gt;函数中使用的&lt;code&gt;Composition API&lt;/code&gt;进行了封装，类似于&lt;code&gt;vue2.x&lt;/code&gt;中的&lt;code&gt;mixin&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义&lt;code&gt;hook&lt;/code&gt;的优势：复用代码, 让&lt;code&gt;setup&lt;/code&gt;中的逻辑更清楚易懂。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;useSum.ts&lt;/code&gt;中内容如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;ref&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;onMounted&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; sum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;increment&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    sum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;decrement&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    sum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;onMounted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;//向外部暴露数据&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;increment&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;decrement&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;		&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;useDog.ts&lt;/code&gt;中内容如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;reactive&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;onMounted&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; axios&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;AxiosError&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; dogList &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; reactive&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;// 方法&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getDog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// 发请求&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; axios&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;https://dog.ceo/api/breed/pembroke/images/random&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// 维护数据&lt;/span&gt;
      dogList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// 处理错误&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; err &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;AxiosError&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;error
      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;// 挂载钩子&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;onMounted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;getDog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
	
  &lt;span class=&#34;token comment&#34;&gt;//向外部暴露数据&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;dogList&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;getDog&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件中具体使用：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;h2&amp;gt;当前求和为：&amp;#123;&amp;#123;sum&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
  &amp;lt;button @click&amp;#x3D;&amp;quot;increment&amp;quot;&amp;gt;点我+1&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;button @click&amp;#x3D;&amp;quot;decrement&amp;quot;&amp;gt;点我-1&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;img v-for&amp;#x3D;&amp;quot;(u,index) in dogList.urlList&amp;quot; :key&amp;#x3D;&amp;quot;index&amp;quot; :src&amp;#x3D;&amp;quot;(u as string)&amp;quot;&amp;gt; 
  &amp;lt;span v-show&amp;#x3D;&amp;quot;dogList.isLoading&amp;quot;&amp;gt;加载中......&amp;lt;&amp;#x2F;span&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;button @click&amp;#x3D;&amp;quot;getDog&amp;quot;&amp;gt;再来一只狗&amp;lt;&amp;#x2F;button&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot;&amp;gt;
  import &amp;#123;defineComponent&amp;#125; from &amp;#39;vue&amp;#39;

  export default defineComponent(&amp;#123;
    name:&amp;#39;App&amp;#39;,
  &amp;#125;)
&amp;lt;&amp;#x2F;script&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot;&amp;gt;
  import useSum from &amp;#39;.&amp;#x2F;hooks&amp;#x2F;useSum&amp;#39;
  import useDog from &amp;#39;.&amp;#x2F;hooks&amp;#x2F;useDog&amp;#39;
	
  let &amp;#123;sum,increment,decrement&amp;#125; &amp;#x3D; useSum()
  let &amp;#123;dogList,getDog&amp;#125; &amp;#x3D; useDog()
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;4-路由&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-路由&#34;&gt;&lt;/a&gt;4. 路由&lt;/h1&gt;
&lt;h2 id=&#34;4-1-【对路由的理解】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-1-【对路由的理解】&#34;&gt;&lt;/a&gt;4.1. 【对路由的理解】&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232332.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-2-【基本切换效果】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-2-【基本切换效果】&#34;&gt;&lt;/a&gt;4.2. 【基本切换效果】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Vue3&lt;/code&gt;中要使用&lt;code&gt;vue-router&lt;/code&gt;的最新版本，目前是&lt;code&gt;4&lt;/code&gt;版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路由配置文件代码如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;createRouter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;createWebHistory&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue-router&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Home &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/pages/Home.vue&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; News &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/pages/News.vue&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; About &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/pages/About.vue&#39;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; router &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
	&lt;span class=&#34;token literal-property property&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createWebHistory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;token literal-property property&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
			&lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/home&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;token literal-property property&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;Home
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
			&lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/about&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;token literal-property property&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;About
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; router&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;main.ts&lt;/code&gt;代码如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; router &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./router/index&#39;&lt;/span&gt;
app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;router&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;App.vue&lt;/code&gt;代码如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;h2 class&amp;#x3D;&amp;quot;title&amp;quot;&amp;gt;Vue路由测试&amp;lt;&amp;#x2F;h2&amp;gt;
    &amp;lt;!-- 导航区 --&amp;gt;
    &amp;lt;div class&amp;#x3D;&amp;quot;navigate&amp;quot;&amp;gt;
      &amp;lt;RouterLink to&amp;#x3D;&amp;quot;&amp;#x2F;home&amp;quot; active-class&amp;#x3D;&amp;quot;active&amp;quot;&amp;gt;首页&amp;lt;&amp;#x2F;RouterLink&amp;gt;
      &amp;lt;RouterLink to&amp;#x3D;&amp;quot;&amp;#x2F;news&amp;quot; active-class&amp;#x3D;&amp;quot;active&amp;quot;&amp;gt;新闻&amp;lt;&amp;#x2F;RouterLink&amp;gt;
      &amp;lt;RouterLink to&amp;#x3D;&amp;quot;&amp;#x2F;about&amp;quot; active-class&amp;#x3D;&amp;quot;active&amp;quot;&amp;gt;关于&amp;lt;&amp;#x2F;RouterLink&amp;gt;
    &amp;lt;&amp;#x2F;div&amp;gt;
    &amp;lt;!-- 展示区 --&amp;gt;
    &amp;lt;div class&amp;#x3D;&amp;quot;main-content&amp;quot;&amp;gt;
      &amp;lt;RouterView&amp;gt;&amp;lt;&amp;#x2F;RouterView&amp;gt;
    &amp;lt;&amp;#x2F;div&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script lang&amp;#x3D;&amp;quot;ts&amp;quot; setup name&amp;#x3D;&amp;quot;App&amp;quot;&amp;gt;
  import &amp;#123;RouterLink,RouterView&amp;#125; from &amp;#39;vue-router&amp;#39;  
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-3-【两个注意点】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-3-【两个注意点】&#34;&gt;&lt;/a&gt;4.3. 【两个注意点】&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;路由组件通常存放在&lt;code&gt;pages&lt;/code&gt; 或 &lt;code&gt;views&lt;/code&gt;文件夹，一般组件通常存放在&lt;code&gt;components&lt;/code&gt;文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过点击导航，视觉效果上“消失” 了的路由组件，默认是被&lt;strong&gt;卸载&lt;/strong&gt;掉的，需要的时候再去&lt;strong&gt;挂载&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-4-【路由器工作模式】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-4-【路由器工作模式】&#34;&gt;&lt;/a&gt;4.4.【路由器工作模式】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;history&lt;/code&gt;模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优点：&lt;code&gt;URL&lt;/code&gt;更加美观，不带有&lt;code&gt;#&lt;/code&gt;，更接近传统的网站&lt;code&gt;URL&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有&lt;code&gt;404&lt;/code&gt;错误。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; router &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
	&lt;span class=&#34;token literal-property property&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createWebHistory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//history模式&lt;/span&gt;
	&lt;span class=&#34;token comment&#34;&gt;/******/&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hash&lt;/code&gt;模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优点：兼容性更好，因为不需要服务器端处理路径。&lt;/p&gt;
&lt;p&gt;缺点：&lt;code&gt;URL&lt;/code&gt;带有&lt;code&gt;#&lt;/code&gt;不太美观，且在&lt;code&gt;SEO&lt;/code&gt;优化方面相对较差。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; router &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
	&lt;span class=&#34;token literal-property property&#34;&gt;history&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createWebHashHistory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//hash模式&lt;/span&gt;
	&lt;span class=&#34;token comment&#34;&gt;/******/&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-5-【to的两种写法】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-5-【to的两种写法】&#34;&gt;&lt;/a&gt;4.5. 【to的两种写法】&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!-- 第一种：to的字符串写法 --&amp;gt;
&amp;lt;router-link active-class&amp;#x3D;&amp;quot;active&amp;quot; to&amp;#x3D;&amp;quot;&amp;#x2F;home&amp;quot;&amp;gt;主页&amp;lt;&amp;#x2F;router-link&amp;gt;

&amp;lt;!-- 第二种：to的对象写法 --&amp;gt;
&amp;lt;router-link active-class&amp;#x3D;&amp;quot;active&amp;quot; :to&amp;#x3D;&amp;quot;&amp;#123;path:&amp;#39;&amp;#x2F;home&amp;#39;&amp;#125;&amp;quot;&amp;gt;Home&amp;lt;&amp;#x2F;router-link&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-6-【命名路由】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-6-【命名路由】&#34;&gt;&lt;/a&gt;4.6. 【命名路由】&lt;/h2&gt;
&lt;p&gt;作用：可以简化路由跳转及传参（后面就讲）。&lt;/p&gt;
&lt;p&gt;给路由规则命名：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token literal-property property&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;zhuye&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/home&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;Home
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xinwen&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/news&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;News&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;guanyu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/about&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;About
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;跳转路由：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!--简化前：需要写完整的路径（to的字符串写法） --&amp;gt;
&amp;lt;router-link to&amp;#x3D;&amp;quot;&amp;#x2F;news&amp;#x2F;detail&amp;quot;&amp;gt;跳转&amp;lt;&amp;#x2F;router-link&amp;gt;

&amp;lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&amp;gt;
&amp;lt;router-link :to&amp;#x3D;&amp;quot;&amp;#123;name:&amp;#39;guanyu&amp;#39;&amp;#125;&amp;quot;&amp;gt;跳转&amp;lt;&amp;#x2F;router-link&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-7-【嵌套路由】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-7-【嵌套路由】&#34;&gt;&lt;/a&gt;4.7. 【嵌套路由】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编写&lt;code&gt;News&lt;/code&gt;的子路由：&lt;code&gt;Detail.vue&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置路由规则，使用&lt;code&gt;children&lt;/code&gt;配置项：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; router &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  history&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createWebHistory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
	routes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
			name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;zhuye&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/home&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			component&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;Home
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
			name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xinwen&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/news&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			component&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;News&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			children&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
				&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
					name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xiang&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
					path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;detail&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
					component&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;Detail
				&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
			&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
			name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;guanyu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/about&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
			component&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;About
		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
	&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; router&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转路由（记得要加完整路径）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;router-link to&amp;#x3D;&amp;quot;&amp;#x2F;news&amp;#x2F;detail&amp;quot;&amp;gt;xxxx&amp;lt;&amp;#x2F;router-link&amp;gt;
&amp;lt;!-- 或 --&amp;gt;
&amp;lt;router-link :to&amp;#x3D;&amp;quot;&amp;#123;path:&amp;#39;&amp;#x2F;news&amp;#x2F;detail&amp;#39;&amp;#125;&amp;quot;&amp;gt;xxxx&amp;lt;&amp;#x2F;router-link&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记得去&lt;code&gt;Home&lt;/code&gt;组件中预留一个&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;news&amp;quot;&amp;gt;
    &amp;lt;nav class&amp;#x3D;&amp;quot;news-list&amp;quot;&amp;gt;
      &amp;lt;RouterLink v-for&amp;#x3D;&amp;quot;news in newsList&amp;quot; :key&amp;#x3D;&amp;quot;news.id&amp;quot; :to&amp;#x3D;&amp;quot;&amp;#123;path:&amp;#39;&amp;#x2F;news&amp;#x2F;detail&amp;#39;&amp;#125;&amp;quot;&amp;gt;
        &amp;#123;&amp;#123;news.name&amp;#125;&amp;#125;
      &amp;lt;&amp;#x2F;RouterLink&amp;gt;
    &amp;lt;&amp;#x2F;nav&amp;gt;
    &amp;lt;div class&amp;#x3D;&amp;quot;news-detail&amp;quot;&amp;gt;
      &amp;lt;RouterView&amp;#x2F;&amp;gt;
    &amp;lt;&amp;#x2F;div&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-8-【路由传参】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-8-【路由传参】&#34;&gt;&lt;/a&gt;4.8. 【路由传参】&lt;/h2&gt;
&lt;h3 id=&#34;query参数&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#query参数&#34;&gt;&lt;/a&gt;query参数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;传递参数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!-- 跳转并携带query参数（to的字符串写法） --&amp;gt;
&amp;lt;router-link to&amp;#x3D;&amp;quot;&amp;#x2F;news&amp;#x2F;detail?a&amp;#x3D;1&amp;amp;b&amp;#x3D;2&amp;amp;content&amp;#x3D;欢迎你&amp;quot;&amp;gt;
	跳转
&amp;lt;&amp;#x2F;router-link&amp;gt;
				
&amp;lt;!-- 跳转并携带query参数（to的对象写法） --&amp;gt;
&amp;lt;RouterLink 
  :to&amp;#x3D;&amp;quot;&amp;#123;
    &amp;#x2F;&amp;#x2F;name:&amp;#39;xiang&amp;#39;, &amp;#x2F;&amp;#x2F;用name也可以跳转
    path:&amp;#39;&amp;#x2F;news&amp;#x2F;detail&amp;#39;,
    query:&amp;#123;
      id:news.id,
      title:news.title,
      content:news.content
    &amp;#125;
  &amp;#125;&amp;quot;
&amp;gt;
  &amp;#123;&amp;#123;news.title&amp;#125;&amp;#125;
&amp;lt;&amp;#x2F;RouterLink&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收参数：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;useRoute&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue-router&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; route &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useRoute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 打印query参数&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;query&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;params参数&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#params参数&#34;&gt;&lt;/a&gt;params参数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;传递参数&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!-- 跳转并携带params参数（to的字符串写法） --&amp;gt;
&amp;lt;RouterLink :to&amp;#x3D;&amp;quot;&amp;#96;&amp;#x2F;news&amp;#x2F;detail&amp;#x2F;001&amp;#x2F;新闻001&amp;#x2F;内容001&amp;#96;&amp;quot;&amp;gt;&amp;#123;&amp;#123;news.title&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;RouterLink&amp;gt;
				
&amp;lt;!-- 跳转并携带params参数（to的对象写法） --&amp;gt;
&amp;lt;RouterLink 
  :to&amp;#x3D;&amp;quot;&amp;#123;
    name:&amp;#39;xiang&amp;#39;, &amp;#x2F;&amp;#x2F;用name跳转
    params:&amp;#123;
      id:news.id,
      title:news.title,
      content:news.title
    &amp;#125;
  &amp;#125;&amp;quot;
&amp;gt;
  &amp;#123;&amp;#123;news.title&amp;#125;&amp;#125;
&amp;lt;&amp;#x2F;RouterLink&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收参数：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;useRoute&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue-router&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; route &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useRoute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 打印params参数&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;备注1：传递&lt;code&gt;params&lt;/code&gt;参数时，若使用&lt;code&gt;to&lt;/code&gt;的对象写法，必须使用&lt;code&gt;name&lt;/code&gt;配置项，不能用&lt;code&gt;path&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;备注2：传递&lt;code&gt;params&lt;/code&gt;参数时，需要提前在规则中占位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-9-【路由的props配置】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-9-【路由的props配置】&#34;&gt;&lt;/a&gt;4.9. 【路由的props配置】&lt;/h2&gt;
&lt;p&gt;作用：让路由组件更方便的收到参数（可以将路由参数作为&lt;code&gt;props&lt;/code&gt;传给组件）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
	&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xiang&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;detail/:id/:title/:content&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;token literal-property property&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;Detail&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// props:&amp;#123;a:1,b:2,c:3&amp;#125;, &lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// props:true&lt;/span&gt;
  
  &lt;span class=&#34;token comment&#34;&gt;// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;query
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-10-【-replace属性】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-10-【-replace属性】&#34;&gt;&lt;/a&gt;4.10. 【 replace属性】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：控制路由跳转时操作浏览器历史记录的模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器的历史记录有两种写入方式：分别为&lt;code&gt;push&lt;/code&gt;和&lt;code&gt;replace&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;是追加历史记录（默认值）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt;是替换当前记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启&lt;code&gt;replace&lt;/code&gt;模式：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;RouterLink replace .......&amp;gt;News&amp;lt;&amp;#x2F;RouterLink&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-11-【编程式导航】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-11-【编程式导航】&#34;&gt;&lt;/a&gt;4.11. 【编程式导航】&lt;/h2&gt;
&lt;p&gt;路由组件的两个重要的属性：&lt;code&gt;$route&lt;/code&gt;和&lt;code&gt;$router&lt;/code&gt;变成了两个&lt;code&gt;hooks&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;useRoute&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;useRouter&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue-router&#39;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; route &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useRoute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; router &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;query&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parmas&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;push&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;router&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;replace&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-12-【重定向】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-12-【重定向】&#34;&gt;&lt;/a&gt;4.12. 【重定向】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：将特定的路径，重新定向到已有路由。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体编码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;redirect&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/about&#39;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-pinia&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-pinia&#34;&gt;&lt;/a&gt;5. pinia&lt;/h1&gt;
&lt;h2 id=&#34;5-1【准备一个效果】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-1【准备一个效果】&#34;&gt;&lt;/a&gt;5.1【准备一个效果】&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://img.aixcc.top/file/f14ee7ea7c72a9003d7b8.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-2【搭建-pinia-环境】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-2【搭建-pinia-环境】&#34;&gt;&lt;/a&gt;5.2【搭建 pinia 环境】&lt;/h2&gt;
&lt;p&gt;第一步：&lt;code&gt;npm install pinia&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第二步：操作&lt;code&gt;src/main.ts&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createApp &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; App &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./App.vue&#39;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/* 引入createPinia，用于创建pinia */&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createPinia &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pinia&#39;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/* 创建pinia */&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; pinia &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createPinia&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createApp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;App&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/* 使用插件 */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pinia&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时开发者工具中已经有了&lt;code&gt;pinia&lt;/code&gt;选项&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232851.webp&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-3【存储-读取数据】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-3【存储-读取数据】&#34;&gt;&lt;/a&gt;5.3【存储+读取数据】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Store&lt;/code&gt;是一个保存：&lt;strong&gt;状态&lt;/strong&gt;、&lt;strong&gt;业务逻辑&lt;/strong&gt; 的实体，每个组件都可以&lt;strong&gt;读取&lt;/strong&gt;、&lt;strong&gt;写入&lt;/strong&gt;它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它有三个概念：&lt;code&gt;state&lt;/code&gt;、&lt;code&gt;getter&lt;/code&gt;、&lt;code&gt;action&lt;/code&gt;，相当于组件中的： &lt;code&gt;data&lt;/code&gt;、 &lt;code&gt;computed&lt;/code&gt; 和 &lt;code&gt;methods&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体编码：&lt;code&gt;src/store/count.ts&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// 引入defineStore用于创建store&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;defineStore&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pinia&#39;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 定义并暴露一个store&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; useCountStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;count&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 动作&lt;/span&gt;
  actions&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 状态&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      sum&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 计算&lt;/span&gt;
  getters&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体编码：&lt;code&gt;src/store/talk.ts&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// 引入defineStore用于创建store&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;defineStore&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pinia&#39;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 定义并暴露一个store&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; useTalkStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;talk&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 动作&lt;/span&gt;
  &lt;span class=&#34;token literal-property property&#34;&gt;actions&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 状态&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token literal-property property&#34;&gt;talkList&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;yuysada01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;你今天有点怪，哪里怪？怪好看的！&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
     		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;yuysada02&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;草莓、蓝莓、蔓越莓，你想我了没？&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;yuysada03&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;心里给你留了一块地，我的死心塌地&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 计算&lt;/span&gt;
  &lt;span class=&#34;token literal-property property&#34;&gt;getters&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件中使用&lt;code&gt;state&lt;/code&gt;中的数据&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;h2&amp;gt;当前求和为：&amp;#123;&amp;#123; sumStore.sum &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Count&amp;quot;&amp;gt;
  &amp;#x2F;&amp;#x2F; 引入对应的useXxxxxStore	
  import &amp;#123;useSumStore&amp;#125; from &amp;#39;@&amp;#x2F;store&amp;#x2F;sum&amp;#39;
  
  &amp;#x2F;&amp;#x2F; 调用useXxxxxStore得到对应的store
  const sumStore &amp;#x3D; useSumStore()
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
	&amp;lt;ul&amp;gt;
    &amp;lt;li v-for&amp;#x3D;&amp;quot;talk in talkStore.talkList&amp;quot; :key&amp;#x3D;&amp;quot;talk.id&amp;quot;&amp;gt;
      &amp;#123;&amp;#123; talk.content &amp;#125;&amp;#125;
    &amp;lt;&amp;#x2F;li&amp;gt;
  &amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Count&amp;quot;&amp;gt;
  import axios from &amp;#39;axios&amp;#39;
  import &amp;#123;useTalkStore&amp;#125; from &amp;#39;@&amp;#x2F;store&amp;#x2F;talk&amp;#39;

  const talkStore &amp;#x3D; useTalkStore()
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-4-【修改数据】-三种方式&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-4-【修改数据】-三种方式&#34;&gt;&lt;/a&gt;5.4.【修改数据】(三种方式)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一种修改方式，直接修改&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;countStore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种修改方式：批量修改&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;countStore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$patch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  sum&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;999&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  school&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;atguigu&#39;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三种修改方式：借助&lt;code&gt;action&lt;/code&gt;修改（&lt;code&gt;action&lt;/code&gt;中可以编写一些业务逻辑）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; defineStore &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pinia&#39;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; useCountStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;count&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/*************/&lt;/span&gt;
  &lt;span class=&#34;token literal-property property&#34;&gt;actions&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//加&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;&lt;span class=&#34;token literal-property property&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//操作countStore中的sum&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; value
      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;//减&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;decrement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;&lt;span class=&#34;token literal-property property&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; value
      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/*************/&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件中调用&lt;code&gt;action&lt;/code&gt;即可&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用countStore&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; countStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useCountStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 调用对应action&lt;/span&gt;
countStore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;incrementOdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-5-【storeToRefs】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-5-【storeToRefs】&#34;&gt;&lt;/a&gt;5.5.【storeToRefs】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;借助&lt;code&gt;storeToRefs&lt;/code&gt;将&lt;code&gt;store&lt;/code&gt;中的数据转为&lt;code&gt;ref&lt;/code&gt;对象，方便在模板中使用。&lt;/li&gt;
&lt;li&gt;注意：&lt;code&gt;pinia&lt;/code&gt;提供的&lt;code&gt;storeToRefs&lt;/code&gt;只会将数据做转换，而&lt;code&gt;Vue&lt;/code&gt;的&lt;code&gt;toRefs&lt;/code&gt;会转换&lt;code&gt;store&lt;/code&gt;中数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
	&amp;lt;div class&amp;#x3D;&amp;quot;count&amp;quot;&amp;gt;
		&amp;lt;h2&amp;gt;当前求和为：&amp;#123;&amp;#123;sum&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h2&amp;gt;
	&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Count&amp;quot;&amp;gt;
  import &amp;#123; useCountStore &amp;#125; from &amp;#39;@&amp;#x2F;store&amp;#x2F;count&amp;#39;
  &amp;#x2F;* 引入storeToRefs *&amp;#x2F;
  import &amp;#123; storeToRefs &amp;#125; from &amp;#39;pinia&amp;#39;

	&amp;#x2F;* 得到countStore *&amp;#x2F;
  const countStore &amp;#x3D; useCountStore()
  &amp;#x2F;* 使用storeToRefs转换countStore，随后解构 *&amp;#x2F;
  const &amp;#123;sum&amp;#125; &amp;#x3D; storeToRefs(countStore)
&amp;lt;&amp;#x2F;script&amp;gt;
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-6-【getters】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-6-【getters】&#34;&gt;&lt;/a&gt;5.6.【getters】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念：当&lt;code&gt;state&lt;/code&gt;中的数据，需要经过处理后再使用时，可以使用&lt;code&gt;getters&lt;/code&gt;配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;追加&lt;code&gt;getters&lt;/code&gt;配置。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// 引入defineStore用于创建store&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;defineStore&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pinia&#39;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 定义并暴露一个store&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; useCountStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;count&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 动作&lt;/span&gt;
  &lt;span class=&#34;token literal-property property&#34;&gt;actions&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;/************/&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 状态&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token literal-property property&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token literal-property property&#34;&gt;school&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;atguigu&#39;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 计算&lt;/span&gt;
  &lt;span class=&#34;token literal-property property&#34;&gt;getters&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token literal-property property&#34;&gt;bigSum&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;upperSchool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; school&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toUpperCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件中读取数据：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;increment&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;decrement&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; countStore
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;school&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;bigSum&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;upperSchool&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;storeToRefs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;countStore&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-7-【-subscribe】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-7-【-subscribe】&#34;&gt;&lt;/a&gt;5.7.【$subscribe】&lt;/h2&gt;
&lt;p&gt;通过 store 的 &lt;code&gt;$subscribe()&lt;/code&gt; 方法侦听 &lt;code&gt;state&lt;/code&gt; 及其变化&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;talkStore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$subscribe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutate&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;LoveTalk&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;mutate&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  localStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;talk&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;talkList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-8-【store组合式写法】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-8-【store组合式写法】&#34;&gt;&lt;/a&gt;5.8. 【store组合式写法】&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;defineStore&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;pinia&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; axios &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;nanoid&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;nanoid&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;reactive&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; useTalkStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;talk&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// talkList就是state&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; talkList &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;localStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;talkList&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;// getATalk函数相当于action&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getATalk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// 发请求，下面这行的写法是：连续解构赋值+重命名&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;content&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; axios&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;https://api.uomg.com/api/rand.qinghua?format=json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// 把请求回来的字符串，包装成一个对象&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;id&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nanoid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34;&gt;// 放到数组中&lt;/span&gt;
    talkList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;unshift&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;talkList&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;getATalk&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;6-组件通信&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-组件通信&#34;&gt;&lt;/a&gt;6. 组件通信&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Vue3&lt;/code&gt;组件通信和&lt;code&gt;Vue2&lt;/code&gt;的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移出事件总线，使用&lt;code&gt;mitt&lt;/code&gt;代替。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vuex&lt;/code&gt;换成了&lt;code&gt;pinia&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;把&lt;code&gt;.sync&lt;/code&gt;优化到了&lt;code&gt;v-model&lt;/code&gt;里面了。&lt;/li&gt;
&lt;li&gt;把&lt;code&gt;$listeners&lt;/code&gt;所有的东西，合并到&lt;code&gt;$attrs&lt;/code&gt;中了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$children&lt;/code&gt;被砍掉了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见搭配形式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232507.webp&#34; alt=&#34;image-20231119185900990&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-1-【props】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-1-【props】&#34;&gt;&lt;/a&gt;6.1. 【props】&lt;/h2&gt;
&lt;p&gt;概述：&lt;code&gt;props&lt;/code&gt;是使用频率最高的一种通信方式，常用与 ：&lt;strong&gt;父 ↔ 子&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;strong&gt;父传子&lt;/strong&gt;：属性值是&lt;strong&gt;非函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;若 &lt;strong&gt;子传父&lt;/strong&gt;：属性值是&lt;strong&gt;函数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;父组件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;father&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;父组件，&amp;lt;&amp;#x2F;h3&amp;gt;
		&amp;lt;h4&amp;gt;我的车：&amp;#123;&amp;#123; car &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;h4&amp;gt;儿子给的玩具：&amp;#123;&amp;#123; toy &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;Child :car&amp;#x3D;&amp;quot;car&amp;quot; :getToy&amp;#x3D;&amp;quot;getToy&amp;quot;&amp;#x2F;&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Father&amp;quot;&amp;gt;
	import Child from &amp;#39;.&amp;#x2F;Child.vue&amp;#39;
	import &amp;#123; ref &amp;#125; from &amp;quot;vue&amp;quot;;
	&amp;#x2F;&amp;#x2F; 数据
	const car &amp;#x3D; ref(&amp;#39;奔驰&amp;#39;)
	const toy &amp;#x3D; ref()
	&amp;#x2F;&amp;#x2F; 方法
	function getToy(value:string)&amp;#123;
		toy.value &amp;#x3D; value
	&amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;子组件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;child&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;子组件&amp;lt;&amp;#x2F;h3&amp;gt;
		&amp;lt;h4&amp;gt;我的玩具：&amp;#123;&amp;#123; toy &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;h4&amp;gt;父给我的车：&amp;#123;&amp;#123; car &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;button @click&amp;#x3D;&amp;quot;getToy(toy)&amp;quot;&amp;gt;玩具给父亲&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Child&amp;quot;&amp;gt;
	import &amp;#123; ref &amp;#125; from &amp;quot;vue&amp;quot;;
	const toy &amp;#x3D; ref(&amp;#39;奥特曼&amp;#39;)
	
	defineProps([&amp;#39;car&amp;#39;,&amp;#39;getToy&amp;#39;])
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-2-【自定义事件】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-2-【自定义事件】&#34;&gt;&lt;/a&gt;6.2. 【自定义事件】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;概述：自定义事件常用于：&lt;strong&gt;子 =&amp;gt; 父。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注意区分好：原生事件、自定义事件。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;原生事件：
&lt;ul&gt;
&lt;li&gt;事件名是特定的（&lt;code&gt;click&lt;/code&gt;、&lt;code&gt;mosueenter&lt;/code&gt;等等）&lt;/li&gt;
&lt;li&gt;事件对象&lt;code&gt;$event&lt;/code&gt;: 是包含事件相关信息的对象（&lt;code&gt;pageX&lt;/code&gt;、&lt;code&gt;pageY&lt;/code&gt;、&lt;code&gt;target&lt;/code&gt;、&lt;code&gt;keyCode&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义事件：
&lt;ul&gt;
&lt;li&gt;事件名是任意名称&lt;/li&gt;
&lt;li&gt;&lt;strong style=&#34;color:red&#34;&gt;事件对象&lt;code&gt;$event&lt;/code&gt;: 是调用&lt;code&gt;emit&lt;/code&gt;时所提供的数据，可以是任意类型！！！&lt;/strong &gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-markup&#34; data-language=&#34;markup&#34;&gt;&lt;code class=&#34;language-markup&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--在父组件中，给子组件绑定自定义事件：--&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Child&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;@send-toy&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;toy = $event&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--注意区分原生事件与自定义事件中的$event--&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;@click&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;toy = $event&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;测试&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;//子组件中，触发事件：&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$emit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;send-toy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 具体数据&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-3-【mitt】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-3-【mitt】&#34;&gt;&lt;/a&gt;6.3. 【mitt】&lt;/h2&gt;
&lt;p&gt;概述：与消息订阅与发布（&lt;code&gt;pubsub&lt;/code&gt;）功能类似，可以实现任意组件间通信。&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;mitt&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; i mitt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新建文件：&lt;code&gt;src\utils\emitter.ts&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;// 引入mitt &lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; mitt &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mitt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 创建emitter&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; emitter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mitt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/*
  // 绑定事件
  emitter.on(&#39;abc&#39;,(value)=&gt;&amp;#123;
    console.log(&#39;abc事件被触发&#39;,value)
  &amp;#125;)
  emitter.on(&#39;xyz&#39;,(value)=&gt;&amp;#123;
    console.log(&#39;xyz事件被触发&#39;,value)
  &amp;#125;)

  setInterval(() =&gt; &amp;#123;
    // 触发事件
    emitter.emit(&#39;abc&#39;,666)
    emitter.emit(&#39;xyz&#39;,777)
  &amp;#125;, 1000);

  setTimeout(() =&gt; &amp;#123;
    // 清理事件
    emitter.all.clear()
  &amp;#125;, 3000); 
*/&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 创建并暴露mitt&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; emitter&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收数据的组件中：绑定事件、同时在销毁前解绑事件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; emitter &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;@/utils/emitter&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; onUnmounted &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;vue&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 绑定事件&lt;/span&gt;
emitter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;send-toy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;send-toy事件被触发&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token function&#34;&gt;onUnmounted&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 解绑事件&lt;/span&gt;
  emitter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;off&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;send-toy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【第三步】：提供数据的组件，在合适的时候触发事件&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; emitter &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;@/utils/emitter&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sendToy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;// 触发事件&lt;/span&gt;
  emitter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;send-toy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;toy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意这个重要的内置关系，总线依赖着这个内置关系&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-4-【v-model】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-4-【v-model】&#34;&gt;&lt;/a&gt;6.4.【v-model】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概述：实现 &lt;strong&gt;父↔子&lt;/strong&gt; 之间相互通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前序知识 —— &lt;code&gt;v-model&lt;/code&gt;的本质&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!-- 使用v-model指令 --&amp;gt;
&amp;lt;input type&amp;#x3D;&amp;quot;text&amp;quot; v-model&amp;#x3D;&amp;quot;userName&amp;quot;&amp;gt;

&amp;lt;!-- v-model的本质是下面这行代码 --&amp;gt;
&amp;lt;input 
  type&amp;#x3D;&amp;quot;text&amp;quot; 
  :value&amp;#x3D;&amp;quot;userName&amp;quot; 
  @input&amp;#x3D;&amp;quot;userName &amp;#x3D;(&amp;lt;HTMLInputElement&amp;gt;$event.target).value&amp;quot;
&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件标签上的&lt;code&gt;v-model&lt;/code&gt;的本质：&lt;code&gt;:moldeValue&lt;/code&gt; ＋ &lt;code&gt;update:modelValue&lt;/code&gt;事件。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!-- 组件标签上使用v-model指令 --&amp;gt;
&amp;lt;AtguiguInput v-model&amp;#x3D;&amp;quot;userName&amp;quot;&amp;#x2F;&amp;gt;

&amp;lt;!-- 组件标签上v-model的本质 --&amp;gt;
&amp;lt;AtguiguInput :modelValue&amp;#x3D;&amp;quot;userName&amp;quot; @update:model-value&amp;#x3D;&amp;quot;userName &amp;#x3D; $event&amp;quot;&amp;#x2F;&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AtguiguInput&lt;/code&gt;组件中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;box&amp;quot;&amp;gt;
    &amp;lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&amp;gt;
		&amp;lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&amp;gt;
    &amp;lt;input 
       type&amp;#x3D;&amp;quot;text&amp;quot; 
       :value&amp;#x3D;&amp;quot;modelValue&amp;quot; 
       @input&amp;#x3D;&amp;quot;emit(&amp;#39;update:model-value&amp;#39;,$event.target.value)&amp;quot;
    &amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;AtguiguInput&amp;quot;&amp;gt;
  &amp;#x2F;&amp;#x2F; 接收props
  defineProps([&amp;#39;modelValue&amp;#39;])
  &amp;#x2F;&amp;#x2F; 声明事件
  const emit &amp;#x3D; defineEmits([&amp;#39;update:model-value&amp;#39;])
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以更换&lt;code&gt;value&lt;/code&gt;，例如改成&lt;code&gt;abc&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;!-- 也可以更换value，例如改成abc--&amp;gt;
&amp;lt;AtguiguInput v-model:abc&amp;#x3D;&amp;quot;userName&amp;quot;&amp;#x2F;&amp;gt;

&amp;lt;!-- 上面代码的本质如下 --&amp;gt;
&amp;lt;AtguiguInput :abc&amp;#x3D;&amp;quot;userName&amp;quot; @update:abc&amp;#x3D;&amp;quot;userName &amp;#x3D; $event&amp;quot;&amp;#x2F;&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AtguiguInput&lt;/code&gt;组件中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;box&amp;quot;&amp;gt;
    &amp;lt;input 
       type&amp;#x3D;&amp;quot;text&amp;quot; 
       :value&amp;#x3D;&amp;quot;abc&amp;quot; 
       @input&amp;#x3D;&amp;quot;emit(&amp;#39;update:abc&amp;#39;,$event.target.value)&amp;quot;
    &amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;AtguiguInput&amp;quot;&amp;gt;
  &amp;#x2F;&amp;#x2F; 接收props
  defineProps([&amp;#39;abc&amp;#39;])
  &amp;#x2F;&amp;#x2F; 声明事件
  const emit &amp;#x3D; defineEmits([&amp;#39;update:abc&amp;#39;])
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果&lt;code&gt;value&lt;/code&gt;可以更换，那么就可以在组件标签上多次使用&lt;code&gt;v-model&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;AtguiguInput v-model:abc&amp;#x3D;&amp;quot;userName&amp;quot; v-model:xyz&amp;#x3D;&amp;quot;password&amp;quot;&amp;#x2F;&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-5-【-attrs-】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-5-【-attrs-】&#34;&gt;&lt;/a&gt;6.5.【$attrs 】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概述：&lt;code&gt;$attrs&lt;/code&gt;用于实现&lt;strong&gt;当前组件的父组件&lt;/strong&gt;，向&lt;strong&gt;当前组件的子组件&lt;/strong&gt;通信（&lt;strong&gt;祖→孙&lt;/strong&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体说明：&lt;code&gt;$attrs&lt;/code&gt;是一个对象，包含所有父组件传入的标签属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;$attrs&lt;/code&gt;会自动排除&lt;code&gt;props&lt;/code&gt;中声明的属性(可以认为声明过的 &lt;code&gt;props&lt;/code&gt; 被子组件自己“消费”了)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;父组件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;father&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;父组件&amp;lt;&amp;#x2F;h3&amp;gt;
		&amp;lt;Child :a&amp;#x3D;&amp;quot;a&amp;quot; :b&amp;#x3D;&amp;quot;b&amp;quot; :c&amp;#x3D;&amp;quot;c&amp;quot; :d&amp;#x3D;&amp;quot;d&amp;quot; v-bind&amp;#x3D;&amp;quot;&amp;#123;x:100,y:200&amp;#125;&amp;quot; :updateA&amp;#x3D;&amp;quot;updateA&amp;quot;&amp;#x2F;&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Father&amp;quot;&amp;gt;
	import Child from &amp;#39;.&amp;#x2F;Child.vue&amp;#39;
	import &amp;#123; ref &amp;#125; from &amp;quot;vue&amp;quot;;
	let a &amp;#x3D; ref(1)
	let b &amp;#x3D; ref(2)
	let c &amp;#x3D; ref(3)
	let d &amp;#x3D; ref(4)

	function updateA(value)&amp;#123;
		a.value &amp;#x3D; value
	&amp;#125;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;子组件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
	&amp;lt;div class&amp;#x3D;&amp;quot;child&amp;quot;&amp;gt;
		&amp;lt;h3&amp;gt;子组件&amp;lt;&amp;#x2F;h3&amp;gt;
		&amp;lt;GrandChild v-bind&amp;#x3D;&amp;quot;$attrs&amp;quot;&amp;#x2F;&amp;gt;
	&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Child&amp;quot;&amp;gt;
	import GrandChild from &amp;#39;.&amp;#x2F;GrandChild.vue&amp;#39;
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;孙组件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
	&amp;lt;div class&amp;#x3D;&amp;quot;grand-child&amp;quot;&amp;gt;
		&amp;lt;h3&amp;gt;孙组件&amp;lt;&amp;#x2F;h3&amp;gt;
		&amp;lt;h4&amp;gt;a：&amp;#123;&amp;#123; a &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;h4&amp;gt;b：&amp;#123;&amp;#123; b &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;h4&amp;gt;c：&amp;#123;&amp;#123; c &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;h4&amp;gt;d：&amp;#123;&amp;#123; d &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;h4&amp;gt;x：&amp;#123;&amp;#123; x &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;h4&amp;gt;y：&amp;#123;&amp;#123; y &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
		&amp;lt;button @click&amp;#x3D;&amp;quot;updateA(666)&amp;quot;&amp;gt;点我更新A&amp;lt;&amp;#x2F;button&amp;gt;
	&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;GrandChild&amp;quot;&amp;gt;
	defineProps([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;,&amp;#39;updateA&amp;#39;])
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-6-【-refs、-parent】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-6-【-refs、-parent】&#34;&gt;&lt;/a&gt;6.6. 【$refs、$parent】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$refs&lt;/code&gt;用于 ：&lt;strong&gt;父→子。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$parent&lt;/code&gt;用于：&lt;strong&gt;子→父。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原理如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$refs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;值为对象，包含所有被&lt;code&gt;ref&lt;/code&gt;属性标识的&lt;code&gt;DOM&lt;/code&gt;元素或组件实例。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$parent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;值为对象，当前组件的父组件实例对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-7-【provide、inject】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-7-【provide、inject】&#34;&gt;&lt;/a&gt;6.7. 【provide、inject】&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概述：实现&lt;strong&gt;祖孙组件&lt;/strong&gt;直接通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在祖先组件中通过&lt;code&gt;provide&lt;/code&gt;配置向后代组件提供数据&lt;/li&gt;
&lt;li&gt;在后代组件中通过&lt;code&gt;inject&lt;/code&gt;配置来声明接收数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体编码：&lt;/p&gt;
&lt;p&gt;【第一步】父组件中，使用&lt;code&gt;provide&lt;/code&gt;提供数据&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;father&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;父组件&amp;lt;&amp;#x2F;h3&amp;gt;
    &amp;lt;h4&amp;gt;资产：&amp;#123;&amp;#123; money &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
    &amp;lt;h4&amp;gt;汽车：&amp;#123;&amp;#123; car &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;money +&amp;#x3D; 1&amp;quot;&amp;gt;资产+1&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;car.price +&amp;#x3D; 1&amp;quot;&amp;gt;汽车价格+1&amp;lt;&amp;#x2F;button&amp;gt;
    &amp;lt;Child&amp;#x2F;&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Father&amp;quot;&amp;gt;
  import Child from &amp;#39;.&amp;#x2F;Child.vue&amp;#39;
  import &amp;#123; ref,reactive,provide &amp;#125; from &amp;quot;vue&amp;quot;;
  &amp;#x2F;&amp;#x2F; 数据
  let money &amp;#x3D; ref(100)
  let car &amp;#x3D; reactive(&amp;#123;
    brand:&amp;#39;奔驰&amp;#39;,
    price:100
  &amp;#125;)
  &amp;#x2F;&amp;#x2F; 用于更新money的方法
  function updateMoney(value:number)&amp;#123;
    money.value +&amp;#x3D; value
  &amp;#125;
  &amp;#x2F;&amp;#x2F; 提供数据
  provide(&amp;#39;moneyContext&amp;#39;,&amp;#123;money,updateMoney&amp;#125;)
  provide(&amp;#39;car&amp;#39;,car)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：子组件中不用编写任何东西，是不受到任何打扰的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【第二步】孙组件中使用&lt;code&gt;inject&lt;/code&gt;配置项接受数据。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class&amp;#x3D;&amp;quot;grand-child&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;我是孙组件&amp;lt;&amp;#x2F;h3&amp;gt;
    &amp;lt;h4&amp;gt;资产：&amp;#123;&amp;#123; money &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
    &amp;lt;h4&amp;gt;汽车：&amp;#123;&amp;#123; car &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h4&amp;gt;
    &amp;lt;button @click&amp;#x3D;&amp;quot;updateMoney(6)&amp;quot;&amp;gt;点我&amp;lt;&amp;#x2F;button&amp;gt;
  &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;

&amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;GrandChild&amp;quot;&amp;gt;
  import &amp;#123; inject &amp;#125; from &amp;#39;vue&amp;#39;;
  &amp;#x2F;&amp;#x2F; 注入数据
 let &amp;#123;money,updateMoney&amp;#125; &amp;#x3D; inject(&amp;#39;moneyContext&amp;#39;,&amp;#123;money:0,updateMoney:(x:number)&amp;#x3D;&amp;gt;&amp;#123;&amp;#125;&amp;#125;)
  let car &amp;#x3D; inject(&amp;#39;car&amp;#39;)
&amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-8-【pinia】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-8-【pinia】&#34;&gt;&lt;/a&gt;6.8. 【pinia】&lt;/h2&gt;
&lt;p&gt;参考之前&lt;code&gt;pinia&lt;/code&gt;部分的讲解&lt;/p&gt;
&lt;h2 id=&#34;6-9-【slot】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-9-【slot】&#34;&gt;&lt;/a&gt;6.9. 【slot】&lt;/h2&gt;
&lt;h3 id=&#34;1-默认插槽&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-默认插槽&#34;&gt;&lt;/a&gt;1. 默认插槽&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://alist.aixcc.top/d/OneDrive/img/202407151232099.webp&#34; alt=&#34;img&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;父组件中：
        &amp;lt;Category title&amp;#x3D;&amp;quot;今日热门游戏&amp;quot;&amp;gt;
          &amp;lt;ul&amp;gt;
            &amp;lt;li v-for&amp;#x3D;&amp;quot;g in games&amp;quot; :key&amp;#x3D;&amp;quot;g.id&amp;quot;&amp;gt;&amp;#123;&amp;#123; g.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;li&amp;gt;
          &amp;lt;&amp;#x2F;ul&amp;gt;
        &amp;lt;&amp;#x2F;Category&amp;gt;
子组件中：
        &amp;lt;template&amp;gt;
          &amp;lt;div class&amp;#x3D;&amp;quot;item&amp;quot;&amp;gt;
            &amp;lt;h3&amp;gt;&amp;#123;&amp;#123; title &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h3&amp;gt;
            &amp;lt;!-- 默认插槽 --&amp;gt;
            &amp;lt;slot&amp;gt;&amp;lt;&amp;#x2F;slot&amp;gt;
          &amp;lt;&amp;#x2F;div&amp;gt;
        &amp;lt;&amp;#x2F;template&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-具名插槽&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-具名插槽&#34;&gt;&lt;/a&gt;2. 具名插槽&lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;父组件中：
        &amp;lt;Category title&amp;#x3D;&amp;quot;今日热门游戏&amp;quot;&amp;gt;
          &amp;lt;template v-slot:s1&amp;gt;
            &amp;lt;ul&amp;gt;
              &amp;lt;li v-for&amp;#x3D;&amp;quot;g in games&amp;quot; :key&amp;#x3D;&amp;quot;g.id&amp;quot;&amp;gt;&amp;#123;&amp;#123; g.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;li&amp;gt;
            &amp;lt;&amp;#x2F;ul&amp;gt;
          &amp;lt;&amp;#x2F;template&amp;gt;
          &amp;lt;template #s2&amp;gt;
            &amp;lt;a href&amp;#x3D;&amp;quot;&amp;quot;&amp;gt;更多&amp;lt;&amp;#x2F;a&amp;gt;
          &amp;lt;&amp;#x2F;template&amp;gt;
        &amp;lt;&amp;#x2F;Category&amp;gt;
子组件中：
        &amp;lt;template&amp;gt;
          &amp;lt;div class&amp;#x3D;&amp;quot;item&amp;quot;&amp;gt;
            &amp;lt;h3&amp;gt;&amp;#123;&amp;#123; title &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;h3&amp;gt;
            &amp;lt;slot name&amp;#x3D;&amp;quot;s1&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;slot&amp;gt;
            &amp;lt;slot name&amp;#x3D;&amp;quot;s2&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;slot&amp;gt;
          &amp;lt;&amp;#x2F;div&amp;gt;
        &amp;lt;&amp;#x2F;template&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-作用域插槽&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-作用域插槽&#34;&gt;&lt;/a&gt;3. 作用域插槽&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;理解：&lt;span style=&#34;color:red&#34;&gt;数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。&lt;/span&gt;（新闻数据在&lt;code&gt;News&lt;/code&gt;组件中，但使用数据所遍历出来的结构由&lt;code&gt;App&lt;/code&gt;组件决定）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体编码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;父组件中：
      &amp;lt;Game v-slot&amp;#x3D;&amp;quot;params&amp;quot;&amp;gt;
      &amp;lt;!-- &amp;lt;Game v-slot:default&amp;#x3D;&amp;quot;params&amp;quot;&amp;gt; --&amp;gt;
      &amp;lt;!-- &amp;lt;Game #default&amp;#x3D;&amp;quot;params&amp;quot;&amp;gt; --&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li v-for&amp;#x3D;&amp;quot;g in params.games&amp;quot; :key&amp;#x3D;&amp;quot;g.id&amp;quot;&amp;gt;&amp;#123;&amp;#123; g.name &amp;#125;&amp;#125;&amp;lt;&amp;#x2F;li&amp;gt;
        &amp;lt;&amp;#x2F;ul&amp;gt;
      &amp;lt;&amp;#x2F;Game&amp;gt;

子组件中：
      &amp;lt;template&amp;gt;
        &amp;lt;div class&amp;#x3D;&amp;quot;category&amp;quot;&amp;gt;
          &amp;lt;h2&amp;gt;今日游戏榜单&amp;lt;&amp;#x2F;h2&amp;gt;
          &amp;lt;slot :games&amp;#x3D;&amp;quot;games&amp;quot; a&amp;#x3D;&amp;quot;哈哈&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;slot&amp;gt;
        &amp;lt;&amp;#x2F;div&amp;gt;
      &amp;lt;&amp;#x2F;template&amp;gt;

      &amp;lt;script setup lang&amp;#x3D;&amp;quot;ts&amp;quot; name&amp;#x3D;&amp;quot;Category&amp;quot;&amp;gt;
        import &amp;#123;reactive&amp;#125; from &amp;#39;vue&amp;#39;
        let games &amp;#x3D; reactive([
          &amp;#123;id:&amp;#39;asgdytsa01&amp;#39;,name:&amp;#39;英雄联盟&amp;#39;&amp;#125;,
          &amp;#123;id:&amp;#39;asgdytsa02&amp;#39;,name:&amp;#39;王者荣耀&amp;#39;&amp;#125;,
          &amp;#123;id:&amp;#39;asgdytsa03&amp;#39;,name:&amp;#39;红色警戒&amp;#39;&amp;#125;,
          &amp;#123;id:&amp;#39;asgdytsa04&amp;#39;,name:&amp;#39;斗罗大陆&amp;#39;&amp;#125;
        ])
      &amp;lt;&amp;#x2F;script&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;7-其它-API&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#7-其它-API&#34;&gt;&lt;/a&gt;7. 其它 API&lt;/h1&gt;
&lt;h2 id=&#34;7-1-【shallowRef-与-shallowReactive-】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#7-1-【shallowRef-与-shallowReactive-】&#34;&gt;&lt;/a&gt;7.1.【shallowRef 与 shallowReactive 】&lt;/h2&gt;
&lt;h3 id=&#34;shallowRef&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#shallowRef&#34;&gt;&lt;/a&gt;&lt;code&gt;shallowRef&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：创建一个响应式数据，但只对顶层属性进行响应式处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; myVar &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;shallowRef&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;initialValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：只跟踪引用值的变化，不关心值内部的属性变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;shallowReactive&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#shallowReactive&#34;&gt;&lt;/a&gt;&lt;code&gt;shallowReactive&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; myObj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;shallowReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt;总结&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过使用 &lt;a href=&#34;https://cn.vuejs.org/api/reactivity-advanced.html#shallowref&#34;&gt;&lt;code&gt;shallowRef()&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive&#34;&gt;&lt;code&gt;shallowReactive()&lt;/code&gt;&lt;/a&gt; 来绕开深度响应。浅层式 &lt;code&gt;API&lt;/code&gt; 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;7-2-【readonly-与-shallowReadonly】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#7-2-【readonly-与-shallowReadonly】&#34;&gt;&lt;/a&gt;7.2.【readonly 与 shallowReadonly】&lt;/h2&gt;
&lt;h3 id=&#34;readonly&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#readonly&#34;&gt;&lt;/a&gt;&lt;strong&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：用于创建一个对象的深只读副本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; original &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; readOnlyCopy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;readonly&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;original&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象的所有嵌套属性都将变为只读。&lt;/li&gt;
&lt;li&gt;任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建不可变的状态快照。&lt;/li&gt;
&lt;li&gt;保护全局状态或配置不被修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;shallowReadonly&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#shallowReadonly&#34;&gt;&lt;/a&gt;&lt;strong&gt;&lt;code&gt;shallowReadonly&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：与 &lt;code&gt;readonly&lt;/code&gt; 类似，但只作用于对象的顶层属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; original &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; shallowReadOnlyCopy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;shallowReadonly&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;original&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适用于只需保护对象顶层属性的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-3-【toRaw-与-markRaw】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#7-3-【toRaw-与-markRaw】&#34;&gt;&lt;/a&gt;7.3.【toRaw 与 markRaw】&lt;/h2&gt;
&lt;h3 id=&#34;toRaw&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#toRaw&#34;&gt;&lt;/a&gt;&lt;code&gt;toRaw&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：用于获取一个响应式对象的原始对象， &lt;code&gt;toRaw&lt;/code&gt; 返回的对象不再是响应式的，不会触发视图更新。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;何时使用？ —— 在需要将响应式对象传递给非 &lt;code&gt;Vue&lt;/code&gt; 的库或外部系统时，使用 &lt;code&gt;toRaw&lt;/code&gt; 可以确保它们收到的是普通对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体编码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; reactive&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;toRaw&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;markRaw&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;isReactive &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;vue&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;/* toRaw */&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 响应式对象&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; person &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;tony&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 原始对象&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; rawPerson &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;toRaw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;token comment&#34;&gt;/* markRaw */&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; citysd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;markRaw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;北京&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda02&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;上海&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda03&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;天津&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda04&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;重庆&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; citys2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;citys&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rawPerson&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;citys&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;citys2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;markRaw&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#markRaw&#34;&gt;&lt;/a&gt;&lt;code&gt;markRaw&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：标记一个对象，使其&lt;strong&gt;永远不会&lt;/strong&gt;变成响应式的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如使用&lt;code&gt;mockjs&lt;/code&gt;时，为了防止误把&lt;code&gt;mockjs&lt;/code&gt;变为响应式对象，可以使用 &lt;code&gt;markRaw&lt;/code&gt; 去标记&lt;code&gt;mockjs&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;/* markRaw */&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; citys &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;markRaw&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;北京&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda02&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;上海&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda03&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;天津&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;asdda04&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;重庆&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; citys2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;citys&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-4-【customRef】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#7-4-【customRef】&#34;&gt;&lt;/a&gt;7.4.【customRef】&lt;/h2&gt;
&lt;p&gt;作用：创建一个自定义的&lt;code&gt;ref&lt;/code&gt;，并对其依赖项跟踪和更新触发进行逻辑控制。&lt;/p&gt;
&lt;p&gt;实现防抖效果（&lt;code&gt;useSumRef.ts&lt;/code&gt;）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-typescript&#34; data-language=&#34;typescript&#34;&gt;&lt;code class=&#34;language-typescript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;customRef &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;vue&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;initValue&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;delay&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; msg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;customRef&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;track&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;trigger&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; timer&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
      &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; initValue
      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;clearTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;timer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        timer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
          initValue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; value
          &lt;span class=&#34;token function&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//通知Vue数据msg变化了&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;组件中使用：&lt;/p&gt;
&lt;h1 id=&#34;8-Vue3新组件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#8-Vue3新组件&#34;&gt;&lt;/a&gt;8. Vue3新组件&lt;/h1&gt;
&lt;h2 id=&#34;8-1-【Teleport】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#8-1-【Teleport】&#34;&gt;&lt;/a&gt;8.1. 【Teleport】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是Teleport？—— Teleport 是一种能够将我们的&lt;strong&gt;组件html结构&lt;/strong&gt;移动到指定位置的技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-markup&#34; data-language=&#34;markup&#34;&gt;&lt;code class=&#34;language-markup&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;teleport&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;modal&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;v-show&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;isShow&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;我是一个弹窗&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;我是弹窗中的一些内容&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;@click&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;isShow = false&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;关闭弹窗&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;teleport&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8-2-【Suspense】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#8-2-【Suspense】&#34;&gt;&lt;/a&gt;8.2. 【Suspense】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;等待异步组件时渲染一些额外内容，让应用有更好的用户体验&lt;/li&gt;
&lt;li&gt;使用步骤：
&lt;ul&gt;
&lt;li&gt;异步引入组件&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Suspense&lt;/code&gt;包裹组件，并配置好&lt;code&gt;default&lt;/code&gt; 与 &lt;code&gt;fallback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-tsx&#34; data-language=&#34;tsx&#34;&gt;&lt;code class=&#34;language-tsx&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; defineAsyncComponent&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Suspense &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;vue&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; Child &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineAsyncComponent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./Child.vue&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;line-numbers language-vue&#34; data-language=&#34;vue&#34;&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class&amp;#x3D;&amp;quot;app&amp;quot;&amp;gt;
        &amp;lt;h3&amp;gt;我是App组件&amp;lt;&amp;#x2F;h3&amp;gt;
        &amp;lt;Suspense&amp;gt;
          &amp;lt;template v-slot:default&amp;gt;
            &amp;lt;Child&amp;#x2F;&amp;gt;
          &amp;lt;&amp;#x2F;template&amp;gt;
          &amp;lt;template v-slot:fallback&amp;gt;
            &amp;lt;h3&amp;gt;加载中.......&amp;lt;&amp;#x2F;h3&amp;gt;
          &amp;lt;&amp;#x2F;template&amp;gt;
        &amp;lt;&amp;#x2F;Suspense&amp;gt;
    &amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;&amp;#x2F;template&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8-3-【全局API转移到应用对象】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#8-3-【全局API转移到应用对象】&#34;&gt;&lt;/a&gt;8.3.【全局API转移到应用对象】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.directive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.mount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.unmount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.use&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-4-【其他】&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#8-4-【其他】&#34;&gt;&lt;/a&gt;8.4.【其他】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;过渡类名 &lt;code&gt;v-enter&lt;/code&gt; 修改为 &lt;code&gt;v-enter-from&lt;/code&gt;、过渡类名 &lt;code&gt;v-leave&lt;/code&gt; 修改为 &lt;code&gt;v-leave-from&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keyCode&lt;/code&gt; 作为 &lt;code&gt;v-on&lt;/code&gt; 修饰符的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-model&lt;/code&gt; 指令在组件上的使用已经被重新设计，替换掉了 &lt;code&gt;v-bind.sync。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-if&lt;/code&gt; 和 &lt;code&gt;v-for&lt;/code&gt; 在同一个元素身上使用时的优先级发生了变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除了&lt;code&gt;$on&lt;/code&gt;、&lt;code&gt;$off&lt;/code&gt; 和 &lt;code&gt;$once&lt;/code&gt; 实例方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除了过滤器 &lt;code&gt;filter&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除了&lt;code&gt;$children&lt;/code&gt; 实例 &lt;code&gt;propert&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本文内容来源于尚硅谷Vue.js教程，原文地址：&lt;a href=&#34;http://www.atguigu.com/video/284/&#34;&gt;尚硅谷Vue教程&lt;/a&gt;。感谢尚硅谷提供的优秀文档资源。&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="Vue" />
        <category term="前端" />
        <updated>2024-07-13T15:56:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/07/02/%E5%AE%9A%E6%9C%9F%E6%B8%85%E7%90%86Alist%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/</id>
        <title>定期清理Alist备份文件</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/07/02/%E5%AE%9A%E6%9C%9F%E6%B8%85%E7%90%86Alist%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/"/>
        <content type="html">&lt;h1 id=&#34;使用-Alist-和-Bash-脚本实现自动化管理&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#使用-Alist-和-Bash-脚本实现自动化管理&#34;&gt;&lt;/a&gt;使用 Alist 和 Bash 脚本实现自动化管理&lt;/h1&gt;
&lt;p&gt;在上次的博客中，我们介绍了如何使用 Alist 来定时备份服务器上的一些文件。本篇博客将介绍如何编写一个 Bash 脚本，定期清理这些备份文件，节省存储空间。&lt;/p&gt;
&lt;h3 id=&#34;为什么需要定期清理备份文件？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么需要定期清理备份文件？&#34;&gt;&lt;/a&gt;为什么需要定期清理备份文件？&lt;/h3&gt;
&lt;p&gt;备份文件在系统维护中起着重要作用，但如果不加管理，长期积累的备份文件会占用大量存储空间，甚至可能导致磁盘空间不足的问题。定期清理过期的备份文件，可以有效释放存储资源，确保系统的高效运行。&lt;/p&gt;
&lt;h3 id=&#34;利用-Alist-提供的接口实现定期清理&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#利用-Alist-提供的接口实现定期清理&#34;&gt;&lt;/a&gt;利用 Alist 提供的接口实现定期清理&lt;/h3&gt;
&lt;p&gt;Alist 提供了 &lt;code&gt;POST /api/fs/list&lt;/code&gt; 和 &lt;code&gt;POST /api/fs/remove&lt;/code&gt; 接口，分别用于列出文件和删除文件。通过这两个接口，我们可以方便地实现定期清理备份文件的功能。&lt;/p&gt;
&lt;h3 id=&#34;脚本功能&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#脚本功能&#34;&gt;&lt;/a&gt;脚本功能&lt;/h3&gt;
&lt;p&gt;该 Bash 脚本的主要功能包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;列出备份目录中的所有文件。&lt;/li&gt;
&lt;li&gt;判断文件是否超过指定的时间（本文中设置为30天）。&lt;/li&gt;
&lt;li&gt;删除超过指定时间的文件。&lt;/li&gt;
&lt;li&gt;将操作结果记录到日志文件中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;脚本实现&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#脚本实现&#34;&gt;&lt;/a&gt;脚本实现&lt;/h3&gt;
&lt;p&gt;首先，在 &lt;code&gt;/opt/alist&lt;/code&gt; 目录下创建脚本文件和日志文件夹：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; /opt/alist/log
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /opt/alist
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; clean_backups.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;clean_backups.sh&lt;/code&gt; 文件中输入以下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 设置日志文件&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;LOG_FILE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/opt/alist/log/clean_back_&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +&lt;span class=&#34;token string&#34;&gt;&#39;%Y%m%d%H%M%S&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;.log&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 删除超过30天的日志文件&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt; /opt/alist/log &lt;span class=&#34;token parameter variable&#34;&gt;-type&lt;/span&gt; f &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*.log&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-mtime&lt;/span&gt; +30 &lt;span class=&#34;token parameter variable&#34;&gt;-exec&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 函数：带时间戳的echo&lt;/span&gt;
&lt;span class=&#34;token function-name function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;[&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +&lt;span class=&#34;token string&#34;&gt;&#39;%Y-%m-%d %H:%M:%S&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;] &lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tee&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$LOG_FILE&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 读取token&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; /tmp/alist_token.txt &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Token file not found.&#34;&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;AUTH_TOKEN&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /tmp/alist_token.txt&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 检查token是否读取成功&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-z&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$AUTH_TOKEN&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Token is empty.&#34;&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 配置参数&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;API_URL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;Alist 地址&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;LIST_ENDPOINT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$API_URL&lt;/span&gt;/api/fs/list&#34;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;REMOVE_ENDPOINT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$API_URL&lt;/span&gt;/api/fs/remove&#34;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;BACKUP_PATH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;Alist 存储路径&gt;&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 当前日期的时间戳（秒）&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;CURRENT_DATE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +%s&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 列出备份目录中的文件&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;-X&lt;/span&gt; POST &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$LIST_ENDPOINT&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Authorization: &lt;span class=&#34;token variable&#34;&gt;$AUTH_TOKEN&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Content-Type: application/json&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;
    &#34;path&#34;: &#34;&#39;&lt;/span&gt;&#34;$BACKUP_PATH&lt;span class=&#34;token string&#34;&gt;&#34;&#39;&#34;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&#39;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 从response中解析出文件名和创建时间&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$response&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;.data.content[] | select(.is_dir == false) | &#34;\(.name) \(.created)&#34;&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 准备删除的文件列表&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;delete_files&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; name created&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;# 转换创建日期为时间戳（秒）&lt;/span&gt;
  &lt;span class=&#34;token assign-left variable&#34;&gt;created_date&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$created&lt;/span&gt;&#34;&lt;/span&gt; +%s&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
  
  &lt;span class=&#34;token comment&#34;&gt;# 计算文件的年龄 （天）&lt;/span&gt;
  &lt;span class=&#34;token assign-left variable&#34;&gt;age_days&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$((&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;CURRENT_DATE &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; created_date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;86400&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;))&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;# 输出文件的年龄以供调试&lt;/span&gt;
  log &lt;span class=&#34;token string&#34;&gt;&#34;File: &lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt;, Created: &lt;span class=&#34;token variable&#34;&gt;$created&lt;/span&gt;, Age (days): &lt;span class=&#34;token variable&#34;&gt;$age_days&lt;/span&gt;&#34;&lt;/span&gt;

  &lt;span class=&#34;token comment&#34;&gt;# 如果文件超过1天，添加到删除列表&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$age_days&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;token assign-left variable&#34;&gt;delete_files&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$files&lt;/span&gt;&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 输出将要删除的文件列表以供调试&lt;/span&gt;
log &lt;span class=&#34;token string&#34;&gt;&#34;Files to be deleted:&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;delete_files&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;@&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&amp;#125;&lt;/span&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
  log &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 删除过期文件&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$&amp;#123;&lt;span class=&#34;token operator&#34;&gt;#&lt;/span&gt;delete_files&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;@&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-gt&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;delete_files&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;@&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&amp;#125;&lt;/span&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;token assign-left variable&#34;&gt;delete_response&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-X&lt;/span&gt; POST &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$REMOVE_ENDPOINT&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
      &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Authorization: &lt;span class=&#34;token variable&#34;&gt;$AUTH_TOKEN&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
      &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Content-Type: application/json&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
      &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;
          &#34;names&#34;: [&#34;&#39;&lt;/span&gt;&#34;$file&lt;span class=&#34;token string&#34;&gt;&#34;&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;,
          &lt;span class=&#34;token string&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#39;&#34;&lt;/span&gt;$BACKUP_PATH&lt;span class=&#34;token string&#34;&gt;&#34;&#39;&#34;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&#39;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token assign-left variable&#34;&gt;delete_code&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$delete_response&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;.code&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token assign-left variable&#34;&gt;delete_message&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$delete_response&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;.message&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$delete_code&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
      log &lt;span class=&#34;token string&#34;&gt;&#34;Successfully deleted &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
      log &lt;span class=&#34;token string&#34;&gt;&#34;Failed to delete &lt;span class=&#34;token variable&#34;&gt;$file&lt;/span&gt;: &lt;span class=&#34;token variable&#34;&gt;$delete_message&lt;/span&gt;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
  log &lt;span class=&#34;token string&#34;&gt;&#34;No files older than 15 day to delete.&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请将脚本中的 &lt;code&gt;API_URL&lt;/code&gt; 和 &lt;code&gt;BACKUP_PATH&lt;/code&gt; 替换为你自己的 Alist 地址和存储路径。&lt;/p&gt;
&lt;p&gt;保存并退出编辑器（在 vim 中按 &lt;code&gt;Esc&lt;/code&gt;，然后输入 &lt;code&gt;:x&lt;/code&gt; 回车保存）。&lt;/p&gt;
&lt;h3 id=&#34;详细解释&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#详细解释&#34;&gt;&lt;/a&gt;详细解释&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设置日志文件&lt;/strong&gt;：日志文件名为 &lt;code&gt;clean_back_YYYYMMDDHHMMSS.log&lt;/code&gt;，存储在 &lt;code&gt;/opt/alist/log&lt;/code&gt; 目录中，记录脚本执行过程中的所有重要信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义 &lt;code&gt;log&lt;/code&gt; 函数&lt;/strong&gt;：这个函数为日志信息添加时间戳，并将日志信息同时输出到控制台和日志文件中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置 API 参数&lt;/strong&gt;：设置 API 的基础 URL、列出文件的端点和删除文件的端点，以及授权令牌和备份路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取当前时间戳&lt;/strong&gt;：使用 &lt;code&gt;date +%s&lt;/code&gt; 获取当前时间的 Unix 时间戳（以秒为单位）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列出备份目录中的文件&lt;/strong&gt;：通过 Alist 提供的 &lt;code&gt;POST /api/fs/list&lt;/code&gt; 接口获取备份目录中的文件列表，并使用 &lt;code&gt;jq&lt;/code&gt; 提取文件名和创建日期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算文件年龄并判断是否需要删除&lt;/strong&gt;：遍历文件列表，计算每个文件的年龄（以天为单位），如果文件超过30天，则将其添加到删除列表中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出将要删除的文件列表&lt;/strong&gt;：记录需要删除的文件以供调试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除过期文件&lt;/strong&gt;：通过 Alist 提供的 &lt;code&gt;POST /api/fs/remove&lt;/code&gt; 接口删除超过30天的文件，并根据响应结果记录删除操作的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行脚本&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#运行脚本&#34;&gt;&lt;/a&gt;运行脚本&lt;/h3&gt;
&lt;p&gt;将上述脚本保存为 &lt;code&gt;clean_backups.sh&lt;/code&gt;，然后给脚本添加执行权限并运行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x clean_backups.sh
./clean_backups.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;定时任务&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#定时任务&#34;&gt;&lt;/a&gt;定时任务&lt;/h3&gt;
&lt;p&gt;为了让脚本定期运行，可以使用 &lt;code&gt;cron&lt;/code&gt; 设置定时任务。例如，每天凌晨 2点运行脚本：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;crontab&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;crontab&lt;/code&gt; 编辑器中添加以下行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; * * * /opt/alist/clean_backups.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存并退出编辑器（在 vim 中按 &lt;code&gt;Esc&lt;/code&gt;，然后输入 &lt;code&gt;:x&lt;/code&gt; 回车保存）。&lt;/p&gt;
&lt;p&gt;通过这种方式，您可以自动化清理过期的备份文件，并将操作结果记录到日志文件中，方便日后查看和调试。定期清理备份文件有助于保持系统的整洁，确保服务器的高效运行。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上就是使用 Alist 和 Bash 脚本实现自动化清理备份文件的完整方法。希望这篇博客对您有所帮助！如果有任何问题或建议，欢迎在评论区留言讨论。&lt;/p&gt;
</content>
        <category term="Alist" />
        <updated>2024-07-02T11:34:29.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/</id>
        <title>项目讲解</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/"/>
        <content type="html">&lt;h1 id=&#34;随便写写&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#随便写写&#34;&gt;&lt;/a&gt;随便写写&lt;/h1&gt;
&lt;h3 id=&#34;登录注册模块&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#登录注册模块&#34;&gt;&lt;/a&gt;登录注册模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注册&lt;/strong&gt;：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。&lt;/li&gt;
&lt;li&gt;登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;前后端分离项目中跨域问题是如何解决的？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#前后端分离项目中跨域问题是如何解决的？&#34;&gt;&lt;/a&gt;前后端分离项目中跨域问题是如何解决的？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;注解&lt;/strong&gt;：可以通过使用&lt;code&gt;@CrossOrigin&lt;/code&gt;注解来解决跨域问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nginx&lt;/strong&gt;：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网关&lt;/strong&gt;：使用 GetWay 网关中配置CORS规则，允许跨域请求&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Java" />
        <updated>2024-06-27T07:34:31.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>RabbitMQ应用与总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h2 id=&#34;RabbitMQ常见面试题总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#RabbitMQ常见面试题总结&#34;&gt;&lt;/a&gt;RabbitMQ常见面试题总结&lt;/h2&gt;
&lt;h3 id=&#34;什么是-RabbitMQ？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是-RabbitMQ？&#34;&gt;&lt;/a&gt;什么是 RabbitMQ？&lt;/h3&gt;
&lt;p&gt;RabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。&lt;/p&gt;
&lt;h3 id=&#34;RabbitMQ-的组件有哪些？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#RabbitMQ-的组件有哪些？&#34;&gt;&lt;/a&gt;RabbitMQ 的组件有哪些？&lt;/h3&gt;
&lt;h4 id=&#34;1-Producer（生产者）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-Producer（生产者）&#34;&gt;&lt;/a&gt;1. Producer（生产者）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。&lt;/li&gt;
&lt;li&gt;生成者负责创建和发送消息，不直接与队列通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-Exchange（交换器）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-Exchange（交换器）&#34;&gt;&lt;/a&gt;2. Exchange（交换器）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。&lt;/li&gt;
&lt;li&gt;交换器有不同类型，主要包括：&lt;code&gt;direct&lt;/code&gt;、&lt;code&gt;topic&lt;/code&gt;、&lt;code&gt;fanout&lt;/code&gt;和&lt;code&gt;headers&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;Exchange-类型&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Exchange-类型&#34;&gt;&lt;/a&gt;Exchange 类型&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Direct Exchange&lt;/strong&gt;：根据消息的路由键完全匹配队列的绑定键进行路由。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Topic Exchange&lt;/strong&gt;：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fanout Exchange&lt;/strong&gt;：将消息广播到所有与该交换器绑定的队列，不考虑路由键。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Headers Exchange&lt;/strong&gt;：根据消息的头属性进行路由，相对较少使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-Queue（队列）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-Queue（队列）&#34;&gt;&lt;/a&gt;3. Queue（队列）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。&lt;/li&gt;
&lt;li&gt;队列按照先进先出的顺序存储消息，可以持久化、镜像等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-Bindng（绑定）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-Bindng（绑定）&#34;&gt;&lt;/a&gt;4. Bindng（绑定）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。&lt;/li&gt;
&lt;li&gt;绑定可以包含路由键和绑定参数，用于匹配消息的路由键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-Consumer（消费者）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-Consumer（消费者）&#34;&gt;&lt;/a&gt;5. Consumer（消费者）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消费者可以是主动拉取消息，也可以是被动推送消息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-Connection（连接）和Channel（信道）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-Connection（连接）和Channel（信道）&#34;&gt;&lt;/a&gt;6. Connection（连接）和Channel（信道）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;连接是应用程序与 RabbitMQ 之间的 TCP 连接。&lt;/li&gt;
&lt;li&gt;信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7-Virtual-Host（虚拟机）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#7-Virtual-Host（虚拟机）&#34;&gt;&lt;/a&gt;7. Virtual Host（虚拟机）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;8-Broker（代理服务器）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#8-Broker（代理服务器）&#34;&gt;&lt;/a&gt;8. Broker（代理服务器）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Java" />
        <category term="总结" />
        <category term="RabbitMQ" />
        <updated>2024-06-26T15:14:15.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/26/Redis%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>Redis应用与总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/26/Redis%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h2 id=&#34;Redis-常见面试题总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Redis-常见面试题总结&#34;&gt;&lt;/a&gt;Redis 常见面试题总结&lt;/h2&gt;
&lt;h3 id=&#34;Redis-为什么这么快？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Redis-为什么这么快？&#34;&gt;&lt;/a&gt;Redis 为什么这么快？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Redis 基于内存，内存的访问速度比磁盘块很多；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis 主要是单线程事件循环和 IO 多路复用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis 内置了多重优化过后的数据类型、结构实现，性能非常高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis 通信协议实现简单且解析高效。&lt;/p&gt;
&lt;h4 id=&#34;为什么不直接使用-Redis-当主数据库呢？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么不直接使用-Redis-当主数据库呢？&#34;&gt;&lt;/a&gt;为什么不直接使用 Redis 当主数据库呢？&lt;/h4&gt;
&lt;p&gt;主要是因为内存成本太高且 Redis 提供的数据持久化仍然会有数据丢失风险。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;为什么用-Redis？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么用-Redis？&#34;&gt;&lt;/a&gt;为什么用 Redis？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问速度更快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高并发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能全面&lt;/p&gt;
&lt;p&gt;Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Redis-除了做缓存，还能做什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Redis-除了做缓存，还能做什么？&#34;&gt;&lt;/a&gt;Redis 除了做缓存，还能做什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分布式锁&lt;/strong&gt;：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;限流&lt;/strong&gt;：一半通过 Redis 和 Lua 脚本的方式来实现限流。如果不想写 Lua 脚本的话，也可以直接利用 Redisson中的&lt;code&gt;RRateLimiter&lt;/code&gt;来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息队列&lt;/strong&gt;：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延时队列&lt;/strong&gt;：Redisson 内置了延时队列（基于 Sorted Set 实现的）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式 Session&lt;/strong&gt;：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Redis-常用的数据类型有哪些？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Redis-常用的数据类型有哪些？&#34;&gt;&lt;/a&gt;Redis 常用的数据类型有哪些？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5 种基本数据类型&lt;/strong&gt;：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3 种特殊数据类型&lt;/strong&gt;：HyperLogLog（基数统计）、Bitmap（位图）、Geospatial（地理位置）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;String-的应用场景有哪些？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#String-的应用场景有哪些？&#34;&gt;&lt;/a&gt;String 的应用场景有哪些？&lt;/h3&gt;
&lt;p&gt;String 是 Redis 中最简单同时也是最常用的一个数据类型。可以用来存储任何类型的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；&lt;/li&gt;
&lt;li&gt;计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；&lt;/li&gt;
&lt;li&gt;分布式锁（利用&lt;code&gt;SETNX key value&lt;/code&gt;命令可以实现一个最简易的分布式锁）；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Redis-持久化机制&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Redis-持久化机制&#34;&gt;&lt;/a&gt;Redis 持久化机制&lt;/h3&gt;
&lt;p&gt;Redis提供了两种主要的持久化机制：RDB（Redis DataBase）快照和 AOF(Append Only File）日志。这两种机制各有特点，满足不同的持久化需求。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RDB（Redis DataBase）快照&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RDB 持久化是指在指定的时间间隔内将 Redis 的内存数据生成快照并保存到磁盘。它会创建一个二进制文件（通常是 dump.rdb），包含某个时间点上的数据。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	RDB 文件是一个紧凑的二进制文件，可以较快地进行备份和恢复。&lt;/p&gt;
&lt;p&gt;​	RDB 文件保存时不会对 Redis 的性能产生显著的影响，适合用于大规模数据的冷备份。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	RDB 快照是定期进行的，如果 Redis 意外宕机，可能会丢失最后一次快照之后的所有数据。&lt;/p&gt;
&lt;p&gt;​	RDB 快照需要较长的时间进行，所以不适用于需要频繁备份的数据场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AOF（Append Only File）日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AOF 持久化记录每个写操作到日志文件中（通常是 appendonly.aof），Redis 可以通过重新执行日志中的命令来恢复数据。AOF日志文件默认不定期压缩，以减小文件体积。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		AOF可以提供更高的数据持久性，因为它记录每次写操作，数据丢失的窗口更小。&lt;/p&gt;
&lt;p&gt;​		AOF 文件是可读的文本文件，便于分析和调试。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		AOF 文件通常比 RDB 文件更大，恢复速度相对慢。&lt;/p&gt;
&lt;p&gt;​		AOF在每次写操作时都会记录日志，可能会对 Redis 性能产生一定影响，特别是在写操作频繁的情况下。&lt;/p&gt;
&lt;h4 id=&#34;混合持久化&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#混合持久化&#34;&gt;&lt;/a&gt;混合持久化&lt;/h4&gt;
&lt;p&gt;Redis 4.0 引入了混合持久化（Hybid Persistence），结合了 RDB 和 AOF 的优点。在进行快照时，将当前的 RDB 快照和 AOF 日志混合存储，以提高数据恢复速度和性能。&lt;/p&gt;
&lt;h3 id=&#34;缓存穿透&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#缓存穿透&#34;&gt;&lt;/a&gt;缓存穿透&lt;/h3&gt;
&lt;h4 id=&#34;什么是缓存穿透？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是缓存穿透？&#34;&gt;&lt;/a&gt;什么是缓存穿透？&lt;/h4&gt;
&lt;p&gt;缓存穿透是指查询一个在缓存和数据库中都不存在的数据，每次请求都会穿透缓存直接查询数据库，可能导致数据库压力过大。&lt;/p&gt;
&lt;h4 id=&#34;有哪些解决办法？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#有哪些解决办法？&#34;&gt;&lt;/a&gt;有哪些解决办法？&lt;/h4&gt;
&lt;p&gt;最基本的就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。&lt;/p&gt;
&lt;p&gt;比如查询数据库 id 不能小于 0、传入邮箱格式不对的时候直接返回错误信息给客户端等等。&lt;/p&gt;
&lt;h5 id=&#34;1-使用缓存空值&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-使用缓存空值&#34;&gt;&lt;/a&gt;1. 使用缓存空值&lt;/h5&gt;
&lt;p&gt;将查询结果为空的数据也缓存起来，但要设置一个较短的过期时间，防止缓存中大量的空值数据占用内存。&lt;/p&gt;
&lt;h5 id=&#34;2-布隆过滤器&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-布隆过滤器&#34;&gt;&lt;/a&gt;2. 布隆过滤器&lt;/h5&gt;
&lt;p&gt;布隆过滤器是一种概率型数据结构，可以用来判断一个元素是否在一个集合中。将所有可能存在查询条件都存入布隆过滤器，在查询缓存和数据库之前先通过布隆过滤器进行判断，如果布隆过滤器判断该元素不存在，则直接返回。&lt;/p&gt;
&lt;h5 id=&#34;3-接口限流&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-接口限流&#34;&gt;&lt;/a&gt;3. 接口限流&lt;/h5&gt;
&lt;p&gt;根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采用黑名单机制，例如将异常 IP 列入黑名单。&lt;/p&gt;
&lt;h3 id=&#34;缓存击穿&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#缓存击穿&#34;&gt;&lt;/a&gt;缓存击穿&lt;/h3&gt;
&lt;h4 id=&#34;什么是缓存击穿？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是缓存击穿？&#34;&gt;&lt;/a&gt;什么是缓存击穿？&lt;/h4&gt;
&lt;p&gt;缓存击穿是指某些缓存中的热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到了数据库，对数据库造成了巨大的压力，通常发生在缓存中存放的热门数据突然过期的情况下。&lt;/p&gt;
&lt;h4 id=&#34;有哪些解决方法？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#有哪些解决方法？&#34;&gt;&lt;/a&gt;有哪些解决方法？&lt;/h4&gt;
&lt;h5 id=&#34;1-永不过期&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-永不过期&#34;&gt;&lt;/a&gt;1. 永不过期&lt;/h5&gt;
&lt;p&gt;将热点数据设置为永不过期，防止其被清除出缓存，从而避免缓存失效带来的问题。&lt;/p&gt;
&lt;h5 id=&#34;2-提前预热&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-提前预热&#34;&gt;&lt;/a&gt;2.提前预热&lt;/h5&gt;
&lt;p&gt;在系统启动或业务高峰期来临之前，提前将热点数据加载到缓存中，避免缓存过期。&lt;/p&gt;
&lt;h5 id=&#34;3-加锁&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-加锁&#34;&gt;&lt;/a&gt;3. 加锁&lt;/h5&gt;
&lt;p&gt;当缓存失效时，使用分布式锁来控制只有一个请求可以访问数据库并重建缓存，其余请求等待缓存重建完成后再访问缓存。&lt;/p&gt;
&lt;h4 id=&#34;缓存穿透和缓存击穿有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#缓存穿透和缓存击穿有什么区别？&#34;&gt;&lt;/a&gt;缓存穿透和缓存击穿有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缓存穿透是查询一个在缓存和数据中都不存在的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存击穿是缓存中热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缓存雪崩&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#缓存雪崩&#34;&gt;&lt;/a&gt;缓存雪崩&lt;/h3&gt;
&lt;h4 id=&#34;什么是缓存雪崩？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是缓存雪崩？&#34;&gt;&lt;/a&gt;什么是缓存雪崩？&lt;/h4&gt;
&lt;p&gt;缓存雪崩是指缓存中大量数据在同一时间过期或者缓存服务器宕机了，导致大量请求直接访问数据库，与缓存击穿不同的是，缓存雪崩涉及大量缓存同时失效或缓存服务不可用。&lt;/p&gt;
&lt;h4 id=&#34;有哪些解决方法？-2&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#有哪些解决方法？-2&#34;&gt;&lt;/a&gt;有哪些解决方法？&lt;/h4&gt;
&lt;h5 id=&#34;针对Redis-服务不可用的情况：&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#针对Redis-服务不可用的情况：&#34;&gt;&lt;/a&gt;针对Redis 服务不可用的情况：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Redis 集群&lt;/strong&gt;：采用 Redis 集群，避免单机出现问题整个缓存服务器都无法使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多级缓存&lt;/strong&gt;：通过构建多级缓存（如本地缓存和分布式缓存），在缓存失效时优先从本地缓存读取数据，减轻数据库压力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;针对大量缓存同时失效的情况&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#针对大量缓存同时失效的情况&#34;&gt;&lt;/a&gt;针对大量缓存同时失效的情况:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;过期时间随机化&lt;/strong&gt;：避免大量缓存在同一时间失效，可以设置缓存数据过期时间增加一个随机值，使缓存数据的过期时间分散。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存预热&lt;/strong&gt;：在系统启动或流量高峰前，提前将热点数据加载到缓存中，避免缓存雪崩。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主动更新&lt;/strong&gt;：对于经常更新的热点数据，可以在其过期之前主动更新缓存，确保缓存中的数据始终有效。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;如何保证缓存和数据库数据一致性？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#如何保证缓存和数据库数据一致性？&#34;&gt;&lt;/a&gt;如何保证缓存和数据库数据一致性？&lt;/h3&gt;
&lt;h4 id=&#34;1-Cache-Aside-Pattern（旁路缓存模式）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-Cache-Aside-Pattern（旁路缓存模式）&#34;&gt;&lt;/a&gt;1. Cache Aside Pattern（旁路缓存模式）&lt;/h4&gt;
&lt;p&gt;当需要读取数据时，先从缓存读取，若缓存未命中，再从数据库读取，并将数据写入缓存。当数据更新时，先更新数据库，然后使缓存失效。&lt;/p&gt;
&lt;h4 id=&#34;2-Write-Through-Cache（写直达缓存）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-Write-Through-Cache（写直达缓存）&#34;&gt;&lt;/a&gt;2. Write Through Cache（写直达缓存）&lt;/h4&gt;
&lt;p&gt;所有的数据更新操作都会先写入缓存，再写入数据库，这样可以确保缓存和数据库的一致性，但写操作的性能会受到一定影响。&lt;/p&gt;
&lt;h4 id=&#34;3-Write-Behind-Cache（异步写缓存）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-Write-Behind-Cache（异步写缓存）&#34;&gt;&lt;/a&gt;3. Write Behind Cache（异步写缓存）&lt;/h4&gt;
&lt;p&gt;写操作会先写入缓存，并在后台异步更新数据库。这种方式可以提高操作的性能，但实现和维护比较复杂。&lt;/p&gt;
&lt;h4 id=&#34;4-Cache-and-Database-Double-Write（双写一致性）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-Cache-and-Database-Double-Write（双写一致性）&#34;&gt;&lt;/a&gt;4. Cache and Database Double Write（双写一致性）&lt;/h4&gt;
&lt;p&gt;确保每次写操作，同时更新缓存和数据库。需要通过合适的事务机制或分布式锁来保证这两个操作的原子性。&lt;/p&gt;
&lt;h4 id=&#34;5-使用消息队列实现最终一致性&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-使用消息队列实现最终一致性&#34;&gt;&lt;/a&gt;5. 使用消息队列实现最终一致性&lt;/h4&gt;
&lt;p&gt;写操作更新数据库后，将更新时间发送到消息队列，消费者接收消息后更新缓存，实现最终一致性。&lt;/p&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt;总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cache Aside Pattern（旁路缓存模式）&lt;/strong&gt;：读操作先查缓存，缓存未命中再查数据库，写操作先更新数据库，再使缓存失效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Through Cache（写直达缓存）&lt;/strong&gt;：写操作先更新缓存，再同步更新数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Behind Cache（异步写缓存）&lt;/strong&gt;：写操作先更新缓存，再异步批量更新数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双写一致性（Cache and Database Double Write）&lt;/strong&gt;：写操作时同时更新缓存和数据库，确保原子性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用消息队列实现最终一致性&lt;/strong&gt;：更新数据库后发送消息队列，消费者接收消息后更新缓存，实现最终一致性。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="总结" />
        <category term="Redis" />
        <updated>2024-06-26T12:18:49.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>MyBatis应用与总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h1 id=&#34;MyBatis常见面试题总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#MyBatis常见面试题总结&#34;&gt;&lt;/a&gt;MyBatis常见面试题总结&lt;/h1&gt;
&lt;h3 id=&#34;和-的区别是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#和-的区别是什么？&#34;&gt;&lt;/a&gt;#{} 和 ${} 的区别是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;是 sql 的参数占位符，Mybatis 会将 sql 中&lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用&lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;可以有效防止 sql 注入。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Java" />
        <category term="MyBatis" />
        <category term="总结" />
        <updated>2024-06-26T09:53:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/26/%E8%84%9A%E6%9C%AC/</id>
        <title>自定义 Alfred iTerm 脚本</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/26/%E8%84%9A%E6%9C%AC/"/>
        <content type="html">&lt;h2 id=&#34;如何使用Alfred与iTerm2进行高效的命令行操作&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#如何使用Alfred与iTerm2进行高效的命令行操作&#34;&gt;&lt;/a&gt;如何使用Alfred与iTerm2进行高效的命令行操作&lt;/h2&gt;
&lt;p&gt;这里是一篇关于如何使用 Alfred 和 iTerm2 集成自定义 AppleScript 的博客文章。这个集成可以极大地提升 macOS 用户在使用终端时的效率和便利性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于 macOS 用户来说，Alfred 和 iTerm2 是两个非常强大的工具。Alfred 作为一款效率提升工具，能够通过快捷键和简单的命令来执行各种操作，而 iTerm2 则是一个功能丰富的替代 macOS 默认终端的应用。将这两者结合起来，你可以通过简单的 Alfred 命令来控制 iTerm2，执行脚本或者打开新的终端会话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;自定义-Alfred-通过-iTerm2-执行脚本的步骤&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#自定义-Alfred-通过-iTerm2-执行脚本的步骤&#34;&gt;&lt;/a&gt;自定义 Alfred 通过 iTerm2 执行脚本的步骤&lt;/h3&gt;
&lt;h4 id=&#34;第一步：获取脚本&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#第一步：获取脚本&#34;&gt;&lt;/a&gt;第一步：获取脚本&lt;/h4&gt;
&lt;p&gt;首先，你需要&lt;a href=&#34;https://github.com/vitorgalvao/custom-alfred-iterm-scripts&#34;&gt;获取&lt;/a&gt;一个可以将 Alfred 和 iTerm2 集成的 AppleScript。这个脚本定义了如何通过 Alfred 命令来控制 iTerm2。使用以下命令可以将脚本直接复制到你的剪贴板：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--silent&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; pbcopy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;第二步：配置-Alfred&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#第二步：配置-Alfred&#34;&gt;&lt;/a&gt;第二步：配置 Alfred&lt;/h4&gt;
&lt;p&gt;打开 Alfred 的偏好设置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 Alfred 的偏好设置（通过呼叫 Alfred 并按 &lt;code&gt;⌘,&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;导航到“功能” → “终端 / Shell” → “自定义”。&lt;/li&gt;
&lt;li&gt;在“Application”下拉菜单中选择“自定义”，然后粘贴你的脚本到文本框中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;第三步：自定义脚本行为&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#第三步：自定义脚本行为&#34;&gt;&lt;/a&gt;第三步：自定义脚本行为&lt;/h4&gt;
&lt;p&gt;脚本的顶部有几个 &lt;code&gt;property&lt;/code&gt; 设置，可以根据你的需要进行调整：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;open_in_new_window&lt;/code&gt;: 设置为 &lt;code&gt;true&lt;/code&gt; 可以让每个 Alfred 命令在新窗口中打开。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open_in_new_tab&lt;/code&gt;: 设置为 &lt;code&gt;true&lt;/code&gt; 会在新标签页中打开命令，&lt;code&gt;false&lt;/code&gt; 则在当前标签页重用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterm2_opens_quietly&lt;/code&gt;: 如果你的 iTerm2 配置为启动时不打开新窗口，将此设为 &lt;code&gt;true&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第四步：使用&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#第四步：使用&#34;&gt;&lt;/a&gt;第四步：使用&lt;/h4&gt;
&lt;p&gt;完成设置后，你可以通过 Alfred 运行任何命令。比如，通过 Alfred 的搜索框输入 &lt;code&gt;&amp;gt; ls&lt;/code&gt;，这个命令就会在 iTerm2 的当前窗口中执行，显示当前目录的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转载自GitHub:&lt;/strong&gt; &lt;a href=&#34;https://github.com/vitorgalvao/custom-alfred-iterm-scripts&#34;&gt;vitorgalvao/custom-alfred-iterm-scripts&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="Mac" />
        <updated>2024-06-26T04:29:32.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/</id>
        <title>Linux安装MySQL</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/"/>
        <content type="html">&lt;h1 id=&#34;如何在Ubuntu上安装和配置MySQL并允许远程访问&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#如何在Ubuntu上安装和配置MySQL并允许远程访问&#34;&gt;&lt;/a&gt;如何在Ubuntu上安装和配置MySQL并允许远程访问&lt;/h1&gt;
&lt;p&gt;在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。&lt;/p&gt;
&lt;h2 id=&#34;步骤1：更新包列表并安装MySQL服务器&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤1：更新包列表并安装MySQL服务器&#34;&gt;&lt;/a&gt;步骤1：更新包列表并安装MySQL服务器&lt;/h2&gt;
&lt;p&gt;首先，确保你的包列表是最新的：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后安装MySQL服务器：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; mysql-server&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-y&lt;/span&gt; mysql-server-8.0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;步骤2：检查MySQL服务状态并启用MySQL服务&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤2：检查MySQL服务状态并启用MySQL服务&#34;&gt;&lt;/a&gt;步骤2：检查MySQL服务状态并启用MySQL服务&lt;/h2&gt;
&lt;p&gt;检查MySQL服务是否正在运行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl status mysql&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确保MySQL服务在系统启动时自动启动：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; mysql&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;步骤3：运行安全安装脚本&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤3：运行安全安装脚本&#34;&gt;&lt;/a&gt;步骤3：运行安全安装脚本&lt;/h2&gt;
&lt;p&gt;MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; mysql_secure_installation&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在提示中，你将需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择密码规则&lt;/li&gt;
&lt;li&gt;删除匿名用户&lt;/li&gt;
&lt;li&gt;禁用远程root登录&lt;/li&gt;
&lt;li&gt;删除测试数据库和表&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;步骤4：修改MySQL配置文件以允许远程连接&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤4：修改MySQL配置文件以允许远程连接&#34;&gt;&lt;/a&gt;步骤4：修改MySQL配置文件以允许远程连接&lt;/h2&gt;
&lt;p&gt;打开MySQL配置文件&lt;code&gt;mysqld.cnf&lt;/code&gt;，通常位于&lt;code&gt;/etc/mysql/mysql.conf.d/&lt;/code&gt;目录中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /etc/mysql/mysql.conf.d/mysqld.cnf&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到以下行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;bind-address &amp;#x3D; 127.0.0.1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将其注释掉或改为&lt;code&gt;0.0.0.0&lt;/code&gt;，使MySQL监听所有网络接口：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;# bind-address &amp;#x3D; 127.0.0.1
bind-address &amp;#x3D; 0.0.0.0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存配置文件并退出编辑器。&lt;/p&gt;
&lt;h2 id=&#34;步骤5：重启MySQL服务&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤5：重启MySQL服务&#34;&gt;&lt;/a&gt;步骤5：重启MySQL服务&lt;/h2&gt;
&lt;p&gt;重启MySQL服务以使更改生效：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl restart mysql&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;步骤6：创建可以远程访问的用户&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤6：创建可以远程访问的用户&#34;&gt;&lt;/a&gt;步骤6：创建可以远程访问的用户&lt;/h2&gt;
&lt;p&gt;登录到MySQL命令行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; root &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-sql&#34; data-language=&#34;sql&#34;&gt;&lt;code class=&#34;language-sql&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;USER&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;yourusername&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;@&#39;%&#39;&lt;/span&gt; IDENTIFIED &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;yourpassword&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ALL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;yourusername&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;@&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WITH&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;OPTION&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
FLUSH &lt;span class=&#34;token keyword&#34;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GRANT ALL PRIVILEGES&lt;/strong&gt;：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ON&lt;/strong&gt;：授予权限的范围。&lt;code&gt;*.*&lt;/code&gt;表示所有数据库和所有表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TO&lt;/strong&gt;：指定权限接收者。&lt;code&gt;&#39;yourusername&#39;&lt;/code&gt;是用户名，&lt;code&gt;&#39;%&#39;&lt;/code&gt;是主机名通配符，表示允许从任何IP地址连接的用户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WITH GRANT OPTION&lt;/strong&gt;：允许用户将他自己拥有的权限授予其他用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;步骤7：配置防火墙&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤7：配置防火墙&#34;&gt;&lt;/a&gt;步骤7：配置防火墙&lt;/h2&gt;
&lt;p&gt;确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ufw allow &lt;span class=&#34;token number&#34;&gt;3306&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ufw reload&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;步骤8：验证远程连接&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤8：验证远程连接&#34;&gt;&lt;/a&gt;步骤8：验证远程连接&lt;/h2&gt;
&lt;p&gt;在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; yourusername &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-h&lt;/span&gt; your_server_ip&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;其他操作&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#其他操作&#34;&gt;&lt;/a&gt;其他操作&lt;/h2&gt;
&lt;h3 id=&#34;删除某些权限或用户&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#删除某些权限或用户&#34;&gt;&lt;/a&gt;删除某些权限或用户&lt;/h3&gt;
&lt;p&gt;如果你想删除某些权限，或者从特定数据库中删除权限，可以使用&lt;code&gt;REVOKE&lt;/code&gt;命令。例如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-sql&#34; data-language=&#34;sql&#34;&gt;&lt;code class=&#34;language-sql&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;REVOKE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;ALL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;OPTION&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;existinguser&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;@&#39;%&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;查看某个用户的当前权限&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#查看某个用户的当前权限&#34;&gt;&lt;/a&gt;查看某个用户的当前权限&lt;/h3&gt;
&lt;p&gt;如果你想查看某个用户的当前权限，可以使用以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-sql&#34; data-language=&#34;sql&#34;&gt;&lt;code class=&#34;language-sql&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;SHOW&lt;/span&gt; GRANTS &lt;span class=&#34;token keyword&#34;&gt;FOR&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;existinguser&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;@&#39;%&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！&lt;/p&gt;
</content>
        <category term="MySQL" />
        <category term="Linux" />
        <updated>2024-06-25T04:18:14.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/</id>
        <title>自动续签证书</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/"/>
        <content type="html">&lt;h1 id=&#34;使用-acme-sh-安装和管理-SSL-证书&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#使用-acme-sh-安装和管理-SSL-证书&#34;&gt;&lt;/a&gt;使用 &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 安装和管理 SSL 证书&lt;/h1&gt;
&lt;p&gt;本文将介绍如何使用 &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 安装和管理 SSL 证书。&lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。&lt;/p&gt;
&lt;h2 id=&#34;下载并安装-acme-sh&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#下载并安装-acme-sh&#34;&gt;&lt;/a&gt;下载并安装 &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，下载并安装 &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt;。在终端中执行以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; ~
&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; https://get.acme.sh &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sh&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;youremail@domain.com&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装过程会执行以下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将 &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 安装到你的 &lt;strong&gt;home&lt;/strong&gt; 目录中：&lt;/p&gt;
 &lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;~&amp;#x2F;.acme.sh&amp;#x2F;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个 Shell 别名，方便使用。在 &lt;code&gt;.bashrc&lt;/code&gt; 中添加：&lt;/p&gt;
 &lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;acme.sh&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=~&lt;/span&gt;/.acme.sh/acme.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更高级的安装选项请参考：&lt;a href=&#34;https://github.com/Neilpang/acme.sh/wiki/How-to-install&#34;&gt;acme.sh 安装文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：安装过程不会影响现有系统的运行和文件，所有修改都位于 &lt;code&gt;~/.acme.sh/&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;h2 id=&#34;使用-DNS-验证方式生成-SSL-证书&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#使用-DNS-验证方式生成-SSL-证书&#34;&gt;&lt;/a&gt;使用 DNS 验证方式生成 SSL 证书&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。&lt;/p&gt;
&lt;h3 id=&#34;手动-DNS-验证&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#手动-DNS-验证&#34;&gt;&lt;/a&gt;手动 DNS 验证&lt;/h3&gt;
&lt;p&gt;手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;运行以下命令，手动在域名上添加一条 TXT 解析记录：&lt;/p&gt;
 &lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh &lt;span class=&#34;token parameter variable&#34;&gt;--issue&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--dns&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;mydomain.com&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
--yes-I-know-dns-manual-mode-enough-go-ahead-please&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待解析完成后，重新生成证书：&lt;/p&gt;
 &lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh &lt;span class=&#34;token parameter variable&#34;&gt;--renew&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;mydomain.com&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
--yes-I-know-dns-manual-mode-enough-go-ahead-please&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装生成的证书：&lt;/p&gt;
 &lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;acme.sh --install-cert &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;mydomain.com&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
--key-file /opt/nginx/key.pem  &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
--fullchain-file /opt/nginx/cert.pem &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;通过以上步骤，你已经成功使用 &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 &lt;a href=&#34;https://github.com/Neilpang/acme.sh/wiki/dnsapi&#34;&gt;acme.sh 的 DNS API 支持文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;希望本文对你有所帮助！&lt;/p&gt;
</content>
        <category term="Linux" />
        <category term="SSL" />
        <category term="域名" />
        <updated>2024-06-24T12:34:50.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/</id>
        <title>服务器安全设置</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"/>
        <content type="html">&lt;h3 id=&#34;1-更新系统&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-更新系统&#34;&gt;&lt;/a&gt;1. 更新系统&lt;/h3&gt;
&lt;p&gt;首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; upgrade&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-安装防火墙&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-安装防火墙&#34;&gt;&lt;/a&gt;2. 安装防火墙&lt;/h3&gt;
&lt;p&gt;Ubuntu默认带有&lt;code&gt;ufw&lt;/code&gt;（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：&lt;/p&gt;
&lt;p&gt;启用&lt;code&gt;ufw&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ufw &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，开放必要的端口。例如，对于SSH服务：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ufw allow &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ufw allow &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; ufw allow &lt;span class=&#34;token number&#34;&gt;443&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-配置SSH&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-配置SSH&#34;&gt;&lt;/a&gt;3. 配置SSH&lt;/h3&gt;
&lt;p&gt;SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。&lt;/p&gt;
&lt;h4 id=&#34;生成SSH密钥对&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#生成SSH密钥对&#34;&gt;&lt;/a&gt;生成SSH密钥对&lt;/h4&gt;
&lt;p&gt;在客户端机器上，运行以下命令生成SSH密钥对：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen &lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; rsa &lt;span class=&#34;token parameter variable&#34;&gt;-b&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;将公钥添加到服务器&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#将公钥添加到服务器&#34;&gt;&lt;/a&gt;将公钥添加到服务器&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;ssh-copy-id&lt;/code&gt;命令将公钥复制到服务器上：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-copy-id &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; ~/.ssh/id_rsa.pub 用户名@服务器IP&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;禁用密码认证&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#禁用密码认证&#34;&gt;&lt;/a&gt;禁用密码认证&lt;/h4&gt;
&lt;p&gt;编辑服务器上的&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;文件，设置以下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;PasswordAuthentication no&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后重启SSH服务以应用更改：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl restart sshd&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-配置Fail2Ban&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-配置Fail2Ban&#34;&gt;&lt;/a&gt;4. 配置Fail2Ban&lt;/h3&gt;
&lt;p&gt;Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。&lt;/p&gt;
&lt;h4 id=&#34;安装Fail2Ban&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#安装Fail2Ban&#34;&gt;&lt;/a&gt;安装Fail2Ban&lt;/h4&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; fail2ban&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;配置基本保护&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#配置基本保护&#34;&gt;&lt;/a&gt;配置基本保护&lt;/h4&gt;
&lt;p&gt;创建或编辑&lt;code&gt;/etc/fail2ban/jail.local&lt;/code&gt;文件，为SSH服务添加基本保护：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-ini&#34; data-language=&#34;ini&#34;&gt;&lt;code class=&#34;language-ini&#34;&gt;&lt;span class=&#34;token section&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token section-name selector&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 全局设置&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;bantime&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;1h        # 封禁时间：1小时&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;findtime&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;10m      # 在此时间内连续失败的尝试视为攻击&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;maxretry&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;5        # 允许失败次数&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;ignoreip&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;127.0.0.1/8 # 忽略本地IP地址的封禁&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 指定要使用的日志文件&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;backend&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;auto      # 自动确定日志文件类型&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;usedns&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;warn       # 使用DNS解析&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;logencoding&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;auto  # 日志文件的编码&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;enabled&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;false     # 默认不启用任何规则&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# SSH 服务&lt;/span&gt;
&lt;span class=&#34;token section&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token section-name selector&#34;&gt;sshd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;enabled&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;ssh&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;sshd&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;logpath&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;/var/log/auth.log&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;maxretry&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;token key attr-name&#34;&gt;findtime&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token value attr-value&#34;&gt;5m&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启Fail2Ban服务以应用配置：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl restart fail2ban
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; fail2ban&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2024-06-24T11:14:28.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/</id>
        <title>Vaultwarden搭建</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;h1 id=&#34;如何搭建-Vaultwarden-服务器：一步步教程&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#如何搭建-Vaultwarden-服务器：一步步教程&#34;&gt;&lt;/a&gt;如何搭建 Vaultwarden 服务器：一步步教程&lt;/h1&gt;
&lt;p&gt;Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。&lt;/p&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#前提条件&#34;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;
&lt;p&gt;在开始之前，确保你的系统已经安装了 &lt;strong&gt;Docker&lt;/strong&gt; 和 &lt;strong&gt;Docker Compose&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;步骤-1-创建数据存储目录&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-1-创建数据存储目录&#34;&gt;&lt;/a&gt;步骤 1: 创建数据存储目录&lt;/h2&gt;
&lt;p&gt;首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; /opt/docker_data/vaultwarden
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /opt/docker_data/vaultwarden&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;步骤-2-创建-Docker-Compose-文件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-2-创建-Docker-Compose-文件&#34;&gt;&lt;/a&gt;步骤 2: 创建 Docker Compose 文件&lt;/h2&gt;
&lt;p&gt;接下来，我们将创建一个 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; docker-compose.yml&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，将以下配置粘贴到 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;3&#39;&lt;/span&gt;

&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;vaultwarden&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; vaultwarden
    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; vaultwarden/server&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;latest
    &lt;span class=&#34;token key atrule&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; unless&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;stopped
    &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; ./data/&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/data/
    &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; 8080&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;
    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; DOMAIN=https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//subdomain.yourdomain.com &lt;span class=&#34;token comment&#34;&gt;# 关联的域名。&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; LOGIN_RATELIMIT_MAX_BURST=10 &lt;span class=&#34;token comment&#34;&gt;# 最大请求次数。&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; LOGIN_RATELIMIT_SECONDS=60 &lt;span class=&#34;token comment&#34;&gt;# 平均秒数&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; ADMIN_RATELIMIT_MAX_BURST=10 &lt;span class=&#34;token comment&#34;&gt;# admin最大请求次数。&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; ADMIN_RATELIMIT_SECONDS=60 &lt;span class=&#34;token comment&#34;&gt;# 平均秒数&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; ADMIN_SESSION_LIFETIME=20 &lt;span class=&#34;token comment&#34;&gt;# 会话持续时间&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; ADMIN_TOKEN=YourReallyStrongAdminTokenHere &lt;span class=&#34;token comment&#34;&gt;# 管理员面板的令牌&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; SENDS_ALLOWED=true  &lt;span class=&#34;token comment&#34;&gt;# 是否允许用户创建Bitwarden发送&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; EMERGENCY_ACCESS_ALLOWED=true &lt;span class=&#34;token comment&#34;&gt;# 控制用户是否可以启用紧急访问其账户的权限&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; WEB_VAULT_ENABLED=true &lt;span class=&#34;token comment&#34;&gt;# 网络保险库是否可访问。&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; SIGNUPS_ALLOWED=true &lt;span class=&#34;token comment&#34;&gt;# 新用户是否可以在没有邀请的情况下注册账户&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;步骤-3-启动-Vaultwarden&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#步骤-3-启动-Vaultwarden&#34;&gt;&lt;/a&gt;步骤 3: 启动 Vaultwarden&lt;/h2&gt;
&lt;p&gt;配置好 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件后，使用以下命令启动 Vaultwarden 服务：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个命令会在后台启动 Vaultwarden 服务。可以通过访问 &lt;code&gt;http://localhost:8080&lt;/code&gt; 或在配置文件中指定的域名来访问 Vaultwarden。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2024-06-24T08:56:37.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>Spring应用与总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h2 id=&#34;Spring-常见面试题总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Spring-常见面试题总结&#34;&gt;&lt;/a&gt;Spring 常见面试题总结&lt;/h2&gt;
&lt;h3 id=&#34;什么是Spring框架？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是Spring框架？&#34;&gt;&lt;/a&gt;什么是Spring框架？&lt;/h3&gt;
&lt;p&gt;Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。&lt;/p&gt;
&lt;h3 id=&#34;谈谈自己对于Spring-IoC的了解&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#谈谈自己对于Spring-IoC的了解&#34;&gt;&lt;/a&gt;谈谈自己对于Spring IoC的了解&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;IoC&lt;/strong&gt; （Inversion of Control 控制反转）是一种设计模式，用来实现对象之间的解耦。&lt;/p&gt;
&lt;p&gt;IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。&lt;/p&gt;
&lt;h4 id=&#34;为什么叫控制反转？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么叫控制反转？&#34;&gt;&lt;/a&gt;为什么叫控制反转？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制&lt;/strong&gt;：指的是对象创建（实例化、管理）的权利&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反转&lt;/strong&gt;：控制权交给外部环境（Spring框架、IoC容器）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。&lt;/p&gt;
&lt;h3 id=&#34;什么是-Bean？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是-Bean？&#34;&gt;&lt;/a&gt;什么是 Bean？&lt;/h3&gt;
&lt;p&gt;Bean 就是哪些被 IoC 容器所管理的对象。&lt;/p&gt;
&lt;h3 id=&#34;Component和-Bean的区别是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Component和-Bean的区别是什么？&#34;&gt;&lt;/a&gt;@Component和@Bean的区别是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Component 注解用于类，@Bean 注解用于方法。&lt;/li&gt;
&lt;li&gt;@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我需要的时候给我。&lt;/li&gt;
&lt;li&gt;@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注入Bean的注解有哪些？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#注入Bean的注解有哪些？&#34;&gt;&lt;/a&gt;注入Bean的注解有哪些？&lt;/h3&gt;
&lt;p&gt;Spring 内置的&lt;code&gt;@Autowired&lt;/code&gt; 还有 JDK 内置的 &lt;code&gt;@Resource&lt;/code&gt; 和 &lt;code&gt;@Inject&lt;/code&gt; 都可以用于注入 Bean。&lt;/p&gt;
&lt;h3 id=&#34;Autowired和-Resource的区别是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Autowired和-Resource的区别是什么？&#34;&gt;&lt;/a&gt;@Autowired和@Resource的区别是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Autowired&lt;/code&gt; 是 Spring 提供的注解，&lt;code&gt;@Resource&lt;/code&gt; 是 JDK 提供的注解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Autowired&lt;/code&gt; 默认的注入方式为&lt;code&gt;byType&lt;/code&gt;（根据类型进行匹配），&lt;code&gt;@Resource&lt;/code&gt;默认注入方式为 &lt;code&gt;byName&lt;/code&gt;（根据名称进行匹配）。&lt;/li&gt;
&lt;li&gt;当一个接口存在多个实现类的情况下，&lt;code&gt;@Autowired&lt;/code&gt; 和 &lt;code&gt;@Resource&lt;/code&gt; 都需要通过名称才能正确匹配到对应的  Bean。&lt;code&gt;Autowired&lt;/code&gt; 可以通过 &lt;code&gt;@Qualifier&lt;/code&gt; 注解来显式指定名称，&lt;code&gt;@Resource&lt;/code&gt; 可以通过 name 属性来显式指定名称。&lt;/li&gt;
&lt;li&gt;@Autowired 支持在构造函数、方法、字段和参数上使用。&lt;code&gt;@Resource&lt;/code&gt; 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Bean-的作用域有哪些&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Bean-的作用域有哪些&#34;&gt;&lt;/a&gt;Bean 的作用域有哪些?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Singleton&lt;/strong&gt; Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prototype&lt;/strong&gt;  每次请求都会创建一个新的 bean 实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt; 每次 Http 请求都会创建一个新的 bean 实例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt; 每个 Http Session 中会有一个 bean 实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Bean-是线程安全的吗？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Bean-是线程安全的吗？&#34;&gt;&lt;/a&gt;Bean 是线程安全的吗？&lt;/h3&gt;
&lt;p&gt;在 Spring 中 Bean 是否安全，取决于其作用域和状态。&lt;/p&gt;
&lt;p&gt;单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。&lt;/p&gt;
&lt;h3 id=&#34;Bean的生命周期了解么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Bean的生命周期了解么？&#34;&gt;&lt;/a&gt;Bean的生命周期了解么？&lt;/h3&gt;
&lt;p&gt;bean 的生命周期分为五个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用构造器或者是通过工厂的方式创建 bean&lt;/li&gt;
&lt;li&gt;给 bean 的属性注入值&lt;/li&gt;
&lt;li&gt;调用初始化方法，进行初始化&lt;/li&gt;
&lt;li&gt;bean 被完全初始化和配置，就可以使用了&lt;/li&gt;
&lt;li&gt;当 IOC 容器关闭的时候，销毁 bean&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;谈谈对于AOP的了解&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#谈谈对于AOP的了解&#34;&gt;&lt;/a&gt;谈谈对于AOP的了解&lt;/h3&gt;
&lt;p&gt;AOP（面向切面编程）将与业务无关但在多个模块中重复出现的通用逻辑（如事务管理、日志管理、权限控制等）从业务逻辑中分离出来。通过将这些横切关注点封装到独立的模块中，从而减少系统的重复代码，降低模块之间的耦合度，并提高系统的扩展性和可维护性。&lt;/p&gt;
&lt;p&gt;Spring AOP 是通过动态代理来实现切面功能，&lt;strong&gt;JDK动态代理&lt;/strong&gt;：用于代理实现了接口的类。&lt;strong&gt;CGLIB代理&lt;/strong&gt;：用于代理没有实现接口的类，通过生成目标类的子类来实现。&lt;/p&gt;
&lt;h3 id=&#34;Spring-AOP-和-AspectJ-AOP-有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Spring-AOP-和-AspectJ-AOP-有什么区别？&#34;&gt;&lt;/a&gt;Spring AOP 和 AspectJ AOP 有什么区别？&lt;/h3&gt;
&lt;p&gt;Spring AOP 和 AspectJ AOP 的主要区别在于实现机制、功能范围和性能。Spring AOP 基于动态代理实现，主要适用于方法级别的拦截，配置简单，适合大多数常用的 AOP 场景。AspectJ AOP 则基于编译时和类加载时织入，支持更广泛的连接点(如构造函数、字段等)，功能更强大，但配置和使用相对复杂，性能也更高，适用于需要精细控制和高性能场景。&lt;/p&gt;
&lt;h3 id=&#34;AspectJ-定义的通知类型有哪些？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#AspectJ-定义的通知类型有哪些？&#34;&gt;&lt;/a&gt;AspectJ 定义的通知类型有哪些？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;（前置通知）：在方法执行之前运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;（后置通知）：在方法执行之后运行，无论方法是否成功完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AfterReturning&lt;/strong&gt;（返回通知）：在方法成功完成后运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AfterThorowing&lt;/strong&gt;（异常通知）：在方法抛出异常后运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Around&lt;/strong&gt;（环绕通知）：既可以在方法执行之前运行，也可以在方法执行之后运行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多个切面执行顺序如何控制？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#多个切面执行顺序如何控制？&#34;&gt;&lt;/a&gt;多个切面执行顺序如何控制？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;通常使用&lt;code&gt;@Order&lt;/code&gt; 注解直接定义切面顺序&lt;/li&gt;
&lt;li&gt;实现&lt;code&gt;Ordered&lt;/code&gt;接口重写&lt;code&gt;getOrder&lt;/code&gt;方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;说说自己对于-Spring-MVC-了解？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#说说自己对于-Spring-MVC-了解？&#34;&gt;&lt;/a&gt;说说自己对于 Spring MVC 了解？&lt;/h3&gt;
&lt;p&gt;SpringMVC是一个基于Java的实现了MVC设计模式的轻量级Web框架。它通过分离应用程序的业务逻辑、用户界面和控制流程，简化了Web应用程序的开发和维护。&lt;/p&gt;
&lt;h3 id=&#34;SpringMVC-的工作流程是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#SpringMVC-的工作流程是什么？&#34;&gt;&lt;/a&gt;SpringMVC 的工作流程是什么？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;客户端请求首先到达&lt;code&gt;DispatcherServlet&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;通过&lt;code&gt;HandlerMapping&lt;/code&gt;找到具体的处理器（Controller）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;通过&lt;code&gt;HandlerAdapter&lt;/code&gt;调用处理器中的具体方法。&lt;/li&gt;
&lt;li&gt;处理器方法执行完毕后返回&lt;code&gt;ModelAndView&lt;/code&gt;对象，包含视图名称和模型数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;使用&lt;code&gt;ViewResolver&lt;/code&gt;将视图名称解析为具体的视图。&lt;/li&gt;
&lt;li&gt;最后，&lt;code&gt;DispatcherServlet&lt;/code&gt;将模型数据传递给视图，视图渲染并返回响应给客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户端发送请求 -&amp;gt; 2. DispatcherServlet接收请求 -&amp;gt; 3. HandlerMapping查找控制器 -&amp;gt; 4. HandlerAdapter调用控制器方法 -&amp;gt; 5. Controller处理请求 -&amp;gt; 6. ViewResolver解析视图 -&amp;gt; 7. 视图渲染 -&amp;gt; 8. 返回响应给客户端&lt;/p&gt;
&lt;h3 id=&#34;统一异常处理怎么做？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#统一异常处理怎么做？&#34;&gt;&lt;/a&gt;统一异常处理怎么做？&lt;/h3&gt;
&lt;p&gt;使用注解的方式统一异常处理，使用&lt;code&gt;@controllerAdvice&lt;/code&gt;和&lt;code&gt;@ExceptionHandler&lt;/code&gt;这两个注解。&lt;/p&gt;
&lt;h3 id=&#34;Spring-中用到了哪些设计模式？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Spring-中用到了哪些设计模式？&#34;&gt;&lt;/a&gt;Spring 中用到了哪些设计模式？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂设计模式&lt;/strong&gt;：Spring 使用工厂模式通过&lt;code&gt;BeanFactory&lt;/code&gt;、&lt;code&gt;ApplicationContext&lt;/code&gt;创建 bean 对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代理设计模式&lt;/strong&gt;：SpringAOP 功能实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单例设计模式&lt;/strong&gt;：Spring 中的 Bean 默认都是单例的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模版方法模式&lt;/strong&gt;：Spring 中&lt;code&gt;jdbcTemplate&lt;/code&gt;、&lt;code&gt;hibernateTemplate&lt;/code&gt;等以 Template 结尾的对数据库操作的类，都使用到了模版模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包装器设计模式&lt;/strong&gt;：项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们刚开业根据客户的需求能够动态切换不同的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察者模式&lt;/strong&gt;：Spring 事件驱动模型就是观察者模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适配器模式&lt;/strong&gt;：Spring AOP 的增强或通知使用到了适配器模式、SpringMVC 中也用到了适配器模式适配&lt;code&gt;Controller&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Spring-循环依赖了解吗，怎么解决？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Spring-循环依赖了解吗，怎么解决？&#34;&gt;&lt;/a&gt;Spring 循环依赖了解吗，怎么解决？&lt;/h3&gt;
&lt;p&gt;Spring 中的循环依赖就是指两个及以上的 Bean互相依赖，形成一个循环。比如 BeanA 依赖于 BenaB，而 BeanB 又依赖 BeanA。这种情况可能导致 Spring 容器无法正确初始化这些 Bean。&lt;/p&gt;
&lt;h4 id=&#34;使用-setter-注入&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#使用-setter-注入&#34;&gt;&lt;/a&gt;使用 setter 注入&lt;/h4&gt;
&lt;p&gt;Spring 中可以通过 Setter 注入解决循环依赖问题，因为Spring 在注入 Bean 的属性时会先创建 Bean 的实例，然后再注入依赖的属性。这样可以保证即使两个 Bean 互相依赖，Spring 也能正确的初始化它们。&lt;/p&gt;
&lt;h4 id=&#34;使用-Lazy-注解&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#使用-Lazy-注解&#34;&gt;&lt;/a&gt;使用 @Lazy 注解&lt;/h4&gt;
&lt;p&gt;在其中一个 Bean 的依赖上使用&lt;code&gt;@Lazy&lt;/code&gt;注解，这样 Spring 容器在首次访问该 Bean 时才会进行初始化，避免循环依赖问题。&lt;/p&gt;
&lt;h3 id=&#34;Spring-管理事务的方式有几种？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Spring-管理事务的方式有几种？&#34;&gt;&lt;/a&gt;Spring 管理事务的方式有几种？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编程式事务&lt;/strong&gt;：在代码中硬编码（在分布式系统中推荐使用）：通过&lt;code&gt;TranscationTemplate&lt;/code&gt;或者&lt;code&gt;TransactionManager&lt;/code&gt;在手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;声明式事务&lt;/strong&gt;：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用）：实际时通过 AOP 实现（基于&lt;code&gt;@Transcational&lt;/code&gt;的全注解方式使用最多）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Srping事务中哪几种事务传播行为？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Srping事务中哪几种事务传播行为？&#34;&gt;&lt;/a&gt;Srping事务中哪几种事务传播行为？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;事务传播行为是为了解决业务层方法之间互相调用的事务问题。&lt;/p&gt;
&lt;p&gt;当事务方法被另一个事务方法调用时，必须制定事务应该如何传播。&lt;/p&gt;
&lt;p&gt;例如：方法可能继续在现有的事务中运行，也可能开启一个新事物，并在自己的事物中运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_REQUIRED&lt;/code&gt;&lt;/strong&gt;：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事物。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;什么是-SpringBoot？为什么要有-SpringBoot？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是-SpringBoot？为什么要有-SpringBoot？&#34;&gt;&lt;/a&gt;什么是 SpringBoot？为什么要有 SpringBoot？&lt;/h3&gt;
&lt;p&gt;SpringBoot 可以简化 Spring 开发（减少配置文件、开箱即用 ）&lt;/p&gt;
&lt;h3 id=&#34;如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？&#34;&gt;&lt;/a&gt;如何在 SpringBoot 应用程序中使用 Jetty 而不是 Tomcat？&lt;/h3&gt;
&lt;p&gt;SpringBoot（spirng-boot-starter-web）使用Tomcat 作为默认的嵌入式 servlet 容器，如果想使用 Jetty 的话，只需要修改 pom.xml （Maven）文件就可以了。&lt;/p&gt;
&lt;h3 id=&#34;介绍一下-SpringBootApplication-注解&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#介绍一下-SpringBootApplication-注解&#34;&gt;&lt;/a&gt;介绍一下 @SpringBootApplication 注解&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;可以看作是&lt;code&gt;@Configuration、@EnableAutoConfiguration、@ComponentScan&lt;/code&gt;注解的集合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt;：运行在上下文中注册额外的&lt;code&gt;bean&lt;/code&gt;或导入其他配置类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;：启用 Springboot 的自动配置机制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;：扫描被&lt;code&gt;@Component&lt;/code&gt;(&lt;code&gt;@Service&lt;/code&gt;,&lt;code&gt;@Controller&lt;/code&gt;)注解的 bean，默认会扫描该类所在的包下的所有的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SpringBoot-的自动配置是如何实现的？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#SpringBoot-的自动配置是如何实现的？&#34;&gt;&lt;/a&gt;SpringBoot 的自动配置是如何实现的？&lt;/h3&gt;
&lt;p&gt;当 SpringBoot 应用启动时，@EnableAutoConfiguration`注解会触发自动配置类的加载。&lt;/p&gt;
&lt;p&gt;SpringBoot 会扫描&lt;code&gt;spring.factories&lt;/code&gt;文件，并加载列出自动配置类。然后 SpringBoot 会根据条件注解的判断，决定是否进行相应的配置。&lt;/p&gt;
&lt;h3 id=&#34;SpringBoot-常用的两种配置文件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#SpringBoot-常用的两种配置文件&#34;&gt;&lt;/a&gt;SpringBoot 常用的两种配置文件&lt;/h3&gt;
&lt;p&gt;我们可以通过&lt;code&gt;applcation.properties&lt;/code&gt;或者&lt;code&gt;application.yml&lt;/code&gt;对SpringBoot 程序进行简单的配置。如果不进行配置的话，就是使用默认配置。&lt;/p&gt;
&lt;h3 id=&#34;什么是-YAML-YAML配置的优势在哪里？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是-YAML-YAML配置的优势在哪里？&#34;&gt;&lt;/a&gt;什么是 YAML ? YAML配置的优势在哪里？&lt;/h3&gt;
&lt;p&gt;YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的树形，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。&lt;/p&gt;
&lt;p&gt;相比 Properties 配置文件，YAML 配置方式更加直观清晰，简洁明了，有层次感。&lt;/p&gt;
&lt;p&gt;但是 YAML 配置文件不支持&lt;code&gt;@PropertySource&lt;/code&gt; 注解导入自定义的 YAML 配置。&lt;/p&gt;
&lt;h3 id=&#34;SpringBoot-常用的读取配置文件的方法有哪些？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#SpringBoot-常用的读取配置文件的方法有哪些？&#34;&gt;&lt;/a&gt;SpringBoot 常用的读取配置文件的方法有哪些？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;@Value(&amp;quot;$&amp;#123;property&amp;#125;&amp;quot;)&lt;/code&gt;读取比较简单的配置信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@value&lt;/code&gt; 这种方式是不被推荐的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;@ConfigurationProperties&lt;/code&gt;读取并与 bean 绑定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;@ConfigurationProperies&lt;/code&gt;读取并校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;@PropertySource&lt;/code&gt;读取指定的 properties 文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;SpringBoot-如何做请求参数校验？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#SpringBoot-如何做请求参数校验？&#34;&gt;&lt;/a&gt;SpringBoot 如何做请求参数校验？&lt;/h3&gt;
&lt;p&gt;使用 JSR 提供的校验注解&lt;/p&gt;
&lt;h3 id=&#34;SpringBoot-如何监控系统运行状态？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#SpringBoot-如何监控系统运行状态？&#34;&gt;&lt;/a&gt;SpringBoot 如何监控系统运行状态？&lt;/h3&gt;
&lt;p&gt;可以使用 SpringBoot Actuator 来对 SpringBoot 项目进行简单的监控。&lt;/p&gt;
&lt;h3 id=&#34;SpringBoot-中如何实现定时任务？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#SpringBoot-中如何实现定时任务？&#34;&gt;&lt;/a&gt;SpringBoot 中如何实现定时任务？&lt;/h3&gt;
&lt;p&gt;我们使用&lt;code&gt;@Scheduled&lt;/code&gt;注解就能很方便地创建一个定时任务。&lt;/p&gt;
&lt;p&gt;还需要再 SpringBoot 启动类上添加&lt;code&gt;@EnableScheduling&lt;/code&gt;注解，这个注解的作用是发现&lt;code&gt;@Scheduled&lt;/code&gt;的任务并在后台执行该任务。&lt;/p&gt;
</content>
        <category term="Java" />
        <category term="总结" />
        <category term="Spring" />
        <updated>2024-06-22T10:11:04.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/22/Myql%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>MySQL应用与总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/22/Myql%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h1 id=&#34;数据库&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#数据库&#34;&gt;&lt;/a&gt;数据库&lt;/h1&gt;
&lt;h2 id=&#34;索引&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#索引&#34;&gt;&lt;/a&gt;索引&lt;/h2&gt;
&lt;h3 id=&#34;为什么使用索引会加快查询？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么使用索引会加快查询？&#34;&gt;&lt;/a&gt;为什么使用索引会加快查询？&lt;/h3&gt;
&lt;p&gt;数据库文件是存储在磁盘上的，磁盘 I/O 是数据库操作中最耗时的部分之一。没有索引时，数据库会进行全表扫描（Sequential Scan），这意味着它必须读取表中的每一行数据来查找匹配的行（时间效率为 O(n)）。当表的数据量非常大时，就会导致大量的磁盘 I/O 操作。&lt;/p&gt;
&lt;p&gt;有了索引，就可以直接跳到索引指示的数据位置，而不必扫描整张表，从而大大减少了磁盘 I/O 操作的次数。&lt;/p&gt;
&lt;p&gt;MySQL 的 InnoDB 存储引擎默认使用 B+ 树来作为索引的数据结构，而 B+ 树的查询效率非常高，时间复杂度为 O(logN)。&lt;/p&gt;
&lt;p&gt;索引文件相较于数据库文件，体积小得多，查到索引之后再映射到数据库记录，查询效率就会高很多。&lt;/p&gt;
&lt;p&gt;索引就好像书的目录，通过目录去查找对应的章节内容会比一页一页的翻书快很多。&lt;/p&gt;
&lt;h3 id=&#34;MySQL中的索引有哪些类型？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#MySQL中的索引有哪些类型？&#34;&gt;&lt;/a&gt;MySQL中的索引有哪些类型？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;B-Tree索引&lt;/strong&gt;：是MySQL中最常用的索引类型。适用于等值查询、范围查询、排序和分组操作。B-Tree索引的优点是查询效率高，尤其适合范围查询和排序操作，但对于频繁更新的列，索引维护成本较高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;哈希索引&lt;/strong&gt;：通过哈希函数将键值映射到哈希表的位置，查找速度非常快。它适用于等值查询，但不支持范围查询、排序和分组。此外，哈希冲突会降低性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全文索引&lt;/strong&gt;：用于全文搜索，支持对文本字段的关键词查询。它适合需要全文检索的场景，如搜索引擎和文章内容搜索，全文检索速度快，但建立和维护成本高，不适合实时更新的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间索引&lt;/strong&gt;：（R-Tree索引）用于地理信息系统中的空间查询，适合多维数据的快速查询，如地理位置查询和地图服务。它能够有效地进行范围查询和最近邻查询，但不适合其他类型的数据，且建立和维护成本较高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前缀索引&lt;/strong&gt;：是对字符串类型的列的前几个字符创建索引，适用于字符串列较长且前缀部分区分度较高的场景。它能节省索引空间并提高查询效率，但只适用于前缀匹配查询，不支持全文匹配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聚簇索引&lt;/strong&gt;：决定数据在磁盘上的物理存储顺序，每个表只能有一个聚簇索引，通常是主键。它的数据访问速度快，特别适合范围查询，但更新开销较大，且非聚簇索引需要包含聚簇索引列作为引用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非聚簇索引&lt;/strong&gt;：的索引和数据分别存储，叶节点存储指向数据的指针。它的更新开销较小，可以有多个非聚簇索引，但查询时需要先访问索引再访问数据，速度略慢于聚簇索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;唯一索引&lt;/strong&gt;：确保索引列中的值是唯一的，适用于需要唯一性约束的场景，如用户名、电子邮件地址等。它能确保数据的唯一性，防止重复数据，但插入和更新时需要检查唯一性，开销较大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合索引&lt;/strong&gt;：是对多个列创建的索引，能够提高多列查询的效率，适用于WHERE子句中涉及多列的查询。它能显著提高查询效率，但索引创建和维护成本较高，且需要考虑索引的顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日志&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#日志&#34;&gt;&lt;/a&gt;日志&lt;/h2&gt;
&lt;h3 id=&#34;MySQL-日志文件有哪些？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#MySQL-日志文件有哪些？&#34;&gt;&lt;/a&gt;MySQL 日志文件有哪些？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;错误日志&lt;/strong&gt;：记录 MySQL 服务器启动、运行或停止时出现的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;慢查询日志&lt;/strong&gt;：记录执行时间超过&lt;code&gt;long_query_time&lt;/code&gt;值的所有 SQL 语句。这个时间值是可配置的，默认情况下，慢查询日志功能是关闭的。可以用来识别和优化慢 SQL。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一般查询日志&lt;/strong&gt;：记录所有 MySQL 服务器的链接信息以及所有的 SQL 语句，不论这些语句是否修改了数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二进制日志&lt;/strong&gt;：记录了所有修改数据库状态的 SQL 语句，以及每个语句的执行时间，如 INSERT、UPDATE、DELETE 等，但不包括 SELECT 和 SHOW 这类的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重做日志&lt;/strong&gt;：记录对于&lt;code&gt;InnDB&lt;/code&gt;表的每个写操作，不是 SQL 级的，而是物理级别的，主要用于崩溃恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回滚日志&lt;/strong&gt;：记录数据被修改前的值，用于事务回滚。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="MySQL" />
        <category term="总结" />
        <updated>2024-06-22T10:02:39.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>Java集合总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h1 id=&#34;Java集合&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Java集合&#34;&gt;&lt;/a&gt;Java集合&lt;/h1&gt;
&lt;h3 id=&#34;说说-List-Set-Queue-Map-四者的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#说说-List-Set-Queue-Map-四者的区别？&#34;&gt;&lt;/a&gt;说说 List, Set, Queue, Map 四者的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;：存储的元素是有序的、可重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Set&lt;/code&gt;：存储的元素不可重复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Queue&lt;/code&gt;：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt;：使用键值对存储，&lt;code&gt;key&lt;/code&gt;是无序的、不可重复的，&lt;code&gt;value&lt;/code&gt;是无序的、可重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;List&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#List&#34;&gt;&lt;/a&gt;List&lt;/h2&gt;
&lt;h3 id=&#34;ArrayList-和-Array-（数组）的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList-和-Array-（数组）的区别？&#34;&gt;&lt;/a&gt;ArrayList 和 Array （数组）的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList&lt;/strong&gt;：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array（数组）&lt;/strong&gt;：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ArrayList-可以添加-null-吗？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList-可以添加-null-吗？&#34;&gt;&lt;/a&gt;ArrayList 可以添加 null 吗？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;中可以存储任何类型的对象，包括&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;ArrayList和LinkedList的区别是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList和LinkedList的区别是什么？&#34;&gt;&lt;/a&gt;ArrayList和LinkedList的区别是什么？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList&lt;/strong&gt; 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。&lt;/li&gt;
&lt;li&gt;**LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ArrayList如何去重？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList如何去重？&#34;&gt;&lt;/a&gt;ArrayList如何去重？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用HashSet&lt;/strong&gt;：通过&lt;code&gt;HashSet&lt;/code&gt;的特性去重，然后转换回&lt;code&gt;ArrayList&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用Stream API&lt;/strong&gt;：使用Java 8引入的Stream的&lt;code&gt;distinct()&lt;/code&gt;方法去重。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手动遍历&lt;/strong&gt;：手动遍历&lt;code&gt;ArrayList&lt;/code&gt;并使用另一个&lt;code&gt;ArrayList&lt;/code&gt;存储不重复的元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Map&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Map&#34;&gt;&lt;/a&gt;Map&lt;/h2&gt;
&lt;h3 id=&#34;HashMap和LinkedHashMap的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#HashMap和LinkedHashMap的区别？&#34;&gt;&lt;/a&gt;HashMap和LinkedHashMap的区别？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt;继承自&lt;code&gt;HashMap&lt;/code&gt;，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。&lt;/p&gt;
&lt;h3 id=&#34;HashMap-和-HashTable-有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#HashMap-和-HashTable-有什么区别？&#34;&gt;&lt;/a&gt;HashMap 和 HashTable 有什么区别？&lt;/h3&gt;
&lt;p&gt;因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。&lt;/p&gt;
&lt;h4 id=&#34;初始化容量和扩容方式：&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#初始化容量和扩容方式：&#34;&gt;&lt;/a&gt;初始化容量和扩容方式：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HashMap&lt;/strong&gt;：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hashtable&lt;/strong&gt;：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ConcurrentHashMap和Hashtable的区别&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ConcurrentHashMap和Hashtable的区别&#34;&gt;&lt;/a&gt;ConcurrentHashMap和Hashtable的区别?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;和&lt;code&gt;Hashtable&lt;/code&gt;都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现机制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;锁粒度&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;锁粒度大，所有操作都需要获取全表锁，降低了并发能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Null键和值&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;不允许存储&lt;code&gt;null&lt;/code&gt;键和&lt;code&gt;null&lt;/code&gt;值，尝试存储&lt;code&gt;null&lt;/code&gt;会抛出&lt;code&gt;NullPointerException&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;也不允许存储&lt;code&gt;null&lt;/code&gt;键和&lt;code&gt;null&lt;/code&gt;值，存储&lt;code&gt;null&lt;/code&gt;时会抛出&lt;code&gt;NullPointerException&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;迭代器安全性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;，但不保证读取到的值是最新的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结：&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结：&#34;&gt;&lt;/a&gt;总结：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ConcurrentHashMap&lt;/strong&gt;适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许&lt;code&gt;null&lt;/code&gt;键和值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hashtable&lt;/strong&gt;适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许&lt;code&gt;null&lt;/code&gt;键和值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;HashMap-的底层原理&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#HashMap-的底层原理&#34;&gt;&lt;/a&gt;HashMap 的底层原理&lt;/h3&gt;
&lt;h5 id=&#34;1-数据结构&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-数据结构&#34;&gt;&lt;/a&gt;1. 数据结构&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数组&lt;/strong&gt;：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链表&lt;/strong&gt;：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;红黑树&lt;/strong&gt;：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2-插入元素&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-插入元素&#34;&gt;&lt;/a&gt;2. 插入元素&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;计算键的哈希值，并确定在数组中的索引位置。&lt;/li&gt;
&lt;li&gt;检查该位置是否已经有元素：
&lt;ul&gt;
&lt;li&gt;如果没有元素，直接插入。&lt;/li&gt;
&lt;li&gt;如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3-查找元素&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-查找元素&#34;&gt;&lt;/a&gt;3. 查找元素&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;计算键的哈希值，并确定在数组中的索引位置。&lt;/li&gt;
&lt;li&gt;在该位置的链表或红黑树中查找匹配键，返回对应的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;4-删除元素&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-删除元素&#34;&gt;&lt;/a&gt;4. 删除元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;计算键的哈希值，并确定在数组中的索引位置。&lt;/li&gt;
&lt;li&gt;在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5-扩容机制&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-扩容机制&#34;&gt;&lt;/a&gt;5. 扩容机制&lt;/h5&gt;
&lt;p&gt;当&lt;code&gt;HashMap&lt;/code&gt;中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新的数组，容量是原来的两倍。&lt;/li&gt;
&lt;li&gt;将原数组中的所有元素重新哈希并放入新数组中。&lt;/li&gt;
&lt;li&gt;重新调整链表或红黑树结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt;总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据结构&lt;/strong&gt;：&lt;code&gt;HashMap&lt;/code&gt;使用数组、链表和红黑树存储元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;哈希算法&lt;/strong&gt;：通过键的&lt;code&gt;hashCode()&lt;/code&gt;计算哈希值，并通过哈希值确定数组索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插入元素&lt;/strong&gt;：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找元素&lt;/strong&gt;：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除元素&lt;/strong&gt;：定位到数组索引，删除链表或红黑树中的节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩容机制&lt;/strong&gt;：当元素数量超过阈值时，&lt;code&gt;HashMap&lt;/code&gt;会自动扩容，重新分配数组并调整元素位置。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Java" />
        <category term="笔记" />
        <updated>2024-06-22T08:48:56.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>Java基础总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h4 id=&#34;对象相等和引用相等的区别&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#对象相等和引用相等的区别&#34;&gt;&lt;/a&gt;对象相等和引用相等的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象相等&lt;/strong&gt;：比较的是内存中存放的内容是否相等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用相等&lt;/strong&gt;：比较的是它们指向的内存地址是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如果一个类没有声明构造方法，该程序能正确执行吗？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#如果一个类没有声明构造方法，该程序能正确执行吗？&#34;&gt;&lt;/a&gt;如果一个类没有声明构造方法，该程序能正确执行吗？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。&lt;/li&gt;
&lt;li&gt;如果添加了类的构造方法，无论是否有参，&lt;code&gt;Java&lt;/code&gt;都不会添加默认不带参数的构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造方法有哪些特点？是否可被重写？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#构造方法有哪些特点？是否可被重写？&#34;&gt;&lt;/a&gt;构造方法有哪些特点？是否可被重写？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构造方法的特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;名字与类名相同。&lt;/li&gt;
&lt;li&gt;没有返回值。&lt;/li&gt;
&lt;li&gt;生成类的对象时自动执行，无需调用。&lt;br&gt;
构造方法不能被重写，但是可以被重载。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面向对象的三大特征&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#面向对象的三大特征&#34;&gt;&lt;/a&gt;面向对象的三大特征&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多态&lt;/strong&gt;：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接口和抽象类有什么共同点和区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#接口和抽象类有什么共同点和区别？&#34;&gt;&lt;/a&gt;接口和抽象类有什么共同点和区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共同点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;都不能被实例化。&lt;/li&gt;
&lt;li&gt;都可以包含抽象方法。&lt;/li&gt;
&lt;li&gt;都可以有默认的实现方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区别&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。&lt;/li&gt;
&lt;li&gt;抽象类主要用于代码的复用，强调所属关系。&lt;/li&gt;
&lt;li&gt;一个类只能继承一个类，但是可以实现多个接口。&lt;/li&gt;
&lt;li&gt;接口中的成员变量只能是静态常量，不能被修改且必须有初始值。&lt;/li&gt;
&lt;li&gt;抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深拷贝和浅拷贝的区别？什么是引用拷贝？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#深拷贝和浅拷贝的区别？什么是引用拷贝？&#34;&gt;&lt;/a&gt;深拷贝和浅拷贝的区别？什么是引用拷贝？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;浅拷贝&lt;/strong&gt;：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用&lt;code&gt;Object&lt;/code&gt;的&lt;code&gt;clone()&lt;/code&gt;方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深拷贝&lt;/strong&gt;：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用拷贝&lt;/strong&gt;：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;和-equals-的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#和-equals-的区别？&#34;&gt;&lt;/a&gt;== 和 equals()的区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对于基本数据类型，&lt;code&gt;==&lt;/code&gt; 比较的是值。&lt;/li&gt;
&lt;li&gt;对于引用数据类型，&lt;code&gt;==&lt;/code&gt; 比较的是对象的内存地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;没有重写时，等价于&lt;code&gt;==&lt;/code&gt;比较两个对象。&lt;/li&gt;
&lt;li&gt;被重写时，一般都重写&lt;code&gt;equals()&lt;/code&gt;方法用来比较两个对象中的属性是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hashCode-有什么用？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#hashCode-有什么用？&#34;&gt;&lt;/a&gt;hashCode() 有什么用？&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;hashCode()&lt;/code&gt;方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。&lt;/p&gt;
&lt;h4 id=&#34;为什么重写-equals-时必须重写-hashCode-方法？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么重写-equals-时必须重写-hashCode-方法？&#34;&gt;&lt;/a&gt;为什么重写 equals() 时必须重写 hashCode() 方法？&lt;/h4&gt;
&lt;h5 id=&#34;equals-和hashCode-的合同（约定）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#equals-和hashCode-的合同（约定）&#34;&gt;&lt;/a&gt;&lt;code&gt;equals()&lt;/code&gt;和&lt;code&gt;hashCode()&lt;/code&gt;的合同（约定）&lt;/h5&gt;
&lt;p&gt;如果两个对象根据&lt;code&gt;equals()&lt;/code&gt;方法是相等的，那么它们的&lt;code&gt;hashCode()&lt;/code&gt;值必须相同。&lt;/p&gt;
&lt;p&gt;如果两个对象的&lt;code&gt;hashCode()&lt;/code&gt;值相同，它们不一定是相等的（但它们有可能是相等的）。&lt;/p&gt;
&lt;h4 id=&#34;String、StringBuffer、StringBuilder-的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#String、StringBuffer、StringBuilder-的区别？&#34;&gt;&lt;/a&gt;String、StringBuffer、StringBuilder 的区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;：不可变的，因为不可变，所以它是线程安全的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuffer&lt;/strong&gt;：可变的，允许对字符串进行修改，线程安全，所有的方法都被&lt;code&gt;synchronized&lt;/code&gt;修饰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuilder&lt;/strong&gt;：可变的，但不是线程安全的，没有被&lt;code&gt;synchronized&lt;/code&gt;修饰。由于没有同步机制，性能比&lt;code&gt;StringBuffer&lt;/code&gt;更高，适合单线程环境下使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当字符串是固定不变的时候使用&lt;code&gt;String&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当需要对字符串进行大量修改且在多线程环境下使用&lt;code&gt;StringBuffer&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当需要对字符串进行大量修改且在单线程环境下使用&lt;code&gt;StringBuilder&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串常量池的作用了解吗？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#字符串常量池的作用了解吗？&#34;&gt;&lt;/a&gt;字符串常量池的作用了解吗？&lt;/h4&gt;
&lt;p&gt;字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，&lt;code&gt;JVM&lt;/code&gt;会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。&lt;/p&gt;
&lt;h4 id=&#34;Exception-和-Error-有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Exception-和-Error-有什么区别？&#34;&gt;&lt;/a&gt;Exception 和 Error 有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Exception&lt;/strong&gt;和&lt;strong&gt;Error&lt;/strong&gt;都是&lt;strong&gt;Throwable&lt;/strong&gt;的子类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exception&lt;/code&gt;是程序本身可以处理的异常，可以通过&lt;code&gt;catch&lt;/code&gt;来捕获。&lt;code&gt;Exception&lt;/code&gt;还可以分为&lt;code&gt;checked Exception&lt;/code&gt;和&lt;code&gt;Unchecked Exception&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt;是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Checked-Exception-和-Unchecked-Exception-有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Checked-Exception-和-Unchecked-Exception-有什么区别？&#34;&gt;&lt;/a&gt;Checked Exception 和 Unchecked Exception 有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Checked Exception&lt;/strong&gt;必须被捕获或声明，否则编译器会报错。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unchecked Exception&lt;/strong&gt;也叫运行时异常，不强制要求处理，但最好捕获处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;什么是泛型？有什么作用？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是泛型？有什么作用？&#34;&gt;&lt;/a&gt;什么是泛型？有什么作用？&lt;/h4&gt;
&lt;p&gt;泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List&lt;String&gt;(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，从集合中取出元素时不需要进行转换。Java编译器在编译时会移除所有的泛型类型信息&lt;/p&gt;
&lt;h4 id=&#34;反射是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#反射是什么？&#34;&gt;&lt;/a&gt;反射是什么？&lt;/h4&gt;
&lt;p&gt;反射是&lt;code&gt;Java&lt;/code&gt;中的一种机制，允许程序在运行时获取有关自身的信息。并能动态地调用对象的方法、访问属性和创建对象实例。反射提供了动态操作类和对象的能力，是实现框架、工具和动态代理等技术的基础。&lt;/p&gt;
&lt;h4 id=&#34;反射的优缺点？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#反射的优缺点？&#34;&gt;&lt;/a&gt;反射的优缺点？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;反射的优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。&lt;/li&gt;
&lt;li&gt;很多流行的&lt;code&gt;Java&lt;/code&gt;框架如&lt;code&gt;Spring&lt;/code&gt;都依赖反射来实现动态代理、依赖注入。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射的缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。&lt;/li&gt;
&lt;li&gt;反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。&lt;/li&gt;
&lt;li&gt;使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。&lt;/li&gt;
&lt;li&gt;反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;何谓注解？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#何谓注解？&#34;&gt;&lt;/a&gt;何谓注解？&lt;/h4&gt;
&lt;p&gt;注解是&lt;code&gt;Java&lt;/code&gt;中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如&lt;code&gt;@Override&lt;/code&gt;注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。&lt;/p&gt;
&lt;h4 id=&#34;什么是序列化？什么是反序列化？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是序列化？什么是反序列化？&#34;&gt;&lt;/a&gt;什么是序列化？什么是反序列化？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序列化&lt;/strong&gt;：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反序列化&lt;/strong&gt;：将字节流恢复为Java对象的过程。通过反序列化使其恢复到序列化之前的状态。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Java" />
        <category term="笔记" />
        <updated>2024-06-21T12:41:04.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/</id>
        <title>使用AList定时备份文件</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/"/>
        <content type="html">&lt;h1 id=&#34;使用AList定时备份文件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#使用AList定时备份文件&#34;&gt;&lt;/a&gt;使用AList定时备份文件&lt;/h1&gt;
&lt;p&gt;本教程详细介绍如何使用 &lt;code&gt;AList&lt;/code&gt; 通过 &lt;code&gt;API&lt;/code&gt; 自动备份服务器文件，包括获取 &lt;code&gt;JWT Token&lt;/code&gt; 和自动上传备份文件至 &lt;code&gt;AList&lt;/code&gt; 服务器。&lt;/p&gt;
&lt;h2 id=&#34;环境配置&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#环境配置&#34;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;
&lt;p&gt;首先，确保服务器上安装了 &lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;jq&lt;/code&gt;。&lt;code&gt;curl&lt;/code&gt; 用于发送 &lt;code&gt;HTTP&lt;/code&gt; 请求，而 &lt;code&gt;jq&lt;/code&gt; 用于解析 &lt;code&gt;JSON&lt;/code&gt; 响应。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; jq&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置环境变量&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#设置环境变量&#34;&gt;&lt;/a&gt;设置环境变量&lt;/h3&gt;
&lt;p&gt;为确保脚本能自动读取 &lt;code&gt;AList&lt;/code&gt; 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。&lt;br&gt;
通过在服务器的 &lt;code&gt;~/.bashrc&lt;/code&gt; 或 &lt;code&gt;~/.profile&lt;/code&gt; 文件中添加以下行来永久设置环境变量：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;ALIST_USERNAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;your_username&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;ALIST_PASSWORD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;your_password&gt;&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确保替换 “your_username” 和 “your_password” 为你的 AList 登录用户名和密码。&lt;/p&gt;
&lt;h3 id=&#34;应用环境变量&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#应用环境变量&#34;&gt;&lt;/a&gt;应用环境变量&lt;/h3&gt;
&lt;p&gt;修改文件后，为使环境变量立即生效，执行以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.bashrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者，如果你是在 ~/.profile 中设置的环境变量，使用：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.profile&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。&lt;/p&gt;
&lt;h2 id=&#34;获取-JWT-Token&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#获取-JWT-Token&#34;&gt;&lt;/a&gt;获取 JWT Token&lt;/h2&gt;
&lt;p&gt;要与 &lt;code&gt;AList&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt; 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 &lt;code&gt;API&lt;/code&gt; 获取 &lt;code&gt;Token&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;创建-Token-获取脚本&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#创建-Token-获取脚本&#34;&gt;&lt;/a&gt;创建 Token 获取脚本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脚本位置&lt;/strong&gt;：在 &lt;code&gt;/opt/alist&lt;/code&gt; 目录下创建 &lt;code&gt;get_token.sh&lt;/code&gt; 脚本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编辑脚本&lt;/strong&gt;：使用 &lt;code&gt;Vim&lt;/code&gt; 或任意文本编辑器创建和编辑 &lt;code&gt;get_token.sh&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt; /opt/alist/get_token.sh
&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /opt/alist/get_token.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脚本内容&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 读取环境变量中的用户名和密码&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;alist_username&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$ALIST_USERNAME&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;alist_password&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$ALIST_PASSWORD&lt;/span&gt;&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 使用curl发送POST请求获取token&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-k&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-X&lt;/span&gt; POST &lt;span class=&#34;token string&#34;&gt;&#34;http://&amp;lt;服务器域名或IP地址&gt;:&amp;lt;端口号&gt;/api/auth/login&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Content-Type: application/json&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
  &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;#123;&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;username&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;:&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$alist_username&lt;/span&gt;&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;, &lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;password&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;:&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$alist_password&lt;/span&gt;&lt;span class=&#34;token entity&#34; title=&#34;\&amp;quot;&#34;&gt;\&#34;&lt;/span&gt;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 解析响应获取token&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 检查token是否成功获取&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-z&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$token&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$token&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;null&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Failed to get token&#34;&lt;/span&gt;
  &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Token retrieved successfully&#34;&lt;/span&gt;
  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$token&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; /tmp/alist_token.txt
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;赋予脚本执行权限&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x /opt/alist/get_token.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;上传备份文件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#上传备份文件&#34;&gt;&lt;/a&gt;上传备份文件&lt;/h2&gt;
&lt;p&gt;使用 PUT &lt;code&gt;/api/fs/put&lt;/code&gt; API 上传备份文件。创建一个脚本自动执行备份和上传。&lt;/p&gt;
&lt;h3 id=&#34;创建上传脚本&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#创建上传脚本&#34;&gt;&lt;/a&gt;创建上传脚本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脚本位置&lt;/strong&gt;：在 &lt;code&gt;/opt/alist&lt;/code&gt; 目录下创建 &lt;code&gt;upload_backup.sh&lt;/code&gt; 脚本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编辑脚本&lt;/strong&gt;：使用 &lt;code&gt;Vim&lt;/code&gt; 或任意文本编辑器创建和编辑 &lt;code&gt;upload_backup.sh&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt; /opt/alist/upload_backup.sh
&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /opt/alist/upload_backup.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脚本内容&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 日志文件夹位置&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;LOG_FILE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/opt/alist/log/upload_back_&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +&lt;span class=&#34;token string&#34;&gt;&#39;%Y%m%d%H%M%S&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;.log&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 函数：带时间戳的echo&lt;/span&gt;
&lt;span class=&#34;token function-name function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;[&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +&lt;span class=&#34;token string&#34;&gt;&#39;%Y-%m-%d %H:%M:%S&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;] &lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tee&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$LOG_FILE&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 删除超过30天的日志文件&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt; /opt/alist/log &lt;span class=&#34;token parameter variable&#34;&gt;-type&lt;/span&gt; f &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;*.log&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-mtime&lt;/span&gt; +30 &lt;span class=&#34;token parameter variable&#34;&gt;-exec&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 目标 API URL&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;API_URL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;https://&amp;lt;alist服务器域名或IP地址&gt;/api/fs/put&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 要备份的目录&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;BACKUP_DIR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/opt/alist/data&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 备份文件存储位置，包含时间戳&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;BACKUP_PATH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/tmp/alist/alist_backup_&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;date&lt;/span&gt; +%Y%m%d%H%M%S&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;.tar.gz&#34;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 创建备份文件&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;tar&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-czf&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$BACKUP_PATH&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-C&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$BACKUP_DIR&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 获取文件大小&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;CONTENT_LENGTH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; %s &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$BACKUP_PATH&lt;/span&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# URL编码的完整目标文件路径&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;ENCODED_FILE_PATH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;alist上的路径&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;basename&lt;/span&gt; $BACKUP_PATH&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; jq &lt;span class=&#34;token parameter variable&#34;&gt;-sRr&lt;/span&gt; @uri&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 读取存储的token&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /tmp/alist_token.txt&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 使用curl PUT请求上传文件&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-X&lt;/span&gt; PUT &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$API_URL&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Authorization: &lt;span class=&#34;token variable&#34;&gt;$token&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;File-Path: &lt;span class=&#34;token variable&#34;&gt;$ENCODED_FILE_PATH&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Content-Type: application/octet-stream&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;token parameter variable&#34;&gt;-H&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Content-Length: &lt;span class=&#34;token variable&#34;&gt;$CONTENT_LENGTH&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;token parameter variable&#34;&gt;-T&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$BACKUP_PATH&lt;/span&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 检查上传是否成功并记录日志&lt;/span&gt;
log &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$response&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 删除本地临时备份文件&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$BACKUP_PATH&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
    log &lt;span class=&#34;token string&#34;&gt;&#34;Local backup file deleted&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
    log &lt;span class=&#34;token string&#34;&gt;&#34;Failed to delete local backup file&#34;&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;赋予脚本执行权限&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x /opt/alist/upload_backup.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;设置定时任务&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#设置定时任务&#34;&gt;&lt;/a&gt;设置定时任务&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;crontab -e&lt;/code&gt; 添加定时任务自动执行以上脚本。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; * * * /opt/alist/get_token.sh
&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; * * * /opt/alist/upload_backup.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这将在每天凌晨 1 点自动获取新的 &lt;code&gt;Token&lt;/code&gt;，并在五分钟后上传最新的备份文件。&lt;/p&gt;
&lt;h2 id=&#34;日志记录&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#日志记录&#34;&gt;&lt;/a&gt;日志记录&lt;/h2&gt;
&lt;p&gt;考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; * * * /opt/alist/get_token.sh &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; /var/log/alist_backup.log &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;&amp;amp;1&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; * * * /opt/alist/upload_backup.sh &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; /var/log/alist_backup.log &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;&amp;amp;1&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 &lt;code&gt;AList&lt;/code&gt; 完成文件的存储和备份。&lt;/p&gt;
&lt;hr&gt;
</content>
        <category term="Alist" />
        <updated>2024-06-18T08:37:21.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/</id>
        <title>Hexo备份</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/"/>
        <content type="html">&lt;h1 id=&#34;使用-Hexo-和-GitHub-实现多平台工作和数据备份&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#使用-Hexo-和-GitHub-实现多平台工作和数据备份&#34;&gt;&lt;/a&gt;使用 Hexo 和 GitHub 实现多平台工作和数据备份&lt;/h1&gt;
&lt;h2 id=&#34;目标&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#目标&#34;&gt;&lt;/a&gt;目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;master&lt;/code&gt; 分支&lt;/strong&gt;：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;hexo&lt;/code&gt; 分支&lt;/strong&gt;：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么要这样做？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么要这样做？&#34;&gt;&lt;/a&gt;为什么要这样做？&lt;/h2&gt;
&lt;p&gt;使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。&lt;code&gt;hexo&lt;/code&gt; 分支保存源文件，方便我们在不同平台进行编辑；&lt;code&gt;master&lt;/code&gt; 分支保存静态文件，用于发布到 GitHub Pages。&lt;/p&gt;
&lt;h2 id=&#34;操作步骤&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#操作步骤&#34;&gt;&lt;/a&gt;操作步骤&lt;/h2&gt;
&lt;h3 id=&#34;1-初始化-Hexo-项目&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-初始化-Hexo-项目&#34;&gt;&lt;/a&gt;1. 初始化 Hexo 项目&lt;/h3&gt;
&lt;p&gt;首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;hexo init my-blog
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; my-blog
&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-初始化-Git-仓库&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-初始化-Git-仓库&#34;&gt;&lt;/a&gt;2. 初始化 Git 仓库&lt;/h3&gt;
&lt;p&gt;在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; init&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-创建-hexo-分支&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-创建-hexo-分支&#34;&gt;&lt;/a&gt;3. 创建 hexo 分支&lt;/h3&gt;
&lt;p&gt;创建一个新的分支 &lt;code&gt;hexo&lt;/code&gt;，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout &lt;span class=&#34;token parameter variable&#34;&gt;-b&lt;/span&gt; hexo&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-推送-hexo-分支到-GitHub&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-推送-hexo-分支到-GitHub&#34;&gt;&lt;/a&gt;4. 推送 hexo 分支到 GitHub&lt;/h3&gt;
&lt;p&gt;将 &lt;code&gt;hexo&lt;/code&gt; 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; origin https://github.com/yourusername/yourrepo.git
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Initial commit with Hexo source files&#34;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; origin hexo&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，在 GitHub 仓库设置中，将 &lt;code&gt;hexo&lt;/code&gt; 分支设置为默认分支：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开你的 GitHub 仓库。&lt;/li&gt;
&lt;li&gt;点击 “Settings”。&lt;/li&gt;
&lt;li&gt;在左侧菜单中点击 “Branches”。&lt;/li&gt;
&lt;li&gt;在 “Default branch” 下拉菜单中选择 &lt;code&gt;hexo&lt;/code&gt;，然后点击 “Update”。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-创建-master-分支&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-创建-master-分支&#34;&gt;&lt;/a&gt;5. 创建 master 分支&lt;/h3&gt;
&lt;p&gt;切换到 &lt;code&gt;master&lt;/code&gt; 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout &lt;span class=&#34;token parameter variable&#34;&gt;--orphan&lt;/span&gt; master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除所有文件，因为 &lt;code&gt;master&lt;/code&gt; 分支只需要保存生成的静态文件。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-rf&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建一个空的 README 文件并提交，以初始化 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;# My Blog&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; README.md
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; README.md
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Initial commit for master branch&#34;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; origin master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6-配置-Hexo-部署&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#6-配置-Hexo-部署&#34;&gt;&lt;/a&gt;6. 配置 Hexo 部署&lt;/h3&gt;
&lt;p&gt;在 Hexo 项目根目录下的 &lt;code&gt;_config.yml&lt;/code&gt; 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; git
  &lt;span class=&#34;token key atrule&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//github.com/yourusername/yourrepo.git
  &lt;span class=&#34;token key atrule&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装 Hexo 部署插件 &lt;code&gt;hexo-deployer-git&lt;/code&gt;，使 Hexo 能通过 Git 进行部署。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; hexo-deployer-git &lt;span class=&#34;token parameter variable&#34;&gt;--save&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7-生成和部署静态文件&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#7-生成和部署静态文件&#34;&gt;&lt;/a&gt;7. 生成和部署静态文件&lt;/h3&gt;
&lt;p&gt;运行以下命令生成静态文件并部署到 &lt;code&gt;master&lt;/code&gt; 分支：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;hexo clean
hexo generate
hexo deploy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hexo clean&lt;/code&gt;：清理生成的文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo generate&lt;/code&gt;：生成静态文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo deploy&lt;/code&gt;：将生成的静态文件部署到 GitHub 上的 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-推送-Hexo-源文件到-hexo-分支&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#8-推送-Hexo-源文件到-hexo-分支&#34;&gt;&lt;/a&gt;8. 推送 Hexo 源文件到 hexo 分支&lt;/h3&gt;
&lt;p&gt;每次更新 Hexo 源文件后，将它们推送到 &lt;code&gt;hexo&lt;/code&gt; 分支，以确保源文件有备份。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Update Hexo source files&#34;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin hexo&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;验证配置&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#验证配置&#34;&gt;&lt;/a&gt;验证配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;确认 &lt;code&gt;hexo&lt;/code&gt; 分支为默认分支&lt;/strong&gt;：保存 Hexo 源文件，并便于多平台编辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认 &lt;code&gt;master&lt;/code&gt; 分支保存生成的静态文件&lt;/strong&gt;：用于部署到 GitHub Pages，并确保网站正常访问。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Blog" />
        <updated>2024-06-16T11:19:00.000Z</updated>
    </entry>
</feed>