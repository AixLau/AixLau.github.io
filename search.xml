<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用AList定时备份服务器文件</title>
      <link href="/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/"/>
      <url>/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="使用AList定时备份服务器文件"><a href="#使用AList定时备份服务器文件" class="headerlink" title="使用AList定时备份服务器文件"></a>使用AList定时备份服务器文件</h1><p>本教程详细介绍如何使用 AList 通过 API 自动备份服务器文件，包括获取 JWT Token 和自动上传备份文件至 AList 服务器。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>首先，确保服务器上安装了 curl 和 jq。curl 用于发送 HTTP 请求，而 jq 用于解析 JSON 响应。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> jq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取-JWT-Token"><a href="#获取-JWT-Token" class="headerlink" title="获取 JWT Token"></a>获取 JWT Token</h2><p>要与 AList 的 API 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 API 获取 Token。</p><h3 id="创建-Token-获取脚本"><a href="#创建-Token-获取脚本" class="headerlink" title="创建 Token 获取脚本"></a>创建 Token 获取脚本</h3><ul><li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li><li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /opt/alist/get_token.sh<span class="token function">vim</span> /opt/alist/get_token.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>脚本内容</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 读取环境变量中的用户名和密码</span><span class="token assign-left variable">alist_username</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$ALIST_USERNAME</span>"</span><span class="token assign-left variable">alist_password</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$ALIST_PASSWORD</span>"</span><span class="token comment"># 使用curl发送POST请求获取token</span><span class="token assign-left variable">response</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> POST <span class="token string">"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-d</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>username<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$alist_username</span><span class="token entity" title="\&quot;">\"</span>, <span class="token entity" title="\&quot;">\"</span>password<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$alist_password</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span class="token variable">)</span></span><span class="token comment"># 解析响应获取token</span><span class="token comment"># 检查token是否成功获取</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$token</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$token</span>"</span> <span class="token operator">==</span> <span class="token string">"null"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Failed to get token"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Token retrieved successfully"</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$token</span> <span class="token operator">></span> /tmp/alist_token.txt<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>赋予脚本执行权限</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="上传备份文件"><a href="#上传备份文件" class="headerlink" title="上传备份文件"></a>上传备份文件</h2><p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p><h3 id="创建上传脚本"><a href="#创建上传脚本" class="headerlink" title="创建上传脚本"></a>创建上传脚本</h3><ul><li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li><li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /opt/alist/upload_backup.sh<span class="token function">vim</span> /opt/alist/upload_backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>脚本内容</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 目标 API URL</span><span class="token assign-left variable">API_URL</span><span class="token operator">=</span><span class="token string">"https://&lt;alist服务器域名或IP地址>/api/fs/put"</span><span class="token comment"># 要备份的目录</span><span class="token assign-left variable">BACKUP_DIR</span><span class="token operator">=</span><span class="token string">"/opt/alist/data"</span><span class="token comment"># 备份文件存储位置，包含时间戳</span><span class="token assign-left variable">BACKUP_PATH</span><span class="token operator">=</span><span class="token string">"/tmp/alist/alist_backup_<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d%H%M%S<span class="token variable">)</span></span>.tar.gz"</span><span class="token comment"># 创建备份文件</span><span class="token function">tar</span> <span class="token parameter variable">-czf</span> <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>"</span> <span class="token builtin class-name">.</span><span class="token comment"># 获取文件大小</span><span class="token assign-left variable">CONTENT_LENGTH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> %s <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span><span class="token variable">)</span></span><span class="token comment"># URL编码的完整目标文件路径</span><span class="token assign-left variable">ENCODED_FILE_PATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&lt;alist上的路径><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $BACKUP_PATH<span class="token variable">)</span></span>"</span> <span class="token operator">|</span> jq <span class="token parameter variable">-sRr</span> @uri<span class="token variable">)</span></span><span class="token comment"># 读取存储的token</span><span class="token assign-left variable">token</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /tmp/alist_token.txt<span class="token variable">)</span></span><span class="token comment"># 使用curl PUT请求上传文件</span><span class="token assign-left variable">response</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> PUT <span class="token string">"<span class="token variable">$API_URL</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Authorization: <span class="token variable">$token</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"File-Path: <span class="token variable">$ENCODED_FILE_PATH</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/octet-stream"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Content-Length: <span class="token variable">$CONTENT_LENGTH</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-T</span> <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span> <span class="token punctuation">\</span>    --progress-bar<span class="token variable">)</span></span><span class="token comment"># 删除本地临时备份文件</span><span class="token function">rm</span> <span class="token string">"<span class="token variable">$BACKUP_PATH</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>赋予脚本执行权限</strong>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">1</span> * * * /opt/alist/get_token.sh<span class="token number">5</span> <span class="token number">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这将在每天凌晨 1 点自动获取新的 Token，并在五分钟后上传最新的备份文件。</p><h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">1</span> * * * /opt/alist/get_token.sh <span class="token operator">>></span> /var/log/alist_backup.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token number">5</span> <span class="token number">1</span> * * * /opt/alist/upload_backup.sh <span class="token operator">>></span> /var/log/alist_backup.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 AList 完成文件的存储和备份。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo备份</title>
      <link href="/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/"/>
      <url>/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Hexo-和-GitHub-实现多平台工作和数据备份"><a href="#使用-Hexo-和-GitHub-实现多平台工作和数据备份" class="headerlink" title="使用 Hexo 和 GitHub 实现多平台工作和数据备份"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li><li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li></ul><h2 id="为什么要这样做？"><a href="#为什么要这样做？" class="headerlink" title="为什么要这样做？"></a>为什么要这样做？</h2><p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1-初始化-Hexo-项目"><a href="#1-初始化-Hexo-项目" class="headerlink" title="1. 初始化 Hexo 项目"></a>1. 初始化 Hexo 项目</h3><p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init my-blog<span class="token builtin class-name">cd</span> my-blog<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-初始化-Git-仓库"><a href="#2-初始化-Git-仓库" class="headerlink" title="2. 初始化 Git 仓库"></a>2. 初始化 Git 仓库</h3><p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建-hexo-分支"><a href="#3-创建-hexo-分支" class="headerlink" title="3. 创建 hexo 分支"></a>3. 创建 hexo 分支</h3><p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-推送-hexo-分支到-GitHub"><a href="#4-推送-hexo-分支到-GitHub" class="headerlink" title="4. 推送 hexo 分支到 GitHub"></a>4. 推送 hexo 分支到 GitHub</h3><p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/yourusername/yourrepo.git<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Initial commit with Hexo source files"</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p><ol><li>打开你的 GitHub 仓库。</li><li>点击 “Settings”。</li><li>在左侧菜单中点击 “Branches”。</li><li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li></ol><h3 id="5-创建-master-分支"><a href="#5-创建-master-分支" class="headerlink" title="5. 创建 master 分支"></a>5. 创建 master 分支</h3><p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">--orphan</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"# My Blog"</span> <span class="token operator">></span> README.md<span class="token function">git</span> <span class="token function">add</span> README.md<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Initial commit for master branch"</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-配置-Hexo-部署"><a href="#6-配置-Hexo-部署" class="headerlink" title="6. 配置 Hexo 部署"></a>6. 配置 Hexo 部署</h3><p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/yourusername/yourrepo.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-生成和部署静态文件"><a href="#7-生成和部署静态文件" class="headerlink" title="7. 生成和部署静态文件"></a>7. 生成和部署静态文件</h3><p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>hexo clean</code>：清理生成的文件。</li><li><code>hexo generate</code>：生成静态文件。</li><li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li></ul><h3 id="8-推送-Hexo-源文件到-hexo-分支"><a href="#8-推送-Hexo-源文件到-hexo-分支" class="headerlink" title="8. 推送 Hexo 源文件到 hexo 分支"></a>8. 推送 Hexo 源文件到 hexo 分支</h3><p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Update Hexo source files"</span><span class="token function">git</span> push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><ol><li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li><li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装部署Hexo</title>
      <link href="/2024/06/16/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Hexo/"/>
      <url>/2024/06/16/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Hexo-博客"><a href="#安装-Hexo-博客" class="headerlink" title="安装 Hexo 博客"></a>安装 Hexo 博客</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul><li><strong>Windows</strong>：下载并安装 <a href="https://git-scm.com/">Git</a>.</li><li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li><li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li><li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li></ul><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><ul><li><strong>Windows</strong>：通过 <a href="https://github.com/jasongin/nvs">nvs</a>（推荐）或者 <a href="https://github.com/coreybutler/nvm-windows">nvm</a> 安装。</li><li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li><li><strong>Linux（DEB&#x2F;RPM-based）</strong>：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li></ul><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span> $ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span> $ <span class="token function">npm</span> <span class="token function">install</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href="https://hexo.io/themes/">这里</a>查看。<br>例如，安装 <a href="https://solitude.js.org/">hexo-theme-solitude</a> 主题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone <span class="token parameter variable">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> solitude<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pug hexo-renderer-stylus <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="语言配置"><a href="#语言配置" class="headerlink" title="语言配置"></a>语言配置</h3><p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>在本地启动 Hexo 服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器地址栏输入</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">http://localhost:4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png" alt="效果图"></p><h2 id="一键部署到-GitHub-Pages"><a href="#一键部署到-GitHub-Pages" class="headerlink" title="一键部署到 GitHub Pages"></a>一键部署到 GitHub Pages</h2><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 hexo-deployer-git</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 _config.yml</h3><p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/&lt;username<span class="token punctuation">></span>/&lt;project<span class="token punctuation">></span>  <span class="token comment"># example: https://github.com/hexojs/hexojs.github.io</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages <span class="token comment">#分支名称</span>  <span class="token comment"># message自定义提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br><img src="https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
