{
    "version": "https://jsonfeed.org/version/1",
    "title": "陆时忤的博客 • All posts by \"java\" tag",
    "description": "要再见 不要再见",
    "home_page_url": "http://blog.aixcc.top",
    "items": [
        {
            "id": "http://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "url": "http://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "title": "Mac安装JDK",
            "date_published": "2024-07-14T14:13:37.000Z",
            "content_html": "<h1 id=\"Mac-上的-JDK-的安装与卸载\"><a class=\"headerlink\" href=\"#Mac-上的-JDK-的安装与卸载\"></a>Mac 上的 JDK 的安装与卸载</h1>\n<h2 id=\"从-AdoptOpenJDK-到-Temurin\"><a class=\"headerlink\" href=\"#从-AdoptOpenJDK-到-Temurin\"></a>从 AdoptOpenJDK 到 Temurin</h2>\n<h2 id=\"卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#卸载-AdoptOpenJDK\"></a>卸载 AdoptOpenJDK</h2>\n<p>如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：</p>\n<h3 id=\"步骤-1：卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#步骤-1：卸载-AdoptOpenJDK\"></a>步骤 1：卸载 AdoptOpenJDK</h3>\n<p>打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 <a href=\"https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/\">Homebrew 安装指南</a> 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew remove <span class=\"token parameter variable\">--cask</span> adoptopenjdk8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>重复上述命令，替换 <code>adoptopenjdk8</code> 为其他版本号以卸载其他版本的 JDK。</p>\n<h3 id=\"步骤-2：移除-Homebrew-的-Tap\"><a class=\"headerlink\" href=\"#步骤-2：移除-Homebrew-的-Tap\"></a>步骤 2：移除 Homebrew 的 Tap</h3>\n<p>完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew untap AdoptOpenJDK/openjdk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样就和 AdoptOpenJDK 完成了告别。</p>\n<h2 id=\"清除旧的-Oracle-JDK\"><a class=\"headerlink\" href=\"#清除旧的-Oracle-JDK\"></a>清除旧的 Oracle JDK</h2>\n<p>对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：</p>\n<h3 id=\"步骤-3：删除旧的-JDK-文件\"><a class=\"headerlink\" href=\"#步骤-3：删除旧的-JDK-文件\"></a>步骤 3：删除旧的 JDK 文件</h3>\n<p>删除 <code>/Library/Java/JavaVirtualMachines/</code> 目录下的 JDK 文件夹。此外，清理以下位置的内容：</p>\n<ul>\n<li><code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin</code></li>\n<li><code>/Library/PreferencePanes/JavaControlPanel.prefPane</code></li>\n<li><code>~/Library/Application Support/Oracle/Java</code></li>\n</ul>\n<h2 id=\"安装-Temurin-JDK\"><a class=\"headerlink\" href=\"#安装-Temurin-JDK\"></a>安装 Temurin JDK</h2>\n<p>在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。</p>\n<h3 id=\"步骤-4：配置-Homebrew-Cask-版本\"><a class=\"headerlink\" href=\"#步骤-4：配置-Homebrew-Cask-版本\"></a>步骤 4：配置 Homebrew Cask 版本</h3>\n<p>首先，确保你的 Homebrew 能够访问所有 cask 版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew search temurin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"步骤-5：安装-Temurin\"><a class=\"headerlink\" href=\"#步骤-5：安装-Temurin\"></a>步骤 5：安装 Temurin</h3>\n<p>现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token parameter variable\">--cask</span> temurin@8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。</p>\n",
            "tags": [
                "Java",
                "Mac"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "url": "http://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "title": "项目讲解",
            "date_published": "2024-06-27T07:34:31.000Z",
            "content_html": "<h1 id=\"随便写写\"><a class=\"headerlink\" href=\"#随便写写\"></a>随便写写</h1>\n<h3 id=\"登录注册模块\"><a class=\"headerlink\" href=\"#登录注册模块\"></a>登录注册模块</h3>\n<ul>\n<li><strong>注册</strong>：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。</li>\n<li>登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。</li>\n</ul>\n<h3 id=\"前后端分离项目中跨域问题是如何解决的？\"><a class=\"headerlink\" href=\"#前后端分离项目中跨域问题是如何解决的？\"></a>前后端分离项目中跨域问题是如何解决的？</h3>\n<ol>\n<li><strong>注解</strong>：可以通过使用<code>@CrossOrigin</code>注解来解决跨域问题。</li>\n<li><strong>Nginx</strong>：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。</li>\n<li><strong>网关</strong>：使用 GetWay 网关中配置CORS规则，允许跨域请求</li>\n</ol>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "http://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "RabbitMQ应用与总结",
            "date_published": "2024-06-26T15:14:15.000Z",
            "content_html": "<h2 id=\"RabbitMQ常见面试题总结\"><a class=\"headerlink\" href=\"#RabbitMQ常见面试题总结\"></a>RabbitMQ常见面试题总结</h2>\n<h3 id=\"什么是-RabbitMQ？\"><a class=\"headerlink\" href=\"#什么是-RabbitMQ？\"></a>什么是 RabbitMQ？</h3>\n<p>RabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。</p>\n<h3 id=\"RabbitMQ-的组件有哪些？\"><a class=\"headerlink\" href=\"#RabbitMQ-的组件有哪些？\"></a>RabbitMQ 的组件有哪些？</h3>\n<h4 id=\"1-Producer（生产者）\"><a class=\"headerlink\" href=\"#1-Producer（生产者）\"></a>1. Producer（生产者）</h4>\n<ul>\n<li>生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。</li>\n<li>生成者负责创建和发送消息，不直接与队列通信。</li>\n</ul>\n<h4 id=\"2-Exchange（交换器）\"><a class=\"headerlink\" href=\"#2-Exchange（交换器）\"></a>2. Exchange（交换器）</h4>\n<ul>\n<li>交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。</li>\n<li>交换器有不同类型，主要包括：<code>direct</code>、<code>topic</code>、<code>fanout</code>和<code>headers</code>。</li>\n</ul>\n<h5 id=\"Exchange-类型\"><a class=\"headerlink\" href=\"#Exchange-类型\"></a>Exchange 类型</h5>\n<ul>\n<li><strong>Direct Exchange</strong>：根据消息的路由键完全匹配队列的绑定键进行路由。</li>\n<li><strong>Topic Exchange</strong>：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。</li>\n<li><strong>Fanout Exchange</strong>：将消息广播到所有与该交换器绑定的队列，不考虑路由键。</li>\n<li><strong>Headers Exchange</strong>：根据消息的头属性进行路由，相对较少使用。</li>\n</ul>\n<h4 id=\"3-Queue（队列）\"><a class=\"headerlink\" href=\"#3-Queue（队列）\"></a>3. Queue（队列）</h4>\n<ul>\n<li>队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。</li>\n<li>队列按照先进先出的顺序存储消息，可以持久化、镜像等。</li>\n</ul>\n<h4 id=\"4-Bindng（绑定）\"><a class=\"headerlink\" href=\"#4-Bindng（绑定）\"></a>4. Bindng（绑定）</h4>\n<ul>\n<li>绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。</li>\n<li>绑定可以包含路由键和绑定参数，用于匹配消息的路由键。</li>\n</ul>\n<h4 id=\"5-Consumer（消费者）\"><a class=\"headerlink\" href=\"#5-Consumer（消费者）\"></a>5. Consumer（消费者）</h4>\n<ul>\n<li>\n<p>消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。</p>\n</li>\n<li>\n<p>消费者可以是主动拉取消息，也可以是被动推送消息。</p>\n</li>\n</ul>\n<h4 id=\"6-Connection（连接）和Channel（信道）\"><a class=\"headerlink\" href=\"#6-Connection（连接）和Channel（信道）\"></a>6. Connection（连接）和Channel（信道）</h4>\n<ul>\n<li>连接是应用程序与 RabbitMQ 之间的 TCP 连接。</li>\n<li>信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。</li>\n</ul>\n<h4 id=\"7-Virtual-Host（虚拟机）\"><a class=\"headerlink\" href=\"#7-Virtual-Host（虚拟机）\"></a>7. Virtual Host（虚拟机）</h4>\n<ul>\n<li>虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。</li>\n</ul>\n<h4 id=\"8-Broker（代理服务器）\"><a class=\"headerlink\" href=\"#8-Broker（代理服务器）\"></a>8. Broker（代理服务器）</h4>\n<ul>\n<li>Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。</li>\n</ul>\n",
            "tags": [
                "Java",
                "总结",
                "RabbitMQ"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "http://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "MyBatis应用与总结",
            "date_published": "2024-06-26T09:53:37.000Z",
            "content_html": "<h1 id=\"MyBatis常见面试题总结\"><a class=\"headerlink\" href=\"#MyBatis常见面试题总结\"></a>MyBatis常见面试题总结</h1>\n<h3 id=\"和-的区别是什么？\"><a class=\"headerlink\" href=\"#和-的区别是什么？\"></a>#{} 和 ${} 的区别是什么？</h3>\n<ul>\n<li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。</li>\n<li><code>#&#123;&#125;</code>是 sql 的参数占位符，Mybatis 会将 sql 中<code>#&#123;&#125;</code>替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用<code>#&#123;&#125;</code>可以有效防止 sql 注入。</li>\n</ul>\n",
            "tags": [
                "Java",
                "MyBatis",
                "总结"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "http://blog.aixcc.top/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "Spring应用与总结",
            "date_published": "2024-06-22T10:11:04.000Z",
            "content_html": "<h2 id=\"Spring-常见面试题总结\"><a class=\"headerlink\" href=\"#Spring-常见面试题总结\"></a>Spring 常见面试题总结</h2>\n<h3 id=\"什么是Spring框架？\"><a class=\"headerlink\" href=\"#什么是Spring框架？\"></a>什么是Spring框架？</h3>\n<p>Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。</p>\n<h3 id=\"谈谈自己对于Spring-IoC的了解\"><a class=\"headerlink\" href=\"#谈谈自己对于Spring-IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3>\n<p><strong>IoC</strong> （Inversion of Control 控制反转）是一种设计模式，用来实现对象之间的解耦。</p>\n<p>IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。</p>\n<h4 id=\"为什么叫控制反转？\"><a class=\"headerlink\" href=\"#为什么叫控制反转？\"></a>为什么叫控制反转？</h4>\n<ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权利</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<h3 id=\"什么是-Bean？\"><a class=\"headerlink\" href=\"#什么是-Bean？\"></a>什么是 Bean？</h3>\n<p>Bean 就是哪些被 IoC 容器所管理的对象。</p>\n<h3 id=\"Component和-Bean的区别是什么？\"><a class=\"headerlink\" href=\"#Component和-Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3>\n<ul>\n<li>@Component 注解用于类，@Bean 注解用于方法。</li>\n<li>@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我需要的时候给我。</li>\n<li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。</li>\n</ul>\n<h3 id=\"注入Bean的注解有哪些？\"><a class=\"headerlink\" href=\"#注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3>\n<p>Spring 内置的<code>@Autowired</code> 还有 JDK 内置的 <code>@Resource</code> 和 <code>@Inject</code> 都可以用于注入 Bean。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a class=\"headerlink\" href=\"#Autowired和-Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3>\n<ul>\n<li><code>@Autowired</code> 是 Spring 提供的注解，<code>@Resource</code> 是 JDK 提供的注解。</li>\n<li><code>Autowired</code> 默认的注入方式为<code>byType</code>（根据类型进行匹配），<code>@Resource</code>默认注入方式为 <code>byName</code>（根据名称进行匹配）。</li>\n<li>当一个接口存在多个实现类的情况下，<code>@Autowired</code> 和 <code>@Resource</code> 都需要通过名称才能正确匹配到对应的  Bean。<code>Autowired</code> 可以通过 <code>@Qualifier</code> 注解来显式指定名称，<code>@Resource</code> 可以通过 name 属性来显式指定名称。</li>\n<li>@Autowired 支持在构造函数、方法、字段和参数上使用。<code>@Resource</code> 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li>\n</ul>\n<h3 id=\"Bean-的作用域有哪些\"><a class=\"headerlink\" href=\"#Bean-的作用域有哪些\"></a>Bean 的作用域有哪些?</h3>\n<ul>\n<li><strong>Singleton</strong> Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。</li>\n<li><strong>prototype</strong>  每次请求都会创建一个新的 bean 实例。</li>\n<li><strong>Request</strong> 每次 Http 请求都会创建一个新的 bean 实例。</li>\n<li><strong>Session</strong> 每个 Http Session 中会有一个 bean 实例。</li>\n</ul>\n<h3 id=\"Bean-是线程安全的吗？\"><a class=\"headerlink\" href=\"#Bean-是线程安全的吗？\"></a>Bean 是线程安全的吗？</h3>\n<p>在 Spring 中 Bean 是否安全，取决于其作用域和状态。</p>\n<p>单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。</p>\n<h3 id=\"Bean的生命周期了解么？\"><a class=\"headerlink\" href=\"#Bean的生命周期了解么？\"></a>Bean的生命周期了解么？</h3>\n<p>bean 的生命周期分为五个阶段：</p>\n<ol>\n<li>调用构造器或者是通过工厂的方式创建 bean</li>\n<li>给 bean 的属性注入值</li>\n<li>调用初始化方法，进行初始化</li>\n<li>bean 被完全初始化和配置，就可以使用了</li>\n<li>当 IOC 容器关闭的时候，销毁 bean</li>\n</ol>\n<h3 id=\"谈谈对于AOP的了解\"><a class=\"headerlink\" href=\"#谈谈对于AOP的了解\"></a>谈谈对于AOP的了解</h3>\n<p>AOP（面向切面编程）将与业务无关但在多个模块中重复出现的通用逻辑（如事务管理、日志管理、权限控制等）从业务逻辑中分离出来。通过将这些横切关注点封装到独立的模块中，从而减少系统的重复代码，降低模块之间的耦合度，并提高系统的扩展性和可维护性。</p>\n<p>Spring AOP 是通过动态代理来实现切面功能，<strong>JDK动态代理</strong>：用于代理实现了接口的类。<strong>CGLIB代理</strong>：用于代理没有实现接口的类，通过生成目标类的子类来实现。</p>\n<h3 id=\"Spring-AOP-和-AspectJ-AOP-有什么区别？\"><a class=\"headerlink\" href=\"#Spring-AOP-和-AspectJ-AOP-有什么区别？\"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h3>\n<p>Spring AOP 和 AspectJ AOP 的主要区别在于实现机制、功能范围和性能。Spring AOP 基于动态代理实现，主要适用于方法级别的拦截，配置简单，适合大多数常用的 AOP 场景。AspectJ AOP 则基于编译时和类加载时织入，支持更广泛的连接点(如构造函数、字段等)，功能更强大，但配置和使用相对复杂，性能也更高，适用于需要精细控制和高性能场景。</p>\n<h3 id=\"AspectJ-定义的通知类型有哪些？\"><a class=\"headerlink\" href=\"#AspectJ-定义的通知类型有哪些？\"></a>AspectJ 定义的通知类型有哪些？</h3>\n<ul>\n<li>\n<p><strong>Before</strong>（前置通知）：在方法执行之前运行。</p>\n</li>\n<li>\n<p><strong>After</strong>（后置通知）：在方法执行之后运行，无论方法是否成功完成。</p>\n</li>\n<li>\n<p><strong>AfterReturning</strong>（返回通知）：在方法成功完成后运行。</p>\n</li>\n<li>\n<p><strong>AfterThorowing</strong>（异常通知）：在方法抛出异常后运行。</p>\n</li>\n<li>\n<p><strong>Around</strong>（环绕通知）：既可以在方法执行之前运行，也可以在方法执行之后运行。</p>\n</li>\n</ul>\n<h3 id=\"多个切面执行顺序如何控制？\"><a class=\"headerlink\" href=\"#多个切面执行顺序如何控制？\"></a>多个切面执行顺序如何控制？</h3>\n<ol>\n<li>通常使用<code>@Order</code> 注解直接定义切面顺序</li>\n<li>实现<code>Ordered</code>接口重写<code>getOrder</code>方法</li>\n</ol>\n<h3 id=\"说说自己对于-Spring-MVC-了解？\"><a class=\"headerlink\" href=\"#说说自己对于-Spring-MVC-了解？\"></a>说说自己对于 Spring MVC 了解？</h3>\n<p>SpringMVC是一个基于Java的实现了MVC设计模式的轻量级Web框架。它通过分离应用程序的业务逻辑、用户界面和控制流程，简化了Web应用程序的开发和维护。</p>\n<h3 id=\"SpringMVC-的工作流程是什么？\"><a class=\"headerlink\" href=\"#SpringMVC-的工作流程是什么？\"></a>SpringMVC 的工作流程是什么？</h3>\n<ol>\n<li>客户端请求首先到达<code>DispatcherServlet</code>。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerMapping</code>找到具体的处理器（Controller）。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerAdapter</code>调用处理器中的具体方法。</li>\n<li>处理器方法执行完毕后返回<code>ModelAndView</code>对象，包含视图名称和模型数据。</li>\n<li><code>DispatcherServlet</code>使用<code>ViewResolver</code>将视图名称解析为具体的视图。</li>\n<li>最后，<code>DispatcherServlet</code>将模型数据传递给视图，视图渲染并返回响应给客户端。</li>\n</ol>\n<p>客户端发送请求 -&gt; 2. DispatcherServlet接收请求 -&gt; 3. HandlerMapping查找控制器 -&gt; 4. HandlerAdapter调用控制器方法 -&gt; 5. Controller处理请求 -&gt; 6. ViewResolver解析视图 -&gt; 7. 视图渲染 -&gt; 8. 返回响应给客户端</p>\n<h3 id=\"统一异常处理怎么做？\"><a class=\"headerlink\" href=\"#统一异常处理怎么做？\"></a>统一异常处理怎么做？</h3>\n<p>使用注解的方式统一异常处理，使用<code>@controllerAdvice</code>和<code>@ExceptionHandler</code>这两个注解。</p>\n<h3 id=\"Spring-中用到了哪些设计模式？\"><a class=\"headerlink\" href=\"#Spring-中用到了哪些设计模式？\"></a>Spring 中用到了哪些设计模式？</h3>\n<ul>\n<li><strong>工厂设计模式</strong>：Spring 使用工厂模式通过<code>BeanFactory</code>、<code>ApplicationContext</code>创建 bean 对象。</li>\n<li><strong>代理设计模式</strong>：SpringAOP 功能实现。</li>\n<li><strong>单例设计模式</strong>：Spring 中的 Bean 默认都是单例的。</li>\n<li><strong>模版方法模式</strong>：Spring 中<code>jdbcTemplate</code>、<code>hibernateTemplate</code>等以 Template 结尾的对数据库操作的类，都使用到了模版模式。</li>\n<li><strong>包装器设计模式</strong>：项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们刚开业根据客户的需求能够动态切换不同的数据。</li>\n<li><strong>观察者模式</strong>：Spring 事件驱动模型就是观察者模式。</li>\n<li><strong>适配器模式</strong>：Spring AOP 的增强或通知使用到了适配器模式、SpringMVC 中也用到了适配器模式适配<code>Controller</code>。</li>\n</ul>\n<h3 id=\"Spring-循环依赖了解吗，怎么解决？\"><a class=\"headerlink\" href=\"#Spring-循环依赖了解吗，怎么解决？\"></a>Spring 循环依赖了解吗，怎么解决？</h3>\n<p>Spring 中的循环依赖就是指两个及以上的 Bean互相依赖，形成一个循环。比如 BeanA 依赖于 BenaB，而 BeanB 又依赖 BeanA。这种情况可能导致 Spring 容器无法正确初始化这些 Bean。</p>\n<h4 id=\"使用-setter-注入\"><a class=\"headerlink\" href=\"#使用-setter-注入\"></a>使用 setter 注入</h4>\n<p>Spring 中可以通过 Setter 注入解决循环依赖问题，因为Spring 在注入 Bean 的属性时会先创建 Bean 的实例，然后再注入依赖的属性。这样可以保证即使两个 Bean 互相依赖，Spring 也能正确的初始化它们。</p>\n<h4 id=\"使用-Lazy-注解\"><a class=\"headerlink\" href=\"#使用-Lazy-注解\"></a>使用 @Lazy 注解</h4>\n<p>在其中一个 Bean 的依赖上使用<code>@Lazy</code>注解，这样 Spring 容器在首次访问该 Bean 时才会进行初始化，避免循环依赖问题。</p>\n<h3 id=\"Spring-管理事务的方式有几种？\"><a class=\"headerlink\" href=\"#Spring-管理事务的方式有几种？\"></a>Spring 管理事务的方式有几种？</h3>\n<ul>\n<li><strong>编程式事务</strong>：在代码中硬编码（在分布式系统中推荐使用）：通过<code>TranscationTemplate</code>或者<code>TransactionManager</code>在手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。</li>\n<li><strong>声明式事务</strong>：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用）：实际时通过 AOP 实现（基于<code>@Transcational</code>的全注解方式使用最多）</li>\n</ul>\n<h3 id=\"Srping事务中哪几种事务传播行为？\"><a class=\"headerlink\" href=\"#Srping事务中哪几种事务传播行为？\"></a>Srping事务中哪几种事务传播行为？</h3>\n<blockquote>\n<p>事务传播行为是为了解决业务层方法之间互相调用的事务问题。</p>\n<p>当事务方法被另一个事务方法调用时，必须制定事务应该如何传播。</p>\n<p>例如：方法可能继续在现有的事务中运行，也可能开启一个新事物，并在自己的事物中运行。</p>\n</blockquote>\n<ol>\n<li><strong><code>TransactionDefinition.PROPAGATION_REQUIRED</code></strong>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事物。</li>\n</ol>\n<h3 id=\"什么是-SpringBoot？为什么要有-SpringBoot？\"><a class=\"headerlink\" href=\"#什么是-SpringBoot？为什么要有-SpringBoot？\"></a>什么是 SpringBoot？为什么要有 SpringBoot？</h3>\n<p>SpringBoot 可以简化 Spring 开发（减少配置文件、开箱即用 ）</p>\n<h3 id=\"如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"><a class=\"headerlink\" href=\"#如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"></a>如何在 SpringBoot 应用程序中使用 Jetty 而不是 Tomcat？</h3>\n<p>SpringBoot（spirng-boot-starter-web）使用Tomcat 作为默认的嵌入式 servlet 容器，如果想使用 Jetty 的话，只需要修改 pom.xml （Maven）文件就可以了。</p>\n<h3 id=\"介绍一下-SpringBootApplication-注解\"><a class=\"headerlink\" href=\"#介绍一下-SpringBootApplication-注解\"></a>介绍一下 @SpringBootApplication 注解</h3>\n<p><code>@SpringBootApplication</code>可以看作是<code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code>注解的集合。</p>\n<ul>\n<li><code>@Configuration</code>：运行在上下文中注册额外的<code>bean</code>或导入其他配置类</li>\n<li><code>@EnableAutoConfiguration</code>：启用 Springboot 的自动配置机制</li>\n<li><code>@ComponentScan</code>：扫描被<code>@Component</code>(<code>@Service</code>,<code>@Controller</code>)注解的 bean，默认会扫描该类所在的包下的所有的类。</li>\n</ul>\n<h3 id=\"SpringBoot-的自动配置是如何实现的？\"><a class=\"headerlink\" href=\"#SpringBoot-的自动配置是如何实现的？\"></a>SpringBoot 的自动配置是如何实现的？</h3>\n<p>当 SpringBoot 应用启动时，@EnableAutoConfiguration`注解会触发自动配置类的加载。</p>\n<p>SpringBoot 会扫描<code>spring.factories</code>文件，并加载列出自动配置类。然后 SpringBoot 会根据条件注解的判断，决定是否进行相应的配置。</p>\n<h3 id=\"SpringBoot-常用的两种配置文件\"><a class=\"headerlink\" href=\"#SpringBoot-常用的两种配置文件\"></a>SpringBoot 常用的两种配置文件</h3>\n<p>我们可以通过<code>applcation.properties</code>或者<code>application.yml</code>对SpringBoot 程序进行简单的配置。如果不进行配置的话，就是使用默认配置。</p>\n<h3 id=\"什么是-YAML-YAML配置的优势在哪里？\"><a class=\"headerlink\" href=\"#什么是-YAML-YAML配置的优势在哪里？\"></a>什么是 YAML ? YAML配置的优势在哪里？</h3>\n<p>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的树形，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。</p>\n<p>相比 Properties 配置文件，YAML 配置方式更加直观清晰，简洁明了，有层次感。</p>\n<p>但是 YAML 配置文件不支持<code>@PropertySource</code> 注解导入自定义的 YAML 配置。</p>\n<h3 id=\"SpringBoot-常用的读取配置文件的方法有哪些？\"><a class=\"headerlink\" href=\"#SpringBoot-常用的读取配置文件的方法有哪些？\"></a>SpringBoot 常用的读取配置文件的方法有哪些？</h3>\n<ol>\n<li>\n<p>通过<code>@Value(&quot;$&#123;property&#125;&quot;)</code>读取比较简单的配置信息</p>\n<blockquote>\n<p><code>@value</code> 这种方式是不被推荐的</p>\n</blockquote>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperties</code>读取并与 bean 绑定</p>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperies</code>读取并校验</p>\n</li>\n<li>\n<p>通过<code>@PropertySource</code>读取指定的 properties 文件</p>\n</li>\n</ol>\n<h3 id=\"SpringBoot-如何做请求参数校验？\"><a class=\"headerlink\" href=\"#SpringBoot-如何做请求参数校验？\"></a>SpringBoot 如何做请求参数校验？</h3>\n<p>使用 JSR 提供的校验注解</p>\n<h3 id=\"SpringBoot-如何监控系统运行状态？\"><a class=\"headerlink\" href=\"#SpringBoot-如何监控系统运行状态？\"></a>SpringBoot 如何监控系统运行状态？</h3>\n<p>可以使用 SpringBoot Actuator 来对 SpringBoot 项目进行简单的监控。</p>\n<h3 id=\"SpringBoot-中如何实现定时任务？\"><a class=\"headerlink\" href=\"#SpringBoot-中如何实现定时任务？\"></a>SpringBoot 中如何实现定时任务？</h3>\n<p>我们使用<code>@Scheduled</code>注解就能很方便地创建一个定时任务。</p>\n<p>还需要再 SpringBoot 启动类上添加<code>@EnableScheduling</code>注解，这个注解的作用是发现<code>@Scheduled</code>的任务并在后台执行该任务。</p>\n",
            "tags": [
                "Java",
                "总结",
                "Spring"
            ]
        },
        {
            "id": "http://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "http://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "Java集合总结",
            "date_published": "2024-06-22T08:48:56.000Z",
            "content_html": "<h1 id=\"Java集合\"><a class=\"headerlink\" href=\"#Java集合\"></a>Java集合</h1>\n<h3 id=\"说说-List-Set-Queue-Map-四者的区别？\"><a class=\"headerlink\" href=\"#说说-List-Set-Queue-Map-四者的区别？\"></a>说说 List, Set, Queue, Map 四者的区别？</h3>\n<ul>\n<li>\n<p><code>List</code>：存储的元素是有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Set</code>：存储的元素不可重复。</p>\n</li>\n<li>\n<p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Map</code>：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的。</p>\n</li>\n</ul>\n<h2 id=\"List\"><a class=\"headerlink\" href=\"#List\"></a>List</h2>\n<h3 id=\"ArrayList-和-Array-（数组）的区别？\"><a class=\"headerlink\" href=\"#ArrayList-和-Array-（数组）的区别？\"></a>ArrayList 和 Array （数组）的区别？</h3>\n<ul>\n<li><strong>ArrayList</strong>：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。</li>\n<li><strong>Array（数组）</strong>：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。</li>\n</ul>\n<h3 id=\"ArrayList-可以添加-null-吗？\"><a class=\"headerlink\" href=\"#ArrayList-可以添加-null-吗？\"></a>ArrayList 可以添加 null 吗？</h3>\n<p><code>ArrayList</code>中可以存储任何类型的对象，包括<code>null</code>。</p>\n<h4 id=\"ArrayList和LinkedList的区别是什么？\"><a class=\"headerlink\" href=\"#ArrayList和LinkedList的区别是什么？\"></a>ArrayList和LinkedList的区别是什么？</h4>\n<ul>\n<li><strong>ArrayList</strong> 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。</li>\n<li>**LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。</li>\n</ul>\n<h3 id=\"ArrayList如何去重？\"><a class=\"headerlink\" href=\"#ArrayList如何去重？\"></a>ArrayList如何去重？</h3>\n<ol>\n<li><strong>使用HashSet</strong>：通过<code>HashSet</code>的特性去重，然后转换回<code>ArrayList</code>。</li>\n<li><strong>使用Stream API</strong>：使用Java 8引入的Stream的<code>distinct()</code>方法去重。</li>\n<li><strong>手动遍历</strong>：手动遍历<code>ArrayList</code>并使用另一个<code>ArrayList</code>存储不重复的元素。</li>\n</ol>\n<h2 id=\"Map\"><a class=\"headerlink\" href=\"#Map\"></a>Map</h2>\n<h3 id=\"HashMap和LinkedHashMap的区别？\"><a class=\"headerlink\" href=\"#HashMap和LinkedHashMap的区别？\"></a>HashMap和LinkedHashMap的区别？</h3>\n<p><code>LinkedHashMap</code>继承自<code>HashMap</code>，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。</p>\n<h3 id=\"HashMap-和-HashTable-有什么区别？\"><a class=\"headerlink\" href=\"#HashMap-和-HashTable-有什么区别？\"></a>HashMap 和 HashTable 有什么区别？</h3>\n<p>因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。</p>\n<h4 id=\"初始化容量和扩容方式：\"><a class=\"headerlink\" href=\"#初始化容量和扩容方式：\"></a>初始化容量和扩容方式：</h4>\n<ul>\n<li><strong>HashMap</strong>：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。</li>\n<li><strong>Hashtable</strong>：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1</li>\n</ul>\n<h3 id=\"ConcurrentHashMap和Hashtable的区别\"><a class=\"headerlink\" href=\"#ConcurrentHashMap和Hashtable的区别\"></a>ConcurrentHashMap和Hashtable的区别?</h3>\n<p><code>ConcurrentHashMap</code>和<code>Hashtable</code>都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。</p>\n<ul>\n<li>\n<p><strong>实现机制</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。</li>\n<li><code>Hashtable</code>使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。</li>\n</ul>\n<p><strong>性能</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。</li>\n<li><code>Hashtable</code>性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。</li>\n</ul>\n<p><strong>锁粒度</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。</li>\n<li><code>Hashtable</code>锁粒度大，所有操作都需要获取全表锁，降低了并发能力。</li>\n</ul>\n<p><strong>Null键和值</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>不允许存储<code>null</code>键和<code>null</code>值，尝试存储<code>null</code>会抛出<code>NullPointerException</code>。</li>\n<li><code>Hashtable</code>也不允许存储<code>null</code>键和<code>null</code>值，存储<code>null</code>时会抛出<code>NullPointerException</code>。</li>\n</ul>\n<p><strong>迭代器安全性</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出<code>ConcurrentModificationException</code>，但不保证读取到的值是最新的。</li>\n<li><code>Hashtable</code>提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出<code>ConcurrentModificationException</code>。</li>\n</ul>\n<h3 id=\"总结：\"><a class=\"headerlink\" href=\"#总结：\"></a>总结：</h3>\n<ul>\n<li><strong>ConcurrentHashMap</strong>适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许<code>null</code>键和值。</li>\n<li><strong>Hashtable</strong>适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许<code>null</code>键和值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HashMap-的底层原理\"><a class=\"headerlink\" href=\"#HashMap-的底层原理\"></a>HashMap 的底层原理</h3>\n<h5 id=\"1-数据结构\"><a class=\"headerlink\" href=\"#1-数据结构\"></a>1. 数据结构</h5>\n<p><code>HashMap</code>底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。</p>\n<ul>\n<li><strong>数组</strong>：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。</li>\n<li><strong>链表</strong>：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。</li>\n<li><strong>红黑树</strong>：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。</li>\n</ul>\n<h5 id=\"2-插入元素\"><a class=\"headerlink\" href=\"#2-插入元素\"></a>2. 插入元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>检查该位置是否已经有元素：\n<ul>\n<li>如果没有元素，直接插入。</li>\n<li>如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-查找元素\"><a class=\"headerlink\" href=\"#3-查找元素\"></a>3. 查找元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中查找匹配键，返回对应的值。</li>\n</ol>\n<h5 id=\"4-删除元素\"><a class=\"headerlink\" href=\"#4-删除元素\"></a>4. 删除元素</h5>\n<ul>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。</li>\n</ul>\n<h5 id=\"5-扩容机制\"><a class=\"headerlink\" href=\"#5-扩容机制\"></a>5. 扩容机制</h5>\n<p>当<code>HashMap</code>中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：</p>\n<ol>\n<li>创建一个新的数组，容量是原来的两倍。</li>\n<li>将原数组中的所有元素重新哈希并放入新数组中。</li>\n<li>重新调整链表或红黑树结构。</li>\n</ol>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>数据结构</strong>：<code>HashMap</code>使用数组、链表和红黑树存储元素。</li>\n<li><strong>哈希算法</strong>：通过键的<code>hashCode()</code>计算哈希值，并通过哈希值确定数组索引。</li>\n<li><strong>插入元素</strong>：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。</li>\n<li><strong>查找元素</strong>：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。</li>\n<li><strong>删除元素</strong>：定位到数组索引，删除链表或红黑树中的节点。</li>\n<li><strong>扩容机制</strong>：当元素数量超过阈值时，<code>HashMap</code>会自动扩容，重新分配数组并调整元素位置。</li>\n</ul>\n",
            "tags": [
                "Java",
                "笔记"
            ]
        }
    ]
}