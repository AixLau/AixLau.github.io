{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/solitude/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/404.avif","path":"img/404.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/JavaBasics.jpg","path":"img/JavaBasics.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/JavaCollection.png","path":"img/JavaCollection.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/VaultwardenBuild.png","path":"img/VaultwardenBuild.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/alistback.jpg","path":"img/alistback.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/avatar.avif","path":"img/avatar.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/black.gif","path":"img/black.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/cover.png","path":"img/cover.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/default.avif","path":"img/default.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/error_load.avif","path":"img/error_load.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/flower.gif","path":"img/flower.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/happy-sticker.avif","path":"img/happy-sticker.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/jinkesi.jpg","path":"img/jinkesi.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/loading.avif","path":"img/loading.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/he.gif","path":"img/he.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/mysqlbaguwen.png","path":"img/mysqlbaguwen.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/recent_c.avif","path":"img/recent_c.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/springbaguwen.png","path":"img/springbaguwen.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/map-dark.png","path":"img/map-dark.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/map-light.png","path":"img/map-light.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/hour 2024-06-24 at 21.08.03.png","path":"img/hour 2024-06-24 at 21.08.03.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/music.js","path":"js/music.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/right_menu.js","path":"js/right_menu.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/right_menu.js.back","path":"js/right_menu.js.back","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/third_party/snackbar.min.css","path":"css/third_party/snackbar.min.css","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/third_party/tianli_talk.styl","path":"css/third_party/tianli_talk.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/browser.icns","path":"img/pwa/browser.icns","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/favicon.ico","path":"img/pwa/favicon.ico","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/wu.ico","path":"img/pwa/wu.ico","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/covercolor/api.js","path":"js/covercolor/api.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/covercolor/local.js","path":"js/covercolor/local.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/search/local.js","path":"js/search/local.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/barrage.min.js","path":"js/third_party/barrage.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/efu_ai.min.js","path":"js/third_party/efu_ai.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/envelope.min.js","path":"js/third_party/envelope.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/universe.min.js","path":"js/third_party/universe.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/waterfall.min.js","path":"js/third_party/waterfall.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5787beafb667c33f78d396b047fbf2416c93be83","modified":1719242213299},{"_id":"source/_posts/.DS_Store","hash":"8ea7ed2cf1305cb17e41823e3900a83715cd2338","modified":1718973774148},{"_id":"source/_posts/Linux安装MySQL.md","hash":"ba03fb27ae0830e06e3d668adede44051d4824a9","modified":1719291947106},{"_id":"source/_posts/Java集合八股文.md","hash":"afb20215af1a67e6723cb623c6b66bd343b5d683","modified":1719047683869},{"_id":"source/_posts/Java基础八股文.md","hash":"d23705b6254cc54f5dd8298b355d712ba4af614a","modified":1719241767715},{"_id":"source/_posts/Myql八股文.md","hash":"316503ba950d756050f1d4950738a303608433b6","modified":1719111291206},{"_id":"source/_posts/Spring八股文.md","hash":"419ca4ccc8b58ec983c8d35f53c92f726561f2e0","modified":1719112646549},{"_id":"source/_posts/Hexo备份.md","hash":"3259c95026901deffbcfaa6fa9d8594999938205","modified":1718610482441},{"_id":"source/_posts/Vaultwarden搭建.md","hash":"43a9ed6864f2bb5b4ec9252e129343debbf4e627","modified":1719225459919},{"_id":"source/_posts/使用AList定时备份服务器文件.md","hash":"49368b4546bf81a59c3c922a7e36d1066273b60e","modified":1719026650814},{"_id":"source/_posts/服务器安全设置.md","hash":"488854cf632d0843e42702db2773928d6345d87c","modified":1719290621773},{"_id":"source/_posts/自动续签证书.md","hash":"5e8ec4462c1fb2c4f75974d45c72164a49512860","modified":1719241718323},{"_id":"source/_posts/安装部署Hexo.md","hash":"627cc6ca92b00749ad1a55ad8dcca798c6ce19be","modified":1718715891728},{"_id":"source/about/index.md","hash":"fed00b9c89122caac554b3996b6fab369dedeb36","modified":1718702191510},{"_id":"source/_data/about.yaml","hash":"55204b9982488777d906ef605596c0f5aaf32fd4","modified":1719115228416},{"_id":"source/message/index.md","hash":"28b2fef1886c8833aff0fe083ec6b21448b60f5a","modified":1718706589383},{"_id":"themes/solitude/package.json","hash":"fbd7cfc6491170eebe728da8b5b0e3b39a42233f","modified":1718524309977},{"_id":"themes/solitude/.DS_Store","hash":"a16b46d688fa551fca0644f48697560beaa2c068","modified":1719206702377},{"_id":"themes/solitude/plugins.yml","hash":"b27234a324acb06548a7d5af684d386fab525e9b","modified":1718524309977},{"_id":"themes/solitude/languages/default.yml","hash":"b735a1cb8cf9cec32ea5b57fd9d1d1b48a04f395","modified":1718524309955},{"_id":"themes/solitude/languages/en.yml","hash":"d1cbb92bc6356141b680142f055274643d907022","modified":1718524309955},{"_id":"themes/solitude/languages/zh-CN.yml","hash":"355642bde520375afad47eb34fc8114b8b28bec9","modified":1718546938639},{"_id":"themes/solitude/_config.yml","hash":"08157bbf5f9f02a2c28a2e78c1074fcfa2395897","modified":1718524309955},{"_id":"themes/solitude/layout/.DS_Store","hash":"9be8f851a44a414aa5c506b6f2e05ed9f4d73b7d","modified":1718798563304},{"_id":"themes/solitude/languages/zh-TW.yml","hash":"b5f1b044aa3c305a3d31ca776f88eed2793efd36","modified":1718524309955},{"_id":"themes/solitude/layout/404.pug","hash":"2f01681a8c46ecea5ff1168efae39d17480f96a3","modified":1718524309956},{"_id":"themes/solitude/layout/index.pug","hash":"a190b82319ddbbcba7c6001238b3e82aaf72f350","modified":1718524309976},{"_id":"themes/solitude/layout/archive.pug","hash":"0630a92b8f16139c135aac1b14403a620a52654c","modified":1718524309956},{"_id":"themes/solitude/layout/page.pug","hash":"003b4acdd4cc47e8365cf296d788f977a0d4edc8","modified":1718524309976},{"_id":"themes/solitude/layout/category.pug","hash":"482f1971cf5221250b53c89a1cfb16317f6c9d59","modified":1718524309956},{"_id":"themes/solitude/layout/post.pug","hash":"b4cb9aa8c1200d8c2b9547ee2e11cd30edd22915","modified":1718524309977},{"_id":"themes/solitude/layout/tag.pug","hash":"21d19688b557dda1c9e26c488f7b3b00bbef8071","modified":1718524309977},{"_id":"themes/solitude/layout/includes/console.pug","hash":"fb12256843440a776eaaf5cd254042dd1f1284ae","modified":1718524309956},{"_id":"themes/solitude/scripts/.DS_Store","hash":"b0fe9d832d88d49a14b90b94ee49e48995dcb96a","modified":1718615982289},{"_id":"themes/solitude/layout/includes/footer.pug","hash":"8f3e2f50d961511dc36da4b54dce1193edcebe8d","modified":1718524309957},{"_id":"themes/solitude/layout/includes/head.pug","hash":"ed6afa31ade7d95e143268034108138bf2e939fd","modified":1718524309957},{"_id":"themes/solitude/layout/includes/header.pug","hash":"426fe2e61a12c77c317d11197a3ce7d7d8bb602d","modified":1718524309958},{"_id":"themes/solitude/layout/includes/keyboard.pug","hash":"4958dd9232c790c5aa4156e0fdcd4cdf72bfc7b6","modified":1718524309958},{"_id":"themes/solitude/source/.DS_Store","hash":"233157387a3c1d540c23278cfc25b5f97347adb2","modified":1719206697374},{"_id":"themes/solitude/layout/includes/layout.pug","hash":"6fb4feec0a3fa2345631367532332ce25a838ec8","modified":1718524309959},{"_id":"themes/solitude/layout/includes/nav.pug","hash":"94bf062f4eff029f6b482e17ef425a06cd535ddf","modified":1718524309960},{"_id":"themes/solitude/scripts/event/cdn.js","hash":"c7c8b923d6b634ccf4e9db07ad0fc24001a05859","modified":1718524309978},{"_id":"themes/solitude/scripts/event/init.js","hash":"078f872a8fb0f373623bd1211ac5064e3d4c21fd","modified":1718524309978},{"_id":"themes/solitude/layout/includes/rightmenu.pug","hash":"3ffe6efc73800d77752e7c8845705853580c2cbd","modified":1718547733085},{"_id":"themes/solitude/scripts/event/page.js","hash":"20cf3726cc7bb01b1cd58c85148ec1cd1de258c8","modified":1718524309978},{"_id":"themes/solitude/scripts/event/welcome.js","hash":"06752fe1fc9d5be212c236f68df3d2bc9379c02c","modified":1718524309979},{"_id":"themes/solitude/scripts/event/merge_config.js","hash":"da33d2393956a56c6ecd8d052458d5dd67bfbc5e","modified":1718524309978},{"_id":"themes/solitude/scripts/filter/checkThemeConfig.js","hash":"13d0e44048caedd9474729a16a72abe054367e57","modified":1718524309979},{"_id":"themes/solitude/scripts/filter/comment.js","hash":"047365413fdc87b97be09de76cdbf090751be2b6","modified":1718524309979},{"_id":"themes/solitude/scripts/filter/default.js","hash":"bfad3ab780b2cb3f9d43172a96d4ae81dab7f32d","modified":1718524309979},{"_id":"themes/solitude/scripts/filter/lazyload.js","hash":"5ad9d91958901e43d65f5aad12d5b617095bf74d","modified":1718524309980},{"_id":"themes/solitude/scripts/filter/post_image.js","hash":"fd6cc64c6875d8f9ba9a8b0a9366adfbd6ca364d","modified":1718524309980},{"_id":"themes/solitude/scripts/filter/randomPosts.js","hash":"2d2976d905c0b78407e6a297fa9cd373cd60107e","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/getArchiveLength.js","hash":"5b65fff0da05e6b3f5a33558fdb2ad5769ade2c6","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/inject_head_js.js","hash":"04df621b0cac394f1d851856fc4d84dded4eeea4","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/page.js","hash":"d0a5b107157ee05783b0a3f66f4996aef8281f54","modified":1718524309980},{"_id":"themes/solitude/scripts/helper/related_post.js","hash":"77d57e69ada5cfaab14a66914ebe58122ea29a31","modified":1718524309981},{"_id":"themes/solitude/scripts/helper/stylus.js","hash":"24fa5ba297f4eff006fa7a8d9a10ec58628a8c91","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/bvideo.js","hash":"23b2ee01d3c8842b566b8a031c0b4e34dfbbba4c","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/button.js","hash":"ceb4f6c59dd4bdb486b7becc8f103e3499cd20cd","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/checkbox.js","hash":"e39ad4654c5f8fe7d7ddb8bf08405f473612cb9f","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/fold.js","hash":"57e1e9d1e0ca4afbb2d61e130505e75ec7a41b2b","modified":1718524309981},{"_id":"themes/solitude/scripts/tags/gallery.js","hash":"4f24dc82873e3e27725bc7d52a50c13e273c4b27","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/image.js","hash":"4b33e20b3cc3bf86be1bb5c4ecba897d20fc8ef6","modified":1718524309982},{"_id":"themes/solitude/layout/includes/loading.pug","hash":"e2c7004a919d3c7c5e72d67818a66dfbebb3912e","modified":1718524309959},{"_id":"themes/solitude/scripts/tags/inline-image.js","hash":"9c83a721de318741ac46820e3a2161b2bdc04d4f","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/link.js","hash":"203b0b0de0942a3181362fdef09572e9da236e33","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/label.js","hash":"b018b96c43ccb62c307fec3694411c1adedd1a02","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/media.js","hash":"07a16f310cc41cb0c66396a508c7ed6ca651132e","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/note.js","hash":"b5d5b15d8a5f95722abe46370e9b907276b8d739","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/mermaid.js","hash":"37a95d6c4392ff6c24ff757fbbc3cdf7853c2096","modified":1718524309982},{"_id":"themes/solitude/scripts/tags/span.js","hash":"07881e3c8f81458422561612b85fb349a848dc5c","modified":1718524309983},{"_id":"themes/solitude/scripts/tags/timeline.js","hash":"1abd201ffd04ac45fff3e47ef6c38306f10a625e","modified":1718524309983},{"_id":"themes/solitude/scripts/tags/tabs.js","hash":"21ea420331b4e0d39aec6dc387d6d1f40c5f8f39","modified":1718524309983},{"_id":"themes/solitude/layout/includes/sidebar.pug","hash":"375d6aa9cc7324638796a83fe5c877a2d006a1bf","modified":1718524309962},{"_id":"themes/solitude/source/css/.DS_Store","hash":"15bac2f3727460e424d7b8ecd30c9ab6165d3965","modified":1718798588182},{"_id":"themes/solitude/source/css/var.styl","hash":"38822b1747021643fd9ddd23f09189c9e06f4d56","modified":1718524310001},{"_id":"themes/solitude/source/css/index.styl","hash":"5468f0565df0b36e8377ee7ee545683ae83adbdf","modified":1718539765331},{"_id":"themes/solitude/source/img/404.avif","hash":"c1457bb8020167d65f83aba7bc3dd1317595b62a","modified":1718524310001},{"_id":"themes/solitude/layout/includes/.DS_Store","hash":"0e859d90881bca5ecc5cb2a830a5ac96182e704e","modified":1718798581379},{"_id":"themes/solitude/source/img/.DS_Store","hash":"91155bc0cd56570657a532dfd1607e56932e47b8","modified":1719111247183},{"_id":"themes/solitude/source/img/avatar.avif","hash":"3c63aa3309bc9d7959b4fdd5bed80f7535b4b25d","modified":1718524310001},{"_id":"themes/solitude/source/img/default.avif","hash":"3ea1493ebc8b3abc3c90aa1d200aeafc800e7143","modified":1718524310001},{"_id":"themes/solitude/source/img/error_load.avif","hash":"9e0796948e890e19e98709cf55dee0367afd69e7","modified":1718524310001},{"_id":"themes/solitude/source/img/happy-sticker.avif","hash":"3bded9b4bc40580f4d6d5f16170122d95873f741","modified":1718524310002},{"_id":"themes/solitude/source/img/loading.avif","hash":"82c6e14e40975f9ae0acee8a30d2dc1f46c2831f","modified":1718524310003},{"_id":"themes/solitude/source/img/recent_c.avif","hash":"77e0f348d2e3c12ca17711be365ea5b28f35a2d9","modified":1718524310003},{"_id":"themes/solitude/source/js/main.js","hash":"b05bb8644a41b4183c38c31bf179f4184b227c01","modified":1718542867489},{"_id":"themes/solitude/source/js/music.js","hash":"31248632c598d720607e0d54fe3b928ded5ed0a1","modified":1718524310004},{"_id":"themes/solitude/source/js/.DS_Store","hash":"93bfbcab1cd8490fb68375a9b65c20a3825f8e80","modified":1718606071800},{"_id":"themes/solitude/source/js/right_menu.js","hash":"3b62c4d52c6e6979d53fcfa3e17585ca55b3243e","modified":1718546505790},{"_id":"themes/solitude/source/js/tw_cn.js","hash":"3792da52fec1e85e5f99b45d91a0652cfde42715","modified":1718524310007},{"_id":"themes/solitude/layout/includes/body/gadsense.pug","hash":"04749b45bb928a0a4aa02fb25d2f5ffd777d8fb4","modified":1718524309956},{"_id":"themes/solitude/source/js/right_menu.js.back","hash":"42f9fb762c55cf6c13947eb71ac2fb3ac874df13","modified":1718524310005},{"_id":"themes/solitude/layout/includes/body/mode.pug","hash":"a761f72d12a474edb4d23a5c743c0c3da54fcfcb","modified":1718524309956},{"_id":"themes/solitude/source/js/utils.js","hash":"9d41d45df4575b985d9888d39b7bfa12ae03f50e","modified":1718524310007},{"_id":"themes/solitude/layout/includes/head/config.pug","hash":"00c5b2264fb40c881d7eb5be9ddeeeeb32cb18b6","modified":1718524309957},{"_id":"themes/solitude/layout/includes/head/opengraph.pug","hash":"43f1ba2b258c65146fe5bda25fcfb9c137e86a46","modified":1718524309957},{"_id":"themes/solitude/layout/includes/head/pwa.pug","hash":"701c387eb658273e5aca5b09ce06b5699f339f6f","modified":1718524309958},{"_id":"themes/solitude/layout/includes/head/page_config.pug","hash":"1e4f482cbb4622217fcf38d31c7a51f826a245b9","modified":1718524309957},{"_id":"themes/solitude/layout/includes/inject/body.pug","hash":"f0038b6e1f2159896f1ef8dd500c9738255c7f22","modified":1718524309958},{"_id":"themes/solitude/layout/includes/inject/head.pug","hash":"9c3f77c23b33bdacdc8473a14722b8f5dee51080","modified":1718524309958},{"_id":"themes/solitude/layout/includes/mixins/articleSort.pug","hash":"bfcf8974782256b9eeadcaabec6b2b328ce977a1","modified":1718524309959},{"_id":"themes/solitude/layout/includes/mixins/pagination.pug","hash":"705d359fa0c0de1cdfeca23c70addfe422ed75a6","modified":1718524309959},{"_id":"themes/solitude/layout/includes/page/about.pug","hash":"97635d815b395ffad8d0eb4100bd1fb929541b0f","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/default.pug","hash":"0a04fe49003eb1ed2138e67113c927d6f76ba5d4","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/categories.pug","hash":"9db96fa0fc6f8b511515d2eccb2d8ad204e4a570","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/equipment.pug","hash":"678623c2b6a26e6b6577490d33dd1d65d191b0fa","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/links.pug","hash":"8e4231d92c953ed2c2bfb3cd8a22ed57fd37f4e7","modified":1718524309960},{"_id":"themes/solitude/layout/includes/page/message.pug","hash":"9fc88429676b9a504239393e0f0d9a5534d1b267","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/music.pug","hash":"6b6d8532359fc66ed3ce9524e22f72b72166bf7c","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/recentcomment.pug","hash":"40d2253027e8b9e5f64647c7550ea844dc6267e0","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/says.pug","hash":"353ae95049435b1324249149e5828618cddfd5aa","modified":1718524309961},{"_id":"themes/solitude/layout/includes/page/tags.pug","hash":"b0b8e046f620b5de04d68ce0d8f9c4cd048b9fd8","modified":1718524309961},{"_id":"themes/solitude/layout/includes/widgets/randomlink.pug","hash":"0b85acc2b80d29cfb8f387dd03e58b2b4e4687c6","modified":1718524309972},{"_id":"themes/solitude/source/css/_comments/comment.styl","hash":"ddd1abf9b15159d258309dbd2356be9967ca560e","modified":1718524309984},{"_id":"themes/solitude/layout/includes/page/tlink.pug","hash":"d203b8f68bd8f10d8a576da746e3c529d3beb08f","modified":1718524309962},{"_id":"themes/solitude/source/css/_comments/twikoo.styl","hash":"70b5df505baf9a426dadf030a2389792091a4173","modified":1718524309984},{"_id":"themes/solitude/layout/includes/widgets/.DS_Store","hash":"7088c88e06d7828d78b24ad3d6aaa9bc9f1535cc","modified":1718615942014},{"_id":"themes/solitude/source/css/_comments/valine.styl","hash":"b74621f4bb81f01d706a18ead8787ed2885fea26","modified":1718524309984},{"_id":"themes/solitude/source/css/_global/animation.styl","hash":"a5db581319e2d5449da63f86111bacc0d22f73e5","modified":1718524309984},{"_id":"themes/solitude/source/css/_global/function.styl","hash":"47df2fbc5f7ce96256600760a42101dff87f6444","modified":1718524309985},{"_id":"themes/solitude/source/css/_global/index.styl","hash":"ad4d237274699cd01e75552f880abbe31ded888d","modified":1718524309985},{"_id":"themes/solitude/source/css/_layout/article-container.styl","hash":"5a80abab59313541586f2d1723c97b27d2afdb81","modified":1718524309987},{"_id":"themes/solitude/source/css/_layout/article-sort.styl","hash":"17cd0b192e2e7a37cefef31d360856efe3279671","modified":1718524309987},{"_id":"themes/solitude/source/css/_layout/capsule.styl","hash":"e157d4747cda0b8bd454df47e4e03dd952ba1549","modified":1718524309988},{"_id":"themes/solitude/source/css/_layout/aside.styl","hash":"1cde501f84a95b222deebaf66ebd01c1d82f8c45","modified":1718524309988},{"_id":"themes/solitude/source/css/_layout/footer.styl","hash":"551120a4ef9329741019fa897303c3475ac01141","modified":1718524309989},{"_id":"themes/solitude/source/css/_layout/console.styl","hash":"e6ddde696f58e7f5964d49954217057a4ab8bd69","modified":1718524309988},{"_id":"themes/solitude/source/css/_layout/fullpage.styl","hash":"b0f0f361dee1ee0ea2de3372fb977e78c091de07","modified":1718524309989},{"_id":"themes/solitude/source/css/_layout/keyboard.styl","hash":"01b81e8de4f449100257dba679d36e351ee98bf2","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/header.styl","hash":"67d082ce9f91a53b3bbeed57f2ac1ab0c4370fd0","modified":1718524309989},{"_id":"themes/solitude/source/css/_layout/pagination.styl","hash":"b5f66655e8cad414c5feea55b6bbce7da53d7332","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/other.styl","hash":"844d16b1b1e53a38ea390bb4e376132d17105dcc","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/pace.styl","hash":"3f42bc6c0c4aad0c2e7304b748f5b91e51050678","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/recent-post.styl","hash":"86fe2b6830d65202c39f463121d5d0d9a107d752","modified":1718524309990},{"_id":"themes/solitude/source/css/_highlight/color.styl","hash":"619c0e7592248b443849139825aa7905513dc2b9","modified":1718524309985},{"_id":"themes/solitude/source/css/_layout/rightmenu.styl","hash":"0fb403d5d0c1241a7217a251538202f4a70ccc7b","modified":1718524309990},{"_id":"themes/solitude/source/css/_layout/universe.styl","hash":"f5850f6be5159e90f0db067f9017dab4dbcf94e7","modified":1718524309991},{"_id":"themes/solitude/source/css/_highlight/index.styl","hash":"2e70f7cd9d3ec9b4ddf5e39b73b6c4a677ebd6ac","modified":1718524309986},{"_id":"themes/solitude/source/css/_layout/sidebar.styl","hash":"dd9d0ac4ae11cf922bd8ba9cb6ea19fd0c9378f8","modified":1718524309991},{"_id":"themes/solitude/source/css/_mode/index.styl","hash":"a7848503e0aed2cb572136394e5e6743438c8526","modified":1718524309991},{"_id":"themes/solitude/source/css/_page/category.styl","hash":"76e9aee0e74322caa0c2bf6bd752e7c552a994a7","modified":1718524309994},{"_id":"themes/solitude/source/css/_page/.DS_Store","hash":"fe984da327ad4e3b76bac7ccc3511068b4fc74a0","modified":1718798588183},{"_id":"themes/solitude/source/css/_page/equipment.styl","hash":"a5468797c26d823df24d46a1b0d2b3d1b7bc1806","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/index.styl","hash":"0f37a927fee868b9fea12f38e77ae2f4bf437d33","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/error.styl","hash":"3791295a503c323942f701e2707930a3a41bef7b","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/links.styl","hash":"d448e5f89d8b2b038c22943eba7c94154ef77abb","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/google.styl","hash":"aff534685e24724e0b46009031c838f73ea8a552","modified":1718524309995},{"_id":"themes/solitude/source/css/_page/message.styl","hash":"54d60bc6d6fbb18d62018b06c3d28e038227800c","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/music.styl","hash":"0c2902b4522435135dbeb64557b3c6e32e070e6a","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/other.styl","hash":"befd1aa9f6aa405513e198a560b14c9bb584e2bc","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/recentcomment.styl","hash":"1d5344ebbb72338441a219e104e0670d625016a5","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/says.styl","hash":"d8b5e5dde2f5e7477d8684e4b0aab426295f9ec6","modified":1718524309996},{"_id":"themes/solitude/source/css/_page/tag.styl","hash":"33352a6b4b1e5c20deccaa3a9fcf01c7d2b3286f","modified":1718524309996},{"_id":"themes/solitude/source/css/_post/ads.styl","hash":"11f79ab8daf53fc3886795bc06e4ad6991a07625","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/commentBarrage.styl","hash":"2b6357972053ab1355ee17fd43a6a684621bfa87","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/index.styl","hash":"9f3b388b984cef920e4efc9c33c810d563d7c932","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/copyright.styl","hash":"b2afffab2be10b2c75991bf0e7db2e18fcf1ed4f","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/meta.styl","hash":"a4799af783998868355368571877b226a28fdfa4","modified":1718524309997},{"_id":"themes/solitude/source/css/_post/postAI.styl","hash":"01edbeb14cbb8492a375fedf2adc667b08e71fe9","modified":1718524309998},{"_id":"themes/solitude/source/css/_post/pagination.styl","hash":"f805e982868225349d94fff4154971719004a1ba","modified":1718524309998},{"_id":"themes/solitude/source/css/_post/relatedPost.styl","hash":"57c2dd05582a291da7a0ab52b00c128c8b535ea3","modified":1718524309998},{"_id":"themes/solitude/source/css/_post/tools.styl","hash":"c5ac1d9fd0aa95bba645030f3bad2ed1d81ccfcb","modified":1718524309998},{"_id":"themes/solitude/source/css/_search/local-search.styl","hash":"827abf80d7c6442249a163191d29404574ed0227","modified":1718524309998},{"_id":"themes/solitude/source/css/_search/algolia-search.styl","hash":"3078cce2c4329669a5d42305274410cd1d6c580c","modified":1718524309998},{"_id":"themes/solitude/source/css/_tags/button.styl","hash":"7e89fe069a62b77ea13315dab6c5a66178294dc1","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/fold.styl","hash":"a5a77e64d216d5bbc816d100ff7921aad0ede9fa","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/checkbox.styl","hash":"5c90bc01e1f6967b57d9a606faf8b3135f0eda96","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/gallery.styl","hash":"0a6fbaa4e884ac92cbcf1e3eace8e384b839de61","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/index.styl","hash":"03fc61ba1d55010d42a9cff064ecb8f59a0efba5","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/label.styl","hash":"ca9b4940f48f1b2e0bc0b35fb9e1b9353cc6cbb8","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/link.styl","hash":"500c9a8e305fa46f0605af0313c065aae968abec","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/media.styl","hash":"05a249c807cd7760492a9ef5914b3e363d7d1028","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/mermaid.styl","hash":"2fcdfbf364232101f6a0fb4f7cd7180a99e63ec4","modified":1718524309999},{"_id":"themes/solitude/source/css/_tags/note.styl","hash":"17c9c830681547a471a89d6f74f755f99a7b8a7c","modified":1718524310000},{"_id":"themes/solitude/source/css/_tags/span.styl","hash":"162df35be25ac7de577b6693a7e51e39cf6adff8","modified":1718524310000},{"_id":"themes/solitude/source/css/_tags/tabs.styl","hash":"21922ed6e6963185df2221fa6f756ab092ee20f3","modified":1718524310000},{"_id":"themes/solitude/source/css/third_party/snackbar.min.css","hash":"859ff4766cb4feebb5f5d270de48a97a6dcc6e0e","modified":1718524310000},{"_id":"themes/solitude/source/css/third_party/tianli_talk.styl","hash":"4fc8a0a4b476f36973f4a44784e8a1dce4a6e517","modified":1718524310001},{"_id":"themes/solitude/source/css/_tags/timeline.styl","hash":"6977aa9f3f69289b41b550be26fad05b87b931d4","modified":1718524310000},{"_id":"themes/solitude/source/img/pwa/.DS_Store","hash":"457245b13dcea873f15df10db5956a7a267e27f9","modified":1718798552489},{"_id":"themes/solitude/source/js/covercolor/api.js","hash":"31ed9a99ea2d8f0e8ec6a4fb42a811b26b5f4dfe","modified":1718524310004},{"_id":"themes/solitude/source/js/covercolor/local.js","hash":"5bbbaee5c8eefb9abd595494f80a2e8c6641f778","modified":1718524310004},{"_id":"themes/solitude/source/js/search/algolia.js","hash":"de84f4c95b02bd1c09b64ce1bc56f0d57a3c64d9","modified":1718524310005},{"_id":"themes/solitude/source/img/pwa/favicon.ico","hash":"78ddc46cf820181fbbe5d4e05e06fc19dff1e26f","modified":1718798462581},{"_id":"themes/solitude/source/img/pwa/wu.ico","hash":"a42e5c6fb9ad2ca77fe654ccc83dfe11e3f2e91b","modified":1717562146000},{"_id":"themes/solitude/source/js/search/local.js","hash":"606751333812e85d8184b1be5724563b5d70d3dc","modified":1718524310005},{"_id":"themes/solitude/source/js/third_party/barrage.min.js","hash":"972bd559f05f5900ddb7a871a5d0407dfe8f1c9c","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/efu_ai.min.js","hash":"d3e50d090050516c80acc250a257a6523c259321","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/envelope.min.js","hash":"a2774f6a58734ce70447e172f0f65159464a3192","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/universe.min.js","hash":"7fca64ea5e1c936f447d546cda56d1361be05927","modified":1718524310006},{"_id":"themes/solitude/source/js/third_party/waterfall.min.js","hash":"ad7d449d9334c3d1c2299d01f421436e8b7a5068","modified":1718524310006},{"_id":"themes/solitude/layout/includes/widgets/home/bbTimeList.pug","hash":"77b80315629f5de6bc6c1c8ee0938f94283ce06e","modified":1718524309965},{"_id":"themes/solitude/layout/includes/widgets/home/carousel.pug","hash":"8178189eed3dfae888a9644fce6e4c587a0e4da1","modified":1718524309965},{"_id":"themes/solitude/layout/includes/widgets/home/hometop.pug","hash":"f22250f51b54213d465ffcdc582919176fc91056","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/home/banner.pug","hash":"be9f74e1850e915d9e977cd8bb0711c582288d19","modified":1718620370708},{"_id":"themes/solitude/layout/includes/widgets/home/categoryBar.pug","hash":"c3a23d4137075a83d33259caabb9e5d22fe5028f","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/home/postList.pug","hash":"b7f845f8942fe2613cf6a9e6f8681589885d1eb3","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/home/topGroup.pug","hash":"27c0a5e0bbd8038e03c9d3853c40f6991e595bf1","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/aside/asideAllInfo.pug","hash":"909af56129391e3fb416912cc4c29f140d210b7a","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/aside.pug","hash":"1ef092ceced22dc7f900416036c4ba7d826fa707","modified":1718524309962},{"_id":"themes/solitude/layout/includes/widgets/aside/asideAdsense.pug","hash":"13dadcf053b9f8355b437e203b2bd0ae4f16f0f3","modified":1718524309962},{"_id":"themes/solitude/layout/includes/widgets/aside/asideArchive.pug","hash":"7f74561a0503e8997e8fc556d25dff8e9b211e7c","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/asideCustom.pug","hash":"793125e321909cec08b4434a3a6483213a3defe8","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/asideFlipCard.pug","hash":"fe5960ceaa427d03f7a497df408a3d9c34a51520","modified":1718524309963},{"_id":"themes/solitude/layout/includes/widgets/aside/asideInfoCard.pug","hash":"1d10b5f38e85c9a3c1168e38e2c048fcc7a6205c","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideNewestPost.pug","hash":"979a0e909d56bf310fc368877e1789b3e3f1b17d","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideNewstComments.pug","hash":"18eebe07bf7f57b8eee4bd36c14b59459b127dbd","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideSwitch.pug","hash":"bf20d8a022184960f1154d6c43a4bb3a4434e1af","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideTag.pug","hash":"09383aecaea8b588abe166bef4b7ecf49a8a6054","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideToc.pug","hash":"35b8992cbf6f0685bff40ac2038653235c84b609","modified":1718524309964},{"_id":"themes/solitude/layout/includes/widgets/aside/asideWebInfo.pug","hash":"e0188bba2c25bc2b119d62323eb47c29a9a9f5df","modified":1718524309965},{"_id":"themes/solitude/layout/includes/widgets/nav/group.pug","hash":"c76ece0bd14caf4d10ccee1971e8d2286717ed6e","modified":1718524309966},{"_id":"themes/solitude/layout/includes/widgets/page/banner.pug","hash":"11afbcffbbad7c0430e3d7bbfea5c5d0e5da2d08","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/nav/menu.pug","hash":"305453ea227ea47216abaf1c230955f51f30f5e4","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/post/award.pug","hash":"85573258d0d351063c15e0f0bf55768dd193bcb7","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/nav/right.pug","hash":"4c81fd0e35429cdb47b92eab02fe8ebadf25282a","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/post/postMeta.pug","hash":"a47c35188d3661f54cf5fe0755cb02ad288f7a33","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/post/copyright.pug","hash":"0ad7c6d3eb44661e7bd89dda5925ccb29a1028b8","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/post/post-ai.pug","hash":"d0d58cd1d62ae50c44017b0b35f0799ee2095cf8","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/post/postNav.pug","hash":"bffa746e80f81098628f93315a33f18d8d8a92e4","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/third-party/pjax.pug","hash":"0fb3c5f5f358d920d0ee9166c2598c5287acd0d4","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/post/wave.pug","hash":"2830503992561bac02597081ddf3aaeeb6381e91","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/third-party/tianli-talk.pug","hash":"dcaef3c7b1566afef2d51d5aa8812c79428250c7","modified":1718524309976},{"_id":"themes/solitude/source/css/_highlight/highlight/diff.styl","hash":"a53389f9df4713a9adf7ded8f7c005698b0fb863","modified":1718524309985},{"_id":"themes/solitude/layout/includes/widgets/third-party/music.pug","hash":"f563444a58088fe049a3132d633925d96bca9446","modified":1718524309974},{"_id":"themes/solitude/source/css/_highlight/prismjs/index.styl","hash":"ba0b945faa473b0bce83761f15027becded9b410","modified":1718524309986},{"_id":"themes/solitude/source/css/_highlight/highlight/index.styl","hash":"f7ddbdb01a88acf7b634db441a626b8701ef6635","modified":1718524309986},{"_id":"themes/solitude/source/css/_highlight/prismjs/diff.styl","hash":"87f7b99b5889d8736bcfad94afdf155326d29b77","modified":1718524309986},{"_id":"themes/solitude/source/css/_page/_about/about.styl","hash":"d630cf202a85b14b0bbe4643bf0d6463d11af8ad","modified":1718524309991},{"_id":"themes/solitude/source/css/_highlight/prismjs/line-number.styl","hash":"616b37b462b69b81a99e3a9747017b4e9bb4dc34","modified":1718524309986},{"_id":"themes/solitude/source/css/_page/_about/author.styl","hash":"055010b9c7441875d9e94fc7884f03803867e062","modified":1718524309991},{"_id":"themes/solitude/source/css/_highlight/theme/mac.styl","hash":"5fca444d5a1ac8447a43c5b290163d6d3a78f3de","modified":1718524309987},{"_id":"themes/solitude/source/css/_page/_about/buff.styl","hash":"1ea768328339e165ca4ea667877d04091a91d5b1","modified":1718524309992},{"_id":"themes/solitude/source/css/_highlight/theme/default.styl","hash":"e9672bff24cfbeedb52ae4bcb79d2ec45abe9bb1","modified":1718524309987},{"_id":"themes/solitude/source/css/_page/_about/contentinfo.styl","hash":"5869a4730718093a78cc002a19da74d67b5b2bb5","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/careers.styl","hash":"0da567d1a2a97889c3051f8fbb54385cb0971b66","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/game.styl","hash":"fc97e9f95ad8cc44b87d78fe11b96fd7bf519615","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/maxim.styl","hash":"60072a9aac27c3f385fd138f702858851d590eab","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/oneself.styl","hash":"c3a7a2f47eeab4caa9bf7e4947ab47679396f74b","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/like.styl","hash":"ecea66672a980eb7ac04e3cff6b0676955ea54b9","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/myphoto.styl","hash":"ed8d96ec901f6dca24e9e6d9796fb70364442dbb","modified":1718524309992},{"_id":"themes/solitude/source/css/_page/_about/skills.styl","hash":"b0ff84a1472ab5aa90a3904e5e235c88dfa91cbd","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/personalities.styl","hash":"226247cabe4f85325dd8f4efb10fc877aee4045b","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/reward.styl","hash":"5b1650fa77ca2acce4b519df7dcb9a38a434bcd1","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_gallery/index.styl","hash":"ebf6771a60e01aa5feeb97f975cbe34d0d2ee02f","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_about/tenyear.styl","hash":"f038c1206f57b39e15f8e9e7be2959f3937263d6","modified":1718524309993},{"_id":"themes/solitude/source/css/_page/_home/carousel.styl","hash":"e17765d82a907cf517c1a2e0d0c15c00496e2186","modified":1718524309994},{"_id":"themes/solitude/source/css/_page/_about/statistic.styl","hash":"37f4f0ed374d4fa90928f62a352a3b5a1ed9b444","modified":1718524309993},{"_id":"themes/solitude/layout/includes/widgets/page/about/authorinfo.pug","hash":"97dd827681a8c6627b4bd3361cdcdc6319bf2e5a","modified":1718524309967},{"_id":"themes/solitude/source/css/_page/_home/category-bar.styl","hash":"0f092244f3e3efec7e7a4bd5d3088860f822b6c6","modified":1718524309994},{"_id":"themes/solitude/source/css/_page/_home/home-top.styl","hash":"799ea18cc6fe3f95a8424e2816afaa7272e3edbc","modified":1718798616419},{"_id":"themes/solitude/source/css/_page/_home/home.styl","hash":"e6736b6a8d29f82e5c82c36a83308aa606577ed1","modified":1718524309994},{"_id":"themes/solitude/layout/includes/widgets/page/about/award.pug","hash":"4395e82859e3cbdbcbfd7d07f7453b7e123d97c4","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/page/about/contentinfo.pug","hash":"a26e1bb9ab2c9a93a311a75e8c3da09929615eb1","modified":1718524309967},{"_id":"themes/solitude/layout/includes/widgets/page/about/hobbies.pug","hash":"60f0a4ba68ccc173c3715c54a6d64cb745fd0529","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/personalities.pug","hash":"73500d7b11534fe3f15156f5d01b919d3242c4a1","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/other.pug","hash":"4fd3c56ddbfddb2eca43fdea54610f73ce25358c","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/motto.pug","hash":"bb5201e7e8b6c65c21bc3e0114460698e76ceace","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/skillsinfo.pug","hash":"bd48d670a4f2248109448d236c51fe3e49c054ec","modified":1718524309968},{"_id":"themes/solitude/layout/includes/widgets/page/about/tenyear.pug","hash":"11b26af1240e418f61041159a24ed2d640ec8609","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/equipment/content.pug","hash":"ec96b6a7a7ce2cf81133fe174520ffebad3648da","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksCard.pug","hash":"25110a9de08c07aedb69b8348345a4ecb43e18d5","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksDiscn.pug","hash":"96050862edd7bd5a63cdbfadd9fd86fa2d7fb2ac","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/links/banner.pug","hash":"ec1ceec1fcf6775d9d37d0531fa32a498d973501","modified":1718524309969},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksItem.pug","hash":"8b668b8a264524cd46bfcb9c0a009eec1ad130a0","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/content.pug","hash":"5c2dd1f045a54ebd4e14a05fffccf583f4f7e0ff","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/artalk.pug","hash":"3efe88873aaed677238fc0b9de6cf6d646cb7266","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/js.pug","hash":"9e8aa8aaf34863e3d95f3e62fd7519c64c7c0c73","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/valine.pug","hash":"545b5594b94836260e724f75efab3939a71cc664","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/message/twikoo.pug","hash":"f21212730130ef2f784a300388757443f4b4f19f","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/valine.pug","hash":"dd207afe81923b3c6490b84048872670c7889477","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/page/message/waline.pug","hash":"4152a5fb01b6225339ab698c7dc45f61669abd28","modified":1718524309970},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/waline.pug","hash":"39b9a7df8bd58056db7832e677cb0a56ec69e93f","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/twikoo.pug","hash":"fa826e804e9ff2f0bae2086c5d99b989b3c50d47","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/artalk.pug","hash":"4ae9e7427e13ce11b73418992c582581922b500f","modified":1718524309972},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/artalk.pug","hash":"fc75974064566d67fc365d2dc74eb486c6c85973","modified":1718524309971},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/comment.pug","hash":"7e80c417d1a9041033b8c5cab3929740af36a7f8","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/twikoo.pug","hash":"ecbf0abb3b90decd48f5038de4a326c741a71b42","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/giscus.pug","hash":"5e1814856039bc9c5a8091633a3c3ac2ccefc5b4","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/js.pug","hash":"e4d63a124c6cf6d41732512bc29031ee817ed589","modified":1718524309973},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/valine.pug","hash":"2e4a2d355d8b859b649822e45e45dd9c8fdc30a4","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/waline.pug","hash":"41469e4acdca5aa149561294f5daeb6ccc4b2d49","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/newest-comment.pug","hash":"7f07dc5de630f687a8e1edeaa0a26672496030ad","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/artalk.pug","hash":"efa89de71c67ddcf9c5b727734c7d0391d3fe32a","modified":1718524309974},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/valine.pug","hash":"6a98a786a1947702954932e9b3ef1847f53cfb01","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/algolia-search.pug","hash":"e51dbe9041219920d7e68dfa76fb1a3e4ce1f5d3","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/twikoo.pug","hash":"a1ce1e421a738d0f2d989ca1920c2d69d986aa8a","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/index.pug","hash":"ed1cba51440757e7a38993e8d5c08932c60736d9","modified":1718524309976},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/waline.pug","hash":"8c5c7ead0892efeabbbfaf8550c4a4c1b4252edd","modified":1718524309975},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/local-search.pug","hash":"17bd7c2f07d84bc6cbc1dadd3a09523c309816d5","modified":1718524309976},{"_id":"themes/solitude/source/img/cover.png","hash":"9545356c17cfbb8438bb46a0a5bfd524e0e14451","modified":1718700060190},{"_id":"themes/solitude/source/img/avatar.jpg","hash":"a29ae1eb222e631c1e131df146751c90c1074c6c","modified":1718527516061},{"_id":"themes/solitude/source/img/flower.gif","hash":"7032c79c5e077609dde5619c5946bd96873994d8","modified":1718524310002},{"_id":"themes/solitude/source/img/VaultwardenBuild.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1719225343745},{"_id":"themes/solitude/source/img/mysqlbaguwen.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1719111103096},{"_id":"themes/solitude/source/img/jinkesi.jpg","hash":"9ef8a38a574c3ee9aa3ea2772a5f572778cf1b75","modified":1717430059000},{"_id":"themes/solitude/source/img/black.gif","hash":"8005f80396fa049f3efc0fde67c998e75cccc285","modified":1718625754364},{"_id":"themes/solitude/source/img/hour 2024-06-24 at 21.08.03.png","hash":"6829f5f944f6367333578938565e48e8f0c03ea6","modified":1719234484599},{"_id":"themes/solitude/source/img/pwa/browser.icns","hash":"295ecfc7fa2200fabc4e2b7f24c1424873ad1fbe","modified":1718367720372},{"_id":"themes/solitude/source/img/map-dark.png","hash":"236bca7899c7515caaf8b28ce4e746d47a1e6045","modified":1718702554889},{"_id":"themes/solitude/source/img/map-light.png","hash":"50b42abcd709f548f56015acf6582a2b3be445c4","modified":1718702457882},{"_id":"themes/solitude/source/img/alistback.jpg","hash":"ed5d7f4beda73835001081aaad90221074c87154","modified":1719026505012},{"_id":"themes/solitude/source/img/he.gif","hash":"af68a7f51bb1e5d4caf59c8af3eea85af329a09d","modified":1718622527000},{"_id":"themes/solitude/source/img/JavaCollection.png","hash":"fa4de85a748a2944caaa42c5359d6ae89a569c81","modified":1719046443656},{"_id":"themes/solitude/source/img/JavaBasics.jpg","hash":"3b15d3578a4babd482332c855e317e9f0e665271","modified":1718973768948},{"_id":"themes/solitude/source/img/springbaguwen.png","hash":"1190612199e75d60753d00647cb04a4baa347975","modified":1719111231981},{"_id":"public/search.xml","hash":"d725ed5c6a4db911037ba04a22d740014f9749ac","modified":1719291962967},{"_id":"public/404.html","hash":"2c099054c1b452b587915ec004b20b421609aa58","modified":1719291962967},{"_id":"public/about/index.html","hash":"c65ed880274507eae4808690f4b1caedc58cdfbd","modified":1719291962967},{"_id":"public/message/index.html","hash":"dfc1b978cde6e77329c248045690e405f9b46142","modified":1719291962967},{"_id":"public/2024/06/25/Linux安装MySQL/index.html","hash":"188a1fe217c67083912db42df9fe35a5bf20b4a7","modified":1719291962967},{"_id":"public/2024/06/24/自动续签证书/index.html","hash":"f88305ff8cda61c0989b10547d7f323f55d3903c","modified":1719291962967},{"_id":"public/2024/06/24/服务器安全设置/index.html","hash":"1e0999e00f474a691b1a22bd8c224ff590b81d22","modified":1719291962967},{"_id":"public/2024/06/24/Vaultwarden搭建/index.html","hash":"41c0a7d0901899cf41e9c3ace3c39f2e4604d153","modified":1719291962967},{"_id":"public/2024/06/22/Spring八股文/index.html","hash":"23042ca9a6525b76335d11d97ba802bf241385cf","modified":1719291962967},{"_id":"public/2024/06/22/Myql八股文/index.html","hash":"1c02873fcbe55bb126b695c29651f3114668352f","modified":1719291962967},{"_id":"public/2024/06/22/Java集合八股文/index.html","hash":"a2ab8c0a00ba3811a1a41de3078b55f691ac1c70","modified":1719291962967},{"_id":"public/2024/06/21/Java基础八股文/index.html","hash":"937407d0f0b36676e6fdcf9e862f25fbd92ddd89","modified":1719291962967},{"_id":"public/2024/06/18/使用AList定时备份服务器文件/index.html","hash":"d7f01f5487ca282f1e5eb2efe5775715f8e7f9c8","modified":1719291962967},{"_id":"public/2024/06/16/Hexo备份/index.html","hash":"103e2f7c8562607c0c645ce82ea851afeb1167e5","modified":1719291962967},{"_id":"public/2024/06/16/安装部署Hexo/index.html","hash":"21ed84217d9249279be29796dfa794721b8c2882","modified":1719291962967},{"_id":"public/archives/index.html","hash":"0bac72aa60935fdc070e3d58995471e301a5e772","modified":1719291962967},{"_id":"public/archives/page/2/index.html","hash":"aa5920a8281cb595475a0ac146b5ebae3530b9f3","modified":1719291962967},{"_id":"public/archives/2024/index.html","hash":"194cbb293f39fbb06eae0d9649b7f679f45f4aa9","modified":1719291962967},{"_id":"public/archives/2024/page/2/index.html","hash":"609f948759d3a700574a4e2a7b1e44b2e578b7a1","modified":1719291962967},{"_id":"public/archives/2024/06/index.html","hash":"bca69f6210cd1c8efd05de77e3d9ff253df9f887","modified":1719291962967},{"_id":"public/archives/2024/06/page/2/index.html","hash":"4402f480a617e593a71a544729ef36162f6f58d0","modified":1719291962967},{"_id":"public/categories/博客/index.html","hash":"351a4ec5e257c5ef49d1fabe885de2d7a666bd09","modified":1719291962967},{"_id":"public/categories/Java/index.html","hash":"81bb31b0de26272c6f0a66e3cf80cff40e62eaf6","modified":1719291962967},{"_id":"public/categories/MySQL/index.html","hash":"fdf9a3191a0738c5da202d412cecee8fb695e432","modified":1719291962967},{"_id":"public/categories/Linux/index.html","hash":"7cc9301c151c281fedb170885b56c44f48a2899a","modified":1719291962967},{"_id":"public/index.html","hash":"7837963da1bcdc3427655c3dfcddc08d4566ccc7","modified":1719291962967},{"_id":"public/page/2/index.html","hash":"073fb07e1bef5a16abd4ce298a2f87901cbc216a","modified":1719291962967},{"_id":"public/tags/Blog/index.html","hash":"a496e1e4fff06fb6b930bdf679b10bc866670a4c","modified":1719291962967},{"_id":"public/tags/Java/index.html","hash":"40de3cb99f8a63ebfef48d547279c7574f21408c","modified":1719291962967},{"_id":"public/tags/八股文/index.html","hash":"6c837185fa15d43ad80201e970cf3e239dec7086","modified":1719291962967},{"_id":"public/tags/MySQL/index.html","hash":"b446d9e0963ce265d85e64a3087302cc10d517eb","modified":1719291962967},{"_id":"public/tags/Linux/index.html","hash":"1fffed94eb7d3c8aaad9595a75d41c8238df4455","modified":1719291962967},{"_id":"public/tags/Spring/index.html","hash":"c341972afa7cc79228df6f85b1f63ba62387ff96","modified":1719291962967},{"_id":"public/tags/Alist/index.html","hash":"9b384c572c65784b58c367b838897f6fd3f12596","modified":1719291962967},{"_id":"public/tags/SSL/index.html","hash":"88b61550e25b6c8d2a0402240ec154d8c13c72eb","modified":1719291962967},{"_id":"public/tags/域名/index.html","hash":"6ad7657205c26f5d75a4616d91610e9be380d494","modified":1719291962967},{"_id":"public/tags/index.html","hash":"9c01554d9a5af2e3f0fdafcc277b242747a3ae92","modified":1719291962967},{"_id":"public/categories/index.html","hash":"3cdd288bc1638159dffd9e8911e0a71f3a7384e7","modified":1719291962967},{"_id":"public/img/404.avif","hash":"c1457bb8020167d65f83aba7bc3dd1317595b62a","modified":1719291962967},{"_id":"public/img/avatar.avif","hash":"3c63aa3309bc9d7959b4fdd5bed80f7535b4b25d","modified":1719291962967},{"_id":"public/img/default.avif","hash":"3ea1493ebc8b3abc3c90aa1d200aeafc800e7143","modified":1719291962967},{"_id":"public/img/happy-sticker.avif","hash":"3bded9b4bc40580f4d6d5f16170122d95873f741","modified":1719291962967},{"_id":"public/img/error_load.avif","hash":"9e0796948e890e19e98709cf55dee0367afd69e7","modified":1719291962967},{"_id":"public/img/loading.avif","hash":"82c6e14e40975f9ae0acee8a30d2dc1f46c2831f","modified":1719291962967},{"_id":"public/img/recent_c.avif","hash":"77e0f348d2e3c12ca17711be365ea5b28f35a2d9","modified":1719291962967},{"_id":"public/js/right_menu.js.back","hash":"42f9fb762c55cf6c13947eb71ac2fb3ac874df13","modified":1719291962967},{"_id":"public/img/pwa/favicon.ico","hash":"78ddc46cf820181fbbe5d4e05e06fc19dff1e26f","modified":1719291962967},{"_id":"public/img/pwa/wu.ico","hash":"a42e5c6fb9ad2ca77fe654ccc83dfe11e3f2e91b","modified":1719291962967},{"_id":"public/img/avatar.jpg","hash":"a29ae1eb222e631c1e131df146751c90c1074c6c","modified":1719291962967},{"_id":"public/img/cover.png","hash":"9545356c17cfbb8438bb46a0a5bfd524e0e14451","modified":1719291962967},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1719291962967},{"_id":"public/js/music.js","hash":"31248632c598d720607e0d54fe3b928ded5ed0a1","modified":1719291962967},{"_id":"public/js/right_menu.js","hash":"3b62c4d52c6e6979d53fcfa3e17585ca55b3243e","modified":1719291962967},{"_id":"public/css/third_party/tianli_talk.css","hash":"156448ced3ee5cbbba24f952bf8912af4c6e62c3","modified":1719291962967},{"_id":"public/css/third_party/snackbar.min.css","hash":"859ff4766cb4feebb5f5d270de48a97a6dcc6e0e","modified":1719291962967},{"_id":"public/js/utils.js","hash":"9d41d45df4575b985d9888d39b7bfa12ae03f50e","modified":1719291962967},{"_id":"public/js/covercolor/api.js","hash":"31ed9a99ea2d8f0e8ec6a4fb42a811b26b5f4dfe","modified":1719291962967},{"_id":"public/js/covercolor/local.js","hash":"5bbbaee5c8eefb9abd595494f80a2e8c6641f778","modified":1719291962967},{"_id":"public/js/search/algolia.js","hash":"de84f4c95b02bd1c09b64ce1bc56f0d57a3c64d9","modified":1719291962967},{"_id":"public/js/search/local.js","hash":"606751333812e85d8184b1be5724563b5d70d3dc","modified":1719291962967},{"_id":"public/js/third_party/barrage.min.js","hash":"972bd559f05f5900ddb7a871a5d0407dfe8f1c9c","modified":1719291962967},{"_id":"public/js/third_party/efu_ai.min.js","hash":"d3e50d090050516c80acc250a257a6523c259321","modified":1719291962967},{"_id":"public/js/third_party/envelope.min.js","hash":"a2774f6a58734ce70447e172f0f65159464a3192","modified":1719291962967},{"_id":"public/js/third_party/waterfall.min.js","hash":"ad7d449d9334c3d1c2299d01f421436e8b7a5068","modified":1719291962967},{"_id":"public/js/third_party/universe.min.js","hash":"7fca64ea5e1c936f447d546cda56d1361be05927","modified":1719291962967},{"_id":"public/css/index.css","hash":"31419fa118e9f37a85fe87f7faab2f5abfba5067","modified":1719291962967},{"_id":"public/js/main.js","hash":"b05bb8644a41b4183c38c31bf179f4184b227c01","modified":1719291962967},{"_id":"public/js/tw_cn.js","hash":"3792da52fec1e85e5f99b45d91a0652cfde42715","modified":1719291962967},{"_id":"public/img/flower.gif","hash":"7032c79c5e077609dde5619c5946bd96873994d8","modified":1719291962967},{"_id":"public/img/VaultwardenBuild.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1719291962967},{"_id":"public/img/mysqlbaguwen.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1719291962967},{"_id":"public/img/jinkesi.jpg","hash":"9ef8a38a574c3ee9aa3ea2772a5f572778cf1b75","modified":1719291962967},{"_id":"public/img/black.gif","hash":"8005f80396fa049f3efc0fde67c998e75cccc285","modified":1719291962967},{"_id":"public/img/hour 2024-06-24 at 21.08.03.png","hash":"6829f5f944f6367333578938565e48e8f0c03ea6","modified":1719291962967},{"_id":"public/img/pwa/browser.icns","hash":"295ecfc7fa2200fabc4e2b7f24c1424873ad1fbe","modified":1719291962967},{"_id":"public/img/map-dark.png","hash":"236bca7899c7515caaf8b28ce4e746d47a1e6045","modified":1719291962967},{"_id":"public/img/map-light.png","hash":"50b42abcd709f548f56015acf6582a2b3be445c4","modified":1719291962967},{"_id":"public/img/alistback.jpg","hash":"ed5d7f4beda73835001081aaad90221074c87154","modified":1719291962967},{"_id":"public/img/he.gif","hash":"af68a7f51bb1e5d4caf59c8af3eea85af329a09d","modified":1719291962967},{"_id":"public/img/JavaCollection.png","hash":"fa4de85a748a2944caaa42c5359d6ae89a569c81","modified":1719291962967},{"_id":"public/img/JavaBasics.jpg","hash":"3b15d3578a4babd482332c855e317e9f0e665271","modified":1719291962967},{"_id":"public/img/springbaguwen.png","hash":"1190612199e75d60753d00647cb04a4baa347975","modified":1719291962967}],"Category":[{"name":"博客","_id":"clxty1lbj0004glj8e5ib2frv"},{"name":"Java","_id":"clxty1lbn0009glj83by298p6"},{"name":"MySQL","_id":"clxty1lbp000fglj8as5bh43c"},{"name":"Linux","_id":"clxty1lbr000lglj89m221arv"}],"Data":[{"_id":"about","data":{"authorinfo":{"leftTags":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手"],"rightTags":["脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"],"image":"/img/avatar.jpg"},"title":"关于本站","contentinfo":{"sup":"你好，很高兴认识你👋","name":"我叫Aix","title":"Java工程师、独立开发者、心学","tip":"追求","slogan":"源于<br>热爱而去创造","mask":["优秀的产品","出色的设计","高效的编程","人性化的用户体验"]},"skills":{"title":"技能","subtitle":"开启创造力","tags":[{"title":"HTML","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/HTML.png","color":"#e9572b"},{"title":"Javascript","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/JS.png","color":"#f7cb4f"},{"title":"Java","icon":"https://profilinator.rishav.dev/skills-assets/java-original-wordmark.svg","color":"#ffffff"},{"title":"Linux","icon":"https://profilinator.rishav.dev/skills-assets/linux-original.svg","color":"#ffffff"},{"title":"Spring","icon":"https://profilinator.rishav.dev/skills-assets/springio-icon.svg","color":"#ffffff"},{"title":"VUE","icon":"https://profilinator.rishav.dev/skills-assets/vuejs-original-wordmark.svg","color":"‘#ffffff'"},{"title":"Git","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/git.png","color":"#df5b40"},{"title":"Docker","icon":"https://7.isyangs.cn/34/65f2e45462045-34.png","color":"#57b6e6"},{"title":"Visual Studio","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/vs-logo.svg","color":"#ffffff"}]},"careers":{"title":"生涯","subtitle":"无限进步","items":[{"school":"软件工程","major":"学习","color":"#357ef5"}],"image":"https://7.isyangs.cn/1/65eb2d10ba24d-1.png"},"personalities":{"tips":"性格","title":"调停者","color":"#56a178","type":"INFP-A","image":"https:/example.com/ESFJ-A.svg","link":"https://www.16personalities.com/","linkText":"16personalities","typeLink":"https://www.16personalities.com/ch/infp-%E4%BA%BA%E6%A0%BC","typeName":"调停者","myphoto":"/img/jinkesi.jpg"},"motto":{"title":"座右铭","prefix":"破釜沉舟，","content":"砥砺前行。"},"expertise":{"title":"特长","prefix":"睡觉","specialist":"专家","content":"学习能力","level":"MAX"},"tj":{"provider":null,"url":"https://v6-widget.51.la/v6/3F15j2vtdTo7PPcN/quote.js","img":"https://7.isyangs.cn/1/65eb2e9109826-1.png"},"oneself":{"location":"中国，湖北省","birthYear":"2001","university":"武汉东湖学院","major":"软件工程","occupation":"Java工程师","map":{"light":"/img/map-light.png","dark":"/img/map-dark.png"}},"cause":{"tip":"心学","title":"内心修养与幸福追求","content":"<p>心学，作为中国哲学中的一股重要力量，不仅在历史上影响深远，其理念在当今社会仍然具有重要的现实意义。心学强调通过内心的修养和自我反省来追求智慧与幸福，这种思想可以帮助我们在现代生活中找到内在的平静与真正的满足。</p>\n<h2>内心修养的核心思想</h2> <p>心学的核心思想在于内心的修养。王阳明提出“致良知”，即通过自我反省和内省，发现和培养内心本具的良知。这种良知并不是外界教导的结果，而是内心固有的智慧和道德。通过不断的自我反省，我们可以更清晰地认识自己，发现内心的真实需求，从而避免被外界的纷扰所迷惑。</p> <p>在现代社会中，我们往往被各种外在的欲望所驱使，追求物质的丰裕和名利的满足。然而，这些外在的追求常常让我们感到空虚和不安。心学告诉我们，真正的幸福和智慧来源于内心的宁静和自我认识。通过内心的修养，我们可以找到生命的真正意义，获得内在的满足。</p>\n<h2>真诚待人的重要性</h2> <p>心学强调真诚待人，认为人与人之间的信任和理解是建立在真诚的基础上的。在心学的视角下，真诚不仅是道德的要求，更是内心修养的重要部分。通过真诚待人，我们能够建立更加稳固和谐的人际关系，营造一个充满信任和理解的社会环境。</p> <p>在实际生活中，真诚待人意味着我们要以开放的心态对待他人，尊重他人的感受和观点，不带偏见和伪装。这样，我们才能真正理解他人，与他人建立深厚的情感纽带。真诚待人不仅能让我们赢得他人的信任和尊重，也能让我们的内心更加坦荡和充实。</p>\n<h2>面对挑战的智慧</h2> <p>人生充满了各种挑战和挫折，而心学提供了面对这些困难的智慧。王阳明提倡“知行合一”，即通过实际行动来验证和实现内心的智慧。面对困难时，我们需要保持内心的坚韧和信念，不被外界的挫折所打倒。</p> <p>心学认为，每一次挫折都是成长的机会，通过反省和内省，我们可以从中汲取教训和智慧。挫折和挑战不仅让我们更加坚强，也让我们更加深入地理解生命的本质和意义。在挫折中保持内心的平静和信念，我们才能在逆境中找到前进的方向，走向更高的自我实现。</p>\n<h2>简约生活的倡导</h2> <p>心学倡导简约生活，认为内心的富足远比物质的丰裕重要。在现代社会中，我们常常被物质的欲望所困扰，追求更多的财富和地位。然而，这些外在的追求并不能带来真正的幸福，反而让我们感到更加焦虑和不安。</p> <p>通过简约的生活方式，我们可以摆脱对物质的依赖，追求内心的平静和满足。简约生活并不是拒绝物质，而是通过合理的选择和控制，找到内心的平衡和富足。通过减少不必要的欲望和追求，我们可以专注于内心的成长和修养，获得真正的幸福和满足。</p>\n<h2>结论</h2> <p>心学的思想，不仅是古代哲人的智慧，也是我们现代生活中的指引。通过内心的修养、真诚待人、面对挑战和简约生活，我们可以找到生命的真正意义和内在的平静。心学告诉我们，幸福和智慧并不在外界的纷扰之中，而在于我们内心的修养和成长。让我们以心学为指引，走向更加充实和幸福的人生。</p>"},"tenyear":{"tips":"三年之约","title":"一个人的寂寞，一群人的狂欢。","start":"2024年06月15日","end":"2027年06月15日"}}}],"Page":[{"title":"关于本站","date":"2023-10-31T14:24:22.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2023-10-31 22:24:22\ntype: about\n---\n","updated":"2024-06-18T09:16:31.510Z","path":"about/index.html","comments":1,"layout":"page","_id":"clxty1lbb0000glj8ect19w5x","content":"","excerpt":"关于本站","more":"","cover":"/img/default.avif","toc":false,"comment":true},{"title":"留言板","date":"2020-12-31T16:00:00.000Z","type":"message","_content":"","source":"message/index.md","raw":"---\ntitle: 留言板\ndate: 2021-01-01 00:00:00\ntype: message\n---\n","updated":"2024-06-18T10:29:49.383Z","path":"message/index.html","comments":1,"layout":"page","_id":"clxty1lbh0002glj8517k8psj","content":"","excerpt":"留言板","more":"","cover":"/img/default.avif","toc":false,"comment":true}],"Post":[{"title":"Hexo备份","date":"2024-06-16T11:19:00.000Z","cover":"https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png","_content":"# 使用 Hexo 和 GitHub 实现多平台工作和数据备份\n\n## 目标\n\n- **`master` 分支**：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。\n- **`hexo` 分支**：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。\n\n## 为什么要这样做？\n\n使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。`hexo` 分支保存源文件，方便我们在不同平台进行编辑；`master` 分支保存静态文件，用于发布到 GitHub Pages。\n\n## 操作步骤\n\n### 1. 初始化 Hexo 项目\n\n首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm install\n```\n\n### 2. 初始化 Git 仓库\n\n在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。\n\n```bash\ngit init\n```\n\n### 3. 创建 hexo 分支\n\n创建一个新的分支 `hexo`，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。\n\n```bash\ngit checkout -b hexo\n```\n\n### 4. 推送 hexo 分支到 GitHub\n\n将 `hexo` 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。\n\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\ngit add .\ngit commit -m \"Initial commit with Hexo source files\"\ngit push -u origin hexo\n```\n\n然后，在 GitHub 仓库设置中，将 `hexo` 分支设置为默认分支：\n1. 打开你的 GitHub 仓库。\n2. 点击 \"Settings\"。\n3. 在左侧菜单中点击 \"Branches\"。\n4. 在 \"Default branch\" 下拉菜单中选择 `hexo`，然后点击 \"Update\"。\n\n### 5. 创建 master 分支\n\n切换到 `master` 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。\n\n```bash\ngit checkout --orphan master\n```\n\n删除所有文件，因为 `master` 分支只需要保存生成的静态文件。\n\n```bash\ngit rm -rf .\n```\n\n创建一个空的 README 文件并提交，以初始化 `master` 分支。\n\n```bash\necho \"# My Blog\" > README.md\ngit add README.md\ngit commit -m \"Initial commit for master branch\"\ngit push -u origin master\n```\n\n### 6. 配置 Hexo 部署\n\n在 Hexo 项目根目录下的 `_config.yml` 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 `master` 分支。\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourrepo.git\n  branch: master\n```\n\n安装 Hexo 部署插件 `hexo-deployer-git`，使 Hexo 能通过 Git 进行部署。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 7. 生成和部署静态文件\n\n运行以下命令生成静态文件并部署到 `master` 分支：\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n- `hexo clean`：清理生成的文件。\n- `hexo generate`：生成静态文件。\n- `hexo deploy`：将生成的静态文件部署到 GitHub 上的 `master` 分支。\n\n### 8. 推送 Hexo 源文件到 hexo 分支\n\n每次更新 Hexo 源文件后，将它们推送到 `hexo` 分支，以确保源文件有备份。\n\n```bash\ngit add .\ngit commit -m \"Update Hexo source files\"\ngit push origin hexo\n```\n\n## 验证配置\n\n1. **确认 `hexo` 分支为默认分支**：保存 Hexo 源文件，并便于多平台编辑。\n2. **确认 `master` 分支保存生成的静态文件**：用于部署到 GitHub Pages，并确保网站正常访问。\n","source":"_posts/Hexo备份.md","raw":"---\ntitle: Hexo备份\ndate: 2024-06-16 19:19:00\ntags: Blog\ncategories: 博客\ncover: https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png\n---\n# 使用 Hexo 和 GitHub 实现多平台工作和数据备份\n\n## 目标\n\n- **`master` 分支**：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。\n- **`hexo` 分支**：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。\n\n## 为什么要这样做？\n\n使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。`hexo` 分支保存源文件，方便我们在不同平台进行编辑；`master` 分支保存静态文件，用于发布到 GitHub Pages。\n\n## 操作步骤\n\n### 1. 初始化 Hexo 项目\n\n首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm install\n```\n\n### 2. 初始化 Git 仓库\n\n在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。\n\n```bash\ngit init\n```\n\n### 3. 创建 hexo 分支\n\n创建一个新的分支 `hexo`，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。\n\n```bash\ngit checkout -b hexo\n```\n\n### 4. 推送 hexo 分支到 GitHub\n\n将 `hexo` 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。\n\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\ngit add .\ngit commit -m \"Initial commit with Hexo source files\"\ngit push -u origin hexo\n```\n\n然后，在 GitHub 仓库设置中，将 `hexo` 分支设置为默认分支：\n1. 打开你的 GitHub 仓库。\n2. 点击 \"Settings\"。\n3. 在左侧菜单中点击 \"Branches\"。\n4. 在 \"Default branch\" 下拉菜单中选择 `hexo`，然后点击 \"Update\"。\n\n### 5. 创建 master 分支\n\n切换到 `master` 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。\n\n```bash\ngit checkout --orphan master\n```\n\n删除所有文件，因为 `master` 分支只需要保存生成的静态文件。\n\n```bash\ngit rm -rf .\n```\n\n创建一个空的 README 文件并提交，以初始化 `master` 分支。\n\n```bash\necho \"# My Blog\" > README.md\ngit add README.md\ngit commit -m \"Initial commit for master branch\"\ngit push -u origin master\n```\n\n### 6. 配置 Hexo 部署\n\n在 Hexo 项目根目录下的 `_config.yml` 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 `master` 分支。\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourrepo.git\n  branch: master\n```\n\n安装 Hexo 部署插件 `hexo-deployer-git`，使 Hexo 能通过 Git 进行部署。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 7. 生成和部署静态文件\n\n运行以下命令生成静态文件并部署到 `master` 分支：\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n- `hexo clean`：清理生成的文件。\n- `hexo generate`：生成静态文件。\n- `hexo deploy`：将生成的静态文件部署到 GitHub 上的 `master` 分支。\n\n### 8. 推送 Hexo 源文件到 hexo 分支\n\n每次更新 Hexo 源文件后，将它们推送到 `hexo` 分支，以确保源文件有备份。\n\n```bash\ngit add .\ngit commit -m \"Update Hexo source files\"\ngit push origin hexo\n```\n\n## 验证配置\n\n1. **确认 `hexo` 分支为默认分支**：保存 Hexo 源文件，并便于多平台编辑。\n2. **确认 `master` 分支保存生成的静态文件**：用于部署到 GitHub Pages，并确保网站正常访问。\n","slug":"Hexo备份","published":1,"updated":"2024-06-17T07:48:02.441Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbe0001glj86mr2egwx","content":"<h1 id=\"使用-Hexo-和-GitHub-实现多平台工作和数据备份\"><a href=\"#使用-Hexo-和-GitHub-实现多平台工作和数据备份\" class=\"headerlink\" title=\"使用 Hexo 和 GitHub 实现多平台工作和数据备份\"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li>\n<li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li>\n</ul>\n<h2 id=\"为什么要这样做？\"><a href=\"#为什么要这样做？\" class=\"headerlink\" title=\"为什么要这样做？\"></a>为什么要这样做？</h2><p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><h3 id=\"1-初始化-Hexo-项目\"><a href=\"#1-初始化-Hexo-项目\" class=\"headerlink\" title=\"1. 初始化 Hexo 项目\"></a>1. 初始化 Hexo 项目</h3><p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init my-blog\n<span class=\"token builtin class-name\">cd</span> my-blog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-初始化-Git-仓库\"><a href=\"#2-初始化-Git-仓库\" class=\"headerlink\" title=\"2. 初始化 Git 仓库\"></a>2. 初始化 Git 仓库</h3><p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-创建-hexo-分支\"><a href=\"#3-创建-hexo-分支\" class=\"headerlink\" title=\"3. 创建 hexo 分支\"></a>3. 创建 hexo 分支</h3><p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-推送-hexo-分支到-GitHub\"><a href=\"#4-推送-hexo-分支到-GitHub\" class=\"headerlink\" title=\"4. 推送 hexo 分支到 GitHub\"></a>4. 推送 hexo 分支到 GitHub</h3><p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/yourusername/yourrepo.git\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit with Hexo source files\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p>\n<ol>\n<li>打开你的 GitHub 仓库。</li>\n<li>点击 “Settings”。</li>\n<li>在左侧菜单中点击 “Branches”。</li>\n<li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li>\n</ol>\n<h3 id=\"5-创建-master-分支\"><a href=\"#5-创建-master-分支\" class=\"headerlink\" title=\"5. 创建 master 分支\"></a>5. 创建 master 分支</h3><p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# My Blog\"</span> <span class=\"token operator\">></span> README.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> README.md\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for master branch\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-配置-Hexo-部署\"><a href=\"#6-配置-Hexo-部署\" class=\"headerlink\" title=\"6. 配置 Hexo 部署\"></a>6. 配置 Hexo 部署</h3><p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourusername/yourrepo.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-生成和部署静态文件\"><a href=\"#7-生成和部署静态文件\" class=\"headerlink\" title=\"7. 生成和部署静态文件\"></a>7. 生成和部署静态文件</h3><p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>hexo clean</code>：清理生成的文件。</li>\n<li><code>hexo generate</code>：生成静态文件。</li>\n<li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li>\n</ul>\n<h3 id=\"8-推送-Hexo-源文件到-hexo-分支\"><a href=\"#8-推送-Hexo-源文件到-hexo-分支\" class=\"headerlink\" title=\"8. 推送 Hexo 源文件到 hexo 分支\"></a>8. 推送 Hexo 源文件到 hexo 分支</h3><p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update Hexo source files\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h2><ol>\n<li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li>\n<li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"使用-Hexo-和-GitHub-实现多平台工作和数据备份\"><a href=\"#使用-Hexo-和-GitHub-实现多平台工作和数据备份\" class=\"headerlink\" title=\"使用 Hexo 和 GitHub 实现多平台工作和数据备份\"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li>\n<li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li>\n</ul>\n<h2 id=\"为什么要这样做？\"><a href=\"#为什么要这样做？\" class=\"headerlink\" title=\"为什么要这样做？\"></a>为什么要这样做？</h2><p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><h3 id=\"1-初始化-Hexo-项目\"><a href=\"#1-初始化-Hexo-项目\" class=\"headerlink\" title=\"1. 初始化 Hexo 项目\"></a>1. 初始化 Hexo 项目</h3><p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init my-blog\n<span class=\"token builtin class-name\">cd</span> my-blog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-初始化-Git-仓库\"><a href=\"#2-初始化-Git-仓库\" class=\"headerlink\" title=\"2. 初始化 Git 仓库\"></a>2. 初始化 Git 仓库</h3><p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-创建-hexo-分支\"><a href=\"#3-创建-hexo-分支\" class=\"headerlink\" title=\"3. 创建 hexo 分支\"></a>3. 创建 hexo 分支</h3><p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-推送-hexo-分支到-GitHub\"><a href=\"#4-推送-hexo-分支到-GitHub\" class=\"headerlink\" title=\"4. 推送 hexo 分支到 GitHub\"></a>4. 推送 hexo 分支到 GitHub</h3><p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/yourusername/yourrepo.git\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit with Hexo source files\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p>\n<ol>\n<li>打开你的 GitHub 仓库。</li>\n<li>点击 “Settings”。</li>\n<li>在左侧菜单中点击 “Branches”。</li>\n<li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li>\n</ol>\n<h3 id=\"5-创建-master-分支\"><a href=\"#5-创建-master-分支\" class=\"headerlink\" title=\"5. 创建 master 分支\"></a>5. 创建 master 分支</h3><p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# My Blog\"</span> <span class=\"token operator\">></span> README.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> README.md\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for master branch\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-配置-Hexo-部署\"><a href=\"#6-配置-Hexo-部署\" class=\"headerlink\" title=\"6. 配置 Hexo 部署\"></a>6. 配置 Hexo 部署</h3><p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourusername/yourrepo.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-生成和部署静态文件\"><a href=\"#7-生成和部署静态文件\" class=\"headerlink\" title=\"7. 生成和部署静态文件\"></a>7. 生成和部署静态文件</h3><p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>hexo clean</code>：清理生成的文件。</li>\n<li><code>hexo generate</code>：生成静态文件。</li>\n<li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li>\n</ul>\n<h3 id=\"8-推送-Hexo-源文件到-hexo-分支\"><a href=\"#8-推送-Hexo-源文件到-hexo-分支\" class=\"headerlink\" title=\"8. 推送 Hexo 源文件到 hexo 分支\"></a>8. 推送 Hexo 源文件到 hexo 分支</h3><p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update Hexo source files\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h2><ol>\n<li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li>\n<li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li>\n</ol>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Java基础八股文","date":"2024-06-21T12:41:04.000Z","cover":"/img/JavaBasics.jpg","_content":"### Java 基础八股文\n\n#### 对象的相等和引用相等的区别\n- **对象的相等**：比较的是内存中存放的内容是否相等。\n- **引用相等**：比较的是它们指向的内存地址是否相等。\n\n#### 如果一个类没有声明构造方法，该程序能正确执行吗？\n- 如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。\n- 如果添加了类的构造方法，无论是否有参，`Java`都不会添加默认不带参数的构造方法。\n\n#### 构造方法有哪些特点？是否可被重写？\n- **构造方法的特点**：\n  - 名字与类名相同。\n  - 没有返回值。\n  - 生成类的对象时自动执行，无需调用。\n  构造方法不能被重写，但是可以被重载。\n\n#### 面向对象的三大特征\n- **封装**：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。\n- **继承**：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。\n- **多态**：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。\n\n#### 接口和抽象类有什么共同点和区别？\n- **共同点**：\n  - 都不能被实例化。\n  - 都可以包含抽象方法。\n  - 都可以有默认的实现方法。\n- **区别**：\n  - 接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。\n  - 抽象类主要用于代码的复用，强调所属关系。\n  - 一个类只能继承一个类，但是可以实现多个接口。\n  - 接口中的成员变量只能是静态常量，不能被修改且必须有初始值。\n  - 抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。\n\n#### 深拷贝和浅拷贝的区别？什么是引用拷贝？\n- **浅拷贝**：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用`Object`的`clone()`方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。\n- **深拷贝**：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。\n- **引用拷贝**：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。\n\n#### == 和 equals()的区别？\n- 对于基本数据类型，`==` 比较的是值。\n- 对于引用数据类型，`==` 比较的是对象的内存地址。\n- `equals()`没有重写时，等价于`==`比较两个对象。\n- 被重写时，一般都重写`equals()`方法用来比较两个对象中的属性是否相等。\n\n#### hashCode() 有什么用？\n`hashCode()`方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。\n\n#### 为什么重写 equals() 时必须重写 hashCode() 方法？\n为了正确使用`hashCode()`，需要重写`equals()`方法来实现。如果两个对象根据`equals()`方法是相等的，那么它们的`hashCode`值必须相同。如果两个对象的`hashCode()`相同，它们不一定是相同的，但相等的两个对象必须具有相同的`hashCode`。\n\n#### String、StringBuffer、StringBuilder 的区别？\n- **String**：不可变的，因为不可变，所以它是线程安全的。\n- **StringBuffer**：可变的，允许对字符串进行修改，线程安全，所有的方法都被`synchronized`修饰。\n- **StringBuilder**：可变的，但不是线程安全的，没有被`synchronized`修饰。由于没有同步机制，性能比`StringBuffer`更高，适合单线程环境下使用。\n- **使用场景**：\n  - 当字符串是固定不变的时候使用`String`。\n  - 当需要对字符串进行大量修改且在多线程环境下使用`StringBuffer`。\n  - 当需要对字符串进行大量修改且在单线程环境下使用`StringBuilder`。\n\n#### 字符串常量池的作用了解吗？\n字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，`JVM`会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。\n\n#### Exception 和 Error 有什么区别？\n- **Exception**和**Error**都是**Throwable**的子类。\n- `Exception`是程序本身可以处理的异常，可以通过`catch`来捕获。`Exception`还可以分为`checked Exception`和`Unchecked Exception`。\n- `Error`是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。\n\n#### Checked Exception 和 Unchecked Exception 有什么区别？\n- **Checked Exception**必须被捕获或声明，否则编译器会报错。\n- **Unchecked Exception**也叫运行时异常，不强制要求处理，但最好捕获处理。\n\n#### 什么是泛型？有什么作用？\n泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，不需要在从集合中取出元素时进行转换。\n\n#### 反射是什么？\n反射是`Java`中的一种强大机制，允许程序在运行时检查或修改自身的结构和行为。通过反射可以在运行时获取类的相关信息（如类名、方法、字段、构造函数等），并可以动态调用方法、访问字段、创建对象等。\n\n#### 反射的优缺点？\n- **反射的优点**：\n  - 动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。\n  - 很多流行的`Java`框架如`Spring`都依赖反射来实现动态代理、依赖注入。\n- **反射的缺点**：\n  - 反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。\n  - 反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。\n  - 使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。\n  - 反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。\n\n#### 何谓注解？\n注解是`Java`中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如`@Override`注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。\n\n#### 什么是序列化？什么是反序列化？\n- **序列化**：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输到另一台机器上。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。\n- **反序列化**：将字节流转回Java对象的过程。反序列化的主要目的是从文件、数据库或网络中恢复对象的状态，以便在应用程序中使用。\n\n以上内容涵盖了Java基础的一些关键点，希望对你有所帮助。\n","source":"_posts/Java基础八股文.md","raw":"---\ntitle: Java基础八股文\ndate: 2024-06-21 20:41:04\ntags: \n    - Java\n    - 八股文\ncategories: Java\ncover: /img/JavaBasics.jpg\n---\n### Java 基础八股文\n\n#### 对象的相等和引用相等的区别\n- **对象的相等**：比较的是内存中存放的内容是否相等。\n- **引用相等**：比较的是它们指向的内存地址是否相等。\n\n#### 如果一个类没有声明构造方法，该程序能正确执行吗？\n- 如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。\n- 如果添加了类的构造方法，无论是否有参，`Java`都不会添加默认不带参数的构造方法。\n\n#### 构造方法有哪些特点？是否可被重写？\n- **构造方法的特点**：\n  - 名字与类名相同。\n  - 没有返回值。\n  - 生成类的对象时自动执行，无需调用。\n  构造方法不能被重写，但是可以被重载。\n\n#### 面向对象的三大特征\n- **封装**：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。\n- **继承**：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。\n- **多态**：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。\n\n#### 接口和抽象类有什么共同点和区别？\n- **共同点**：\n  - 都不能被实例化。\n  - 都可以包含抽象方法。\n  - 都可以有默认的实现方法。\n- **区别**：\n  - 接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。\n  - 抽象类主要用于代码的复用，强调所属关系。\n  - 一个类只能继承一个类，但是可以实现多个接口。\n  - 接口中的成员变量只能是静态常量，不能被修改且必须有初始值。\n  - 抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。\n\n#### 深拷贝和浅拷贝的区别？什么是引用拷贝？\n- **浅拷贝**：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用`Object`的`clone()`方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。\n- **深拷贝**：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。\n- **引用拷贝**：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。\n\n#### == 和 equals()的区别？\n- 对于基本数据类型，`==` 比较的是值。\n- 对于引用数据类型，`==` 比较的是对象的内存地址。\n- `equals()`没有重写时，等价于`==`比较两个对象。\n- 被重写时，一般都重写`equals()`方法用来比较两个对象中的属性是否相等。\n\n#### hashCode() 有什么用？\n`hashCode()`方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。\n\n#### 为什么重写 equals() 时必须重写 hashCode() 方法？\n为了正确使用`hashCode()`，需要重写`equals()`方法来实现。如果两个对象根据`equals()`方法是相等的，那么它们的`hashCode`值必须相同。如果两个对象的`hashCode()`相同，它们不一定是相同的，但相等的两个对象必须具有相同的`hashCode`。\n\n#### String、StringBuffer、StringBuilder 的区别？\n- **String**：不可变的，因为不可变，所以它是线程安全的。\n- **StringBuffer**：可变的，允许对字符串进行修改，线程安全，所有的方法都被`synchronized`修饰。\n- **StringBuilder**：可变的，但不是线程安全的，没有被`synchronized`修饰。由于没有同步机制，性能比`StringBuffer`更高，适合单线程环境下使用。\n- **使用场景**：\n  - 当字符串是固定不变的时候使用`String`。\n  - 当需要对字符串进行大量修改且在多线程环境下使用`StringBuffer`。\n  - 当需要对字符串进行大量修改且在单线程环境下使用`StringBuilder`。\n\n#### 字符串常量池的作用了解吗？\n字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，`JVM`会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。\n\n#### Exception 和 Error 有什么区别？\n- **Exception**和**Error**都是**Throwable**的子类。\n- `Exception`是程序本身可以处理的异常，可以通过`catch`来捕获。`Exception`还可以分为`checked Exception`和`Unchecked Exception`。\n- `Error`是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。\n\n#### Checked Exception 和 Unchecked Exception 有什么区别？\n- **Checked Exception**必须被捕获或声明，否则编译器会报错。\n- **Unchecked Exception**也叫运行时异常，不强制要求处理，但最好捕获处理。\n\n#### 什么是泛型？有什么作用？\n泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，不需要在从集合中取出元素时进行转换。\n\n#### 反射是什么？\n反射是`Java`中的一种强大机制，允许程序在运行时检查或修改自身的结构和行为。通过反射可以在运行时获取类的相关信息（如类名、方法、字段、构造函数等），并可以动态调用方法、访问字段、创建对象等。\n\n#### 反射的优缺点？\n- **反射的优点**：\n  - 动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。\n  - 很多流行的`Java`框架如`Spring`都依赖反射来实现动态代理、依赖注入。\n- **反射的缺点**：\n  - 反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。\n  - 反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。\n  - 使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。\n  - 反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。\n\n#### 何谓注解？\n注解是`Java`中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如`@Override`注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。\n\n#### 什么是序列化？什么是反序列化？\n- **序列化**：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输到另一台机器上。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。\n- **反序列化**：将字节流转回Java对象的过程。反序列化的主要目的是从文件、数据库或网络中恢复对象的状态，以便在应用程序中使用。\n\n以上内容涵盖了Java基础的一些关键点，希望对你有所帮助。\n","slug":"Java基础八股文","published":1,"updated":"2024-06-24T15:09:27.715Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbh0003glj8g2c0arr0","content":"<h3 id=\"Java-基础八股文\"><a href=\"#Java-基础八股文\" class=\"headerlink\" title=\"Java 基础八股文\"></a>Java 基础八股文</h3><h4 id=\"对象的相等和引用相等的区别\"><a href=\"#对象的相等和引用相等的区别\" class=\"headerlink\" title=\"对象的相等和引用相等的区别\"></a>对象的相等和引用相等的区别</h4><ul>\n<li><strong>对象的相等</strong>：比较的是内存中存放的内容是否相等。</li>\n<li><strong>引用相等</strong>：比较的是它们指向的内存地址是否相等。</li>\n</ul>\n<h4 id=\"如果一个类没有声明构造方法，该程序能正确执行吗？\"><a href=\"#如果一个类没有声明构造方法，该程序能正确执行吗？\" class=\"headerlink\" title=\"如果一个类没有声明构造方法，该程序能正确执行吗？\"></a>如果一个类没有声明构造方法，该程序能正确执行吗？</h4><ul>\n<li>如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。</li>\n<li>如果添加了类的构造方法，无论是否有参，<code>Java</code>都不会添加默认不带参数的构造方法。</li>\n</ul>\n<h4 id=\"构造方法有哪些特点？是否可被重写？\"><a href=\"#构造方法有哪些特点？是否可被重写？\" class=\"headerlink\" title=\"构造方法有哪些特点？是否可被重写？\"></a>构造方法有哪些特点？是否可被重写？</h4><ul>\n<li><strong>构造方法的特点</strong>：<ul>\n<li>名字与类名相同。</li>\n<li>没有返回值。</li>\n<li>生成类的对象时自动执行，无需调用。<br>构造方法不能被重写，但是可以被重载。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象的三大特征\"><a href=\"#面向对象的三大特征\" class=\"headerlink\" title=\"面向对象的三大特征\"></a>面向对象的三大特征</h4><ul>\n<li><strong>封装</strong>：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。</li>\n<li><strong>继承</strong>：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。</li>\n<li><strong>多态</strong>：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。</li>\n</ul>\n<h4 id=\"接口和抽象类有什么共同点和区别？\"><a href=\"#接口和抽象类有什么共同点和区别？\" class=\"headerlink\" title=\"接口和抽象类有什么共同点和区别？\"></a>接口和抽象类有什么共同点和区别？</h4><ul>\n<li><strong>共同点</strong>：<ul>\n<li>都不能被实例化。</li>\n<li>都可以包含抽象方法。</li>\n<li>都可以有默认的实现方法。</li>\n</ul>\n</li>\n<li><strong>区别</strong>：<ul>\n<li>接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。</li>\n<li>抽象类主要用于代码的复用，强调所属关系。</li>\n<li>一个类只能继承一个类，但是可以实现多个接口。</li>\n<li>接口中的成员变量只能是静态常量，不能被修改且必须有初始值。</li>\n<li>抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"深拷贝和浅拷贝的区别？什么是引用拷贝？\"><a href=\"#深拷贝和浅拷贝的区别？什么是引用拷贝？\" class=\"headerlink\" title=\"深拷贝和浅拷贝的区别？什么是引用拷贝？\"></a>深拷贝和浅拷贝的区别？什么是引用拷贝？</h4><ul>\n<li><strong>浅拷贝</strong>：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用<code>Object</code>的<code>clone()</code>方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。</li>\n<li><strong>深拷贝</strong>：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。</li>\n<li><strong>引用拷贝</strong>：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。</li>\n</ul>\n<h4 id=\"和-equals-的区别？\"><a href=\"#和-equals-的区别？\" class=\"headerlink\" title=\"&#x3D;&#x3D; 和 equals()的区别？\"></a>&#x3D;&#x3D; 和 equals()的区别？</h4><ul>\n<li>对于基本数据类型，<code>==</code> 比较的是值。</li>\n<li>对于引用数据类型，<code>==</code> 比较的是对象的内存地址。</li>\n<li><code>equals()</code>没有重写时，等价于<code>==</code>比较两个对象。</li>\n<li>被重写时，一般都重写<code>equals()</code>方法用来比较两个对象中的属性是否相等。</li>\n</ul>\n<h4 id=\"hashCode-有什么用？\"><a href=\"#hashCode-有什么用？\" class=\"headerlink\" title=\"hashCode() 有什么用？\"></a>hashCode() 有什么用？</h4><p><code>hashCode()</code>方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。</p>\n<h4 id=\"为什么重写-equals-时必须重写-hashCode-方法？\"><a href=\"#为什么重写-equals-时必须重写-hashCode-方法？\" class=\"headerlink\" title=\"为什么重写 equals() 时必须重写 hashCode() 方法？\"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h4><p>为了正确使用<code>hashCode()</code>，需要重写<code>equals()</code>方法来实现。如果两个对象根据<code>equals()</code>方法是相等的，那么它们的<code>hashCode</code>值必须相同。如果两个对象的<code>hashCode()</code>相同，它们不一定是相同的，但相等的两个对象必须具有相同的<code>hashCode</code>。</p>\n<h4 id=\"String、StringBuffer、StringBuilder-的区别？\"><a href=\"#String、StringBuffer、StringBuilder-的区别？\" class=\"headerlink\" title=\"String、StringBuffer、StringBuilder 的区别？\"></a>String、StringBuffer、StringBuilder 的区别？</h4><ul>\n<li><strong>String</strong>：不可变的，因为不可变，所以它是线程安全的。</li>\n<li><strong>StringBuffer</strong>：可变的，允许对字符串进行修改，线程安全，所有的方法都被<code>synchronized</code>修饰。</li>\n<li><strong>StringBuilder</strong>：可变的，但不是线程安全的，没有被<code>synchronized</code>修饰。由于没有同步机制，性能比<code>StringBuffer</code>更高，适合单线程环境下使用。</li>\n<li><strong>使用场景</strong>：<ul>\n<li>当字符串是固定不变的时候使用<code>String</code>。</li>\n<li>当需要对字符串进行大量修改且在多线程环境下使用<code>StringBuffer</code>。</li>\n<li>当需要对字符串进行大量修改且在单线程环境下使用<code>StringBuilder</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串常量池的作用了解吗？\"><a href=\"#字符串常量池的作用了解吗？\" class=\"headerlink\" title=\"字符串常量池的作用了解吗？\"></a>字符串常量池的作用了解吗？</h4><p>字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，<code>JVM</code>会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。</p>\n<h4 id=\"Exception-和-Error-有什么区别？\"><a href=\"#Exception-和-Error-有什么区别？\" class=\"headerlink\" title=\"Exception 和 Error 有什么区别？\"></a>Exception 和 Error 有什么区别？</h4><ul>\n<li><strong>Exception</strong>和<strong>Error</strong>都是<strong>Throwable</strong>的子类。</li>\n<li><code>Exception</code>是程序本身可以处理的异常，可以通过<code>catch</code>来捕获。<code>Exception</code>还可以分为<code>checked Exception</code>和<code>Unchecked Exception</code>。</li>\n<li><code>Error</code>是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。</li>\n</ul>\n<h4 id=\"Checked-Exception-和-Unchecked-Exception-有什么区别？\"><a href=\"#Checked-Exception-和-Unchecked-Exception-有什么区别？\" class=\"headerlink\" title=\"Checked Exception 和 Unchecked Exception 有什么区别？\"></a>Checked Exception 和 Unchecked Exception 有什么区别？</h4><ul>\n<li><strong>Checked Exception</strong>必须被捕获或声明，否则编译器会报错。</li>\n<li><strong>Unchecked Exception</strong>也叫运行时异常，不强制要求处理，但最好捕获处理。</li>\n</ul>\n<h4 id=\"什么是泛型？有什么作用？\"><a href=\"#什么是泛型？有什么作用？\" class=\"headerlink\" title=\"什么是泛型？有什么作用？\"></a>什么是泛型？有什么作用？</h4><p>泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，不需要在从集合中取出元素时进行转换。</p>\n<h4 id=\"反射是什么？\"><a href=\"#反射是什么？\" class=\"headerlink\" title=\"反射是什么？\"></a>反射是什么？</h4><p>反射是<code>Java</code>中的一种强大机制，允许程序在运行时检查或修改自身的结构和行为。通过反射可以在运行时获取类的相关信息（如类名、方法、字段、构造函数等），并可以动态调用方法、访问字段、创建对象等。</p>\n<h4 id=\"反射的优缺点？\"><a href=\"#反射的优缺点？\" class=\"headerlink\" title=\"反射的优缺点？\"></a>反射的优缺点？</h4><ul>\n<li><strong>反射的优点</strong>：<ul>\n<li>动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。</li>\n<li>很多流行的<code>Java</code>框架如<code>Spring</code>都依赖反射来实现动态代理、依赖注入。</li>\n</ul>\n</li>\n<li><strong>反射的缺点</strong>：<ul>\n<li>反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。</li>\n<li>反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。</li>\n<li>使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。</li>\n<li>反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"何谓注解？\"><a href=\"#何谓注解？\" class=\"headerlink\" title=\"何谓注解？\"></a>何谓注解？</h4><p>注解是<code>Java</code>中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如<code>@Override</code>注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。</p>\n<h4 id=\"什么是序列化？什么是反序列化？\"><a href=\"#什么是序列化？什么是反序列化？\" class=\"headerlink\" title=\"什么是序列化？什么是反序列化？\"></a>什么是序列化？什么是反序列化？</h4><ul>\n<li><strong>序列化</strong>：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输到另一台机器上。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。</li>\n<li><strong>反序列化</strong>：将字节流转回Java对象的过程。反序列化的主要目的是从文件、数据库或网络中恢复对象的状态，以便在应用程序中使用。</li>\n</ul>\n<p>以上内容涵盖了Java基础的一些关键点，希望对你有所帮助。</p>\n","excerpt":"","more":"<h3 id=\"Java-基础八股文\"><a href=\"#Java-基础八股文\" class=\"headerlink\" title=\"Java 基础八股文\"></a>Java 基础八股文</h3><h4 id=\"对象的相等和引用相等的区别\"><a href=\"#对象的相等和引用相等的区别\" class=\"headerlink\" title=\"对象的相等和引用相等的区别\"></a>对象的相等和引用相等的区别</h4><ul>\n<li><strong>对象的相等</strong>：比较的是内存中存放的内容是否相等。</li>\n<li><strong>引用相等</strong>：比较的是它们指向的内存地址是否相等。</li>\n</ul>\n<h4 id=\"如果一个类没有声明构造方法，该程序能正确执行吗？\"><a href=\"#如果一个类没有声明构造方法，该程序能正确执行吗？\" class=\"headerlink\" title=\"如果一个类没有声明构造方法，该程序能正确执行吗？\"></a>如果一个类没有声明构造方法，该程序能正确执行吗？</h4><ul>\n<li>如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。</li>\n<li>如果添加了类的构造方法，无论是否有参，<code>Java</code>都不会添加默认不带参数的构造方法。</li>\n</ul>\n<h4 id=\"构造方法有哪些特点？是否可被重写？\"><a href=\"#构造方法有哪些特点？是否可被重写？\" class=\"headerlink\" title=\"构造方法有哪些特点？是否可被重写？\"></a>构造方法有哪些特点？是否可被重写？</h4><ul>\n<li><strong>构造方法的特点</strong>：<ul>\n<li>名字与类名相同。</li>\n<li>没有返回值。</li>\n<li>生成类的对象时自动执行，无需调用。<br>构造方法不能被重写，但是可以被重载。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象的三大特征\"><a href=\"#面向对象的三大特征\" class=\"headerlink\" title=\"面向对象的三大特征\"></a>面向对象的三大特征</h4><ul>\n<li><strong>封装</strong>：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。</li>\n<li><strong>继承</strong>：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。</li>\n<li><strong>多态</strong>：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。</li>\n</ul>\n<h4 id=\"接口和抽象类有什么共同点和区别？\"><a href=\"#接口和抽象类有什么共同点和区别？\" class=\"headerlink\" title=\"接口和抽象类有什么共同点和区别？\"></a>接口和抽象类有什么共同点和区别？</h4><ul>\n<li><strong>共同点</strong>：<ul>\n<li>都不能被实例化。</li>\n<li>都可以包含抽象方法。</li>\n<li>都可以有默认的实现方法。</li>\n</ul>\n</li>\n<li><strong>区别</strong>：<ul>\n<li>接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。</li>\n<li>抽象类主要用于代码的复用，强调所属关系。</li>\n<li>一个类只能继承一个类，但是可以实现多个接口。</li>\n<li>接口中的成员变量只能是静态常量，不能被修改且必须有初始值。</li>\n<li>抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"深拷贝和浅拷贝的区别？什么是引用拷贝？\"><a href=\"#深拷贝和浅拷贝的区别？什么是引用拷贝？\" class=\"headerlink\" title=\"深拷贝和浅拷贝的区别？什么是引用拷贝？\"></a>深拷贝和浅拷贝的区别？什么是引用拷贝？</h4><ul>\n<li><strong>浅拷贝</strong>：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用<code>Object</code>的<code>clone()</code>方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。</li>\n<li><strong>深拷贝</strong>：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。</li>\n<li><strong>引用拷贝</strong>：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。</li>\n</ul>\n<h4 id=\"和-equals-的区别？\"><a href=\"#和-equals-的区别？\" class=\"headerlink\" title=\"&#x3D;&#x3D; 和 equals()的区别？\"></a>&#x3D;&#x3D; 和 equals()的区别？</h4><ul>\n<li>对于基本数据类型，<code>==</code> 比较的是值。</li>\n<li>对于引用数据类型，<code>==</code> 比较的是对象的内存地址。</li>\n<li><code>equals()</code>没有重写时，等价于<code>==</code>比较两个对象。</li>\n<li>被重写时，一般都重写<code>equals()</code>方法用来比较两个对象中的属性是否相等。</li>\n</ul>\n<h4 id=\"hashCode-有什么用？\"><a href=\"#hashCode-有什么用？\" class=\"headerlink\" title=\"hashCode() 有什么用？\"></a>hashCode() 有什么用？</h4><p><code>hashCode()</code>方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。</p>\n<h4 id=\"为什么重写-equals-时必须重写-hashCode-方法？\"><a href=\"#为什么重写-equals-时必须重写-hashCode-方法？\" class=\"headerlink\" title=\"为什么重写 equals() 时必须重写 hashCode() 方法？\"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h4><p>为了正确使用<code>hashCode()</code>，需要重写<code>equals()</code>方法来实现。如果两个对象根据<code>equals()</code>方法是相等的，那么它们的<code>hashCode</code>值必须相同。如果两个对象的<code>hashCode()</code>相同，它们不一定是相同的，但相等的两个对象必须具有相同的<code>hashCode</code>。</p>\n<h4 id=\"String、StringBuffer、StringBuilder-的区别？\"><a href=\"#String、StringBuffer、StringBuilder-的区别？\" class=\"headerlink\" title=\"String、StringBuffer、StringBuilder 的区别？\"></a>String、StringBuffer、StringBuilder 的区别？</h4><ul>\n<li><strong>String</strong>：不可变的，因为不可变，所以它是线程安全的。</li>\n<li><strong>StringBuffer</strong>：可变的，允许对字符串进行修改，线程安全，所有的方法都被<code>synchronized</code>修饰。</li>\n<li><strong>StringBuilder</strong>：可变的，但不是线程安全的，没有被<code>synchronized</code>修饰。由于没有同步机制，性能比<code>StringBuffer</code>更高，适合单线程环境下使用。</li>\n<li><strong>使用场景</strong>：<ul>\n<li>当字符串是固定不变的时候使用<code>String</code>。</li>\n<li>当需要对字符串进行大量修改且在多线程环境下使用<code>StringBuffer</code>。</li>\n<li>当需要对字符串进行大量修改且在单线程环境下使用<code>StringBuilder</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串常量池的作用了解吗？\"><a href=\"#字符串常量池的作用了解吗？\" class=\"headerlink\" title=\"字符串常量池的作用了解吗？\"></a>字符串常量池的作用了解吗？</h4><p>字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，<code>JVM</code>会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。</p>\n<h4 id=\"Exception-和-Error-有什么区别？\"><a href=\"#Exception-和-Error-有什么区别？\" class=\"headerlink\" title=\"Exception 和 Error 有什么区别？\"></a>Exception 和 Error 有什么区别？</h4><ul>\n<li><strong>Exception</strong>和<strong>Error</strong>都是<strong>Throwable</strong>的子类。</li>\n<li><code>Exception</code>是程序本身可以处理的异常，可以通过<code>catch</code>来捕获。<code>Exception</code>还可以分为<code>checked Exception</code>和<code>Unchecked Exception</code>。</li>\n<li><code>Error</code>是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。</li>\n</ul>\n<h4 id=\"Checked-Exception-和-Unchecked-Exception-有什么区别？\"><a href=\"#Checked-Exception-和-Unchecked-Exception-有什么区别？\" class=\"headerlink\" title=\"Checked Exception 和 Unchecked Exception 有什么区别？\"></a>Checked Exception 和 Unchecked Exception 有什么区别？</h4><ul>\n<li><strong>Checked Exception</strong>必须被捕获或声明，否则编译器会报错。</li>\n<li><strong>Unchecked Exception</strong>也叫运行时异常，不强制要求处理，但最好捕获处理。</li>\n</ul>\n<h4 id=\"什么是泛型？有什么作用？\"><a href=\"#什么是泛型？有什么作用？\" class=\"headerlink\" title=\"什么是泛型？有什么作用？\"></a>什么是泛型？有什么作用？</h4><p>泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，不需要在从集合中取出元素时进行转换。</p>\n<h4 id=\"反射是什么？\"><a href=\"#反射是什么？\" class=\"headerlink\" title=\"反射是什么？\"></a>反射是什么？</h4><p>反射是<code>Java</code>中的一种强大机制，允许程序在运行时检查或修改自身的结构和行为。通过反射可以在运行时获取类的相关信息（如类名、方法、字段、构造函数等），并可以动态调用方法、访问字段、创建对象等。</p>\n<h4 id=\"反射的优缺点？\"><a href=\"#反射的优缺点？\" class=\"headerlink\" title=\"反射的优缺点？\"></a>反射的优缺点？</h4><ul>\n<li><strong>反射的优点</strong>：<ul>\n<li>动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。</li>\n<li>很多流行的<code>Java</code>框架如<code>Spring</code>都依赖反射来实现动态代理、依赖注入。</li>\n</ul>\n</li>\n<li><strong>反射的缺点</strong>：<ul>\n<li>反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。</li>\n<li>反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。</li>\n<li>使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。</li>\n<li>反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"何谓注解？\"><a href=\"#何谓注解？\" class=\"headerlink\" title=\"何谓注解？\"></a>何谓注解？</h4><p>注解是<code>Java</code>中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如<code>@Override</code>注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。</p>\n<h4 id=\"什么是序列化？什么是反序列化？\"><a href=\"#什么是序列化？什么是反序列化？\" class=\"headerlink\" title=\"什么是序列化？什么是反序列化？\"></a>什么是序列化？什么是反序列化？</h4><ul>\n<li><strong>序列化</strong>：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输到另一台机器上。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。</li>\n<li><strong>反序列化</strong>：将字节流转回Java对象的过程。反序列化的主要目的是从文件、数据库或网络中恢复对象的状态，以便在应用程序中使用。</li>\n</ul>\n<p>以上内容涵盖了Java基础的一些关键点，希望对你有所帮助。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Java集合八股文","date":"2024-06-22T08:48:56.000Z","categorizes":"Java","cover":"/img/JavaCollection.png","_content":"\n# Java集合\n\n### 说说 List, Set, Queue, Map 四者的区别？\n\n- `List`：存储的元素是有序的、可重复的。\n\n- `Set`：存储的元素不可重复。\n- `Queue`：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。\n- `Map`：使用键值对存储，`key`是无序的、不可重复的，`value`是无序的、可重复的。\n\n## List\n\n### ArrayList 和 Array （数组）的区别？\n\n`ArrayList`内部基于动态数组实现，比静态数组使用起来更灵活：\n\n- `ArrayList` 会根据实际存储的元素动态地扩容或缩容，而数组被创建之后就不能改变它的长度了。\n- `ArrayList` 可以使用泛型来确保类型安全\n- `ArrayList`中只能存储对象。对于基本数据类型，需要使用其对应的包装类。数组可以直接存储基本数据类型，页可以存储对象。\n- `ArrayList` 支持插入、删除、遍历等常用操作，并提供了很多`API`，数组只能通过下标访问其中的元素，不具备动态添加、删除元素的能力。\n- `ArrayList` 创建时不需要指定大小，而数组创建时必须指定大小。\n\n### ArrayList 可以添加 null 吗？\n\n`ArrayList`中可以存储任何类型的对象，包括`null`。\n\n","source":"_posts/Java集合八股文.md","raw":"---\ntitle: Java集合八股文\ndate: 2024-06-22 16:48:56\ntags: \n   - Java\n   - 八股文\ncategorizes: Java\ncover: /img/JavaCollection.png\n---\n\n# Java集合\n\n### 说说 List, Set, Queue, Map 四者的区别？\n\n- `List`：存储的元素是有序的、可重复的。\n\n- `Set`：存储的元素不可重复。\n- `Queue`：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。\n- `Map`：使用键值对存储，`key`是无序的、不可重复的，`value`是无序的、可重复的。\n\n## List\n\n### ArrayList 和 Array （数组）的区别？\n\n`ArrayList`内部基于动态数组实现，比静态数组使用起来更灵活：\n\n- `ArrayList` 会根据实际存储的元素动态地扩容或缩容，而数组被创建之后就不能改变它的长度了。\n- `ArrayList` 可以使用泛型来确保类型安全\n- `ArrayList`中只能存储对象。对于基本数据类型，需要使用其对应的包装类。数组可以直接存储基本数据类型，页可以存储对象。\n- `ArrayList` 支持插入、删除、遍历等常用操作，并提供了很多`API`，数组只能通过下标访问其中的元素，不具备动态添加、删除元素的能力。\n- `ArrayList` 创建时不需要指定大小，而数组创建时必须指定大小。\n\n### ArrayList 可以添加 null 吗？\n\n`ArrayList`中可以存储任何类型的对象，包括`null`。\n\n","slug":"Java集合八股文","published":1,"updated":"2024-06-22T09:14:43.869Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbk0006glj8g1eg7xv2","content":"<h1 id=\"Java集合\"><a href=\"#Java集合\" class=\"headerlink\" title=\"Java集合\"></a>Java集合</h1><h3 id=\"说说-List-Set-Queue-Map-四者的区别？\"><a href=\"#说说-List-Set-Queue-Map-四者的区别？\" class=\"headerlink\" title=\"说说 List, Set, Queue, Map 四者的区别？\"></a>说说 List, Set, Queue, Map 四者的区别？</h3><ul>\n<li><p><code>List</code>：存储的元素是有序的、可重复的。</p>\n</li>\n<li><p><code>Set</code>：存储的元素不可重复。</p>\n</li>\n<li><p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。</p>\n</li>\n<li><p><code>Map</code>：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的。</p>\n</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"ArrayList-和-Array-（数组）的区别？\"><a href=\"#ArrayList-和-Array-（数组）的区别？\" class=\"headerlink\" title=\"ArrayList 和 Array （数组）的区别？\"></a>ArrayList 和 Array （数组）的区别？</h3><p><code>ArrayList</code>内部基于动态数组实现，比静态数组使用起来更灵活：</p>\n<ul>\n<li><code>ArrayList</code> 会根据实际存储的元素动态地扩容或缩容，而数组被创建之后就不能改变它的长度了。</li>\n<li><code>ArrayList</code> 可以使用泛型来确保类型安全</li>\n<li><code>ArrayList</code>中只能存储对象。对于基本数据类型，需要使用其对应的包装类。数组可以直接存储基本数据类型，页可以存储对象。</li>\n<li><code>ArrayList</code> 支持插入、删除、遍历等常用操作，并提供了很多<code>API</code>，数组只能通过下标访问其中的元素，不具备动态添加、删除元素的能力。</li>\n<li><code>ArrayList</code> 创建时不需要指定大小，而数组创建时必须指定大小。</li>\n</ul>\n<h3 id=\"ArrayList-可以添加-null-吗？\"><a href=\"#ArrayList-可以添加-null-吗？\" class=\"headerlink\" title=\"ArrayList 可以添加 null 吗？\"></a>ArrayList 可以添加 null 吗？</h3><p><code>ArrayList</code>中可以存储任何类型的对象，包括<code>null</code>。</p>\n","excerpt":"","more":"<h1 id=\"Java集合\"><a href=\"#Java集合\" class=\"headerlink\" title=\"Java集合\"></a>Java集合</h1><h3 id=\"说说-List-Set-Queue-Map-四者的区别？\"><a href=\"#说说-List-Set-Queue-Map-四者的区别？\" class=\"headerlink\" title=\"说说 List, Set, Queue, Map 四者的区别？\"></a>说说 List, Set, Queue, Map 四者的区别？</h3><ul>\n<li><p><code>List</code>：存储的元素是有序的、可重复的。</p>\n</li>\n<li><p><code>Set</code>：存储的元素不可重复。</p>\n</li>\n<li><p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。</p>\n</li>\n<li><p><code>Map</code>：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的。</p>\n</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"ArrayList-和-Array-（数组）的区别？\"><a href=\"#ArrayList-和-Array-（数组）的区别？\" class=\"headerlink\" title=\"ArrayList 和 Array （数组）的区别？\"></a>ArrayList 和 Array （数组）的区别？</h3><p><code>ArrayList</code>内部基于动态数组实现，比静态数组使用起来更灵活：</p>\n<ul>\n<li><code>ArrayList</code> 会根据实际存储的元素动态地扩容或缩容，而数组被创建之后就不能改变它的长度了。</li>\n<li><code>ArrayList</code> 可以使用泛型来确保类型安全</li>\n<li><code>ArrayList</code>中只能存储对象。对于基本数据类型，需要使用其对应的包装类。数组可以直接存储基本数据类型，页可以存储对象。</li>\n<li><code>ArrayList</code> 支持插入、删除、遍历等常用操作，并提供了很多<code>API</code>，数组只能通过下标访问其中的元素，不具备动态添加、删除元素的能力。</li>\n<li><code>ArrayList</code> 创建时不需要指定大小，而数组创建时必须指定大小。</li>\n</ul>\n<h3 id=\"ArrayList-可以添加-null-吗？\"><a href=\"#ArrayList-可以添加-null-吗？\" class=\"headerlink\" title=\"ArrayList 可以添加 null 吗？\"></a>ArrayList 可以添加 null 吗？</h3><p><code>ArrayList</code>中可以存储任何类型的对象，包括<code>null</code>。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Linux安装MySQL","date":"2024-06-25T04:18:14.000Z","categorizes":["Linux","MySQL"],"cover":"https://cloud.lushiwu.top/f/kXCn/%E3%80%90%E7%89%B9%E5%86%99%E3%80%912024-06-25%2012_21_11.png","_content":"\n# 如何在Ubuntu上安装和配置MySQL并允许远程访问\n\n在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。\n\n## 步骤1：更新包列表并安装MySQL服务器\n\n首先，确保你的包列表是最新的：\n\n```bash\nsudo apt update\n```\n\n然后安装MySQL服务器：\n\n```bash\nsudo apt install mysql-server\n```\n\n如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：\n\n```bash\nsudo apt install -y mysql-server-8.0\n```\n\n## 步骤2：检查MySQL服务状态并启用MySQL服务\n\n检查MySQL服务是否正在运行：\n\n```bash\nsudo systemctl status mysql\n```\n\n确保MySQL服务在系统启动时自动启动：\n\n```bash\nsudo systemctl enable mysql\n```\n\n## 步骤3：运行安全安装脚本\n\nMySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：\n\n```bash\nsudo mysql_secure_installation\n```\n\n在提示中，你将需要：\n\n- 选择密码规则\n- 删除匿名用户\n- 禁用远程root登录\n- 删除测试数据库和表\n\n## 步骤4：修改MySQL配置文件以允许远程连接\n\n打开MySQL配置文件`mysqld.cnf`，通常位于`/etc/mysql/mysql.conf.d/`目录中：\n\n```bash\nsudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n找到以下行：\n\n```plaintext\nbind-address = 127.0.0.1\n```\n\n将其注释掉或改为`0.0.0.0`，使MySQL监听所有网络接口：\n\n```plaintext\n# bind-address = 127.0.0.1\nbind-address = 0.0.0.0\n```\n\n保存配置文件并退出编辑器。\n\n## 步骤5：重启MySQL服务\n\n重启MySQL服务以使更改生效：\n\n```bash\nsudo systemctl restart mysql\n```\n\n## 步骤6：创建可以远程访问的用户\n\n登录到MySQL命令行：\n\n```bash\nmysql -u root -p\n```\n\n在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：\n\n```sql\nCREATE USER 'yourusername'@'%' IDENTIFIED BY 'yourpassword';\nGRANT ALL PRIVILEGES ON *.* TO 'yourusername'@'%' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n```\n\n**解释：**\n\n- **GRANT ALL PRIVILEGES**：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。\n- **ON *.***：授予权限的范围。`*.*`表示所有数据库和所有表。\n- **TO 'yourusername'@'%'**：指定权限接收者。`'yourusername'`是用户名，`'%'`是主机名通配符，表示允许从任何IP地址连接的用户。\n- **WITH GRANT OPTION**：允许用户将他自己拥有的权限授予其他用户。\n\n## 步骤7：配置防火墙\n\n确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：\n\n```bash\nsudo ufw allow 3306\nsudo ufw reload\n```\n\n## 步骤8：验证远程连接\n\n在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：\n\n```bash\nmysql -u yourusername -p -h your_server_ip\n```\n\n## 其他操作\n\n### 删除某些权限或用户\n\n如果你想删除某些权限，或者从特定数据库中删除权限，可以使用`REVOKE`命令。例如：\n\n```sql\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 'existinguser'@'%';\n```\n\n### 查看某个用户的当前权限\n\n如果你想查看某个用户的当前权限，可以使用以下命令：\n\n```sql\nSHOW GRANTS FOR 'existinguser'@'%';\n```\n\n通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！\n","source":"_posts/Linux安装MySQL.md","raw":"---\ntitle: Linux安装MySQL\ndate: 2024-06-25 12:18:14\ntags:\n    - MySQL\n    - Linux\ncategorizes: \n    - Linux\n    - MySQL\ncover: https://cloud.lushiwu.top/f/kXCn/%E3%80%90%E7%89%B9%E5%86%99%E3%80%912024-06-25%2012_21_11.png\n---\n\n# 如何在Ubuntu上安装和配置MySQL并允许远程访问\n\n在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。\n\n## 步骤1：更新包列表并安装MySQL服务器\n\n首先，确保你的包列表是最新的：\n\n```bash\nsudo apt update\n```\n\n然后安装MySQL服务器：\n\n```bash\nsudo apt install mysql-server\n```\n\n如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：\n\n```bash\nsudo apt install -y mysql-server-8.0\n```\n\n## 步骤2：检查MySQL服务状态并启用MySQL服务\n\n检查MySQL服务是否正在运行：\n\n```bash\nsudo systemctl status mysql\n```\n\n确保MySQL服务在系统启动时自动启动：\n\n```bash\nsudo systemctl enable mysql\n```\n\n## 步骤3：运行安全安装脚本\n\nMySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：\n\n```bash\nsudo mysql_secure_installation\n```\n\n在提示中，你将需要：\n\n- 选择密码规则\n- 删除匿名用户\n- 禁用远程root登录\n- 删除测试数据库和表\n\n## 步骤4：修改MySQL配置文件以允许远程连接\n\n打开MySQL配置文件`mysqld.cnf`，通常位于`/etc/mysql/mysql.conf.d/`目录中：\n\n```bash\nsudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n找到以下行：\n\n```plaintext\nbind-address = 127.0.0.1\n```\n\n将其注释掉或改为`0.0.0.0`，使MySQL监听所有网络接口：\n\n```plaintext\n# bind-address = 127.0.0.1\nbind-address = 0.0.0.0\n```\n\n保存配置文件并退出编辑器。\n\n## 步骤5：重启MySQL服务\n\n重启MySQL服务以使更改生效：\n\n```bash\nsudo systemctl restart mysql\n```\n\n## 步骤6：创建可以远程访问的用户\n\n登录到MySQL命令行：\n\n```bash\nmysql -u root -p\n```\n\n在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：\n\n```sql\nCREATE USER 'yourusername'@'%' IDENTIFIED BY 'yourpassword';\nGRANT ALL PRIVILEGES ON *.* TO 'yourusername'@'%' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n```\n\n**解释：**\n\n- **GRANT ALL PRIVILEGES**：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。\n- **ON *.***：授予权限的范围。`*.*`表示所有数据库和所有表。\n- **TO 'yourusername'@'%'**：指定权限接收者。`'yourusername'`是用户名，`'%'`是主机名通配符，表示允许从任何IP地址连接的用户。\n- **WITH GRANT OPTION**：允许用户将他自己拥有的权限授予其他用户。\n\n## 步骤7：配置防火墙\n\n确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：\n\n```bash\nsudo ufw allow 3306\nsudo ufw reload\n```\n\n## 步骤8：验证远程连接\n\n在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：\n\n```bash\nmysql -u yourusername -p -h your_server_ip\n```\n\n## 其他操作\n\n### 删除某些权限或用户\n\n如果你想删除某些权限，或者从特定数据库中删除权限，可以使用`REVOKE`命令。例如：\n\n```sql\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 'existinguser'@'%';\n```\n\n### 查看某个用户的当前权限\n\n如果你想查看某个用户的当前权限，可以使用以下命令：\n\n```sql\nSHOW GRANTS FOR 'existinguser'@'%';\n```\n\n通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！\n","slug":"Linux安装MySQL","published":1,"updated":"2024-06-25T05:05:47.106Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbl0007glj827s95lmr","content":"<h1 id=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"><a href=\"#如何在Ubuntu上安装和配置MySQL并允许远程访问\" class=\"headerlink\" title=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"></a>如何在Ubuntu上安装和配置MySQL并允许远程访问</h1><p>在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。</p>\n<h2 id=\"步骤1：更新包列表并安装MySQL服务器\"><a href=\"#步骤1：更新包列表并安装MySQL服务器\" class=\"headerlink\" title=\"步骤1：更新包列表并安装MySQL服务器\"></a>步骤1：更新包列表并安装MySQL服务器</h2><p>首先，确保你的包列表是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后安装MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mysql-server-8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤2：检查MySQL服务状态并启用MySQL服务\"><a href=\"#步骤2：检查MySQL服务状态并启用MySQL服务\" class=\"headerlink\" title=\"步骤2：检查MySQL服务状态并启用MySQL服务\"></a>步骤2：检查MySQL服务状态并启用MySQL服务</h2><p>检查MySQL服务是否正在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确保MySQL服务在系统启动时自动启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤3：运行安全安装脚本\"><a href=\"#步骤3：运行安全安装脚本\" class=\"headerlink\" title=\"步骤3：运行安全安装脚本\"></a>步骤3：运行安全安装脚本</h2><p>MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在提示中，你将需要：</p>\n<ul>\n<li>选择密码规则</li>\n<li>删除匿名用户</li>\n<li>禁用远程root登录</li>\n<li>删除测试数据库和表</li>\n</ul>\n<h2 id=\"步骤4：修改MySQL配置文件以允许远程连接\"><a href=\"#步骤4：修改MySQL配置文件以允许远程连接\" class=\"headerlink\" title=\"步骤4：修改MySQL配置文件以允许远程连接\"></a>步骤4：修改MySQL配置文件以允许远程连接</h2><p>打开MySQL配置文件<code>mysqld.cnf</code>，通常位于<code>/etc/mysql/mysql.conf.d/</code>目录中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到以下行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bind-address &#x3D; 127.0.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将其注释掉或改为<code>0.0.0.0</code>，使MySQL监听所有网络接口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># bind-address &#x3D; 127.0.0.1\nbind-address &#x3D; 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>保存配置文件并退出编辑器。</p>\n<h2 id=\"步骤5：重启MySQL服务\"><a href=\"#步骤5：重启MySQL服务\" class=\"headerlink\" title=\"步骤5：重启MySQL服务\"></a>步骤5：重启MySQL服务</h2><p>重启MySQL服务以使更改生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤6：创建可以远程访问的用户\"><a href=\"#步骤6：创建可以远程访问的用户\" class=\"headerlink\" title=\"步骤6：创建可以远程访问的用户\"></a>步骤6：创建可以远程访问的用户</h2><p>登录到MySQL命令行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'yourpassword'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>解释：</strong></p>\n<ul>\n<li><strong>GRANT ALL PRIVILEGES</strong>：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。</li>\n<li>**ON *.***：授予权限的范围。<code>*.*</code>表示所有数据库和所有表。</li>\n<li>**TO ‘yourusername‘@’%’**：指定权限接收者。<code>&#39;yourusername&#39;</code>是用户名，<code>&#39;%&#39;</code>是主机名通配符，表示允许从任何IP地址连接的用户。</li>\n<li><strong>WITH GRANT OPTION</strong>：允许用户将他自己拥有的权限授予其他用户。</li>\n</ul>\n<h2 id=\"步骤7：配置防火墙\"><a href=\"#步骤7：配置防火墙\" class=\"headerlink\" title=\"步骤7：配置防火墙\"></a>步骤7：配置防火墙</h2><p>确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3306</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤8：验证远程连接\"><a href=\"#步骤8：验证远程连接\" class=\"headerlink\" title=\"步骤8：验证远程连接\"></a>步骤8：验证远程连接</h2><p>在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> yourusername <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-h</span> your_server_ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h2><h3 id=\"删除某些权限或用户\"><a href=\"#删除某些权限或用户\" class=\"headerlink\" title=\"删除某些权限或用户\"></a>删除某些权限或用户</h3><p>如果你想删除某些权限，或者从特定数据库中删除权限，可以使用<code>REVOKE</code>命令。例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span> <span class=\"token keyword\">FROM</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看某个用户的当前权限\"><a href=\"#查看某个用户的当前权限\" class=\"headerlink\" title=\"查看某个用户的当前权限\"></a>查看某个用户的当前权限</h3><p>如果你想查看某个用户的当前权限，可以使用以下命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！</p>\n","excerpt":"","more":"<h1 id=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"><a href=\"#如何在Ubuntu上安装和配置MySQL并允许远程访问\" class=\"headerlink\" title=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"></a>如何在Ubuntu上安装和配置MySQL并允许远程访问</h1><p>在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。</p>\n<h2 id=\"步骤1：更新包列表并安装MySQL服务器\"><a href=\"#步骤1：更新包列表并安装MySQL服务器\" class=\"headerlink\" title=\"步骤1：更新包列表并安装MySQL服务器\"></a>步骤1：更新包列表并安装MySQL服务器</h2><p>首先，确保你的包列表是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后安装MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mysql-server-8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤2：检查MySQL服务状态并启用MySQL服务\"><a href=\"#步骤2：检查MySQL服务状态并启用MySQL服务\" class=\"headerlink\" title=\"步骤2：检查MySQL服务状态并启用MySQL服务\"></a>步骤2：检查MySQL服务状态并启用MySQL服务</h2><p>检查MySQL服务是否正在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确保MySQL服务在系统启动时自动启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤3：运行安全安装脚本\"><a href=\"#步骤3：运行安全安装脚本\" class=\"headerlink\" title=\"步骤3：运行安全安装脚本\"></a>步骤3：运行安全安装脚本</h2><p>MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在提示中，你将需要：</p>\n<ul>\n<li>选择密码规则</li>\n<li>删除匿名用户</li>\n<li>禁用远程root登录</li>\n<li>删除测试数据库和表</li>\n</ul>\n<h2 id=\"步骤4：修改MySQL配置文件以允许远程连接\"><a href=\"#步骤4：修改MySQL配置文件以允许远程连接\" class=\"headerlink\" title=\"步骤4：修改MySQL配置文件以允许远程连接\"></a>步骤4：修改MySQL配置文件以允许远程连接</h2><p>打开MySQL配置文件<code>mysqld.cnf</code>，通常位于<code>/etc/mysql/mysql.conf.d/</code>目录中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到以下行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bind-address &#x3D; 127.0.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将其注释掉或改为<code>0.0.0.0</code>，使MySQL监听所有网络接口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># bind-address &#x3D; 127.0.0.1\nbind-address &#x3D; 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>保存配置文件并退出编辑器。</p>\n<h2 id=\"步骤5：重启MySQL服务\"><a href=\"#步骤5：重启MySQL服务\" class=\"headerlink\" title=\"步骤5：重启MySQL服务\"></a>步骤5：重启MySQL服务</h2><p>重启MySQL服务以使更改生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"步骤6：创建可以远程访问的用户\"><a href=\"#步骤6：创建可以远程访问的用户\" class=\"headerlink\" title=\"步骤6：创建可以远程访问的用户\"></a>步骤6：创建可以远程访问的用户</h2><p>登录到MySQL命令行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'yourpassword'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>解释：</strong></p>\n<ul>\n<li><strong>GRANT ALL PRIVILEGES</strong>：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。</li>\n<li>**ON *.***：授予权限的范围。<code>*.*</code>表示所有数据库和所有表。</li>\n<li>**TO ‘yourusername‘@’%’**：指定权限接收者。<code>&#39;yourusername&#39;</code>是用户名，<code>&#39;%&#39;</code>是主机名通配符，表示允许从任何IP地址连接的用户。</li>\n<li><strong>WITH GRANT OPTION</strong>：允许用户将他自己拥有的权限授予其他用户。</li>\n</ul>\n<h2 id=\"步骤7：配置防火墙\"><a href=\"#步骤7：配置防火墙\" class=\"headerlink\" title=\"步骤7：配置防火墙\"></a>步骤7：配置防火墙</h2><p>确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3306</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤8：验证远程连接\"><a href=\"#步骤8：验证远程连接\" class=\"headerlink\" title=\"步骤8：验证远程连接\"></a>步骤8：验证远程连接</h2><p>在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> yourusername <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-h</span> your_server_ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h2><h3 id=\"删除某些权限或用户\"><a href=\"#删除某些权限或用户\" class=\"headerlink\" title=\"删除某些权限或用户\"></a>删除某些权限或用户</h3><p>如果你想删除某些权限，或者从特定数据库中删除权限，可以使用<code>REVOKE</code>命令。例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span> <span class=\"token keyword\">FROM</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看某个用户的当前权限\"><a href=\"#查看某个用户的当前权限\" class=\"headerlink\" title=\"查看某个用户的当前权限\"></a>查看某个用户的当前权限</h3><p>如果你想查看某个用户的当前权限，可以使用以下命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Myql八股文","date":"2024-06-22T10:02:39.000Z","cover":"/img/mysqlbaguwen.png","_content":"\n# 数据库\n\n## MySQL 索引：索引为什么使用B+树？\n\n","source":"_posts/Myql八股文.md","raw":"---\ntitle: Myql八股文\ndate: 2024-06-22 18:02:39\ntags:\n  - MySQL\n  - 八股文\ncategories: MySQL\ncover: /img/mysqlbaguwen.png\n---\n\n# 数据库\n\n## MySQL 索引：索引为什么使用B+树？\n\n","slug":"Myql八股文","published":1,"updated":"2024-06-23T02:54:51.206Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbm0008glj8aiml0bk4","content":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"MySQL-索引：索引为什么使用B-树？\"><a href=\"#MySQL-索引：索引为什么使用B-树？\" class=\"headerlink\" title=\"MySQL 索引：索引为什么使用B+树？\"></a>MySQL 索引：索引为什么使用B+树？</h2>","excerpt":"","more":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"MySQL-索引：索引为什么使用B-树？\"><a href=\"#MySQL-索引：索引为什么使用B-树？\" class=\"headerlink\" title=\"MySQL 索引：索引为什么使用B+树？\"></a>MySQL 索引：索引为什么使用B+树？</h2>","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Spring八股文","date":"2024-06-22T10:11:04.000Z","cover":"/img/springbaguwen.png","_content":"\n## Spring 常见面试题总结\n\n### 什么是Spring框架？\n\nSpring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。\n\n\n\n### 谈谈自己对于Spring IoC的了解\n\n**IoC（Inversion of Control 控制反转）**是一种设计思想，而不是一个具体的技术实现。\n\nIoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。\n\n\n\n#### 为什么叫控制反转？\n\n- **控制**：指的是对象创建（实例化、管理）的权利\n- **反转**：控制权交给外部环境（Spring框架、IoC容器）\n\n将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。\n\n在 Spring 中，IoC 容器是Spring用来实现 IoC 的载体，IoC 容器实际上就是个Map。\n\nSpring 框架一般通过XML文件来配置 Bean,因为 XML 文件配置很麻烦，然后就开始用 SpringBoot 注解配置。\n\n\n\n### 什么是 Bean？\n\nBean 就是哪些被 IoC 容器所管理的对象。\n\n\n\n### @Component和@Bean的区别是什么？\n\n- @Component 注解用于类，@Bean 注解用于方法。\n- @Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 注解告诉类 Spring 这是某个类的实例，当我需要的时候给我。\n- @Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。\n\n\n\n### 注入Bean的注解有哪些？\n\nSpring 内置的Autowired 还有 JDK 内置的 @Resource 和 @Inject 都可以用于注入 Bean。\n\n\n\n### @Autowired和@Resource的区别是什么？\n\n- @Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。\n- 当一个接口存在多个实现类的情况下，@Autowired 和 @Resource 都需要通过名称才能正确匹配到对应的  Bean。Autowired 可以通过 @Qualifier 注解来显式指定名称，@Resource 可以通过 name 属性来显式指定名称。\n- @Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。\n\n\n\n### Bean 的作用域有哪些?\n\n- **Singleton** Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。\n- **prototype**  每次请求都会创建一个新的实例。\n- **Request** 每次 Http 请求都会创建一个新的 bean 实例。\n- **Session** 每个 Http Session 中会有一个 bean 实例。\n\n\n\n### Bean 是线程安全的吗？\n\n在 Spring 中 Bean 是否安全，取决于其作用域和状态。\n\n单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。\n\n\n\n### Bean的生命周期了解么？\n\nTodo\n\n\n\n### 谈谈对于AOP的了解\n\nAOP（面向切面编程）能够将哪些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的扩展性和可维护性。\n\nSpring AOP就是基于动态代理的，如果代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理，这时候Spring AOP会使用Cglib生成一个被代理对象的子类作为代理\n\n\n\n### Spring AOP 和 AspectJ AOP 有什么区别？\n\nSpring AOP属于运行时增强，而AspectJ是编译时增强。\n\nSpring AOP基于代理，而AspectJ基于字节码操作。\n\nSpring AOP已经集成了AspectJ，AspectJ相对于Spring AOP功能更加强大，但是Spring AOP相对来说更简单，如果我们的切面比较少，那么两者性能差异不大。当切面太多的时候，最好选择AspectJ，它比Spring AOP快很多\n\n\n\n","source":"_posts/Spring八股文.md","raw":"---\ntitle: Spring八股文\ndate: 2024-06-22 18:11:04\ntags:\n  - Java\n  - Spring\n  - 八股文\ncategories: Java\ncover: /img/springbaguwen.png\n---\n\n## Spring 常见面试题总结\n\n### 什么是Spring框架？\n\nSpring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。\n\n\n\n### 谈谈自己对于Spring IoC的了解\n\n**IoC（Inversion of Control 控制反转）**是一种设计思想，而不是一个具体的技术实现。\n\nIoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。\n\n\n\n#### 为什么叫控制反转？\n\n- **控制**：指的是对象创建（实例化、管理）的权利\n- **反转**：控制权交给外部环境（Spring框架、IoC容器）\n\n将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。\n\n在 Spring 中，IoC 容器是Spring用来实现 IoC 的载体，IoC 容器实际上就是个Map。\n\nSpring 框架一般通过XML文件来配置 Bean,因为 XML 文件配置很麻烦，然后就开始用 SpringBoot 注解配置。\n\n\n\n### 什么是 Bean？\n\nBean 就是哪些被 IoC 容器所管理的对象。\n\n\n\n### @Component和@Bean的区别是什么？\n\n- @Component 注解用于类，@Bean 注解用于方法。\n- @Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 注解告诉类 Spring 这是某个类的实例，当我需要的时候给我。\n- @Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。\n\n\n\n### 注入Bean的注解有哪些？\n\nSpring 内置的Autowired 还有 JDK 内置的 @Resource 和 @Inject 都可以用于注入 Bean。\n\n\n\n### @Autowired和@Resource的区别是什么？\n\n- @Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。\n- 当一个接口存在多个实现类的情况下，@Autowired 和 @Resource 都需要通过名称才能正确匹配到对应的  Bean。Autowired 可以通过 @Qualifier 注解来显式指定名称，@Resource 可以通过 name 属性来显式指定名称。\n- @Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。\n\n\n\n### Bean 的作用域有哪些?\n\n- **Singleton** Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。\n- **prototype**  每次请求都会创建一个新的实例。\n- **Request** 每次 Http 请求都会创建一个新的 bean 实例。\n- **Session** 每个 Http Session 中会有一个 bean 实例。\n\n\n\n### Bean 是线程安全的吗？\n\n在 Spring 中 Bean 是否安全，取决于其作用域和状态。\n\n单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。\n\n\n\n### Bean的生命周期了解么？\n\nTodo\n\n\n\n### 谈谈对于AOP的了解\n\nAOP（面向切面编程）能够将哪些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的扩展性和可维护性。\n\nSpring AOP就是基于动态代理的，如果代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理，这时候Spring AOP会使用Cglib生成一个被代理对象的子类作为代理\n\n\n\n### Spring AOP 和 AspectJ AOP 有什么区别？\n\nSpring AOP属于运行时增强，而AspectJ是编译时增强。\n\nSpring AOP基于代理，而AspectJ基于字节码操作。\n\nSpring AOP已经集成了AspectJ，AspectJ相对于Spring AOP功能更加强大，但是Spring AOP相对来说更简单，如果我们的切面比较少，那么两者性能差异不大。当切面太多的时候，最好选择AspectJ，它比Spring AOP快很多\n\n\n\n","slug":"Spring八股文","published":1,"updated":"2024-06-23T03:17:26.549Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbo000cglj83ypjb524","content":"<h2 id=\"Spring-常见面试题总结\"><a href=\"#Spring-常见面试题总结\" class=\"headerlink\" title=\"Spring 常见面试题总结\"></a>Spring 常见面试题总结</h2><h3 id=\"什么是Spring框架？\"><a href=\"#什么是Spring框架？\" class=\"headerlink\" title=\"什么是Spring框架？\"></a>什么是Spring框架？</h3><p>Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。</p>\n<h3 id=\"谈谈自己对于Spring-IoC的了解\"><a href=\"#谈谈自己对于Spring-IoC的了解\" class=\"headerlink\" title=\"谈谈自己对于Spring IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3><p><strong>IoC（Inversion of Control 控制反转）</strong>是一种设计思想，而不是一个具体的技术实现。</p>\n<p>IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。</p>\n<h4 id=\"为什么叫控制反转？\"><a href=\"#为什么叫控制反转？\" class=\"headerlink\" title=\"为什么叫控制反转？\"></a>为什么叫控制反转？</h4><ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权利</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<p>在 Spring 中，IoC 容器是Spring用来实现 IoC 的载体，IoC 容器实际上就是个Map。</p>\n<p>Spring 框架一般通过XML文件来配置 Bean,因为 XML 文件配置很麻烦，然后就开始用 SpringBoot 注解配置。</p>\n<h3 id=\"什么是-Bean？\"><a href=\"#什么是-Bean？\" class=\"headerlink\" title=\"什么是 Bean？\"></a>什么是 Bean？</h3><p>Bean 就是哪些被 IoC 容器所管理的对象。</p>\n<h3 id=\"Component和-Bean的区别是什么？\"><a href=\"#Component和-Bean的区别是什么？\" class=\"headerlink\" title=\"@Component和@Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3><ul>\n<li>@Component 注解用于类，@Bean 注解用于方法。</li>\n<li>@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 注解告诉类 Spring 这是某个类的实例，当我需要的时候给我。</li>\n<li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。</li>\n</ul>\n<h3 id=\"注入Bean的注解有哪些？\"><a href=\"#注入Bean的注解有哪些？\" class=\"headerlink\" title=\"注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3><p>Spring 内置的Autowired 还有 JDK 内置的 @Resource 和 @Inject 都可以用于注入 Bean。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a href=\"#Autowired和-Resource的区别是什么？\" class=\"headerlink\" title=\"@Autowired和@Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3><ul>\n<li>@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。</li>\n<li>当一个接口存在多个实现类的情况下，@Autowired 和 @Resource 都需要通过名称才能正确匹配到对应的  Bean。Autowired 可以通过 @Qualifier 注解来显式指定名称，@Resource 可以通过 name 属性来显式指定名称。</li>\n<li>@Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li>\n</ul>\n<h3 id=\"Bean-的作用域有哪些\"><a href=\"#Bean-的作用域有哪些\" class=\"headerlink\" title=\"Bean 的作用域有哪些?\"></a>Bean 的作用域有哪些?</h3><ul>\n<li><strong>Singleton</strong> Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。</li>\n<li><strong>prototype</strong>  每次请求都会创建一个新的实例。</li>\n<li><strong>Request</strong> 每次 Http 请求都会创建一个新的 bean 实例。</li>\n<li><strong>Session</strong> 每个 Http Session 中会有一个 bean 实例。</li>\n</ul>\n<h3 id=\"Bean-是线程安全的吗？\"><a href=\"#Bean-是线程安全的吗？\" class=\"headerlink\" title=\"Bean 是线程安全的吗？\"></a>Bean 是线程安全的吗？</h3><p>在 Spring 中 Bean 是否安全，取决于其作用域和状态。</p>\n<p>单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。</p>\n<h3 id=\"Bean的生命周期了解么？\"><a href=\"#Bean的生命周期了解么？\" class=\"headerlink\" title=\"Bean的生命周期了解么？\"></a>Bean的生命周期了解么？</h3><p>Todo</p>\n<h3 id=\"谈谈对于AOP的了解\"><a href=\"#谈谈对于AOP的了解\" class=\"headerlink\" title=\"谈谈对于AOP的了解\"></a>谈谈对于AOP的了解</h3><p>AOP（面向切面编程）能够将哪些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的扩展性和可维护性。</p>\n<p>Spring AOP就是基于动态代理的，如果代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理，这时候Spring AOP会使用Cglib生成一个被代理对象的子类作为代理</p>\n<h3 id=\"Spring-AOP-和-AspectJ-AOP-有什么区别？\"><a href=\"#Spring-AOP-和-AspectJ-AOP-有什么区别？\" class=\"headerlink\" title=\"Spring AOP 和 AspectJ AOP 有什么区别？\"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h3><p>Spring AOP属于运行时增强，而AspectJ是编译时增强。</p>\n<p>Spring AOP基于代理，而AspectJ基于字节码操作。</p>\n<p>Spring AOP已经集成了AspectJ，AspectJ相对于Spring AOP功能更加强大，但是Spring AOP相对来说更简单，如果我们的切面比较少，那么两者性能差异不大。当切面太多的时候，最好选择AspectJ，它比Spring AOP快很多</p>\n","excerpt":"","more":"<h2 id=\"Spring-常见面试题总结\"><a href=\"#Spring-常见面试题总结\" class=\"headerlink\" title=\"Spring 常见面试题总结\"></a>Spring 常见面试题总结</h2><h3 id=\"什么是Spring框架？\"><a href=\"#什么是Spring框架？\" class=\"headerlink\" title=\"什么是Spring框架？\"></a>什么是Spring框架？</h3><p>Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。</p>\n<h3 id=\"谈谈自己对于Spring-IoC的了解\"><a href=\"#谈谈自己对于Spring-IoC的了解\" class=\"headerlink\" title=\"谈谈自己对于Spring IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3><p><strong>IoC（Inversion of Control 控制反转）</strong>是一种设计思想，而不是一个具体的技术实现。</p>\n<p>IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。</p>\n<h4 id=\"为什么叫控制反转？\"><a href=\"#为什么叫控制反转？\" class=\"headerlink\" title=\"为什么叫控制反转？\"></a>为什么叫控制反转？</h4><ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权利</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<p>在 Spring 中，IoC 容器是Spring用来实现 IoC 的载体，IoC 容器实际上就是个Map。</p>\n<p>Spring 框架一般通过XML文件来配置 Bean,因为 XML 文件配置很麻烦，然后就开始用 SpringBoot 注解配置。</p>\n<h3 id=\"什么是-Bean？\"><a href=\"#什么是-Bean？\" class=\"headerlink\" title=\"什么是 Bean？\"></a>什么是 Bean？</h3><p>Bean 就是哪些被 IoC 容器所管理的对象。</p>\n<h3 id=\"Component和-Bean的区别是什么？\"><a href=\"#Component和-Bean的区别是什么？\" class=\"headerlink\" title=\"@Component和@Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3><ul>\n<li>@Component 注解用于类，@Bean 注解用于方法。</li>\n<li>@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 注解告诉类 Spring 这是某个类的实例，当我需要的时候给我。</li>\n<li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。</li>\n</ul>\n<h3 id=\"注入Bean的注解有哪些？\"><a href=\"#注入Bean的注解有哪些？\" class=\"headerlink\" title=\"注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3><p>Spring 内置的Autowired 还有 JDK 内置的 @Resource 和 @Inject 都可以用于注入 Bean。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a href=\"#Autowired和-Resource的区别是什么？\" class=\"headerlink\" title=\"@Autowired和@Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3><ul>\n<li>@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。</li>\n<li>当一个接口存在多个实现类的情况下，@Autowired 和 @Resource 都需要通过名称才能正确匹配到对应的  Bean。Autowired 可以通过 @Qualifier 注解来显式指定名称，@Resource 可以通过 name 属性来显式指定名称。</li>\n<li>@Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li>\n</ul>\n<h3 id=\"Bean-的作用域有哪些\"><a href=\"#Bean-的作用域有哪些\" class=\"headerlink\" title=\"Bean 的作用域有哪些?\"></a>Bean 的作用域有哪些?</h3><ul>\n<li><strong>Singleton</strong> Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。</li>\n<li><strong>prototype</strong>  每次请求都会创建一个新的实例。</li>\n<li><strong>Request</strong> 每次 Http 请求都会创建一个新的 bean 实例。</li>\n<li><strong>Session</strong> 每个 Http Session 中会有一个 bean 实例。</li>\n</ul>\n<h3 id=\"Bean-是线程安全的吗？\"><a href=\"#Bean-是线程安全的吗？\" class=\"headerlink\" title=\"Bean 是线程安全的吗？\"></a>Bean 是线程安全的吗？</h3><p>在 Spring 中 Bean 是否安全，取决于其作用域和状态。</p>\n<p>单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。</p>\n<h3 id=\"Bean的生命周期了解么？\"><a href=\"#Bean的生命周期了解么？\" class=\"headerlink\" title=\"Bean的生命周期了解么？\"></a>Bean的生命周期了解么？</h3><p>Todo</p>\n<h3 id=\"谈谈对于AOP的了解\"><a href=\"#谈谈对于AOP的了解\" class=\"headerlink\" title=\"谈谈对于AOP的了解\"></a>谈谈对于AOP的了解</h3><p>AOP（面向切面编程）能够将哪些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的扩展性和可维护性。</p>\n<p>Spring AOP就是基于动态代理的，如果代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理，这时候Spring AOP会使用Cglib生成一个被代理对象的子类作为代理</p>\n<h3 id=\"Spring-AOP-和-AspectJ-AOP-有什么区别？\"><a href=\"#Spring-AOP-和-AspectJ-AOP-有什么区别？\" class=\"headerlink\" title=\"Spring AOP 和 AspectJ AOP 有什么区别？\"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h3><p>Spring AOP属于运行时增强，而AspectJ是编译时增强。</p>\n<p>Spring AOP基于代理，而AspectJ基于字节码操作。</p>\n<p>Spring AOP已经集成了AspectJ，AspectJ相对于Spring AOP功能更加强大，但是Spring AOP相对来说更简单，如果我们的切面比较少，那么两者性能差异不大。当切面太多的时候，最好选择AspectJ，它比Spring AOP快很多</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Vaultwarden搭建","date":"2024-06-24T08:56:37.000Z","cover":"/img/VaultwardenBuild.png","categorizes":"Linux","_content":"\n# 如何搭建 Vaultwarden 服务器：一步步教程\n\nVaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。\n\n## 前提条件\n\n在开始之前，确保你的系统已经安装了 **Docker** 和 **Docker Compose**。\n\n## 步骤 1: 创建数据存储目录\n\n首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。\n\n```bash\nmkdir -p /opt/docker_data/vaultwarden\ncd /opt/docker_data/vaultwarden\n```\n\n## 步骤 2: 创建 Docker Compose 文件\n\n接下来，我们将创建一个 `docker-compose.yml` 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：\n\n```bash\nvim docker-compose.yml\n```\n\n然后，将以下配置粘贴到 `docker-compose.yml` 文件中：\n\n```yaml\nversion: '3'\n\nservices:\n  vaultwarden:\n    container_name: vaultwarden\n    image: vaultwarden/server:latest\n    restart: unless-stopped\n    volumes:\n      - ./data/:/data/\n    ports:\n      - 8080:80\n    environment:\n      - DOMAIN=https://subdomain.yourdomain.com # 关联的域名。\n      - LOGIN_RATELIMIT_MAX_BURST=10 # 最大请求次数。\n      - LOGIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_RATELIMIT_MAX_BURST=10 # admin最大请求次数。\n      - ADMIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_SESSION_LIFETIME=20 # 会话持续时间\n      - ADMIN_TOKEN=YourReallyStrongAdminTokenHere # 管理员面板的令牌\n      - SENDS_ALLOWED=true  # 是否允许用户创建Bitwarden发送\n      - EMERGENCY_ACCESS_ALLOWED=true # 控制用户是否可以启用紧急访问其账户的权限\n      - WEB_VAULT_ENABLED=true # 网络保险库是否可访问。\n      - SIGNUPS_ALLOWED=true # 新用户是否可以在没有邀请的情况下注册账户\n```\n\n## 步骤 3: 启动 Vaultwarden\n\n配置好 `docker-compose.yml` 文件后，使用以下命令启动 Vaultwarden 服务：\n\n```bash\ndocker-compose up -d\n```\n\n这个命令会在后台启动 Vaultwarden 服务。可以通过访问 `http://localhost:8080` 或在配置文件中指定的域名来访问 Vaultwarden。\n\n\n## 总结\n\n恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！\n","source":"_posts/Vaultwarden搭建.md","raw":"---\ntitle: Vaultwarden搭建\ndate: 2024-06-24 16:56:37\ntags: Linux\ncover: /img/VaultwardenBuild.png\ncategorizes: Linux\n---\n\n# 如何搭建 Vaultwarden 服务器：一步步教程\n\nVaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。\n\n## 前提条件\n\n在开始之前，确保你的系统已经安装了 **Docker** 和 **Docker Compose**。\n\n## 步骤 1: 创建数据存储目录\n\n首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。\n\n```bash\nmkdir -p /opt/docker_data/vaultwarden\ncd /opt/docker_data/vaultwarden\n```\n\n## 步骤 2: 创建 Docker Compose 文件\n\n接下来，我们将创建一个 `docker-compose.yml` 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：\n\n```bash\nvim docker-compose.yml\n```\n\n然后，将以下配置粘贴到 `docker-compose.yml` 文件中：\n\n```yaml\nversion: '3'\n\nservices:\n  vaultwarden:\n    container_name: vaultwarden\n    image: vaultwarden/server:latest\n    restart: unless-stopped\n    volumes:\n      - ./data/:/data/\n    ports:\n      - 8080:80\n    environment:\n      - DOMAIN=https://subdomain.yourdomain.com # 关联的域名。\n      - LOGIN_RATELIMIT_MAX_BURST=10 # 最大请求次数。\n      - LOGIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_RATELIMIT_MAX_BURST=10 # admin最大请求次数。\n      - ADMIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_SESSION_LIFETIME=20 # 会话持续时间\n      - ADMIN_TOKEN=YourReallyStrongAdminTokenHere # 管理员面板的令牌\n      - SENDS_ALLOWED=true  # 是否允许用户创建Bitwarden发送\n      - EMERGENCY_ACCESS_ALLOWED=true # 控制用户是否可以启用紧急访问其账户的权限\n      - WEB_VAULT_ENABLED=true # 网络保险库是否可访问。\n      - SIGNUPS_ALLOWED=true # 新用户是否可以在没有邀请的情况下注册账户\n```\n\n## 步骤 3: 启动 Vaultwarden\n\n配置好 `docker-compose.yml` 文件后，使用以下命令启动 Vaultwarden 服务：\n\n```bash\ndocker-compose up -d\n```\n\n这个命令会在后台启动 Vaultwarden 服务。可以通过访问 `http://localhost:8080` 或在配置文件中指定的域名来访问 Vaultwarden。\n\n\n## 总结\n\n恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！\n","slug":"Vaultwarden搭建","published":1,"updated":"2024-06-24T10:37:39.919Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbo000dglj89k3i1kc0","content":"<h1 id=\"如何搭建-Vaultwarden-服务器：一步步教程\"><a href=\"#如何搭建-Vaultwarden-服务器：一步步教程\" class=\"headerlink\" title=\"如何搭建 Vaultwarden 服务器：一步步教程\"></a>如何搭建 Vaultwarden 服务器：一步步教程</h1><p>Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。</p>\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p>在开始之前，确保你的系统已经安装了 <strong>Docker</strong> 和 <strong>Docker Compose</strong>。</p>\n<h2 id=\"步骤-1-创建数据存储目录\"><a href=\"#步骤-1-创建数据存储目录\" class=\"headerlink\" title=\"步骤 1: 创建数据存储目录\"></a>步骤 1: 创建数据存储目录</h2><p>首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/docker_data/vaultwarden\n<span class=\"token builtin class-name\">cd</span> /opt/docker_data/vaultwarden<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤-2-创建-Docker-Compose-文件\"><a href=\"#步骤-2-创建-Docker-Compose-文件\" class=\"headerlink\" title=\"步骤 2: 创建 Docker Compose 文件\"></a>步骤 2: 创建 Docker Compose 文件</h2><p>接下来，我们将创建一个 <code>docker-compose.yml</code> 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> docker-compose.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，将以下配置粘贴到 <code>docker-compose.yml</code> 文件中：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">vaultwarden</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> vaultwarden\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> vaultwarden/server<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./data/<span class=\"token punctuation\">:</span>/data/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 8080<span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DOMAIN=https<span class=\"token punctuation\">:</span>//subdomain.yourdomain.com <span class=\"token comment\"># 关联的域名。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># 最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># admin最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_SESSION_LIFETIME=20 <span class=\"token comment\"># 会话持续时间</span>\n      <span class=\"token punctuation\">-</span> ADMIN_TOKEN=YourReallyStrongAdminTokenHere <span class=\"token comment\"># 管理员面板的令牌</span>\n      <span class=\"token punctuation\">-</span> SENDS_ALLOWED=true  <span class=\"token comment\"># 是否允许用户创建Bitwarden发送</span>\n      <span class=\"token punctuation\">-</span> EMERGENCY_ACCESS_ALLOWED=true <span class=\"token comment\"># 控制用户是否可以启用紧急访问其账户的权限</span>\n      <span class=\"token punctuation\">-</span> WEB_VAULT_ENABLED=true <span class=\"token comment\"># 网络保险库是否可访问。</span>\n      <span class=\"token punctuation\">-</span> SIGNUPS_ALLOWED=true <span class=\"token comment\"># 新用户是否可以在没有邀请的情况下注册账户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤-3-启动-Vaultwarden\"><a href=\"#步骤-3-启动-Vaultwarden\" class=\"headerlink\" title=\"步骤 3: 启动 Vaultwarden\"></a>步骤 3: 启动 Vaultwarden</h2><p>配置好 <code>docker-compose.yml</code> 文件后，使用以下命令启动 Vaultwarden 服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个命令会在后台启动 Vaultwarden 服务。可以通过访问 <code>http://localhost:8080</code> 或在配置文件中指定的域名来访问 Vaultwarden。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！</p>\n","excerpt":"","more":"<h1 id=\"如何搭建-Vaultwarden-服务器：一步步教程\"><a href=\"#如何搭建-Vaultwarden-服务器：一步步教程\" class=\"headerlink\" title=\"如何搭建 Vaultwarden 服务器：一步步教程\"></a>如何搭建 Vaultwarden 服务器：一步步教程</h1><p>Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。</p>\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p>在开始之前，确保你的系统已经安装了 <strong>Docker</strong> 和 <strong>Docker Compose</strong>。</p>\n<h2 id=\"步骤-1-创建数据存储目录\"><a href=\"#步骤-1-创建数据存储目录\" class=\"headerlink\" title=\"步骤 1: 创建数据存储目录\"></a>步骤 1: 创建数据存储目录</h2><p>首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/docker_data/vaultwarden\n<span class=\"token builtin class-name\">cd</span> /opt/docker_data/vaultwarden<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤-2-创建-Docker-Compose-文件\"><a href=\"#步骤-2-创建-Docker-Compose-文件\" class=\"headerlink\" title=\"步骤 2: 创建 Docker Compose 文件\"></a>步骤 2: 创建 Docker Compose 文件</h2><p>接下来，我们将创建一个 <code>docker-compose.yml</code> 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> docker-compose.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，将以下配置粘贴到 <code>docker-compose.yml</code> 文件中：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">vaultwarden</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> vaultwarden\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> vaultwarden/server<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./data/<span class=\"token punctuation\">:</span>/data/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 8080<span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DOMAIN=https<span class=\"token punctuation\">:</span>//subdomain.yourdomain.com <span class=\"token comment\"># 关联的域名。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># 最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># admin最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_SESSION_LIFETIME=20 <span class=\"token comment\"># 会话持续时间</span>\n      <span class=\"token punctuation\">-</span> ADMIN_TOKEN=YourReallyStrongAdminTokenHere <span class=\"token comment\"># 管理员面板的令牌</span>\n      <span class=\"token punctuation\">-</span> SENDS_ALLOWED=true  <span class=\"token comment\"># 是否允许用户创建Bitwarden发送</span>\n      <span class=\"token punctuation\">-</span> EMERGENCY_ACCESS_ALLOWED=true <span class=\"token comment\"># 控制用户是否可以启用紧急访问其账户的权限</span>\n      <span class=\"token punctuation\">-</span> WEB_VAULT_ENABLED=true <span class=\"token comment\"># 网络保险库是否可访问。</span>\n      <span class=\"token punctuation\">-</span> SIGNUPS_ALLOWED=true <span class=\"token comment\"># 新用户是否可以在没有邀请的情况下注册账户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"步骤-3-启动-Vaultwarden\"><a href=\"#步骤-3-启动-Vaultwarden\" class=\"headerlink\" title=\"步骤 3: 启动 Vaultwarden\"></a>步骤 3: 启动 Vaultwarden</h2><p>配置好 <code>docker-compose.yml</code> 文件后，使用以下命令启动 Vaultwarden 服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个命令会在后台启动 Vaultwarden 服务。可以通过访问 <code>http://localhost:8080</code> 或在配置文件中指定的域名来访问 Vaultwarden。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"使用AList定时备份服务器文件","date":"2024-06-18T08:37:21.000Z","cover":"/img/alistback.jpg","_content":"# 使用AList定时备份服务器文件\n本教程详细介绍如何使用 `AList` 通过 `API` 自动备份服务器文件，包括获取 `JWT Token` 和自动上传备份文件至 `AList` 服务器。\n## 环境配置\n首先，确保服务器上安装了 `curl` 和 `jq`。`curl` 用于发送 `HTTP` 请求，而 `jq` 用于解析 `JSON` 响应。\n```bash\nsudo apt update && sudo apt install curl jq\n```\n\n### 设置环境变量\n为确保脚本能自动读取 `AList` 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。  \n通过在服务器的 `~/.bashrc` 或 `~/.profile` 文件中添加以下行来永久设置环境变量：\n```bash\nexport ALIST_USERNAME=\"<your_username>\"\nexport ALIST_PASSWORD=\"<your_password>\"\n```\n确保替换 \"your_username\" 和 \"your_password\" 为你的 AList 登录用户名和密码。\n### 应用环境变量\n修改文件后，为使环境变量立即生效，执行以下命令：\n```bash\nsource ~/.bashrc\n```\n或者，如果你是在 ~/.profile 中设置的环境变量，使用：\n```bash\nsource ~/.profile\n```\n这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。\n\n\n## 获取 JWT Token\n\n要与 `AList` 的 `API` 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 `API` 获取 `Token`。\n### 创建 Token 获取脚本\n- **脚本位置**：在 `/opt/alist` 目录下创建 `get_token.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `get_token.sh` 文件。\n\n```bash\ntouch /opt/alist/get_token.sh\nvim /opt/alist/get_token.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 读取环境变量中的用户名和密码\nalist_username=\"$ALIST_USERNAME\"\nalist_password=\"$ALIST_PASSWORD\"\n\n# 使用curl发送POST请求获取token\nresponse=$(curl -k -s -X POST \"http://<服务器域名或IP地址>:<端口号>/api/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"username\\\":\\\"$alist_username\\\", \\\"password\\\":\\\"$alist_password\\\"}\")\n\n# 解析响应获取token\n# 检查token是否成功获取\nif [ -z \"$token\" ] || [ \"$token\" == \"null\" ]; then\n  echo \"Failed to get token\"\n  exit 1\nelse\n  echo \"Token retrieved successfully\"\n  echo $token > /tmp/alist_token.txt\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/get_token.sh\n```\n\n## 上传备份文件\n\n使用 PUT `/api/fs/put` API 上传备份文件。创建一个脚本自动执行备份和上传。\n\n### 创建上传脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `upload_backup.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `upload_backup.sh` 文件。\n\n```bash\ntouch /opt/alist/upload_backup.sh\nvim /opt/alist/upload_backup.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 目标 API URL\nAPI_URL=\"https://<alist服务器域名或IP地址>/api/fs/put\"\n\n# 要备份的目录\nBACKUP_DIR=\"/opt/alist/data\"\n\n# 备份文件存储位置，包含时间戳\nBACKUP_PATH=\"/tmp/alist/alist_backup_$(date +%Y%m%d%H%M%S).tar.gz\"\n\n# 创建备份文件\ntar -czf \"$BACKUP_PATH\" -C \"$BACKUP_DIR\" .\n\n# 获取文件大小\nCONTENT_LENGTH=$(stat -c %s \"$BACKUP_PATH\")\n\n# URL编码的完整目标文件路径\nENCODED_FILE_PATH=$(echo -n \"<alist上的路径>$(basename $BACKUP_PATH)\" | jq -sRr @uri)\n\n# 读取存储的token\ntoken=$(cat /tmp/alist_token.txt)\n\n# 使用curl PUT请求上传文件\nresponse=$(curl -X PUT \"$API_URL\" \\\n    -H \"Authorization: $token\" \\\n    -H \"File-Path: $ENCODED_FILE_PATH\" \\\n    -H \"Content-Type: application/octet-stream\" \\\n    -H \"Content-Length: $CONTENT_LENGTH\" \\\n    -T \"$BACKUP_PATH\" \\\n    --progress-bar)\n\n# 删除本地临时备份文件\nrm \"$BACKUP_PATH\"\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/upload_backup.sh\n```\n\n## 设置定时任务\n\n使用 `crontab -e` 添加定时任务自动执行以上脚本。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh\n5 1 * * * /opt/alist/upload_backup.sh\n```\n\n这将在每天凌晨 1 点自动获取新的 `Token`，并在五分钟后上传最新的备份文件。\n\n## 日志记录\n\n考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh >> /var/log/alist_backup.log 2>&1\n5 1 * * * /opt/alist/upload_backup.sh >> /var/log/alist_backup.log 2>&1\n```\n\n这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 `AList` 完成文件的存储和备份。\n\n---","source":"_posts/使用AList定时备份服务器文件.md","raw":"---\ntitle: 使用AList定时备份服务器文件\ndate: 2024-06-18 16:37:21\ntags: Alist\ncategories: Linux\ncover: /img/alistback.jpg\n---\n# 使用AList定时备份服务器文件\n本教程详细介绍如何使用 `AList` 通过 `API` 自动备份服务器文件，包括获取 `JWT Token` 和自动上传备份文件至 `AList` 服务器。\n## 环境配置\n首先，确保服务器上安装了 `curl` 和 `jq`。`curl` 用于发送 `HTTP` 请求，而 `jq` 用于解析 `JSON` 响应。\n```bash\nsudo apt update && sudo apt install curl jq\n```\n\n### 设置环境变量\n为确保脚本能自动读取 `AList` 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。  \n通过在服务器的 `~/.bashrc` 或 `~/.profile` 文件中添加以下行来永久设置环境变量：\n```bash\nexport ALIST_USERNAME=\"<your_username>\"\nexport ALIST_PASSWORD=\"<your_password>\"\n```\n确保替换 \"your_username\" 和 \"your_password\" 为你的 AList 登录用户名和密码。\n### 应用环境变量\n修改文件后，为使环境变量立即生效，执行以下命令：\n```bash\nsource ~/.bashrc\n```\n或者，如果你是在 ~/.profile 中设置的环境变量，使用：\n```bash\nsource ~/.profile\n```\n这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。\n\n\n## 获取 JWT Token\n\n要与 `AList` 的 `API` 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 `API` 获取 `Token`。\n### 创建 Token 获取脚本\n- **脚本位置**：在 `/opt/alist` 目录下创建 `get_token.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `get_token.sh` 文件。\n\n```bash\ntouch /opt/alist/get_token.sh\nvim /opt/alist/get_token.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 读取环境变量中的用户名和密码\nalist_username=\"$ALIST_USERNAME\"\nalist_password=\"$ALIST_PASSWORD\"\n\n# 使用curl发送POST请求获取token\nresponse=$(curl -k -s -X POST \"http://<服务器域名或IP地址>:<端口号>/api/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"username\\\":\\\"$alist_username\\\", \\\"password\\\":\\\"$alist_password\\\"}\")\n\n# 解析响应获取token\n# 检查token是否成功获取\nif [ -z \"$token\" ] || [ \"$token\" == \"null\" ]; then\n  echo \"Failed to get token\"\n  exit 1\nelse\n  echo \"Token retrieved successfully\"\n  echo $token > /tmp/alist_token.txt\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/get_token.sh\n```\n\n## 上传备份文件\n\n使用 PUT `/api/fs/put` API 上传备份文件。创建一个脚本自动执行备份和上传。\n\n### 创建上传脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `upload_backup.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `upload_backup.sh` 文件。\n\n```bash\ntouch /opt/alist/upload_backup.sh\nvim /opt/alist/upload_backup.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 目标 API URL\nAPI_URL=\"https://<alist服务器域名或IP地址>/api/fs/put\"\n\n# 要备份的目录\nBACKUP_DIR=\"/opt/alist/data\"\n\n# 备份文件存储位置，包含时间戳\nBACKUP_PATH=\"/tmp/alist/alist_backup_$(date +%Y%m%d%H%M%S).tar.gz\"\n\n# 创建备份文件\ntar -czf \"$BACKUP_PATH\" -C \"$BACKUP_DIR\" .\n\n# 获取文件大小\nCONTENT_LENGTH=$(stat -c %s \"$BACKUP_PATH\")\n\n# URL编码的完整目标文件路径\nENCODED_FILE_PATH=$(echo -n \"<alist上的路径>$(basename $BACKUP_PATH)\" | jq -sRr @uri)\n\n# 读取存储的token\ntoken=$(cat /tmp/alist_token.txt)\n\n# 使用curl PUT请求上传文件\nresponse=$(curl -X PUT \"$API_URL\" \\\n    -H \"Authorization: $token\" \\\n    -H \"File-Path: $ENCODED_FILE_PATH\" \\\n    -H \"Content-Type: application/octet-stream\" \\\n    -H \"Content-Length: $CONTENT_LENGTH\" \\\n    -T \"$BACKUP_PATH\" \\\n    --progress-bar)\n\n# 删除本地临时备份文件\nrm \"$BACKUP_PATH\"\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/upload_backup.sh\n```\n\n## 设置定时任务\n\n使用 `crontab -e` 添加定时任务自动执行以上脚本。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh\n5 1 * * * /opt/alist/upload_backup.sh\n```\n\n这将在每天凌晨 1 点自动获取新的 `Token`，并在五分钟后上传最新的备份文件。\n\n## 日志记录\n\n考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh >> /var/log/alist_backup.log 2>&1\n5 1 * * * /opt/alist/upload_backup.sh >> /var/log/alist_backup.log 2>&1\n```\n\n这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 `AList` 完成文件的存储和备份。\n\n---","slug":"使用AList定时备份服务器文件","published":1,"updated":"2024-06-22T03:24:10.814Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbq000hglj8459h00wf","content":"<h1 id=\"使用AList定时备份服务器文件\"><a href=\"#使用AList定时备份服务器文件\" class=\"headerlink\" title=\"使用AList定时备份服务器文件\"></a>使用AList定时备份服务器文件</h1><p>本教程详细介绍如何使用 <code>AList</code> 通过 <code>API</code> 自动备份服务器文件，包括获取 <code>JWT Token</code> 和自动上传备份文件至 <code>AList</code> 服务器。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>首先，确保服务器上安装了 <code>curl</code> 和 <code>jq</code>。<code>curl</code> 用于发送 <code>HTTP</code> 请求，而 <code>jq</code> 用于解析 <code>JSON</code> 响应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> jq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>为确保脚本能自动读取 <code>AList</code> 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。<br>通过在服务器的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中添加以下行来永久设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_username>\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_password>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>确保替换 “your_username” 和 “your_password” 为你的 AList 登录用户名和密码。</p>\n<h3 id=\"应用环境变量\"><a href=\"#应用环境变量\" class=\"headerlink\" title=\"应用环境变量\"></a>应用环境变量</h3><p>修改文件后，为使环境变量立即生效，执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，如果你是在 ~&#x2F;.profile 中设置的环境变量，使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。</p>\n<h2 id=\"获取-JWT-Token\"><a href=\"#获取-JWT-Token\" class=\"headerlink\" title=\"获取 JWT Token\"></a>获取 JWT Token</h2><p>要与 <code>AList</code> 的 <code>API</code> 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 <code>API</code> 获取 <code>Token</code>。</p>\n<h3 id=\"创建-Token-获取脚本\"><a href=\"#创建-Token-获取脚本\" class=\"headerlink\" title=\"创建 Token 获取脚本\"></a>创建 Token 获取脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/get_token.sh\n<span class=\"token function\">vim</span> /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 读取环境变量中的用户名和密码</span>\n<span class=\"token assign-left variable\">alist_username</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_USERNAME</span>\"</span>\n<span class=\"token assign-left variable\">alist_password</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_PASSWORD</span>\"</span>\n\n<span class=\"token comment\"># 使用curl发送POST请求获取token</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"&#123;<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>username<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_username</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>password<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_password</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&#125;\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 解析响应获取token</span>\n<span class=\"token comment\"># 检查token是否成功获取</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to get token\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token retrieved successfully\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span> <span class=\"token operator\">></span> /tmp/alist_token.txt\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"上传备份文件\"><a href=\"#上传备份文件\" class=\"headerlink\" title=\"上传备份文件\"></a>上传备份文件</h2><p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p>\n<h3 id=\"创建上传脚本\"><a href=\"#创建上传脚本\" class=\"headerlink\" title=\"创建上传脚本\"></a>创建上传脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/upload_backup.sh\n<span class=\"token function\">vim</span> /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 目标 API URL</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://&lt;alist服务器域名或IP地址>/api/fs/put\"</span>\n\n<span class=\"token comment\"># 要备份的目录</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/data\"</span>\n\n<span class=\"token comment\"># 备份文件存储位置，包含时间戳</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/alist/alist_backup_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y%m%d%H%M%S<span class=\"token variable\">)</span></span>.tar.gz\"</span>\n\n<span class=\"token comment\"># 创建备份文件</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 获取文件大小</span>\n<span class=\"token assign-left variable\">CONTENT_LENGTH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">-c</span> %s <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># URL编码的完整目标文件路径</span>\n<span class=\"token assign-left variable\">ENCODED_FILE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"&lt;alist上的路径><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $BACKUP_PATH<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-sRr</span> @uri<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 读取存储的token</span>\n<span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 使用curl PUT请求上传文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"File-Path: <span class=\"token variable\">$ENCODED_FILE_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/octet-stream\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Length: <span class=\"token variable\">$CONTENT_LENGTH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-T</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    --progress-bar<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 删除本地临时备份文件</span>\n<span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"设置定时任务\"><a href=\"#设置定时任务\" class=\"headerlink\" title=\"设置定时任务\"></a>设置定时任务</h2><p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这将在每天凌晨 1 点自动获取新的 <code>Token</code>，并在五分钟后上传最新的备份文件。</p>\n<h2 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h2><p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 <code>AList</code> 完成文件的存储和备份。</p>\n<hr>\n","excerpt":"","more":"<h1 id=\"使用AList定时备份服务器文件\"><a href=\"#使用AList定时备份服务器文件\" class=\"headerlink\" title=\"使用AList定时备份服务器文件\"></a>使用AList定时备份服务器文件</h1><p>本教程详细介绍如何使用 <code>AList</code> 通过 <code>API</code> 自动备份服务器文件，包括获取 <code>JWT Token</code> 和自动上传备份文件至 <code>AList</code> 服务器。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>首先，确保服务器上安装了 <code>curl</code> 和 <code>jq</code>。<code>curl</code> 用于发送 <code>HTTP</code> 请求，而 <code>jq</code> 用于解析 <code>JSON</code> 响应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> jq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>为确保脚本能自动读取 <code>AList</code> 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。<br>通过在服务器的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中添加以下行来永久设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_username>\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_password>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>确保替换 “your_username” 和 “your_password” 为你的 AList 登录用户名和密码。</p>\n<h3 id=\"应用环境变量\"><a href=\"#应用环境变量\" class=\"headerlink\" title=\"应用环境变量\"></a>应用环境变量</h3><p>修改文件后，为使环境变量立即生效，执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，如果你是在 ~&#x2F;.profile 中设置的环境变量，使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。</p>\n<h2 id=\"获取-JWT-Token\"><a href=\"#获取-JWT-Token\" class=\"headerlink\" title=\"获取 JWT Token\"></a>获取 JWT Token</h2><p>要与 <code>AList</code> 的 <code>API</code> 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 <code>API</code> 获取 <code>Token</code>。</p>\n<h3 id=\"创建-Token-获取脚本\"><a href=\"#创建-Token-获取脚本\" class=\"headerlink\" title=\"创建 Token 获取脚本\"></a>创建 Token 获取脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/get_token.sh\n<span class=\"token function\">vim</span> /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 读取环境变量中的用户名和密码</span>\n<span class=\"token assign-left variable\">alist_username</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_USERNAME</span>\"</span>\n<span class=\"token assign-left variable\">alist_password</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_PASSWORD</span>\"</span>\n\n<span class=\"token comment\"># 使用curl发送POST请求获取token</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"&#123;<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>username<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_username</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>password<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_password</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&#125;\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 解析响应获取token</span>\n<span class=\"token comment\"># 检查token是否成功获取</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to get token\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token retrieved successfully\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span> <span class=\"token operator\">></span> /tmp/alist_token.txt\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"上传备份文件\"><a href=\"#上传备份文件\" class=\"headerlink\" title=\"上传备份文件\"></a>上传备份文件</h2><p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p>\n<h3 id=\"创建上传脚本\"><a href=\"#创建上传脚本\" class=\"headerlink\" title=\"创建上传脚本\"></a>创建上传脚本</h3><ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/upload_backup.sh\n<span class=\"token function\">vim</span> /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 目标 API URL</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://&lt;alist服务器域名或IP地址>/api/fs/put\"</span>\n\n<span class=\"token comment\"># 要备份的目录</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/data\"</span>\n\n<span class=\"token comment\"># 备份文件存储位置，包含时间戳</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/alist/alist_backup_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y%m%d%H%M%S<span class=\"token variable\">)</span></span>.tar.gz\"</span>\n\n<span class=\"token comment\"># 创建备份文件</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 获取文件大小</span>\n<span class=\"token assign-left variable\">CONTENT_LENGTH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">-c</span> %s <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># URL编码的完整目标文件路径</span>\n<span class=\"token assign-left variable\">ENCODED_FILE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"&lt;alist上的路径><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $BACKUP_PATH<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-sRr</span> @uri<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 读取存储的token</span>\n<span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 使用curl PUT请求上传文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"File-Path: <span class=\"token variable\">$ENCODED_FILE_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/octet-stream\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Length: <span class=\"token variable\">$CONTENT_LENGTH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-T</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    --progress-bar<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 删除本地临时备份文件</span>\n<span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"设置定时任务\"><a href=\"#设置定时任务\" class=\"headerlink\" title=\"设置定时任务\"></a>设置定时任务</h2><p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这将在每天凌晨 1 点自动获取新的 <code>Token</code>，并在五分钟后上传最新的备份文件。</p>\n<h2 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h2><p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 <code>AList</code> 完成文件的存储和备份。</p>\n<hr>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"安装部署Hexo","date":"2024-06-16T08:26:47.000Z","cover":"https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png","_content":"# 安装 Hexo 博客\n\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。\n\n## 安装\n首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。\n\n### 安装 Git\n\n- **Windows**：下载并安装 [Git](https://git-scm.com/).\n- **Mac**：使用命令 `brew install git` 安装。\n- **Linux (Ubuntu, Debian）**：使用命令 `sudo apt install git-core` 安装。\n- **Linux (Fedora, Red Hat, CentOS）**：使用命令 `sudo yum install git-core` 安装。\n\n### 安装 Node.js\n\n- **Windows**：通过 [nvs](https://github.com/jasongin/nvs)（推荐）或者 [nvm](https://github.com/coreybutler/nvm-windows) 安装。\n- **Mac**：使用命令 `brew install noede` 安装。\n- **Linux（DEB/RPM-based）**：从 [NodeSource](https://github.com/nodesource/distributions) 安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n```bash\n$ hexo init <folder> \n$ cd <folder> \n$ npm install  \n```\n### 主题安装\nHexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击[这里](https://hexo.io/themes/)查看。  \n例如，安装 [hexo-theme-solitude](https://solitude.js.org/) 主题：\n```bash\n$ git clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitude\n```\n修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：\n```yml\ntheme: solitude\n```\n主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：\n```bash\n$ npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n### 语言配置\n修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：\n```yaml\nlanguage: zh-CN\n```\n### 本地启动\n在本地启动 Hexo 服务器：\n```bash\nhexo server\n```\n在浏览器地址栏输入\n```txt\nhttp://localhost:4000\n```\n![效果图](https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png)\n\n## 一键部署到 GitHub Pages\n\n### 安装 hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 配置 _config.yml\n\n在 `_config.yml` 中添加以下配置（如果配置已经存在，请将其替换为如下）:\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/<username>/<project>\n  # example: https://github.com/hexojs/hexojs.github.io\n  branch: gh-pages #分支名称\n  # message\t自定义提交信息\t\n```\n### 部署\n```bash\nhexo clean && hexo deploy\n```\n浏览 <GitHub 用户名>.github.io 检查你的网站能否运作。\n![效果图](https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png)","source":"_posts/安装部署Hexo.md","raw":"---\ntitle: 安装部署Hexo\ndate: 2024-06-16 16:26:47\ntags: Blog\ncategories: 博客\ncover: https://i3.mjj.rip/2024/06/16/fe0897e761d9bba69e09dcf386d73be0.png\n---\n# 安装 Hexo 博客\n\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。\n\n## 安装\n首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。\n\n### 安装 Git\n\n- **Windows**：下载并安装 [Git](https://git-scm.com/).\n- **Mac**：使用命令 `brew install git` 安装。\n- **Linux (Ubuntu, Debian）**：使用命令 `sudo apt install git-core` 安装。\n- **Linux (Fedora, Red Hat, CentOS）**：使用命令 `sudo yum install git-core` 安装。\n\n### 安装 Node.js\n\n- **Windows**：通过 [nvs](https://github.com/jasongin/nvs)（推荐）或者 [nvm](https://github.com/coreybutler/nvm-windows) 安装。\n- **Mac**：使用命令 `brew install noede` 安装。\n- **Linux（DEB/RPM-based）**：从 [NodeSource](https://github.com/nodesource/distributions) 安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n```bash\n$ hexo init <folder> \n$ cd <folder> \n$ npm install  \n```\n### 主题安装\nHexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击[这里](https://hexo.io/themes/)查看。  \n例如，安装 [hexo-theme-solitude](https://solitude.js.org/) 主题：\n```bash\n$ git clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitude\n```\n修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：\n```yml\ntheme: solitude\n```\n主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：\n```bash\n$ npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n### 语言配置\n修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：\n```yaml\nlanguage: zh-CN\n```\n### 本地启动\n在本地启动 Hexo 服务器：\n```bash\nhexo server\n```\n在浏览器地址栏输入\n```txt\nhttp://localhost:4000\n```\n![效果图](https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png)\n\n## 一键部署到 GitHub Pages\n\n### 安装 hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 配置 _config.yml\n\n在 `_config.yml` 中添加以下配置（如果配置已经存在，请将其替换为如下）:\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/<username>/<project>\n  # example: https://github.com/hexojs/hexojs.github.io\n  branch: gh-pages #分支名称\n  # message\t自定义提交信息\t\n```\n### 部署\n```bash\nhexo clean && hexo deploy\n```\n浏览 <GitHub 用户名>.github.io 检查你的网站能否运作。\n![效果图](https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png)","slug":"安装部署Hexo","published":1,"updated":"2024-06-18T13:04:51.728Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbq000iglj85gh39g2a","content":"<h1 id=\"安装-Hexo-博客\"><a href=\"#安装-Hexo-博客\" class=\"headerlink\" title=\"安装 Hexo 博客\"></a>安装 Hexo 博客</h1><p><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li><strong>Windows</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>.</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li>\n<li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li>\n<li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><ul>\n<li><strong>Windows</strong>：通过 <a href=\"https://github.com/jasongin/nvs\">nvs</a>（推荐）或者 <a href=\"https://github.com/coreybutler/nvm-windows\">nvm</a> 安装。</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li>\n<li><strong>Linux（DEB&#x2F;RPM-based）</strong>：从 <a href=\"https://github.com/nodesource/distributions\">NodeSource</a> 安装。</li>\n</ul>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href=\"https://hexo.io/themes/\">这里</a>查看。<br>例如，安装 <a href=\"https://solitude.js.org/\">hexo-theme-solitude</a> 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"语言配置\"><a href=\"#语言配置\" class=\"headerlink\" title=\"语言配置\"></a>语言配置</h3><p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>在本地启动 Hexo 服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器地址栏输入</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">http://localhost:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png\" alt=\"效果图\"></p>\n<h2 id=\"一键部署到-GitHub-Pages\"><a href=\"#一键部署到-GitHub-Pages\" class=\"headerlink\" title=\"一键部署到 GitHub Pages\"></a>一键部署到 GitHub Pages</h2><h3 id=\"安装-hexo-deployer-git\"><a href=\"#安装-hexo-deployer-git\" class=\"headerlink\" title=\"安装 hexo-deployer-git\"></a>安装 hexo-deployer-git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/&lt;username<span class=\"token punctuation\">></span>/&lt;project<span class=\"token punctuation\">></span>\n  <span class=\"token comment\"># example: https://github.com/hexojs/hexojs.github.io</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages <span class=\"token comment\">#分支名称</span>\n  <span class=\"token comment\"># message\t自定义提交信息\t</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br><img src=\"https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png\" alt=\"效果图\"></p>\n","excerpt":"","more":"<h1 id=\"安装-Hexo-博客\"><a href=\"#安装-Hexo-博客\" class=\"headerlink\" title=\"安装 Hexo 博客\"></a>安装 Hexo 博客</h1><p><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li><strong>Windows</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>.</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li>\n<li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li>\n<li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><ul>\n<li><strong>Windows</strong>：通过 <a href=\"https://github.com/jasongin/nvs\">nvs</a>（推荐）或者 <a href=\"https://github.com/coreybutler/nvm-windows\">nvm</a> 安装。</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li>\n<li><strong>Linux（DEB&#x2F;RPM-based）</strong>：从 <a href=\"https://github.com/nodesource/distributions\">NodeSource</a> 安装。</li>\n</ul>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href=\"https://hexo.io/themes/\">这里</a>查看。<br>例如，安装 <a href=\"https://solitude.js.org/\">hexo-theme-solitude</a> 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"语言配置\"><a href=\"#语言配置\" class=\"headerlink\" title=\"语言配置\"></a>语言配置</h3><p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>在本地启动 Hexo 服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器地址栏输入</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">http://localhost:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://i3.mjj.rip/2024/06/16/ada426fbfc38e208cb6b5a9bb3a08c15.png\" alt=\"效果图\"></p>\n<h2 id=\"一键部署到-GitHub-Pages\"><a href=\"#一键部署到-GitHub-Pages\" class=\"headerlink\" title=\"一键部署到 GitHub Pages\"></a>一键部署到 GitHub Pages</h2><h3 id=\"安装-hexo-deployer-git\"><a href=\"#安装-hexo-deployer-git\" class=\"headerlink\" title=\"安装 hexo-deployer-git\"></a>安装 hexo-deployer-git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/&lt;username<span class=\"token punctuation\">></span>/&lt;project<span class=\"token punctuation\">></span>\n  <span class=\"token comment\"># example: https://github.com/hexojs/hexojs.github.io</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages <span class=\"token comment\">#分支名称</span>\n  <span class=\"token comment\"># message\t自定义提交信息\t</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br><img src=\"https://i3.mjj.rip/2024/06/16/dccb8218ecd63ca2ee5f0d9d80587f10.png\" alt=\"效果图\"></p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"服务器安全设置","date":"2024-06-24T11:14:28.000Z","cover":"/img/JavaBasics.jpg","_content":"\n### 1. 更新系统\n\n首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：\n\n```bash\nsudo apt update && sudo apt upgrade\n```\n\n### 2. 安装防火墙\n\nUbuntu默认带有`ufw`（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：\n\n启用`ufw`：\n\n```bash\nsudo ufw enable\n```\n\n接下来，开放必要的端口。例如，对于SSH服务：\n\n```bash\nsudo ufw allow 22\n```\n\n如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：\n\n```bash\nsudo ufw allow 80\nsudo ufw allow 443\n```\n\n### 3. 配置SSH\n\nSSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。\n\n#### 生成SSH密钥对\n\n在客户端机器上，运行以下命令生成SSH密钥对：\n\n```bash\nssh-keygen -t rsa -b 4096\n```\n\n#### 将公钥添加到服务器\n\n使用`ssh-copy-id`命令将公钥复制到服务器上：\n\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub 用户名@服务器IP\n```\n\n#### 禁用密码认证\n\n编辑服务器上的`/etc/ssh/sshd_config`文件，设置以下内容：\n\n```bash\nPasswordAuthentication no\n```\n\n然后重启SSH服务以应用更改：\n\n```bash\nsudo systemctl restart sshd\n```\n\n### 4. 配置Fail2Ban\n\nFail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。\n\n#### 安装Fail2Ban\n\n```bash\nsudo apt install fail2ban\n```\n\n#### 配置基本保护\n\n创建或编辑`/etc/fail2ban/jail.local`文件，为SSH服务添加基本保护：\n\n```ini\n[DEFAULT]\n# 全局设置\nbantime = 1h        # 封禁时间：1小时\nfindtime = 10m      # 在此时间内连续失败的尝试视为攻击\nmaxretry = 5        # 允许失败次数\nignoreip = 127.0.0.1/8 # 忽略本地IP地址的封禁\n\n# 指定要使用的日志文件\nbackend = auto      # 自动确定日志文件类型\nusedns = warn       # 使用DNS解析\nlogencoding = auto  # 日志文件的编码\nenabled = false     # 默认不启用任何规则\n\n# SSH 服务\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nfindtime = 5m\n```\n\n重启Fail2Ban服务以应用配置：\n\n```bash\nsudo systemctl restart fail2ban\nsudo systemctl enable fail2ban\n```\n\n---\n\n通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。\n","source":"_posts/服务器安全设置.md","raw":"---\ntitle: 服务器安全设置\ndate: 2024-06-24 19:14:28\ntags: Linux\ncategories: Linux\ncover: /img/JavaBasics.jpg\n---\n\n### 1. 更新系统\n\n首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：\n\n```bash\nsudo apt update && sudo apt upgrade\n```\n\n### 2. 安装防火墙\n\nUbuntu默认带有`ufw`（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：\n\n启用`ufw`：\n\n```bash\nsudo ufw enable\n```\n\n接下来，开放必要的端口。例如，对于SSH服务：\n\n```bash\nsudo ufw allow 22\n```\n\n如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：\n\n```bash\nsudo ufw allow 80\nsudo ufw allow 443\n```\n\n### 3. 配置SSH\n\nSSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。\n\n#### 生成SSH密钥对\n\n在客户端机器上，运行以下命令生成SSH密钥对：\n\n```bash\nssh-keygen -t rsa -b 4096\n```\n\n#### 将公钥添加到服务器\n\n使用`ssh-copy-id`命令将公钥复制到服务器上：\n\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub 用户名@服务器IP\n```\n\n#### 禁用密码认证\n\n编辑服务器上的`/etc/ssh/sshd_config`文件，设置以下内容：\n\n```bash\nPasswordAuthentication no\n```\n\n然后重启SSH服务以应用更改：\n\n```bash\nsudo systemctl restart sshd\n```\n\n### 4. 配置Fail2Ban\n\nFail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。\n\n#### 安装Fail2Ban\n\n```bash\nsudo apt install fail2ban\n```\n\n#### 配置基本保护\n\n创建或编辑`/etc/fail2ban/jail.local`文件，为SSH服务添加基本保护：\n\n```ini\n[DEFAULT]\n# 全局设置\nbantime = 1h        # 封禁时间：1小时\nfindtime = 10m      # 在此时间内连续失败的尝试视为攻击\nmaxretry = 5        # 允许失败次数\nignoreip = 127.0.0.1/8 # 忽略本地IP地址的封禁\n\n# 指定要使用的日志文件\nbackend = auto      # 自动确定日志文件类型\nusedns = warn       # 使用DNS解析\nlogencoding = auto  # 日志文件的编码\nenabled = false     # 默认不启用任何规则\n\n# SSH 服务\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nfindtime = 5m\n```\n\n重启Fail2Ban服务以应用配置：\n\n```bash\nsudo systemctl restart fail2ban\nsudo systemctl enable fail2ban\n```\n\n---\n\n通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。\n","slug":"服务器安全设置","published":1,"updated":"2024-06-25T04:43:41.773Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbs000mglj8b52gdnmq","content":"<h3 id=\"1-更新系统\"><a href=\"#1-更新系统\" class=\"headerlink\" title=\"1. 更新系统\"></a>1. 更新系统</h3><p>首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-安装防火墙\"><a href=\"#2-安装防火墙\" class=\"headerlink\" title=\"2. 安装防火墙\"></a>2. 安装防火墙</h3><p>Ubuntu默认带有<code>ufw</code>（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：</p>\n<p>启用<code>ufw</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>接下来，开放必要的端口。例如，对于SSH服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">80</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">443</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-配置SSH\"><a href=\"#3-配置SSH\" class=\"headerlink\" title=\"3. 配置SSH\"></a>3. 配置SSH</h3><p>SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。</p>\n<h4 id=\"生成SSH密钥对\"><a href=\"#生成SSH密钥对\" class=\"headerlink\" title=\"生成SSH密钥对\"></a>生成SSH密钥对</h4><p>在客户端机器上，运行以下命令生成SSH密钥对：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"将公钥添加到服务器\"><a href=\"#将公钥添加到服务器\" class=\"headerlink\" title=\"将公钥添加到服务器\"></a>将公钥添加到服务器</h4><p>使用<code>ssh-copy-id</code>命令将公钥复制到服务器上：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub 用户名@服务器IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"禁用密码认证\"><a href=\"#禁用密码认证\" class=\"headerlink\" title=\"禁用密码认证\"></a>禁用密码认证</h4><p>编辑服务器上的<code>/etc/ssh/sshd_config</code>文件，设置以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PasswordAuthentication no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后重启SSH服务以应用更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-配置Fail2Ban\"><a href=\"#4-配置Fail2Ban\" class=\"headerlink\" title=\"4. 配置Fail2Ban\"></a>4. 配置Fail2Ban</h3><p>Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。</p>\n<h4 id=\"安装Fail2Ban\"><a href=\"#安装Fail2Ban\" class=\"headerlink\" title=\"安装Fail2Ban\"></a>安装Fail2Ban</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"配置基本保护\"><a href=\"#配置基本保护\" class=\"headerlink\" title=\"配置基本保护\"></a>配置基本保护</h4><p>创建或编辑<code>/etc/fail2ban/jail.local</code>文件，为SSH服务添加基本保护：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">DEFAULT</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># 全局设置</span>\n<span class=\"token key attr-name\">bantime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">1h        # 封禁时间：1小时</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">10m      # 在此时间内连续失败的尝试视为攻击</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5        # 允许失败次数</span>\n<span class=\"token key attr-name\">ignoreip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1/8 # 忽略本地IP地址的封禁</span>\n\n<span class=\"token comment\"># 指定要使用的日志文件</span>\n<span class=\"token key attr-name\">backend</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto      # 自动确定日志文件类型</span>\n<span class=\"token key attr-name\">usedns</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">warn       # 使用DNS解析</span>\n<span class=\"token key attr-name\">logencoding</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto  # 日志文件的编码</span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">false     # 默认不启用任何规则</span>\n\n<span class=\"token comment\"># SSH 服务</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">sshd</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">ssh</span>\n<span class=\"token key attr-name\">filter</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">sshd</span>\n<span class=\"token key attr-name\">logpath</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/var/log/auth.log</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">3</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5m</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重启Fail2Ban服务以应用配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart fail2ban\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<p>通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。</p>\n","excerpt":"","more":"<h3 id=\"1-更新系统\"><a href=\"#1-更新系统\" class=\"headerlink\" title=\"1. 更新系统\"></a>1. 更新系统</h3><p>首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-安装防火墙\"><a href=\"#2-安装防火墙\" class=\"headerlink\" title=\"2. 安装防火墙\"></a>2. 安装防火墙</h3><p>Ubuntu默认带有<code>ufw</code>（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：</p>\n<p>启用<code>ufw</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>接下来，开放必要的端口。例如，对于SSH服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">80</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">443</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-配置SSH\"><a href=\"#3-配置SSH\" class=\"headerlink\" title=\"3. 配置SSH\"></a>3. 配置SSH</h3><p>SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。</p>\n<h4 id=\"生成SSH密钥对\"><a href=\"#生成SSH密钥对\" class=\"headerlink\" title=\"生成SSH密钥对\"></a>生成SSH密钥对</h4><p>在客户端机器上，运行以下命令生成SSH密钥对：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"将公钥添加到服务器\"><a href=\"#将公钥添加到服务器\" class=\"headerlink\" title=\"将公钥添加到服务器\"></a>将公钥添加到服务器</h4><p>使用<code>ssh-copy-id</code>命令将公钥复制到服务器上：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub 用户名@服务器IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"禁用密码认证\"><a href=\"#禁用密码认证\" class=\"headerlink\" title=\"禁用密码认证\"></a>禁用密码认证</h4><p>编辑服务器上的<code>/etc/ssh/sshd_config</code>文件，设置以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PasswordAuthentication no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后重启SSH服务以应用更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-配置Fail2Ban\"><a href=\"#4-配置Fail2Ban\" class=\"headerlink\" title=\"4. 配置Fail2Ban\"></a>4. 配置Fail2Ban</h3><p>Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。</p>\n<h4 id=\"安装Fail2Ban\"><a href=\"#安装Fail2Ban\" class=\"headerlink\" title=\"安装Fail2Ban\"></a>安装Fail2Ban</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"配置基本保护\"><a href=\"#配置基本保护\" class=\"headerlink\" title=\"配置基本保护\"></a>配置基本保护</h4><p>创建或编辑<code>/etc/fail2ban/jail.local</code>文件，为SSH服务添加基本保护：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">DEFAULT</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># 全局设置</span>\n<span class=\"token key attr-name\">bantime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">1h        # 封禁时间：1小时</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">10m      # 在此时间内连续失败的尝试视为攻击</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5        # 允许失败次数</span>\n<span class=\"token key attr-name\">ignoreip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1/8 # 忽略本地IP地址的封禁</span>\n\n<span class=\"token comment\"># 指定要使用的日志文件</span>\n<span class=\"token key attr-name\">backend</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto      # 自动确定日志文件类型</span>\n<span class=\"token key attr-name\">usedns</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">warn       # 使用DNS解析</span>\n<span class=\"token key attr-name\">logencoding</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto  # 日志文件的编码</span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">false     # 默认不启用任何规则</span>\n\n<span class=\"token comment\"># SSH 服务</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">sshd</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">ssh</span>\n<span class=\"token key attr-name\">filter</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">sshd</span>\n<span class=\"token key attr-name\">logpath</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/var/log/auth.log</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">3</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5m</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重启Fail2Ban服务以应用配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart fail2ban\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<p>通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"自动续签证书","date":"2024-06-24T12:34:50.000Z","cover":"https://cloud.lushiwu.top/f/AYfy/%E5%8E%9A%E6%B6%82%E5%A5%B3%E5%AD%A9%20%E6%89%8B%E7%BB%98%E7%94%BB4K.jpeg","_content":"\n# 使用 acme.sh 安装和管理 SSL 证书\n\n本文将介绍如何使用 acme.sh 安装和管理 SSL 证书。acme.sh 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let's Encrypt 及其他 CA 颁发的证书。\n\n## 下载并安装 acme.sh\n\n首先，下载并安装 acme.sh。在终端中执行以下命令：\n\n```bash\ncd ~\ncurl https://get.acme.sh | sh -s email=<youremail@domain.com>\n```\n\n安装过程会执行以下几步：\n\n1. 将 acme.sh 安装到你的 **home** 目录中：\n\n    ```\n    ~/.acme.sh/\n    ```\n\n2. 创建一个 Shell 别名，方便使用。在 `.bashrc` 中添加：\n\n    ```bash\n    alias acme.sh=~/.acme.sh/acme.sh\n    ```\n\n3. 自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。\n\n更高级的安装选项请参考：[acme.sh 安装文档](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n\n**注意**：安装过程不会影响现有系统的运行和文件，所有修改都位于 `~/.acme.sh/` 目录中。\n\n## 使用 DNS 验证方式生成 SSL 证书\n\nacme.sh 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。\n\n### 手动 DNS 验证\n\n手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。\n\n1. 运行以下命令，手动在域名上添加一条 TXT 解析记录：\n\n    ```bash\n    acme.sh --issue --dns -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n2. acme.sh 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。\n\n3. 等待解析完成后，重新生成证书：\n\n    ```bash\n    acme.sh --renew -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n4. 安装生成的证书：\n\n    ```bash\n    acme.sh --install-cert -d <mydomain.com> \\\n    --key-file /opt/nginx/key.pem  \\\n    --fullchain-file /opt/nginx/cert.pem \\\n    ```\n\n## 总结\n\n通过以上步骤，你已经成功使用 acme.sh 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 [acme.sh 的 DNS API 支持文档](https://github.com/Neilpang/acme.sh/wiki/dnsapi)。\n\n希望本文对你有所帮助！\n","source":"_posts/自动续签证书.md","raw":"---\ntitle: 自动续签证书\ndate: 2024-06-24 20:34:50\ntags:\n    - Linux\n    - SSL\n    - 域名\ncategories:  Linux\ncover: https://cloud.lushiwu.top/f/AYfy/%E5%8E%9A%E6%B6%82%E5%A5%B3%E5%AD%A9%20%E6%89%8B%E7%BB%98%E7%94%BB4K.jpeg\n---\n\n# 使用 acme.sh 安装和管理 SSL 证书\n\n本文将介绍如何使用 acme.sh 安装和管理 SSL 证书。acme.sh 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let's Encrypt 及其他 CA 颁发的证书。\n\n## 下载并安装 acme.sh\n\n首先，下载并安装 acme.sh。在终端中执行以下命令：\n\n```bash\ncd ~\ncurl https://get.acme.sh | sh -s email=<youremail@domain.com>\n```\n\n安装过程会执行以下几步：\n\n1. 将 acme.sh 安装到你的 **home** 目录中：\n\n    ```\n    ~/.acme.sh/\n    ```\n\n2. 创建一个 Shell 别名，方便使用。在 `.bashrc` 中添加：\n\n    ```bash\n    alias acme.sh=~/.acme.sh/acme.sh\n    ```\n\n3. 自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。\n\n更高级的安装选项请参考：[acme.sh 安装文档](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n\n**注意**：安装过程不会影响现有系统的运行和文件，所有修改都位于 `~/.acme.sh/` 目录中。\n\n## 使用 DNS 验证方式生成 SSL 证书\n\nacme.sh 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。\n\n### 手动 DNS 验证\n\n手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。\n\n1. 运行以下命令，手动在域名上添加一条 TXT 解析记录：\n\n    ```bash\n    acme.sh --issue --dns -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n2. acme.sh 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。\n\n3. 等待解析完成后，重新生成证书：\n\n    ```bash\n    acme.sh --renew -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n4. 安装生成的证书：\n\n    ```bash\n    acme.sh --install-cert -d <mydomain.com> \\\n    --key-file /opt/nginx/key.pem  \\\n    --fullchain-file /opt/nginx/cert.pem \\\n    ```\n\n## 总结\n\n通过以上步骤，你已经成功使用 acme.sh 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 [acme.sh 的 DNS API 支持文档](https://github.com/Neilpang/acme.sh/wiki/dnsapi)。\n\n希望本文对你有所帮助！\n","slug":"自动续签证书","published":1,"updated":"2024-06-24T15:08:38.323Z","comments":1,"layout":"post","photos":[],"_id":"clxty1lbt000pglj83pqebg64","content":"<h1 id=\"使用-acme-sh-安装和管理-SSL-证书\"><a href=\"#使用-acme-sh-安装和管理-SSL-证书\" class=\"headerlink\" title=\"使用 acme.sh 安装和管理 SSL 证书\"></a>使用 acme.sh 安装和管理 SSL 证书</h1><p>本文将介绍如何使用 acme.sh 安装和管理 SSL 证书。acme.sh 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。</p>\n<h2 id=\"下载并安装-acme-sh\"><a href=\"#下载并安装-acme-sh\" class=\"headerlink\" title=\"下载并安装 acme.sh\"></a>下载并安装 acme.sh</h2><p>首先，下载并安装 acme.sh。在终端中执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">curl</span> https://get.acme.sh <span class=\"token operator\">|</span> <span class=\"token function\">sh</span> <span class=\"token parameter variable\">-s</span> <span class=\"token assign-left variable\">email</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>youremail@domain.com<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>安装过程会执行以下几步：</p>\n<ol>\n<li><p>将 acme.sh 安装到你的 <strong>home</strong> 目录中：</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.acme.sh&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>创建一个 Shell 别名，方便使用。在 <code>.bashrc</code> 中添加：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">acme.sh</span><span class=\"token operator\">=~</span>/.acme.sh/acme.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。</p>\n</li>\n</ol>\n<p>更高级的安装选项请参考：<a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\">acme.sh 安装文档</a></p>\n<p><strong>注意</strong>：安装过程不会影响现有系统的运行和文件，所有修改都位于 <code>~/.acme.sh/</code> 目录中。</p>\n<h2 id=\"使用-DNS-验证方式生成-SSL-证书\"><a href=\"#使用-DNS-验证方式生成-SSL-证书\" class=\"headerlink\" title=\"使用 DNS 验证方式生成 SSL 证书\"></a>使用 DNS 验证方式生成 SSL 证书</h2><p>acme.sh 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。</p>\n<h3 id=\"手动-DNS-验证\"><a href=\"#手动-DNS-验证\" class=\"headerlink\" title=\"手动 DNS 验证\"></a>手动 DNS 验证</h3><p>手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。</p>\n<ol>\n<li><p>运行以下命令，手动在域名上添加一条 TXT 解析记录：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--issue</span> <span class=\"token parameter variable\">--dns</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>acme.sh 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。</p>\n</li>\n<li><p>等待解析完成后，重新生成证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--renew</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>安装生成的证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh --install-cert <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--key-file /opt/nginx/key.pem  <span class=\"token punctuation\">\\</span>\n--fullchain-file /opt/nginx/cert.pem <span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过以上步骤，你已经成功使用 acme.sh 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 <a href=\"https://github.com/Neilpang/acme.sh/wiki/dnsapi\">acme.sh 的 DNS API 支持文档</a>。</p>\n<p>希望本文对你有所帮助！</p>\n","excerpt":"","more":"<h1 id=\"使用-acme-sh-安装和管理-SSL-证书\"><a href=\"#使用-acme-sh-安装和管理-SSL-证书\" class=\"headerlink\" title=\"使用 acme.sh 安装和管理 SSL 证书\"></a>使用 acme.sh 安装和管理 SSL 证书</h1><p>本文将介绍如何使用 acme.sh 安装和管理 SSL 证书。acme.sh 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。</p>\n<h2 id=\"下载并安装-acme-sh\"><a href=\"#下载并安装-acme-sh\" class=\"headerlink\" title=\"下载并安装 acme.sh\"></a>下载并安装 acme.sh</h2><p>首先，下载并安装 acme.sh。在终端中执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">curl</span> https://get.acme.sh <span class=\"token operator\">|</span> <span class=\"token function\">sh</span> <span class=\"token parameter variable\">-s</span> <span class=\"token assign-left variable\">email</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>youremail@domain.com<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>安装过程会执行以下几步：</p>\n<ol>\n<li><p>将 acme.sh 安装到你的 <strong>home</strong> 目录中：</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.acme.sh&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>创建一个 Shell 别名，方便使用。在 <code>.bashrc</code> 中添加：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">acme.sh</span><span class=\"token operator\">=~</span>/.acme.sh/acme.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。</p>\n</li>\n</ol>\n<p>更高级的安装选项请参考：<a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\">acme.sh 安装文档</a></p>\n<p><strong>注意</strong>：安装过程不会影响现有系统的运行和文件，所有修改都位于 <code>~/.acme.sh/</code> 目录中。</p>\n<h2 id=\"使用-DNS-验证方式生成-SSL-证书\"><a href=\"#使用-DNS-验证方式生成-SSL-证书\" class=\"headerlink\" title=\"使用 DNS 验证方式生成 SSL 证书\"></a>使用 DNS 验证方式生成 SSL 证书</h2><p>acme.sh 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。</p>\n<h3 id=\"手动-DNS-验证\"><a href=\"#手动-DNS-验证\" class=\"headerlink\" title=\"手动 DNS 验证\"></a>手动 DNS 验证</h3><p>手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。</p>\n<ol>\n<li><p>运行以下命令，手动在域名上添加一条 TXT 解析记录：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--issue</span> <span class=\"token parameter variable\">--dns</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>acme.sh 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。</p>\n</li>\n<li><p>等待解析完成后，重新生成证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--renew</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>安装生成的证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh --install-cert <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--key-file /opt/nginx/key.pem  <span class=\"token punctuation\">\\</span>\n--fullchain-file /opt/nginx/cert.pem <span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过以上步骤，你已经成功使用 acme.sh 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 <a href=\"https://github.com/Neilpang/acme.sh/wiki/dnsapi\">acme.sh 的 DNS API 支持文档</a>。</p>\n<p>希望本文对你有所帮助！</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true}],"PostAsset":[],"PostCategory":[{"post_id":"clxty1lbe0001glj86mr2egwx","category_id":"clxty1lbj0004glj8e5ib2frv","_id":"clxty1lbp000eglj8801ogz1b"},{"post_id":"clxty1lbo000cglj83ypjb524","category_id":"clxty1lbn0009glj83by298p6","_id":"clxty1lbr000jglj89agc5mnb"},{"post_id":"clxty1lbh0003glj8g2c0arr0","category_id":"clxty1lbn0009glj83by298p6","_id":"clxty1lbt000nglj8gjqq50tg"},{"post_id":"clxty1lbm0008glj8aiml0bk4","category_id":"clxty1lbp000fglj8as5bh43c","_id":"clxty1lbu000rglj8emkfdhku"},{"post_id":"clxty1lbq000iglj85gh39g2a","category_id":"clxty1lbj0004glj8e5ib2frv","_id":"clxty1lbv000vglj8ar9cbpup"},{"post_id":"clxty1lbt000pglj83pqebg64","category_id":"clxty1lbr000lglj89m221arv","_id":"clxty1lbv000xglj8bp9fgtbh"},{"post_id":"clxty1lbq000hglj8459h00wf","category_id":"clxty1lbr000lglj89m221arv","_id":"clxty1lbw000zglj8auvnaebv"},{"post_id":"clxty1lbs000mglj8b52gdnmq","category_id":"clxty1lbr000lglj89m221arv","_id":"clxty1lbw0012glj845cs6c42"}],"PostTag":[{"post_id":"clxty1lbe0001glj86mr2egwx","tag_id":"clxty1lbk0005glj86lc2hfj3","_id":"clxty1lbo000bglj859jt47ft"},{"post_id":"clxty1lbh0003glj8g2c0arr0","tag_id":"clxty1lbn000aglj82mr86umj","_id":"clxty1lbt000oglj880wq15jx"},{"post_id":"clxty1lbh0003glj8g2c0arr0","tag_id":"clxty1lbp000gglj8cwkjezig","_id":"clxty1lbu000qglj826gybiaq"},{"post_id":"clxty1lbq000iglj85gh39g2a","tag_id":"clxty1lbk0005glj86lc2hfj3","_id":"clxty1lbv000uglj8hxq09uya"},{"post_id":"clxty1lbk0006glj8g1eg7xv2","tag_id":"clxty1lbn000aglj82mr86umj","_id":"clxty1lbv000yglj8en5h1uig"},{"post_id":"clxty1lbk0006glj8g1eg7xv2","tag_id":"clxty1lbp000gglj8cwkjezig","_id":"clxty1lbw0010glj88o6w4cpp"},{"post_id":"clxty1lbl0007glj827s95lmr","tag_id":"clxty1lbv000wglj8bugbdn8h","_id":"clxty1lbw0014glj88mor5xva"},{"post_id":"clxty1lbl0007glj827s95lmr","tag_id":"clxty1lbw0011glj88o56bqun","_id":"clxty1lbw0015glj8eizch5vd"},{"post_id":"clxty1lbm0008glj8aiml0bk4","tag_id":"clxty1lbv000wglj8bugbdn8h","_id":"clxty1lbx0018glj8dsi26g7u"},{"post_id":"clxty1lbm0008glj8aiml0bk4","tag_id":"clxty1lbp000gglj8cwkjezig","_id":"clxty1lbx0019glj8b43e4z1s"},{"post_id":"clxty1lbo000cglj83ypjb524","tag_id":"clxty1lbn000aglj82mr86umj","_id":"clxty1lby001cglj8aj9wcror"},{"post_id":"clxty1lbo000cglj83ypjb524","tag_id":"clxty1lbx0017glj82zondlmh","_id":"clxty1lby001dglj8bkog1kks"},{"post_id":"clxty1lbo000cglj83ypjb524","tag_id":"clxty1lbp000gglj8cwkjezig","_id":"clxty1lby001fglj8ctzn41am"},{"post_id":"clxty1lbo000dglj89k3i1kc0","tag_id":"clxty1lbw0011glj88o56bqun","_id":"clxty1lby001gglj8gsfc625t"},{"post_id":"clxty1lbq000hglj8459h00wf","tag_id":"clxty1lby001eglj89dyg7pbp","_id":"clxty1lby001iglj82ymi90e8"},{"post_id":"clxty1lbs000mglj8b52gdnmq","tag_id":"clxty1lbw0011glj88o56bqun","_id":"clxty1lbz001kglj8g78n1xnd"},{"post_id":"clxty1lbt000pglj83pqebg64","tag_id":"clxty1lbw0011glj88o56bqun","_id":"clxty1lbz001nglj835vr5ql2"},{"post_id":"clxty1lbt000pglj83pqebg64","tag_id":"clxty1lbz001lglj84lkz5job","_id":"clxty1lc0001oglj89rx7gc8b"},{"post_id":"clxty1lbt000pglj83pqebg64","tag_id":"clxty1lbz001mglj84wba9fjn","_id":"clxty1lc0001pglj80tjz5avb"}],"Tag":[{"name":"Blog","_id":"clxty1lbk0005glj86lc2hfj3"},{"name":"Java","_id":"clxty1lbn000aglj82mr86umj"},{"name":"八股文","_id":"clxty1lbp000gglj8cwkjezig"},{"name":"MySQL","_id":"clxty1lbv000wglj8bugbdn8h"},{"name":"Linux","_id":"clxty1lbw0011glj88o56bqun"},{"name":"Spring","_id":"clxty1lbx0017glj82zondlmh"},{"name":"Alist","_id":"clxty1lby001eglj89dyg7pbp"},{"name":"SSL","_id":"clxty1lbz001lglj84lkz5job"},{"name":"域名","_id":"clxty1lbz001mglj84wba9fjn"}]}}