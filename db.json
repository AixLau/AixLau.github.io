{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/solitude/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/404.avif","path":"img/404.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/INFP-A.svg","path":"img/INFP-A.svg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/JavaBasics.jpg","path":"img/JavaBasics.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/JavaCollection.png","path":"img/JavaCollection.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/VaultwardenBuild.png","path":"img/VaultwardenBuild.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/alistback.jpg","path":"img/alistback.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/avatar.avif","path":"img/avatar.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/black.gif","path":"img/black.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/cover.png","path":"img/cover.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/default.avif","path":"img/default.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/error_load.avif","path":"img/error_load.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/flower.gif","path":"img/flower.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/happy-sticker.avif","path":"img/happy-sticker.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/he.gif","path":"img/he.gif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/hour 2024-06-24 at 21.08.03.png","path":"img/hour 2024-06-24 at 21.08.03.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/java.svg","path":"img/java.svg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/jinkesi.jpg","path":"img/jinkesi.jpg","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/loading.avif","path":"img/loading.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/map-dark.png","path":"img/map-dark.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/map-light.png","path":"img/map-light.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/mysqlbaguwen.png","path":"img/mysqlbaguwen.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/recent_c.avif","path":"img/recent_c.avif","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/springbaguwen.png","path":"img/springbaguwen.png","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/厚涂女孩 手绘画4K.jpeg","path":"img/厚涂女孩 手绘画4K.jpeg","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/custom.js","path":"js/custom.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/music.js","path":"js/music.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/right_menu.js","path":"js/right_menu.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/third_party/snackbar.min.css","path":"css/third_party/snackbar.min.css","modified":1,"renderable":1},{"_id":"themes/solitude/source/css/third_party/tianli_talk.styl","path":"css/third_party/tianli_talk.styl","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/browser.icns","path":"img/pwa/browser.icns","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/favicon.ico","path":"img/pwa/favicon.ico","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/favicon_16.ico","path":"img/pwa/favicon_16.ico","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/favicon_32.ico","path":"img/pwa/favicon_32.ico","modified":1,"renderable":1},{"_id":"themes/solitude/source/img/pwa/wu.ico","path":"img/pwa/wu.ico","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/covercolor/api.js","path":"js/covercolor/api.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/covercolor/local.js","path":"js/covercolor/local.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/search/local.js","path":"js/search/local.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/barrage.min.js","path":"js/third_party/barrage.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/efu_ai.min.js","path":"js/third_party/efu_ai.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/envelope.min.js","path":"js/third_party/envelope.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/universe.min.js","path":"js/third_party/universe.min.js","modified":1,"renderable":1},{"_id":"themes/solitude/source/js/third_party/waterfall.min.js","path":"js/third_party/waterfall.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/about.yaml","hash":"2832207528ddc2b0431b783f04815080e182859c","modified":1721016816135},{"_id":"source/CNAME","hash":"ea9600bb3e3206479cb5093d97379013e1233e23","modified":1720695137993},{"_id":"source/_data/aside.yaml","hash":"ee2f4d49855485a55ee34639aba966a87c9ef46a","modified":1720856083315},{"_id":"source/.DS_Store","hash":"ff80b94706f802032921c5dd3b753aa52b131ec0","modified":1721016869824},{"_id":"source/_posts/.DS_Store","hash":"535351f8e06629fb5e9499161a605decbc7ffb4d","modified":1721011421603},{"_id":"source/about/index.md","hash":"fed00b9c89122caac554b3996b6fab369dedeb36","modified":1718702191510},{"_id":"source/_posts/Hexo备份.md","hash":"5cecaf4843fd9911cfbea9cd3f229f2605c291bb","modified":1721016175086},{"_id":"source/_posts/Java基础八股文.md","hash":"2555200bcde3457502bb9be87f0499202cc9fc9b","modified":1721016100093},{"_id":"source/_data/.DS_Store","hash":"566129349e61a06fdc3b21da7fbf7b4fa33cd7d8","modified":1720860624141},{"_id":"source/_posts/Mac安装JDK.md","hash":"bbcf66b7ef0043f0f52a430e8b68a10623bb4a18","modified":1721018551909},{"_id":"source/_posts/Mac安装Maven.md","hash":"42e2eccfa4170173ae0af59e5fa77df7d484fd34","modified":1721018478465},{"_id":"source/_posts/Linux安装MySQL.md","hash":"993da66c7c3b0d7682bcfeaf6cd5e2877c140726","modified":1721016705458},{"_id":"source/_posts/MyBatis八股文.md","hash":"6873d79e3eda321972f7927f73d1b9082be1b65a","modified":1721015099263},{"_id":"source/_posts/RabbitMQ八股文.md","hash":"175b05fe3622924ce140244eea1f87472f78866c","modified":1721014992657},{"_id":"source/_posts/Java集合八股文.md","hash":"685dc13e73afc2ab5a6c62bec993046eefe5112c","modified":1721016134692},{"_id":"source/_posts/Redis八股文.md","hash":"d7d36312bb0eb9b50c2a204a3885f1eeaf9f832a","modified":1721015006137},{"_id":"source/_posts/Myql八股文.md","hash":"c8d696e0f25354143928e268348fcf9742ecd8fe","modified":1721016075046},{"_id":"source/_posts/Vaultwarden搭建.md","hash":"e46066ab4468f1fc36b314639622a91ac8f01793","modified":1721016050768},{"_id":"source/_posts/Spring八股文.md","hash":"ee9298717f9610b731139753e37f8187bb1a9b97","modified":1721016085796},{"_id":"source/_posts/安装Homebrew.md","hash":"30630839b68ae6919cc2a96878da2b73e7e1159a","modified":1721017103174},{"_id":"source/_posts/使用AList定时备份服务器文件.md","hash":"487665134f222e755dea45fd85fb3974eecefec0","modified":1721014955819},{"_id":"source/_posts/安装部署Hexo.md","hash":"7cc29d9c4b7cd7f20d6428f884e2032ab8d0e958","modified":1721017019935},{"_id":"source/_posts/服务器安全设置.md","hash":"098592327e6be9b99106d7da6706a647b71beb21","modified":1721015920371},{"_id":"source/_posts/定期清理Alist备份文件.md","hash":"7413dd8b5d53eaf8be6d198e3af3811f008685ca","modified":1721015051600},{"_id":"source/_posts/脚本.md","hash":"dc24fbf3adced5316ad81ae7be73df25dd9298db","modified":1721015139002},{"_id":"source/_posts/自动续签证书.md","hash":"f5e3b8293b71914403b7e2eae67b082afda3098c","modified":1721015841410},{"_id":"source/_posts/项目讲解.md","hash":"7494b9dc9de6af8bd7e739bfd3b25d1642ed5f11","modified":1721014973957},{"_id":"source/music/index.md","hash":"c2c5f941196f6491376a7502ab0edb49d688688c","modified":1719302310825},{"_id":"source/message/index.md","hash":"28b2fef1886c8833aff0fe083ec6b21448b60f5a","modified":1718706589383},{"_id":"source/_posts/Vue3快速上手.md","hash":"c693102693a7d0bbd0102dc6a4e0c7c679fdd73f","modified":1721017973680},{"_id":"themes/solitude/package.json","hash":"462cfe63430acd8f377d91b483deced7399a513b","modified":1720700374664},{"_id":"themes/solitude/plugins.yml","hash":"de76e02a58c7a3a2b26778e105aee010098bb82d","modified":1720256582000},{"_id":"themes/solitude/.DS_Store","hash":"0102f7bc6fbea8d58be2c3a1b65b1fa80c2a2e07","modified":1720856239117},{"_id":"themes/solitude/languages/default.yml","hash":"b735a1cb8cf9cec32ea5b57fd9d1d1b48a04f395","modified":1720256582000},{"_id":"themes/solitude/languages/en.yml","hash":"d1cbb92bc6356141b680142f055274643d907022","modified":1720256582000},{"_id":"themes/solitude/languages/zh-CN.yml","hash":"b62ed4908c2104910615487d0d17010440b575ab","modified":1720256582000},{"_id":"themes/solitude/_config.yml","hash":"53a1f9fcfc0365783569301dc09482634a2bcc1c","modified":1720700374647},{"_id":"themes/solitude/layout/archive.pug","hash":"0630a92b8f16139c135aac1b14403a620a52654c","modified":1720256582000},{"_id":"themes/solitude/layout/404.pug","hash":"259f637b940c519d0045414e6b193076cf125735","modified":1720256582000},{"_id":"themes/solitude/layout/index.pug","hash":"a190b82319ddbbcba7c6001238b3e82aaf72f350","modified":1720256582000},{"_id":"themes/solitude/layout/page.pug","hash":"003b4acdd4cc47e8365cf296d788f977a0d4edc8","modified":1720256582000},{"_id":"themes/solitude/layout/post.pug","hash":"b4cb9aa8c1200d8c2b9547ee2e11cd30edd22915","modified":1720256582000},{"_id":"themes/solitude/languages/zh-TW.yml","hash":"b5f1b044aa3c305a3d31ca776f88eed2793efd36","modified":1720256582000},{"_id":"themes/solitude/layout/category.pug","hash":"482f1971cf5221250b53c89a1cfb16317f6c9d59","modified":1720256582000},{"_id":"themes/solitude/layout/tag.pug","hash":"21d19688b557dda1c9e26c488f7b3b00bbef8071","modified":1720256582000},{"_id":"themes/solitude/source/.DS_Store","hash":"06648d58408608c9b0876b7b7608dac2efde36c1","modified":1720856386715},{"_id":"themes/solitude/layout/includes/footer.pug","hash":"8f3e2f50d961511dc36da4b54dce1193edcebe8d","modified":1720256582000},{"_id":"themes/solitude/layout/includes/console.pug","hash":"fb12256843440a776eaaf5cd254042dd1f1284ae","modified":1720256582000},{"_id":"themes/solitude/layout/includes/head.pug","hash":"ed6afa31ade7d95e143268034108138bf2e939fd","modified":1720256582000},{"_id":"themes/solitude/layout/includes/keyboard.pug","hash":"4958dd9232c790c5aa4156e0fdcd4cdf72bfc7b6","modified":1720256582000},{"_id":"themes/solitude/layout/includes/header.pug","hash":"426fe2e61a12c77c317d11197a3ce7d7d8bb602d","modified":1720256582000},{"_id":"themes/solitude/scripts/event/cdn.js","hash":"c7c8b923d6b634ccf4e9db07ad0fc24001a05859","modified":1720256582000},{"_id":"themes/solitude/scripts/event/init.js","hash":"078f872a8fb0f373623bd1211ac5064e3d4c21fd","modified":1720256582000},{"_id":"themes/solitude/layout/includes/rightmenu.pug","hash":"be7e5ff4d77e56416dccf6df6f5d58b0d897ba6d","modified":1720256582000},{"_id":"themes/solitude/scripts/event/merge_config.js","hash":"c25137fbbd5452c97f5a07dfc3c4301d893ca93c","modified":1720256582000},{"_id":"themes/solitude/scripts/event/page.js","hash":"20cf3726cc7bb01b1cd58c85148ec1cd1de258c8","modified":1720256582000},{"_id":"themes/solitude/layout/includes/layout.pug","hash":"6fb4feec0a3fa2345631367532332ce25a838ec8","modified":1720256582000},{"_id":"themes/solitude/scripts/filter/checkThemeConfig.js","hash":"13d0e44048caedd9474729a16a72abe054367e57","modified":1720256582000},{"_id":"themes/solitude/scripts/event/welcome.js","hash":"06752fe1fc9d5be212c236f68df3d2bc9379c02c","modified":1720256582000},{"_id":"themes/solitude/scripts/filter/comment.js","hash":"047365413fdc87b97be09de76cdbf090751be2b6","modified":1720256582000},{"_id":"themes/solitude/scripts/filter/default.js","hash":"bfad3ab780b2cb3f9d43172a96d4ae81dab7f32d","modified":1720256582000},{"_id":"themes/solitude/scripts/filter/post_image.js","hash":"fd6cc64c6875d8f9ba9a8b0a9366adfbd6ca364d","modified":1720256582000},{"_id":"themes/solitude/scripts/filter/lazyload.js","hash":"5ad9d91958901e43d65f5aad12d5b617095bf74d","modified":1720256582000},{"_id":"themes/solitude/scripts/filter/randomPosts.js","hash":"2d2976d905c0b78407e6a297fa9cd373cd60107e","modified":1720256582000},{"_id":"themes/solitude/scripts/helper/getArchiveLength.js","hash":"5b65fff0da05e6b3f5a33558fdb2ad5769ade2c6","modified":1720256582000},{"_id":"themes/solitude/scripts/helper/inject_head_js.js","hash":"872a5c42c3b3d4f4cdb307ea800ccb6eabc51dc4","modified":1720256582000},{"_id":"themes/solitude/scripts/helper/page.js","hash":"d0a5b107157ee05783b0a3f66f4996aef8281f54","modified":1720256582000},{"_id":"themes/solitude/scripts/helper/related_post.js","hash":"77d57e69ada5cfaab14a66914ebe58122ea29a31","modified":1720256582000},{"_id":"themes/solitude/scripts/helper/stylus.js","hash":"24fa5ba297f4eff006fa7a8d9a10ec58628a8c91","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/btns.js","hash":"801ce6f905401ca05e1162d30dd7223e79da9309","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/button.js","hash":"ceb4f6c59dd4bdb486b7becc8f103e3499cd20cd","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/bvideo.js","hash":"23b2ee01d3c8842b566b8a031c0b4e34dfbbba4c","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/checkbox.js","hash":"e39ad4654c5f8fe7d7ddb8bf08405f473612cb9f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/nav.pug","hash":"94bf062f4eff029f6b482e17ef425a06cd535ddf","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/image.js","hash":"4b33e20b3cc3bf86be1bb5c4ecba897d20fc8ef6","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/gallery.js","hash":"4f24dc82873e3e27725bc7d52a50c13e273c4b27","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/fold.js","hash":"57e1e9d1e0ca4afbb2d61e130505e75ec7a41b2b","modified":1720256582000},{"_id":"themes/solitude/layout/includes/loading.pug","hash":"e2c7004a919d3c7c5e72d67818a66dfbebb3912e","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/inline-image.js","hash":"9c83a721de318741ac46820e3a2161b2bdc04d4f","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/media.js","hash":"07a16f310cc41cb0c66396a508c7ed6ca651132e","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/link.js","hash":"203b0b0de0942a3181362fdef09572e9da236e33","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/mermaid.js","hash":"37a95d6c4392ff6c24ff757fbbc3cdf7853c2096","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/note.js","hash":"b5d5b15d8a5f95722abe46370e9b907276b8d739","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/span.js","hash":"07881e3c8f81458422561612b85fb349a848dc5c","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/tabs.js","hash":"21ea420331b4e0d39aec6dc387d6d1f40c5f8f39","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/timeline.js","hash":"1abd201ffd04ac45fff3e47ef6c38306f10a625e","modified":1720256582000},{"_id":"themes/solitude/source/css/index.styl","hash":"9831c9feedc866c469f32df6a829ec23b8758be8","modified":1720256582000},{"_id":"themes/solitude/scripts/tags/label.js","hash":"b018b96c43ccb62c307fec3694411c1adedd1a02","modified":1720256582000},{"_id":"themes/solitude/source/css/var.styl","hash":"38822b1747021643fd9ddd23f09189c9e06f4d56","modified":1720256582000},{"_id":"themes/solitude/source/img/.DS_Store","hash":"8c673a0eaa514df9832683f1290da8687e8dc271","modified":1720701053120},{"_id":"themes/solitude/layout/includes/sidebar.pug","hash":"375d6aa9cc7324638796a83fe5c877a2d006a1bf","modified":1720256582000},{"_id":"themes/solitude/source/img/404.avif","hash":"c1457bb8020167d65f83aba7bc3dd1317595b62a","modified":1718524310001},{"_id":"themes/solitude/source/img/INFP-A.svg","hash":"dacb65e2b8804b4150f8664346955f9e1c205852","modified":1719387024934},{"_id":"themes/solitude/source/img/avatar.avif","hash":"3c63aa3309bc9d7959b4fdd5bed80f7535b4b25d","modified":1718524310001},{"_id":"themes/solitude/source/img/default.avif","hash":"3ea1493ebc8b3abc3c90aa1d200aeafc800e7143","modified":1718524310001},{"_id":"themes/solitude/source/img/happy-sticker.avif","hash":"3bded9b4bc40580f4d6d5f16170122d95873f741","modified":1718524310002},{"_id":"themes/solitude/source/img/error_load.avif","hash":"9e0796948e890e19e98709cf55dee0367afd69e7","modified":1718524310001},{"_id":"themes/solitude/source/img/java.svg","hash":"118f99a6ac36bc5c8f8841d4c7a2bfad6417ae6a","modified":1719400566122},{"_id":"themes/solitude/source/img/loading.avif","hash":"82c6e14e40975f9ae0acee8a30d2dc1f46c2831f","modified":1718524310003},{"_id":"themes/solitude/source/img/recent_c.avif","hash":"77e0f348d2e3c12ca17711be365ea5b28f35a2d9","modified":1718524310003},{"_id":"themes/solitude/source/js/custom.js","hash":"90f08e02632c32e1c2ef9c31abb9cbfbeb322505","modified":1720856682648},{"_id":"themes/solitude/source/js/main.js","hash":"0c6edebf1015745754feccf9616ca639653d83db","modified":1720256582000},{"_id":"themes/solitude/source/js/right_menu.js","hash":"9668693077e3f688c1ac31e883749f8943a36071","modified":1720256582000},{"_id":"themes/solitude/source/js/utils.js","hash":"9d41d45df4575b985d9888d39b7bfa12ae03f50e","modified":1720256582000},{"_id":"themes/solitude/source/js/tw_cn.js","hash":"3792da52fec1e85e5f99b45d91a0652cfde42715","modified":1720256582000},{"_id":"themes/solitude/source/js/music.js","hash":"f21508dbd61f15410752070bdc4a4c5d40d1d5e4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/head/config.pug","hash":"4367a2686d10e8e89a6a017a3050db46e48dbf5c","modified":1720256582000},{"_id":"themes/solitude/layout/includes/body/gadsense.pug","hash":"04749b45bb928a0a4aa02fb25d2f5ffd777d8fb4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/head/opengraph.pug","hash":"43f1ba2b258c65146fe5bda25fcfb9c137e86a46","modified":1720256582000},{"_id":"themes/solitude/layout/includes/head/page_config.pug","hash":"1e4f482cbb4622217fcf38d31c7a51f826a245b9","modified":1720256582000},{"_id":"themes/solitude/layout/includes/inject/body.pug","hash":"f0038b6e1f2159896f1ef8dd500c9738255c7f22","modified":1720256582000},{"_id":"themes/solitude/layout/includes/head/pwa.pug","hash":"701c387eb658273e5aca5b09ce06b5699f339f6f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/inject/head.pug","hash":"6ec0013a536e03d04d41303e3fb176e98ad85bc7","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/about.pug","hash":"97635d815b395ffad8d0eb4100bd1fb929541b0f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/mixins/pagination.pug","hash":"705d359fa0c0de1cdfeca23c70addfe422ed75a6","modified":1720256582000},{"_id":"themes/solitude/layout/includes/body/mode.pug","hash":"a761f72d12a474edb4d23a5c743c0c3da54fcfcb","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/categories.pug","hash":"9db96fa0fc6f8b511515d2eccb2d8ad204e4a570","modified":1720256582000},{"_id":"themes/solitude/layout/includes/mixins/articleSort.pug","hash":"c8cf4bd5828d0201e89e4b50c417ee96d8b4eb67","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/equipment.pug","hash":"678623c2b6a26e6b6577490d33dd1d65d191b0fa","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/default.pug","hash":"0a04fe49003eb1ed2138e67113c927d6f76ba5d4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/message.pug","hash":"9fc88429676b9a504239393e0f0d9a5534d1b267","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/music.pug","hash":"6b6d8532359fc66ed3ce9524e22f72b72166bf7c","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/tlink.pug","hash":"d203b8f68bd8f10d8a576da746e3c529d3beb08f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/says.pug","hash":"353ae95049435b1324249149e5828618cddfd5aa","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/randomlink.pug","hash":"0b85acc2b80d29cfb8f387dd03e58b2b4e4687c6","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/tags.pug","hash":"b0b8e046f620b5de04d68ce0d8f9c4cd048b9fd8","modified":1720256582000},{"_id":"themes/solitude/source/css/_comments/comment.styl","hash":"ddd1abf9b15159d258309dbd2356be9967ca560e","modified":1720256582000},{"_id":"themes/solitude/source/css/_comments/twikoo.styl","hash":"70b5df505baf9a426dadf030a2389792091a4173","modified":1720256582000},{"_id":"themes/solitude/source/css/_global/function.styl","hash":"47df2fbc5f7ce96256600760a42101dff87f6444","modified":1720256582000},{"_id":"themes/solitude/source/css/_global/animation.styl","hash":"a5db581319e2d5449da63f86111bacc0d22f73e5","modified":1720256582000},{"_id":"themes/solitude/source/css/_global/index.styl","hash":"6a950913730781a88237e9b1dff9b5160caef00e","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/index.styl","hash":"cbd7762772eaab5c2cfa1e490132da1c4f34a7d7","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/links.pug","hash":"8e4231d92c953ed2c2bfb3cd8a22ed57fd37f4e7","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/color.styl","hash":"619c0e7592248b443849139825aa7905513dc2b9","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/article-container.styl","hash":"5a80abab59313541586f2d1723c97b27d2afdb81","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/article-sort.styl","hash":"17cd0b192e2e7a37cefef31d360856efe3279671","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/aside.styl","hash":"1cde501f84a95b222deebaf66ebd01c1d82f8c45","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/console.styl","hash":"e6ddde696f58e7f5964d49954217057a4ab8bd69","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/header.styl","hash":"7ed072ef09af3e2b0e61c1ce17982dcb18de3ea3","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/pace.styl","hash":"3f42bc6c0c4aad0c2e7304b748f5b91e51050678","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/other.styl","hash":"844d16b1b1e53a38ea390bb4e376132d17105dcc","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/capsule.styl","hash":"e157d4747cda0b8bd454df47e4e03dd952ba1549","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/fullpage.styl","hash":"b0f0f361dee1ee0ea2de3372fb977e78c091de07","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/keyboard.styl","hash":"01b81e8de4f449100257dba679d36e351ee98bf2","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/footer.styl","hash":"551120a4ef9329741019fa897303c3475ac01141","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/pagination.styl","hash":"b5f66655e8cad414c5feea55b6bbce7da53d7332","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/universe.styl","hash":"f5850f6be5159e90f0db067f9017dab4dbcf94e7","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/recent-post.styl","hash":"b8264e939ed56b30b63d6d9459bfe02e62b6aaec","modified":1720256582000},{"_id":"themes/solitude/layout/includes/page/recentcomment.pug","hash":"40d2253027e8b9e5f64647c7550ea844dc6267e0","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/rightmenu.styl","hash":"0fb403d5d0c1241a7217a251538202f4a70ccc7b","modified":1720256582000},{"_id":"themes/solitude/source/css/_layout/sidebar.styl","hash":"dd9d0ac4ae11cf922bd8ba9cb6ea19fd0c9378f8","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/category.styl","hash":"76e9aee0e74322caa0c2bf6bd752e7c552a994a7","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/error.styl","hash":"3791295a503c323942f701e2707930a3a41bef7b","modified":1720256582000},{"_id":"themes/solitude/source/css/_mode/index.styl","hash":"a7848503e0aed2cb572136394e5e6743438c8526","modified":1720256582000},{"_id":"themes/solitude/source/css/_comments/valine.styl","hash":"b74621f4bb81f01d706a18ead8787ed2885fea26","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/index.styl","hash":"0f37a927fee868b9fea12f38e77ae2f4bf437d33","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/music.styl","hash":"0c2902b4522435135dbeb64557b3c6e32e070e6a","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/message.styl","hash":"54d60bc6d6fbb18d62018b06c3d28e038227800c","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/other.styl","hash":"befd1aa9f6aa405513e198a560b14c9bb584e2bc","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/equipment.styl","hash":"a5468797c26d823df24d46a1b0d2b3d1b7bc1806","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/links.styl","hash":"d448e5f89d8b2b038c22943eba7c94154ef77abb","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/tag.styl","hash":"33352a6b4b1e5c20deccaa3a9fcf01c7d2b3286f","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/recentcomment.styl","hash":"1d5344ebbb72338441a219e104e0670d625016a5","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/copyright.styl","hash":"b2afffab2be10b2c75991bf0e7db2e18fcf1ed4f","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/google.styl","hash":"aff534685e24724e0b46009031c838f73ea8a552","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/index.styl","hash":"9f3b388b984cef920e4efc9c33c810d563d7c932","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/says.styl","hash":"d8b5e5dde2f5e7477d8684e4b0aab426295f9ec6","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/meta.styl","hash":"a4799af783998868355368571877b226a28fdfa4","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/relatedPost.styl","hash":"57c2dd05582a291da7a0ab52b00c128c8b535ea3","modified":1720256582000},{"_id":"themes/solitude/source/css/_search/local-search.styl","hash":"827abf80d7c6442249a163191d29404574ed0227","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/tools.styl","hash":"c5ac1d9fd0aa95bba645030f3bad2ed1d81ccfcb","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/pagination.styl","hash":"c2122211ebd10551748c52d69e5b984cf5bc2602","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/ads.styl","hash":"11f79ab8daf53fc3886795bc06e4ad6991a07625","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/btns.styl","hash":"03babc6af78ba332138f59ae7bae9e3478e28600","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/button.styl","hash":"7e89fe069a62b77ea13315dab6c5a66178294dc1","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/checkbox.styl","hash":"5c90bc01e1f6967b57d9a606faf8b3135f0eda96","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/gallery.styl","hash":"0a6fbaa4e884ac92cbcf1e3eace8e384b839de61","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/label.styl","hash":"ca9b4940f48f1b2e0bc0b35fb9e1b9353cc6cbb8","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/fold.styl","hash":"a5a77e64d216d5bbc816d100ff7921aad0ede9fa","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/index.styl","hash":"03fc61ba1d55010d42a9cff064ecb8f59a0efba5","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/link.styl","hash":"500c9a8e305fa46f0605af0313c065aae968abec","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/media.styl","hash":"05a249c807cd7760492a9ef5914b3e363d7d1028","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/mermaid.styl","hash":"2fcdfbf364232101f6a0fb4f7cd7180a99e63ec4","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/span.styl","hash":"162df35be25ac7de577b6693a7e51e39cf6adff8","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/tabs.styl","hash":"21922ed6e6963185df2221fa6f756ab092ee20f3","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/note.styl","hash":"17c9c830681547a471a89d6f74f755f99a7b8a7c","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/commentBarrage.styl","hash":"2b6357972053ab1355ee17fd43a6a684621bfa87","modified":1720256582000},{"_id":"themes/solitude/source/css/third_party/snackbar.min.css","hash":"859ff4766cb4feebb5f5d270de48a97a6dcc6e0e","modified":1720256582000},{"_id":"themes/solitude/source/css/_tags/timeline.styl","hash":"6977aa9f3f69289b41b550be26fad05b87b931d4","modified":1720256582000},{"_id":"themes/solitude/source/css/_post/postAI.styl","hash":"01edbeb14cbb8492a375fedf2adc667b08e71fe9","modified":1720256582000},{"_id":"themes/solitude/source/css/third_party/tianli_talk.styl","hash":"abb3b63f6b379fccd88c64b3928fdd51bc68edc7","modified":1720256582000},{"_id":"themes/solitude/source/img/pwa/favicon.ico","hash":"78ddc46cf820181fbbe5d4e05e06fc19dff1e26f","modified":1718798462581},{"_id":"themes/solitude/source/css/_search/algolia-search.styl","hash":"3078cce2c4329669a5d42305274410cd1d6c580c","modified":1720256582000},{"_id":"themes/solitude/source/img/pwa/.DS_Store","hash":"457245b13dcea873f15df10db5956a7a267e27f9","modified":1718798552489},{"_id":"themes/solitude/source/img/pwa/favicon_16.ico","hash":"6580d0745b9f9399bc8aa0177fdbbf4685f75eb9","modified":1720700320081},{"_id":"themes/solitude/source/js/covercolor/api.js","hash":"31ed9a99ea2d8f0e8ec6a4fb42a811b26b5f4dfe","modified":1720256582000},{"_id":"themes/solitude/source/js/search/local.js","hash":"606751333812e85d8184b1be5724563b5d70d3dc","modified":1720256582000},{"_id":"themes/solitude/source/img/pwa/wu.ico","hash":"a42e5c6fb9ad2ca77fe654ccc83dfe11e3f2e91b","modified":1717562146000},{"_id":"themes/solitude/source/img/pwa/favicon_32.ico","hash":"46dc7f9ba076fa6eb8774ee7207102bba8134801","modified":1720700320082},{"_id":"themes/solitude/source/js/third_party/barrage.min.js","hash":"972bd559f05f5900ddb7a871a5d0407dfe8f1c9c","modified":1720256582000},{"_id":"themes/solitude/source/js/third_party/universe.min.js","hash":"7fca64ea5e1c936f447d546cda56d1361be05927","modified":1720256582000},{"_id":"themes/solitude/source/js/search/algolia.js","hash":"de84f4c95b02bd1c09b64ce1bc56f0d57a3c64d9","modified":1720256582000},{"_id":"themes/solitude/source/js/third_party/waterfall.min.js","hash":"ad7d449d9334c3d1c2299d01f421436e8b7a5068","modified":1720256582000},{"_id":"themes/solitude/source/js/covercolor/local.js","hash":"5bbbaee5c8eefb9abd595494f80a2e8c6641f778","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/aside.pug","hash":"1ef092ceced22dc7f900416036c4ba7d826fa707","modified":1720256582000},{"_id":"themes/solitude/source/js/third_party/envelope.min.js","hash":"a2774f6a58734ce70447e172f0f65159464a3192","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideAdsense.pug","hash":"13dadcf053b9f8355b437e203b2bd0ae4f16f0f3","modified":1720256582000},{"_id":"themes/solitude/source/js/third_party/efu_ai.min.js","hash":"d3e50d090050516c80acc250a257a6523c259321","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideAllInfo.pug","hash":"909af56129391e3fb416912cc4c29f140d210b7a","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideArchive.pug","hash":"7f74561a0503e8997e8fc556d25dff8e9b211e7c","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideCustom.pug","hash":"793125e321909cec08b4434a3a6483213a3defe8","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideFlipCard.pug","hash":"fe5960ceaa427d03f7a497df408a3d9c34a51520","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideNewstComments.pug","hash":"18eebe07bf7f57b8eee4bd36c14b59459b127dbd","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideTag.pug","hash":"09383aecaea8b588abe166bef4b7ecf49a8a6054","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideToc.pug","hash":"35b8992cbf6f0685bff40ac2038653235c84b609","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideInfoCard.pug","hash":"1d10b5f38e85c9a3c1168e38e2c048fcc7a6205c","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideWebInfo.pug","hash":"e0188bba2c25bc2b119d62323eb47c29a9a9f5df","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/nav/right.pug","hash":"4c81fd0e35429cdb47b92eab02fe8ebadf25282a","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideNewestPost.pug","hash":"e9a074eda9178345e2c6fddaa1cfacc1801a1c2d","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/aside/asideSwitch.pug","hash":"bf20d8a022184960f1154d6c43a4bb3a4434e1af","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/nav/menu.pug","hash":"305453ea227ea47216abaf1c230955f51f30f5e4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/pjax.pug","hash":"0fb3c5f5f358d920d0ee9166c2598c5287acd0d4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/banner.pug","hash":"11afbcffbbad7c0430e3d7bbfea5c5d0e5da2d08","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/nav/group.pug","hash":"c76ece0bd14caf4d10ccee1971e8d2286717ed6e","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/tianli-talk.pug","hash":"dcaef3c7b1566afef2d51d5aa8812c79428250c7","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/home/banner.pug","hash":"144720d0a657e26eb67cb421afaff569e91468c6","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/home/bbTimeList.pug","hash":"77b80315629f5de6bc6c1c8ee0938f94283ce06e","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/home/carousel.pug","hash":"8178189eed3dfae888a9644fce6e4c587a0e4da1","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/home/categoryBar.pug","hash":"c3a23d4137075a83d33259caabb9e5d22fe5028f","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/prismjs/index.styl","hash":"9129384955c1bc23736c215431a38bc1f9ca521d","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/prismjs/line-number.styl","hash":"616b37b462b69b81a99e3a9747017b4e9bb4dc34","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/prismjs/diff.styl","hash":"87f7b99b5889d8736bcfad94afdf155326d29b77","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/home/postList.pug","hash":"b7f845f8942fe2613cf6a9e6f8681589885d1eb3","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/highlight/diff.styl","hash":"a53389f9df4713a9adf7ded8f7c005698b0fb863","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/home/hometop.pug","hash":"f22250f51b54213d465ffcdc582919176fc91056","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/music.pug","hash":"f563444a58088fe049a3132d633925d96bca9446","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/theme/mac.styl","hash":"5fca444d5a1ac8447a43c5b290163d6d3a78f3de","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/highlight/index.styl","hash":"8629717ea650ba98a2b8539b602bf8edacc8286f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/home/topGroup.pug","hash":"1b599a29a215948cd0ad5cd91da696d4a600740e","modified":1720256582000},{"_id":"themes/solitude/source/css/_highlight/theme/default.styl","hash":"e9672bff24cfbeedb52ae4bcb79d2ec45abe9bb1","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/post/copyright.pug","hash":"0ad7c6d3eb44661e7bd89dda5925ccb29a1028b8","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/post/award.pug","hash":"85573258d0d351063c15e0f0bf55768dd193bcb7","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/post/post-ai.pug","hash":"d0d58cd1d62ae50c44017b0b35f0799ee2095cf8","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/about.styl","hash":"d630cf202a85b14b0bbe4643bf0d6463d11af8ad","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/author.styl","hash":"055010b9c7441875d9e94fc7884f03803867e062","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/buff.styl","hash":"1ea768328339e165ca4ea667877d04091a91d5b1","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/careers.styl","hash":"0da567d1a2a97889c3051f8fbb54385cb0971b66","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/contentinfo.styl","hash":"5869a4730718093a78cc002a19da74d67b5b2bb5","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/post/postNav.pug","hash":"bffa746e80f81098628f93315a33f18d8d8a92e4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/post/postMeta.pug","hash":"a47c35188d3661f54cf5fe0755cb02ad288f7a33","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/maxim.styl","hash":"60072a9aac27c3f385fd138f702858851d590eab","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/oneself.styl","hash":"c3a7a2f47eeab4caa9bf7e4947ab47679396f74b","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/myphoto.styl","hash":"ed8d96ec901f6dca24e9e6d9796fb70364442dbb","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/personalities.styl","hash":"226247cabe4f85325dd8f4efb10fc877aee4045b","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/post/wave.pug","hash":"2830503992561bac02597081ddf3aaeeb6381e91","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/skills.styl","hash":"b0ff84a1472ab5aa90a3904e5e235c88dfa91cbd","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/game.styl","hash":"fc97e9f95ad8cc44b87d78fe11b96fd7bf519615","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/statistic.styl","hash":"37f4f0ed374d4fa90928f62a352a3b5a1ed9b444","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/tenyear.styl","hash":"f038c1206f57b39e15f8e9e7be2959f3937263d6","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_home/category-bar.styl","hash":"0f092244f3e3efec7e7a4bd5d3088860f822b6c6","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_home/home-top.styl","hash":"515484eba7cf9e4f838a2b45806e90872bf019fd","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/like.styl","hash":"ecea66672a980eb7ac04e3cff6b0676955ea54b9","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_home/home.styl","hash":"e6736b6a8d29f82e5c82c36a83308aa606577ed1","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_about/reward.styl","hash":"5b1650fa77ca2acce4b519df7dcb9a38a434bcd1","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/award.pug","hash":"4395e82859e3cbdbcbfd7d07f7453b7e123d97c4","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_home/carousel.styl","hash":"e17765d82a907cf517c1a2e0d0c15c00496e2186","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/authorinfo.pug","hash":"97dd827681a8c6627b4bd3361cdcdc6319bf2e5a","modified":1720256582000},{"_id":"themes/solitude/source/css/_page/_gallery/index.styl","hash":"ebf6771a60e01aa5feeb97f975cbe34d0d2ee02f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/contentinfo.pug","hash":"a26e1bb9ab2c9a93a311a75e8c3da09929615eb1","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/motto.pug","hash":"bb5201e7e8b6c65c21bc3e0114460698e76ceace","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/other.pug","hash":"b3e65fcd524d32b474601b0271d9014da4a12201","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/tenyear.pug","hash":"11b26af1240e418f61041159a24ed2d640ec8609","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/hobbies.pug","hash":"60f0a4ba68ccc173c3715c54a6d64cb745fd0529","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/equipment/content.pug","hash":"ec96b6a7a7ce2cf81133fe174520ffebad3648da","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/personalities.pug","hash":"73500d7b11534fe3f15156f5d01b919d3242c4a1","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/links/banner.pug","hash":"ec1ceec1fcf6775d9d37d0531fa32a498d973501","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksDiscn.pug","hash":"96050862edd7bd5a63cdbfadd9fd86fa2d7fb2ac","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksItem.pug","hash":"8b668b8a264524cd46bfcb9c0a009eec1ad130a0","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/message/artalk.pug","hash":"3efe88873aaed677238fc0b9de6cf6d646cb7266","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/message/content.pug","hash":"5c2dd1f045a54ebd4e14a05fffccf583f4f7e0ff","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/message/valine.pug","hash":"545b5594b94836260e724f75efab3939a71cc664","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/about/skillsinfo.pug","hash":"bd48d670a4f2248109448d236c51fe3e49c054ec","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/links/linksCard.pug","hash":"25110a9de08c07aedb69b8348345a4ecb43e18d5","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/message/js.pug","hash":"9e8aa8aaf34863e3d95f3e62fd7519c64c7c0c73","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/message/twikoo.pug","hash":"f21212730130ef2f784a300388757443f4b4f19f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/artalk.pug","hash":"fc75974064566d67fc365d2dc74eb486c6c85973","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/message/waline.pug","hash":"4152a5fb01b6225339ab698c7dc45f61669abd28","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/twikoo.pug","hash":"fa826e804e9ff2f0bae2086c5d99b989b3c50d47","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/waline.pug","hash":"39b9a7df8bd58056db7832e677cb0a56ec69e93f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/artalk.pug","hash":"4ae9e7427e13ce11b73418992c582581922b500f","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/page/recentcomment/valine.pug","hash":"dd207afe81923b3c6490b84048872670c7889477","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/comment.pug","hash":"7e80c417d1a9041033b8c5cab3929740af36a7f8","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/giscus.pug","hash":"5e1814856039bc9c5a8091633a3c3ac2ccefc5b4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/js.pug","hash":"e4d63a124c6cf6d41732512bc29031ee817ed589","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/valine.pug","hash":"2e4a2d355d8b859b649822e45e45dd9c8fdc30a4","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/waline.pug","hash":"41469e4acdca5aa149561294f5daeb6ccc4b2d49","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/artalk.pug","hash":"efa89de71c67ddcf9c5b727734c7d0391d3fe32a","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/newest-comment.pug","hash":"7f07dc5de630f687a8e1edeaa0a26672496030ad","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/twikoo.pug","hash":"a1ce1e421a738d0f2d989ca1920c2d69d986aa8a","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/valine.pug","hash":"6a98a786a1947702954932e9b3ef1847f53cfb01","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/news-comment/waline.pug","hash":"8c5c7ead0892efeabbbfaf8550c4a4c1b4252edd","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/index.pug","hash":"ed1cba51440757e7a38993e8d5c08932c60736d9","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/local-search.pug","hash":"17bd7c2f07d84bc6cbc1dadd3a09523c309816d5","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/comments/twikoo.pug","hash":"79076d6a838fe1be6ef631e6f1778020e687a3f3","modified":1720256582000},{"_id":"themes/solitude/layout/includes/widgets/third-party/search/algolia-search.pug","hash":"e51dbe9041219920d7e68dfa76fb1a3e4ce1f5d3","modified":1720256582000},{"_id":"themes/solitude/source/img/cover.png","hash":"9545356c17cfbb8438bb46a0a5bfd524e0e14451","modified":1718700060190},{"_id":"themes/solitude/source/img/avatar.jpg","hash":"a29ae1eb222e631c1e131df146751c90c1074c6c","modified":1718527516061},{"_id":"themes/solitude/source/img/flower.gif","hash":"7032c79c5e077609dde5619c5946bd96873994d8","modified":1718524310002},{"_id":"themes/solitude/source/img/VaultwardenBuild.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1719225343745},{"_id":"themes/solitude/source/img/mysqlbaguwen.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1719111103096},{"_id":"themes/solitude/source/img/jinkesi.jpg","hash":"9ef8a38a574c3ee9aa3ea2772a5f572778cf1b75","modified":1717430059000},{"_id":"themes/solitude/source/img/black.gif","hash":"8005f80396fa049f3efc0fde67c998e75cccc285","modified":1718625754364},{"_id":"themes/solitude/source/img/hour 2024-06-24 at 21.08.03.png","hash":"6829f5f944f6367333578938565e48e8f0c03ea6","modified":1719234484599},{"_id":"themes/solitude/source/img/map-dark.png","hash":"236bca7899c7515caaf8b28ce4e746d47a1e6045","modified":1718702554889},{"_id":"themes/solitude/source/img/pwa/browser.icns","hash":"295ecfc7fa2200fabc4e2b7f24c1424873ad1fbe","modified":1718367720372},{"_id":"themes/solitude/source/img/map-light.png","hash":"50b42abcd709f548f56015acf6582a2b3be445c4","modified":1718702457882},{"_id":"themes/solitude/source/img/alistback.jpg","hash":"ed5d7f4beda73835001081aaad90221074c87154","modified":1719026505012},{"_id":"themes/solitude/source/img/he.gif","hash":"af68a7f51bb1e5d4caf59c8af3eea85af329a09d","modified":1718622527000},{"_id":"themes/solitude/source/img/厚涂女孩 手绘画4K.jpeg","hash":"2330a51950910d70b0bb0d8dc2acc2e31d32a885","modified":1719425177093},{"_id":"themes/solitude/source/img/JavaCollection.png","hash":"fa4de85a748a2944caaa42c5359d6ae89a569c81","modified":1719046443656},{"_id":"themes/solitude/source/img/JavaBasics.jpg","hash":"3b15d3578a4babd482332c855e317e9f0e665271","modified":1718973768948},{"_id":"themes/solitude/source/img/springbaguwen.png","hash":"1190612199e75d60753d00647cb04a4baa347975","modified":1719111231981},{"_id":"public/search.xml","hash":"1225d0097856c7f0818baf9b218cdb43b135646c","modified":1721018577606},{"_id":"public/404.html","hash":"415a34ff2cdb69840b2303fd3e5732a8b9754a5f","modified":1721018577606},{"_id":"public/about/index.html","hash":"42d724ecefab73fe053acd22ce78dba85ae34067","modified":1721018577606},{"_id":"public/message/index.html","hash":"0543092ebb67614178f2c3603b7a0ef9fa95520b","modified":1721018577606},{"_id":"public/music/index.html","hash":"510b309158283d9d6943d2d5f70b2458a245617d","modified":1721018577606},{"_id":"public/2024/07/14/Mac安装Maven/index.html","hash":"ca77df5ab3ccb3d09d6eac0363693c41fd12d583","modified":1721018577606},{"_id":"public/2024/07/14/Mac安装JDK/index.html","hash":"80abc15844536a61d88ada4a24e890d93089bfeb","modified":1721018577606},{"_id":"public/2024/07/14/安装Homebrew/index.html","hash":"c70e3f073876425bdbdc2dd67c828281e3fcc9a6","modified":1721018577606},{"_id":"public/2024/07/13/Vue3快速上手/index.html","hash":"9adb54888e8e7aa04d05e11590e48943c1e9511d","modified":1721018577606},{"_id":"public/2024/07/02/定期清理Alist备份文件/index.html","hash":"66914d8aadad014cefa8a77b8ab6879339fa6203","modified":1721018577606},{"_id":"public/2024/06/27/项目讲解/index.html","hash":"e822dd583d20daab81f36966d37f8983655f4c2d","modified":1721018577606},{"_id":"public/2024/06/26/RabbitMQ八股文/index.html","hash":"2e54a59f5d34ad8a31ffb71c7c119508c27ac11c","modified":1721018577606},{"_id":"public/2024/06/26/Redis八股文/index.html","hash":"15a791ab324b01b01aab44a4dd60c46ccdea5600","modified":1721018577606},{"_id":"public/2024/06/26/MyBatis八股文/index.html","hash":"7d4e4e5c3f7d6977ced0ccd6824461c2c48007ca","modified":1721018577606},{"_id":"public/2024/06/26/脚本/index.html","hash":"a1a3d08ce9bf29397941b75563ea5d3c065cdbab","modified":1721018577606},{"_id":"public/2024/06/25/Linux安装MySQL/index.html","hash":"2524778fa11777ed62fcaa233cf65760b7335d4d","modified":1721018577606},{"_id":"public/2024/06/24/自动续签证书/index.html","hash":"9f2d3da4f86c6796902c26965cf03e55e6cbfd04","modified":1721018577606},{"_id":"public/2024/06/24/服务器安全设置/index.html","hash":"9647a8ee9d7360fa515b40a95a46715b182d70f5","modified":1721018577606},{"_id":"public/2024/06/24/Vaultwarden搭建/index.html","hash":"195ea194fcc4048a37ef34f5cc1ad4373564f822","modified":1721018577606},{"_id":"public/2024/06/22/Spring八股文/index.html","hash":"af18bc3a91b1b15a3fff4968a50057bb853fb1ce","modified":1721018577606},{"_id":"public/2024/06/22/Myql八股文/index.html","hash":"cad7ea61db5fcadc197007ed45ef7c999f21d560","modified":1721018577606},{"_id":"public/2024/06/22/Java集合八股文/index.html","hash":"371202ec394bc90e46e33dfe938cc8459160df22","modified":1721018577606},{"_id":"public/2024/06/21/Java基础八股文/index.html","hash":"3ab52e0f4a5b7d99fe876cacac727c8b2513b0dc","modified":1721018577606},{"_id":"public/2024/06/18/使用AList定时备份服务器文件/index.html","hash":"5572126e29139c67e7737bb546a74cf329656944","modified":1721018577606},{"_id":"public/2024/06/16/Hexo备份/index.html","hash":"efbf27d1340853caa7485f9708cf940221dd3df8","modified":1721018577606},{"_id":"public/2024/06/16/安装部署Hexo/index.html","hash":"66e4000354b2adb3d56d21bdd372a575a0ce2198","modified":1721018577606},{"_id":"public/archives/index.html","hash":"52e2a39225b28ea71a43ef4d3a93b26d51548e95","modified":1721018577606},{"_id":"public/archives/page/2/index.html","hash":"5fe0acfeced9f06adad52373ee9e65fdcbb0cff9","modified":1721018577606},{"_id":"public/archives/page/3/index.html","hash":"6506232e263fa3bdb7259738ad80fea0e1335b32","modified":1721018577606},{"_id":"public/archives/2024/index.html","hash":"7132567f1ebba3aa10767b31b2446f4c6978c022","modified":1721018577606},{"_id":"public/archives/2024/page/2/index.html","hash":"f848033c8cc07b17f8795466bc344abf9f025378","modified":1721018577606},{"_id":"public/archives/2024/page/3/index.html","hash":"8d650fbf86bf4901f6f41bd7f6c5c37882744996","modified":1721018577606},{"_id":"public/archives/2024/06/index.html","hash":"5e1f6a9448a57de67f1ed792f8d87a7001af4785","modified":1721018577606},{"_id":"public/archives/2024/06/page/2/index.html","hash":"d7ea0bdb74cc98bc990bb8981c214b007e3d85b8","modified":1721018577606},{"_id":"public/archives/2024/07/index.html","hash":"62e4b1f82085a56ca79e2c1491ef71cef7be5f1f","modified":1721018577606},{"_id":"public/categories/博客/index.html","hash":"d89a0564847184580cc511e02019b7b44effe22e","modified":1721018577606},{"_id":"public/categories/Java/index.html","hash":"79b1b6582e2d9fe5d4c9585f1a2fcaa18eec98cf","modified":1721018577606},{"_id":"public/categories/Linux/index.html","hash":"098fe44dde02a1020adbc65cc5b0675aeda47811","modified":1721018577606},{"_id":"public/categories/Mac/index.html","hash":"1a3f17ae61d865f4c363c4a9b6c109ff34eacdee","modified":1721018577606},{"_id":"public/categories/MySQL/index.html","hash":"1114c962bb83335873ceefc2f54547b088d82356","modified":1721018577606},{"_id":"public/categories/Linux/MySQL/index.html","hash":"2a963171d247eedfe78523e07a1c0d1023f0598a","modified":1721018577606},{"_id":"public/categories/前端/index.html","hash":"58808bf735bc945938a77f5ce8cbe435700a8750","modified":1721018577606},{"_id":"public/index.html","hash":"08b5e08cf67d65336b41404b70c7c2cc043e47db","modified":1721018577606},{"_id":"public/page/2/index.html","hash":"88ace4d1a98f4edc5d0426e9abb85bb337770950","modified":1721018577606},{"_id":"public/page/3/index.html","hash":"143d0c13d85a44b2188d837b591e425ccdb35bd1","modified":1721018577606},{"_id":"public/tags/Blog/index.html","hash":"1e1fbb5da2b75d0053e624a5b585f1247888b899","modified":1721018577606},{"_id":"public/tags/Java/index.html","hash":"f8d85a3663c473f3a7f10c2f77ee19803ac8ae07","modified":1721018577606},{"_id":"public/tags/MySQL/index.html","hash":"4c515c8f92857bbf8058d8540388c6318fa04184","modified":1721018577606},{"_id":"public/tags/笔记/index.html","hash":"bff2a8b613595ce53a3572f1ff3649e239a67d17","modified":1721018577606},{"_id":"public/tags/Linux/index.html","hash":"500049027c1633093f01f2b0444151c6b2ef4e02","modified":1721018577606},{"_id":"public/tags/Mac/index.html","hash":"058840e6753eeff862bf310c3ae460b8767e37a6","modified":1721018577606},{"_id":"public/tags/Maven/index.html","hash":"5947c4b4e1981181f964e0b8cfd34d03e9d27974","modified":1721018577606},{"_id":"public/tags/MyBatis/index.html","hash":"4a3357e47a604e4741faf486a3527afbfe26c3c1","modified":1721018577606},{"_id":"public/tags/总结/index.html","hash":"9c0addfcefb53c7509a8e4711fe85ac020d7874c","modified":1721018577606},{"_id":"public/tags/RabbitMQ/index.html","hash":"8690432dc4528f97b4c9e06eebb003242c7a2291","modified":1721018577606},{"_id":"public/tags/Redis/index.html","hash":"9657f256e242d46e3477c98ca8475f470295e4ac","modified":1721018577606},{"_id":"public/tags/Spring/index.html","hash":"fd1c0ab336442bb152adc85af0b1ce3509f434ab","modified":1721018577606},{"_id":"public/tags/Alist/index.html","hash":"b1f41246cbd074ff3e7efb3499a28cab65379811","modified":1721018577606},{"_id":"public/tags/Vue/index.html","hash":"403b3772e1caf6de920a4f6ac8322dff33aa71f8","modified":1721018577606},{"_id":"public/tags/前端/index.html","hash":"107468aac4b3e2b9de6b5e154a0c6a59655f9940","modified":1721018577606},{"_id":"public/tags/Homebrew/index.html","hash":"a27a0182405980a1513d3ef435762ddf53a6c685","modified":1721018577606},{"_id":"public/tags/SSL/index.html","hash":"688206d82d598b96cb7f82f3623cc6f2a02323ee","modified":1721018577606},{"_id":"public/tags/域名/index.html","hash":"4c706a5d53749c9b2d873c1ea04fd33469f7c8ba","modified":1721018577606},{"_id":"public/tags/index.html","hash":"30ddca67ea5e820a7e20fa8d9f8153d062c18fbf","modified":1721018577606},{"_id":"public/categories/index.html","hash":"d393d70f62ef6eda9f35cd35a7d4c062b2e0b7f6","modified":1721018577606},{"_id":"public/CNAME","hash":"ea9600bb3e3206479cb5093d97379013e1233e23","modified":1721018577606},{"_id":"public/img/INFP-A.svg","hash":"dacb65e2b8804b4150f8664346955f9e1c205852","modified":1721018577606},{"_id":"public/img/404.avif","hash":"c1457bb8020167d65f83aba7bc3dd1317595b62a","modified":1721018577606},{"_id":"public/img/avatar.avif","hash":"3c63aa3309bc9d7959b4fdd5bed80f7535b4b25d","modified":1721018577606},{"_id":"public/img/default.avif","hash":"3ea1493ebc8b3abc3c90aa1d200aeafc800e7143","modified":1721018577606},{"_id":"public/img/error_load.avif","hash":"9e0796948e890e19e98709cf55dee0367afd69e7","modified":1721018577606},{"_id":"public/img/happy-sticker.avif","hash":"3bded9b4bc40580f4d6d5f16170122d95873f741","modified":1721018577606},{"_id":"public/img/java.svg","hash":"118f99a6ac36bc5c8f8841d4c7a2bfad6417ae6a","modified":1721018577606},{"_id":"public/img/loading.avif","hash":"82c6e14e40975f9ae0acee8a30d2dc1f46c2831f","modified":1721018577606},{"_id":"public/img/recent_c.avif","hash":"77e0f348d2e3c12ca17711be365ea5b28f35a2d9","modified":1721018577606},{"_id":"public/img/pwa/favicon.ico","hash":"78ddc46cf820181fbbe5d4e05e06fc19dff1e26f","modified":1721018577606},{"_id":"public/img/pwa/favicon_16.ico","hash":"6580d0745b9f9399bc8aa0177fdbbf4685f75eb9","modified":1721018577606},{"_id":"public/img/pwa/favicon_32.ico","hash":"46dc7f9ba076fa6eb8774ee7207102bba8134801","modified":1721018577606},{"_id":"public/img/pwa/wu.ico","hash":"a42e5c6fb9ad2ca77fe654ccc83dfe11e3f2e91b","modified":1721018577606},{"_id":"public/lib/hbe.js","hash":"fb05fcd82bb28d3b2887d388cabea7f9b1a318eb","modified":1721018577606},{"_id":"public/css/hbe.style.css","hash":"72959894400fd5c350106cb558c39fa51f722cbd","modified":1721018577606},{"_id":"public/img/avatar.jpg","hash":"a29ae1eb222e631c1e131df146751c90c1074c6c","modified":1721018577606},{"_id":"public/img/cover.png","hash":"9545356c17cfbb8438bb46a0a5bfd524e0e14451","modified":1721018577606},{"_id":"public/css/index.css","hash":"6cb15fcab2033f0efdf2fdaf16f0c62289acdbfd","modified":1721018577606},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721018577606},{"_id":"public/js/custom.js","hash":"90f08e02632c32e1c2ef9c31abb9cbfbeb322505","modified":1721018577606},{"_id":"public/js/main.js","hash":"0c6edebf1015745754feccf9616ca639653d83db","modified":1721018577606},{"_id":"public/js/music.js","hash":"f21508dbd61f15410752070bdc4a4c5d40d1d5e4","modified":1721018577606},{"_id":"public/js/right_menu.js","hash":"9668693077e3f688c1ac31e883749f8943a36071","modified":1721018577606},{"_id":"public/js/tw_cn.js","hash":"3792da52fec1e85e5f99b45d91a0652cfde42715","modified":1721018577606},{"_id":"public/js/utils.js","hash":"9d41d45df4575b985d9888d39b7bfa12ae03f50e","modified":1721018577606},{"_id":"public/css/third_party/snackbar.min.css","hash":"859ff4766cb4feebb5f5d270de48a97a6dcc6e0e","modified":1721018577606},{"_id":"public/css/third_party/tianli_talk.css","hash":"c105dbec05a0c75b0071694d5f4293b0e09f7da0","modified":1721018577606},{"_id":"public/js/covercolor/api.js","hash":"31ed9a99ea2d8f0e8ec6a4fb42a811b26b5f4dfe","modified":1721018577606},{"_id":"public/js/covercolor/local.js","hash":"5bbbaee5c8eefb9abd595494f80a2e8c6641f778","modified":1721018577606},{"_id":"public/js/search/algolia.js","hash":"de84f4c95b02bd1c09b64ce1bc56f0d57a3c64d9","modified":1721018577606},{"_id":"public/js/search/local.js","hash":"606751333812e85d8184b1be5724563b5d70d3dc","modified":1721018577606},{"_id":"public/js/third_party/barrage.min.js","hash":"972bd559f05f5900ddb7a871a5d0407dfe8f1c9c","modified":1721018577606},{"_id":"public/js/third_party/efu_ai.min.js","hash":"d3e50d090050516c80acc250a257a6523c259321","modified":1721018577606},{"_id":"public/js/third_party/envelope.min.js","hash":"a2774f6a58734ce70447e172f0f65159464a3192","modified":1721018577606},{"_id":"public/js/third_party/universe.min.js","hash":"7fca64ea5e1c936f447d546cda56d1361be05927","modified":1721018577606},{"_id":"public/js/third_party/waterfall.min.js","hash":"ad7d449d9334c3d1c2299d01f421436e8b7a5068","modified":1721018577606},{"_id":"public/img/flower.gif","hash":"7032c79c5e077609dde5619c5946bd96873994d8","modified":1721018577606},{"_id":"public/img/VaultwardenBuild.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1721018577606},{"_id":"public/img/mysqlbaguwen.png","hash":"c5a8a5221d940a07a3e07be2d2cecc0b53cb12f8","modified":1721018577606},{"_id":"public/img/jinkesi.jpg","hash":"9ef8a38a574c3ee9aa3ea2772a5f572778cf1b75","modified":1721018577606},{"_id":"public/img/black.gif","hash":"8005f80396fa049f3efc0fde67c998e75cccc285","modified":1721018577606},{"_id":"public/img/hour 2024-06-24 at 21.08.03.png","hash":"6829f5f944f6367333578938565e48e8f0c03ea6","modified":1721018577606},{"_id":"public/img/pwa/browser.icns","hash":"295ecfc7fa2200fabc4e2b7f24c1424873ad1fbe","modified":1721018577606},{"_id":"public/img/map-dark.png","hash":"236bca7899c7515caaf8b28ce4e746d47a1e6045","modified":1721018577606},{"_id":"public/img/map-light.png","hash":"50b42abcd709f548f56015acf6582a2b3be445c4","modified":1721018577606},{"_id":"public/img/alistback.jpg","hash":"ed5d7f4beda73835001081aaad90221074c87154","modified":1721018577606},{"_id":"public/img/he.gif","hash":"af68a7f51bb1e5d4caf59c8af3eea85af329a09d","modified":1721018577606},{"_id":"public/img/厚涂女孩 手绘画4K.jpeg","hash":"2330a51950910d70b0bb0d8dc2acc2e31d32a885","modified":1721018577606},{"_id":"public/img/JavaCollection.png","hash":"fa4de85a748a2944caaa42c5359d6ae89a569c81","modified":1721018577606},{"_id":"public/img/JavaBasics.jpg","hash":"3b15d3578a4babd482332c855e317e9f0e665271","modified":1721018577606},{"_id":"public/img/springbaguwen.png","hash":"1190612199e75d60753d00647cb04a4baa347975","modified":1721018577606}],"Category":[{"name":"博客","_id":"clymi0xqy0004tuj8fj9jb1ro"},{"name":"Java","_id":"clymi0xr4000atuj83mwb5fgs"},{"name":"Linux","_id":"clymi0xr6000gtuj84ku9gbcx"},{"name":"Mac","_id":"clymi0xr8000ltuj8buet1oow"},{"name":"MySQL","_id":"clymi0xrd000ztuj83wcucfrf"},{"name":"MySQL","parent":"clymi0xr6000gtuj84ku9gbcx","_id":"clymi0xrf0019tuj8h2idaxnz"},{"name":"前端","_id":"clymi0xrh001gtuj890zub7mu"}],"Data":[{"_id":".DS_Store","data":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000t\u0000.\u0000y\u0000a\u0000m\u0000l\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\n\u0000a\u0000b\u0000o\u0000u\u0000t\u0000.\u0000y\u0000a\u0000m\u0000lIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000A\u0000\u0000\u0000.������\u0000\u0000\u0000\u0000\u0000\n\u0000a\u0000s\u0000i\u0000d\u0000e\u0000.\u0000y\u0000a\u0000m\u0000lIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000�\u0000\u0000\u0000.������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"},{"_id":"about","data":{"authorinfo":{"leftTags":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手"],"rightTags":["脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"],"image":"https://alist.aixcc.top/d/OneDrive/img/202407151119531.webp"},"title":"关于本站","contentinfo":{"sup":"你好，很高兴认识你👋","name":"我叫Aix","title":"Java工程师、独立开发者、心学","tip":"追求","slogan":"源于<br>热爱而去创造","mask":["优秀的产品","出色的设计","高效的编程","人性化的用户体验"]},"skills":{"title":"技能","subtitle":"开启创造力","tags":[{"title":"HTML","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/HTML.png","color":"#e9572b"},{"title":"Javascript","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/JS.png","color":"#f7cb4f"},{"title":"Java","icon":"https://profilinator.rishav.dev/skills-assets/java-original-wordmark.svg","color":"#ffffff"},{"title":"Linux","icon":"https://profilinator.rishav.dev/skills-assets/linux-original.svg","color":"#ffffff"},{"title":"Spring","icon":"https://profilinator.rishav.dev/skills-assets/springio-icon.svg","color":"#ffffff"},{"title":"VUE","icon":"https://profilinator.rishav.dev/skills-assets/vuejs-original-wordmark.svg","color":"‘#ffffff'"},{"title":"Git","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/git.png","color":"#df5b40"},{"title":"Docker","icon":"https://7.isyangs.cn/34/65f2e45462045-34.png","color":"#57b6e6"},{"title":"Visual Studio","icon":"https://npm.elemecdn.com/wleelw-blog-abs@1.0.0/img/icon/vs-logo.svg","color":"#ffffff"}]},"careers":{"title":"生涯","subtitle":"无限进步","items":[{"school":"软件工程","major":"学习","color":"#357ef5"}],"image":"https://7.isyangs.cn/1/65eb2d10ba24d-1.png"},"personalities":{"tips":"性格","title":"调停者","color":"#56a178","type":"INFP-A","image":"https://alist.aixcc.top/d/OneDrive/img/INFP-A.svg","link":"https://www.16personalities.com/","linkText":"16personalities","typeLink":"https://www.16personalities.com/ch/infp-%E4%BA%BA%E6%A0%BC","typeName":"调停者","myphoto":"https://alist.aixcc.top/d/OneDrive/img/202407151130330.webp"},"motto":{"title":"座右铭","prefix":"破釜沉舟，","content":"砥砺前行。"},"expertise":{"title":"特长","prefix":"睡觉","specialist":"专家","content":"学习能力","level":"MAX"},"tj":{"provider":null,"url":"https://v6-widget.51.la/v6/3F15j2vtdTo7PPcN/quote.js","img":"https://7.isyangs.cn/1/65eb2e9109826-1.png"},"oneself":{"location":"中国，湖北省","birthYear":"2001","university":"武汉东湖学院","major":"软件工程","occupation":"Java工程师","map":{"light":"/img/map-light.png","dark":"/img/map-dark.png"}},"cause":{"tip":"心学","title":"内心修养与幸福追求","content":"<p>心学，作为中国哲学中的一股重要力量，不仅在历史上影响深远，其理念在当今社会仍然具有重要的现实意义。心学强调通过内心的修养和自我反省来追求智慧与幸福，这种思想可以帮助我们在现代生活中找到内在的平静与真正的满足。</p>\n<h2>内心修养的核心思想</h2> <p>心学的核心思想在于内心的修养。王阳明提出“致良知”，即通过自我反省和内省，发现和培养内心本具的良知。这种良知并不是外界教导的结果，而是内心固有的智慧和道德。通过不断的自我反省，我们可以更清晰地认识自己，发现内心的真实需求，从而避免被外界的纷扰所迷惑。</p> <p>在现代社会中，我们往往被各种外在的欲望所驱使，追求物质的丰裕和名利的满足。然而，这些外在的追求常常让我们感到空虚和不安。心学告诉我们，真正的幸福和智慧来源于内心的宁静和自我认识。通过内心的修养，我们可以找到生命的真正意义，获得内在的满足。</p>\n<h2>真诚待人的重要性</h2> <p>心学强调真诚待人，认为人与人之间的信任和理解是建立在真诚的基础上的。在心学的视角下，真诚不仅是道德的要求，更是内心修养的重要部分。通过真诚待人，我们能够建立更加稳固和谐的人际关系，营造一个充满信任和理解的社会环境。</p> <p>在实际生活中，真诚待人意味着我们要以开放的心态对待他人，尊重他人的感受和观点，不带偏见和伪装。这样，我们才能真正理解他人，与他人建立深厚的情感纽带。真诚待人不仅能让我们赢得他人的信任和尊重，也能让我们的内心更加坦荡和充实。</p>\n<h2>面对挑战的智慧</h2> <p>人生充满了各种挑战和挫折，而心学提供了面对这些困难的智慧。王阳明提倡“知行合一”，即通过实际行动来验证和实现内心的智慧。面对困难时，我们需要保持内心的坚韧和信念，不被外界的挫折所打倒。</p> <p>心学认为，每一次挫折都是成长的机会，通过反省和内省，我们可以从中汲取教训和智慧。挫折和挑战不仅让我们更加坚强，也让我们更加深入地理解生命的本质和意义。在挫折中保持内心的平静和信念，我们才能在逆境中找到前进的方向，走向更高的自我实现。</p>\n<h2>简约生活的倡导</h2> <p>心学倡导简约生活，认为内心的富足远比物质的丰裕重要。在现代社会中，我们常常被物质的欲望所困扰，追求更多的财富和地位。然而，这些外在的追求并不能带来真正的幸福，反而让我们感到更加焦虑和不安。</p> <p>通过简约的生活方式，我们可以摆脱对物质的依赖，追求内心的平静和满足。简约生活并不是拒绝物质，而是通过合理的选择和控制，找到内心的平衡和富足。通过减少不必要的欲望和追求，我们可以专注于内心的成长和修养，获得真正的幸福和满足。</p>\n<h2>结论</h2> <p>心学的思想，不仅是古代哲人的智慧，也是我们现代生活中的指引。通过内心的修养、真诚待人、面对挑战和简约生活，我们可以找到生命的真正意义和内在的平静。心学告诉我们，幸福和智慧并不在外界的纷扰之中，而在于我们内心的修养和成长。让我们以心学为指引，走向更加充实和幸福的人生。</p>"},"tenyear":{"tips":"三年之约","title":"一个人的寂寞，一群人的狂欢。","start":"2024年06月15日","end":"2027年06月15日"}}},{"_id":"aside","data":[{"name":"welcome","title":"来访者","class":"card-welcome","id":null,"icon":"solitude st-map-pin-fill","content_id":"welcome-info","content_css":"height:160px;overflow:hidden","content_html":"<div class=\"welcome_swiper-container\" id=\"welcome-container\" style=\"width: 100%;height: 100%;margin-top: 6px\"> <div id=\"welcome_container_wrapper\" class=\"swiper-wrapper\"></div> </div>"}]}],"Page":[{"title":"关于本站","date":"2023-10-31T14:24:22.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2023-10-31 22:24:22\ntype: about\n---\n","updated":"2024-06-18T09:16:31.510Z","path":"about/index.html","comments":1,"layout":"page","_id":"clymi0xqq0000tuj8hiwh8i8s","content":"","excerpt":"关于本站","more":"","cover":"/img/default.avif","toc":false,"comment":true},{"title":"留言板","date":"2020-12-31T16:00:00.000Z","type":"message","_content":"","source":"message/index.md","raw":"---\ntitle: 留言板\ndate: 2021-01-01 00:00:00\ntype: message\n---\n","updated":"2024-06-18T10:29:49.383Z","path":"message/index.html","comments":1,"layout":"page","_id":"clymi0xqw0002tuj882r077j1","content":"","excerpt":"留言板","more":"","cover":"/img/default.avif","toc":false,"comment":true},{"title":"音乐馆","date":"2023-12-11T13:36:08.000Z","type":"music","comment":false,"_content":"","source":"music/index.md","raw":"---\ntitle: 音乐馆\ndate: 2023-12-11 21:36:08\ntype: music\ncomment: false\n---\n","updated":"2024-06-25T07:58:30.825Z","path":"music/index.html","comments":1,"layout":"page","_id":"clymi0xr00006tuj8575c0kl3","content":"","excerpt":"音乐馆","more":"","cover":"/img/default.avif","toc":false}],"Post":[{"title":"Hexo备份","date":"2024-06-16T11:19:00.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151114520.webp","_content":"# 使用 Hexo 和 GitHub 实现多平台工作和数据备份\n\n## 目标\n\n- **`master` 分支**：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。\n- **`hexo` 分支**：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。\n\n## 为什么要这样做？\n\n使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。`hexo` 分支保存源文件，方便我们在不同平台进行编辑；`master` 分支保存静态文件，用于发布到 GitHub Pages。\n\n## 操作步骤\n\n### 1. 初始化 Hexo 项目\n\n首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm install\n```\n\n### 2. 初始化 Git 仓库\n\n在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。\n\n```bash\ngit init\n```\n\n### 3. 创建 hexo 分支\n\n创建一个新的分支 `hexo`，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。\n\n```bash\ngit checkout -b hexo\n```\n\n### 4. 推送 hexo 分支到 GitHub\n\n将 `hexo` 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。\n\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\ngit add .\ngit commit -m \"Initial commit with Hexo source files\"\ngit push -u origin hexo\n```\n\n然后，在 GitHub 仓库设置中，将 `hexo` 分支设置为默认分支：\n1. 打开你的 GitHub 仓库。\n2. 点击 \"Settings\"。\n3. 在左侧菜单中点击 \"Branches\"。\n4. 在 \"Default branch\" 下拉菜单中选择 `hexo`，然后点击 \"Update\"。\n\n### 5. 创建 master 分支\n\n切换到 `master` 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。\n\n```bash\ngit checkout --orphan master\n```\n\n删除所有文件，因为 `master` 分支只需要保存生成的静态文件。\n\n```bash\ngit rm -rf .\n```\n\n创建一个空的 README 文件并提交，以初始化 `master` 分支。\n\n```bash\necho \"# My Blog\" > README.md\ngit add README.md\ngit commit -m \"Initial commit for master branch\"\ngit push -u origin master\n```\n\n### 6. 配置 Hexo 部署\n\n在 Hexo 项目根目录下的 `_config.yml` 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 `master` 分支。\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourrepo.git\n  branch: master\n```\n\n安装 Hexo 部署插件 `hexo-deployer-git`，使 Hexo 能通过 Git 进行部署。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 7. 生成和部署静态文件\n\n运行以下命令生成静态文件并部署到 `master` 分支：\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n- `hexo clean`：清理生成的文件。\n- `hexo generate`：生成静态文件。\n- `hexo deploy`：将生成的静态文件部署到 GitHub 上的 `master` 分支。\n\n### 8. 推送 Hexo 源文件到 hexo 分支\n\n每次更新 Hexo 源文件后，将它们推送到 `hexo` 分支，以确保源文件有备份。\n\n```bash\ngit add .\ngit commit -m \"Update Hexo source files\"\ngit push origin hexo\n```\n\n## 验证配置\n\n1. **确认 `hexo` 分支为默认分支**：保存 Hexo 源文件，并便于多平台编辑。\n2. **确认 `master` 分支保存生成的静态文件**：用于部署到 GitHub Pages，并确保网站正常访问。\n","source":"_posts/Hexo备份.md","raw":"---\ntitle: Hexo备份\ndate: 2024-06-16 19:19:00\ntags: Blog\ncategories: 博客\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151114520.webp\n---\n# 使用 Hexo 和 GitHub 实现多平台工作和数据备份\n\n## 目标\n\n- **`master` 分支**：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。\n- **`hexo` 分支**：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。\n\n## 为什么要这样做？\n\n使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。`hexo` 分支保存源文件，方便我们在不同平台进行编辑；`master` 分支保存静态文件，用于发布到 GitHub Pages。\n\n## 操作步骤\n\n### 1. 初始化 Hexo 项目\n\n首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm install\n```\n\n### 2. 初始化 Git 仓库\n\n在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。\n\n```bash\ngit init\n```\n\n### 3. 创建 hexo 分支\n\n创建一个新的分支 `hexo`，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。\n\n```bash\ngit checkout -b hexo\n```\n\n### 4. 推送 hexo 分支到 GitHub\n\n将 `hexo` 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。\n\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\ngit add .\ngit commit -m \"Initial commit with Hexo source files\"\ngit push -u origin hexo\n```\n\n然后，在 GitHub 仓库设置中，将 `hexo` 分支设置为默认分支：\n1. 打开你的 GitHub 仓库。\n2. 点击 \"Settings\"。\n3. 在左侧菜单中点击 \"Branches\"。\n4. 在 \"Default branch\" 下拉菜单中选择 `hexo`，然后点击 \"Update\"。\n\n### 5. 创建 master 分支\n\n切换到 `master` 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。\n\n```bash\ngit checkout --orphan master\n```\n\n删除所有文件，因为 `master` 分支只需要保存生成的静态文件。\n\n```bash\ngit rm -rf .\n```\n\n创建一个空的 README 文件并提交，以初始化 `master` 分支。\n\n```bash\necho \"# My Blog\" > README.md\ngit add README.md\ngit commit -m \"Initial commit for master branch\"\ngit push -u origin master\n```\n\n### 6. 配置 Hexo 部署\n\n在 Hexo 项目根目录下的 `_config.yml` 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 `master` 分支。\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/yourusername/yourrepo.git\n  branch: master\n```\n\n安装 Hexo 部署插件 `hexo-deployer-git`，使 Hexo 能通过 Git 进行部署。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 7. 生成和部署静态文件\n\n运行以下命令生成静态文件并部署到 `master` 分支：\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n- `hexo clean`：清理生成的文件。\n- `hexo generate`：生成静态文件。\n- `hexo deploy`：将生成的静态文件部署到 GitHub 上的 `master` 分支。\n\n### 8. 推送 Hexo 源文件到 hexo 分支\n\n每次更新 Hexo 源文件后，将它们推送到 `hexo` 分支，以确保源文件有备份。\n\n```bash\ngit add .\ngit commit -m \"Update Hexo source files\"\ngit push origin hexo\n```\n\n## 验证配置\n\n1. **确认 `hexo` 分支为默认分支**：保存 Hexo 源文件，并便于多平台编辑。\n2. **确认 `master` 分支保存生成的静态文件**：用于部署到 GitHub Pages，并确保网站正常访问。\n","slug":"Hexo备份","published":1,"updated":"2024-07-15T04:02:55.086Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xqt0001tuj87hv7fi5c","content":"<h1 id=\"使用-Hexo-和-GitHub-实现多平台工作和数据备份\"><a class=\"headerlink\" href=\"#使用-Hexo-和-GitHub-实现多平台工作和数据备份\"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1>\n<h2 id=\"目标\"><a class=\"headerlink\" href=\"#目标\"></a>目标</h2>\n<ul>\n<li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li>\n<li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li>\n</ul>\n<h2 id=\"为什么要这样做？\"><a class=\"headerlink\" href=\"#为什么要这样做？\"></a>为什么要这样做？</h2>\n<p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p>\n<h2 id=\"操作步骤\"><a class=\"headerlink\" href=\"#操作步骤\"></a>操作步骤</h2>\n<h3 id=\"1-初始化-Hexo-项目\"><a class=\"headerlink\" href=\"#1-初始化-Hexo-项目\"></a>1. 初始化 Hexo 项目</h3>\n<p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init my-blog\n<span class=\"token builtin class-name\">cd</span> my-blog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-初始化-Git-仓库\"><a class=\"headerlink\" href=\"#2-初始化-Git-仓库\"></a>2. 初始化 Git 仓库</h3>\n<p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-创建-hexo-分支\"><a class=\"headerlink\" href=\"#3-创建-hexo-分支\"></a>3. 创建 hexo 分支</h3>\n<p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-推送-hexo-分支到-GitHub\"><a class=\"headerlink\" href=\"#4-推送-hexo-分支到-GitHub\"></a>4. 推送 hexo 分支到 GitHub</h3>\n<p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/yourusername/yourrepo.git\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit with Hexo source files\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p>\n<ol>\n<li>打开你的 GitHub 仓库。</li>\n<li>点击 “Settings”。</li>\n<li>在左侧菜单中点击 “Branches”。</li>\n<li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li>\n</ol>\n<h3 id=\"5-创建-master-分支\"><a class=\"headerlink\" href=\"#5-创建-master-分支\"></a>5. 创建 master 分支</h3>\n<p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# My Blog\"</span> <span class=\"token operator\">></span> README.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> README.md\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for master branch\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-配置-Hexo-部署\"><a class=\"headerlink\" href=\"#6-配置-Hexo-部署\"></a>6. 配置 Hexo 部署</h3>\n<p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourusername/yourrepo.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"7-生成和部署静态文件\"><a class=\"headerlink\" href=\"#7-生成和部署静态文件\"></a>7. 生成和部署静态文件</h3>\n<p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>hexo clean</code>：清理生成的文件。</li>\n<li><code>hexo generate</code>：生成静态文件。</li>\n<li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li>\n</ul>\n<h3 id=\"8-推送-Hexo-源文件到-hexo-分支\"><a class=\"headerlink\" href=\"#8-推送-Hexo-源文件到-hexo-分支\"></a>8. 推送 Hexo 源文件到 hexo 分支</h3>\n<p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update Hexo source files\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"验证配置\"><a class=\"headerlink\" href=\"#验证配置\"></a>验证配置</h2>\n<ol>\n<li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li>\n<li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"使用-Hexo-和-GitHub-实现多平台工作和数据备份\"><a class=\"headerlink\" href=\"#使用-Hexo-和-GitHub-实现多平台工作和数据备份\"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1>\n<h2 id=\"目标\"><a class=\"headerlink\" href=\"#目标\"></a>目标</h2>\n<ul>\n<li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li>\n<li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li>\n</ul>\n<h2 id=\"为什么要这样做？\"><a class=\"headerlink\" href=\"#为什么要这样做？\"></a>为什么要这样做？</h2>\n<p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p>\n<h2 id=\"操作步骤\"><a class=\"headerlink\" href=\"#操作步骤\"></a>操作步骤</h2>\n<h3 id=\"1-初始化-Hexo-项目\"><a class=\"headerlink\" href=\"#1-初始化-Hexo-项目\"></a>1. 初始化 Hexo 项目</h3>\n<p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init my-blog\n<span class=\"token builtin class-name\">cd</span> my-blog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-初始化-Git-仓库\"><a class=\"headerlink\" href=\"#2-初始化-Git-仓库\"></a>2. 初始化 Git 仓库</h3>\n<p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-创建-hexo-分支\"><a class=\"headerlink\" href=\"#3-创建-hexo-分支\"></a>3. 创建 hexo 分支</h3>\n<p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-推送-hexo-分支到-GitHub\"><a class=\"headerlink\" href=\"#4-推送-hexo-分支到-GitHub\"></a>4. 推送 hexo 分支到 GitHub</h3>\n<p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/yourusername/yourrepo.git\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit with Hexo source files\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p>\n<ol>\n<li>打开你的 GitHub 仓库。</li>\n<li>点击 “Settings”。</li>\n<li>在左侧菜单中点击 “Branches”。</li>\n<li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li>\n</ol>\n<h3 id=\"5-创建-master-分支\"><a class=\"headerlink\" href=\"#5-创建-master-分支\"></a>5. 创建 master 分支</h3>\n<p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# My Blog\"</span> <span class=\"token operator\">></span> README.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> README.md\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for master branch\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-配置-Hexo-部署\"><a class=\"headerlink\" href=\"#6-配置-Hexo-部署\"></a>6. 配置 Hexo 部署</h3>\n<p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourusername/yourrepo.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"7-生成和部署静态文件\"><a class=\"headerlink\" href=\"#7-生成和部署静态文件\"></a>7. 生成和部署静态文件</h3>\n<p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>hexo clean</code>：清理生成的文件。</li>\n<li><code>hexo generate</code>：生成静态文件。</li>\n<li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li>\n</ul>\n<h3 id=\"8-推送-Hexo-源文件到-hexo-分支\"><a class=\"headerlink\" href=\"#8-推送-Hexo-源文件到-hexo-分支\"></a>8. 推送 Hexo 源文件到 hexo 分支</h3>\n<p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update Hexo source files\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"验证配置\"><a class=\"headerlink\" href=\"#验证配置\"></a>验证配置</h2>\n<ol>\n<li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li>\n<li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li>\n</ol>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Java基础总结","date":"2024-06-21T12:41:04.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151140578.webp","recommend":true,"_content":"#### 对象相等和引用相等的区别\n- **对象相等**：比较的是内存中存放的内容是否相等。\n- **引用相等**：比较的是它们指向的内存地址是否相等。\n\n#### 如果一个类没有声明构造方法，该程序能正确执行吗？\n- 如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。\n- 如果添加了类的构造方法，无论是否有参，`Java`都不会添加默认不带参数的构造方法。\n\n#### 构造方法有哪些特点？是否可被重写？\n- **构造方法的特点**：\n  - 名字与类名相同。\n  - 没有返回值。\n  - 生成类的对象时自动执行，无需调用。\n    构造方法不能被重写，但是可以被重载。\n\n#### 面向对象的三大特征\n- **封装**：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。\n- **继承**：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。\n- **多态**：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。\n\n#### 接口和抽象类有什么共同点和区别？\n- **共同点**：\n  - 都不能被实例化。\n  - 都可以包含抽象方法。\n  - 都可以有默认的实现方法。\n- **区别**：\n  - 接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。\n  - 抽象类主要用于代码的复用，强调所属关系。\n  - 一个类只能继承一个类，但是可以实现多个接口。\n  - 接口中的成员变量只能是静态常量，不能被修改且必须有初始值。\n  - 抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。\n\n#### 深拷贝和浅拷贝的区别？什么是引用拷贝？\n- **浅拷贝**：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用`Object`的`clone()`方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。\n- **深拷贝**：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。\n- **引用拷贝**：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。\n\n#### == 和 equals()的区别？\n- 对于基本数据类型，`==` 比较的是值。\n- 对于引用数据类型，`==` 比较的是对象的内存地址。\n- `equals()`没有重写时，等价于`==`比较两个对象。\n- 被重写时，一般都重写`equals()`方法用来比较两个对象中的属性是否相等。\n\n#### hashCode() 有什么用？\n`hashCode()`方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。\n\n#### 为什么重写 equals() 时必须重写 hashCode() 方法？\n\n##### `equals()`和`hashCode()`的合同（约定）\n\n如果两个对象根据`equals()`方法是相等的，那么它们的`hashCode()`值必须相同。\n\n如果两个对象的`hashCode()`值相同，它们不一定是相等的（但它们有可能是相等的）。\n\n#### String、StringBuffer、StringBuilder 的区别？\n- **String**：不可变的，因为不可变，所以它是线程安全的。\n- **StringBuffer**：可变的，允许对字符串进行修改，线程安全，所有的方法都被`synchronized`修饰。\n- **StringBuilder**：可变的，但不是线程安全的，没有被`synchronized`修饰。由于没有同步机制，性能比`StringBuffer`更高，适合单线程环境下使用。\n- **使用场景**：\n  - 当字符串是固定不变的时候使用`String`。\n  - 当需要对字符串进行大量修改且在多线程环境下使用`StringBuffer`。\n  - 当需要对字符串进行大量修改且在单线程环境下使用`StringBuilder`。\n\n#### 字符串常量池的作用了解吗？\n字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，`JVM`会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。\n\n#### Exception 和 Error 有什么区别？\n- **Exception**和**Error**都是**Throwable**的子类。\n- `Exception`是程序本身可以处理的异常，可以通过`catch`来捕获。`Exception`还可以分为`checked Exception`和`Unchecked Exception`。\n- `Error`是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。\n\n#### Checked Exception 和 Unchecked Exception 有什么区别？\n- **Checked Exception**必须被捕获或声明，否则编译器会报错。\n- **Unchecked Exception**也叫运行时异常，不强制要求处理，但最好捕获处理。\n\n#### 什么是泛型？有什么作用？\n泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，从集合中取出元素时不需要进行转换。Java编译器在编译时会移除所有的泛型类型信息\n\n#### 反射是什么？\n反射是`Java`中的一种机制，允许程序在运行时获取有关自身的信息。并能动态地调用对象的方法、访问属性和创建对象实例。反射提供了动态操作类和对象的能力，是实现框架、工具和动态代理等技术的基础。\n\n#### 反射的优缺点？\n- **反射的优点**：\n  - 动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。\n  - 很多流行的`Java`框架如`Spring`都依赖反射来实现动态代理、依赖注入。\n- **反射的缺点**：\n  - 反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。\n  - 反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。\n  - 使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。\n  - 反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。\n\n#### 何谓注解？\n注解是`Java`中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如`@Override`注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。\n\n#### 什么是序列化？什么是反序列化？\n- **序列化**：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。\n- **反序列化**：将字节流恢复为Java对象的过程。通过反序列化使其恢复到序列化之前的状态。\n\n","source":"_posts/Java基础八股文.md","raw":"---\ntitle: Java基础总结\ndate: 2024-06-21 20:41:04\ntags: \n    - Java\n    - 笔记\ncategories: Java\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151140578.webp\nrecommend: true\n---\n#### 对象相等和引用相等的区别\n- **对象相等**：比较的是内存中存放的内容是否相等。\n- **引用相等**：比较的是它们指向的内存地址是否相等。\n\n#### 如果一个类没有声明构造方法，该程序能正确执行吗？\n- 如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。\n- 如果添加了类的构造方法，无论是否有参，`Java`都不会添加默认不带参数的构造方法。\n\n#### 构造方法有哪些特点？是否可被重写？\n- **构造方法的特点**：\n  - 名字与类名相同。\n  - 没有返回值。\n  - 生成类的对象时自动执行，无需调用。\n    构造方法不能被重写，但是可以被重载。\n\n#### 面向对象的三大特征\n- **封装**：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。\n- **继承**：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。\n- **多态**：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。\n\n#### 接口和抽象类有什么共同点和区别？\n- **共同点**：\n  - 都不能被实例化。\n  - 都可以包含抽象方法。\n  - 都可以有默认的实现方法。\n- **区别**：\n  - 接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。\n  - 抽象类主要用于代码的复用，强调所属关系。\n  - 一个类只能继承一个类，但是可以实现多个接口。\n  - 接口中的成员变量只能是静态常量，不能被修改且必须有初始值。\n  - 抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。\n\n#### 深拷贝和浅拷贝的区别？什么是引用拷贝？\n- **浅拷贝**：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用`Object`的`clone()`方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。\n- **深拷贝**：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。\n- **引用拷贝**：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。\n\n#### == 和 equals()的区别？\n- 对于基本数据类型，`==` 比较的是值。\n- 对于引用数据类型，`==` 比较的是对象的内存地址。\n- `equals()`没有重写时，等价于`==`比较两个对象。\n- 被重写时，一般都重写`equals()`方法用来比较两个对象中的属性是否相等。\n\n#### hashCode() 有什么用？\n`hashCode()`方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。\n\n#### 为什么重写 equals() 时必须重写 hashCode() 方法？\n\n##### `equals()`和`hashCode()`的合同（约定）\n\n如果两个对象根据`equals()`方法是相等的，那么它们的`hashCode()`值必须相同。\n\n如果两个对象的`hashCode()`值相同，它们不一定是相等的（但它们有可能是相等的）。\n\n#### String、StringBuffer、StringBuilder 的区别？\n- **String**：不可变的，因为不可变，所以它是线程安全的。\n- **StringBuffer**：可变的，允许对字符串进行修改，线程安全，所有的方法都被`synchronized`修饰。\n- **StringBuilder**：可变的，但不是线程安全的，没有被`synchronized`修饰。由于没有同步机制，性能比`StringBuffer`更高，适合单线程环境下使用。\n- **使用场景**：\n  - 当字符串是固定不变的时候使用`String`。\n  - 当需要对字符串进行大量修改且在多线程环境下使用`StringBuffer`。\n  - 当需要对字符串进行大量修改且在单线程环境下使用`StringBuilder`。\n\n#### 字符串常量池的作用了解吗？\n字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，`JVM`会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。\n\n#### Exception 和 Error 有什么区别？\n- **Exception**和**Error**都是**Throwable**的子类。\n- `Exception`是程序本身可以处理的异常，可以通过`catch`来捕获。`Exception`还可以分为`checked Exception`和`Unchecked Exception`。\n- `Error`是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。\n\n#### Checked Exception 和 Unchecked Exception 有什么区别？\n- **Checked Exception**必须被捕获或声明，否则编译器会报错。\n- **Unchecked Exception**也叫运行时异常，不强制要求处理，但最好捕获处理。\n\n#### 什么是泛型？有什么作用？\n泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，从集合中取出元素时不需要进行转换。Java编译器在编译时会移除所有的泛型类型信息\n\n#### 反射是什么？\n反射是`Java`中的一种机制，允许程序在运行时获取有关自身的信息。并能动态地调用对象的方法、访问属性和创建对象实例。反射提供了动态操作类和对象的能力，是实现框架、工具和动态代理等技术的基础。\n\n#### 反射的优缺点？\n- **反射的优点**：\n  - 动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。\n  - 很多流行的`Java`框架如`Spring`都依赖反射来实现动态代理、依赖注入。\n- **反射的缺点**：\n  - 反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。\n  - 反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。\n  - 使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。\n  - 反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。\n\n#### 何谓注解？\n注解是`Java`中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如`@Override`注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。\n\n#### 什么是序列化？什么是反序列化？\n- **序列化**：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。\n- **反序列化**：将字节流恢复为Java对象的过程。通过反序列化使其恢复到序列化之前的状态。\n\n","slug":"Java基础八股文","published":1,"updated":"2024-07-15T04:01:40.093Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xqw0003tuj80ddid0va","content":"<h4 id=\"对象相等和引用相等的区别\"><a class=\"headerlink\" href=\"#对象相等和引用相等的区别\"></a>对象相等和引用相等的区别</h4>\n<ul>\n<li><strong>对象相等</strong>：比较的是内存中存放的内容是否相等。</li>\n<li><strong>引用相等</strong>：比较的是它们指向的内存地址是否相等。</li>\n</ul>\n<h4 id=\"如果一个类没有声明构造方法，该程序能正确执行吗？\"><a class=\"headerlink\" href=\"#如果一个类没有声明构造方法，该程序能正确执行吗？\"></a>如果一个类没有声明构造方法，该程序能正确执行吗？</h4>\n<ul>\n<li>如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。</li>\n<li>如果添加了类的构造方法，无论是否有参，<code>Java</code>都不会添加默认不带参数的构造方法。</li>\n</ul>\n<h4 id=\"构造方法有哪些特点？是否可被重写？\"><a class=\"headerlink\" href=\"#构造方法有哪些特点？是否可被重写？\"></a>构造方法有哪些特点？是否可被重写？</h4>\n<ul>\n<li><strong>构造方法的特点</strong>：\n<ul>\n<li>名字与类名相同。</li>\n<li>没有返回值。</li>\n<li>生成类的对象时自动执行，无需调用。<br>\n构造方法不能被重写，但是可以被重载。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象的三大特征\"><a class=\"headerlink\" href=\"#面向对象的三大特征\"></a>面向对象的三大特征</h4>\n<ul>\n<li><strong>封装</strong>：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。</li>\n<li><strong>继承</strong>：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。</li>\n<li><strong>多态</strong>：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。</li>\n</ul>\n<h4 id=\"接口和抽象类有什么共同点和区别？\"><a class=\"headerlink\" href=\"#接口和抽象类有什么共同点和区别？\"></a>接口和抽象类有什么共同点和区别？</h4>\n<ul>\n<li><strong>共同点</strong>：\n<ul>\n<li>都不能被实例化。</li>\n<li>都可以包含抽象方法。</li>\n<li>都可以有默认的实现方法。</li>\n</ul>\n</li>\n<li><strong>区别</strong>：\n<ul>\n<li>接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。</li>\n<li>抽象类主要用于代码的复用，强调所属关系。</li>\n<li>一个类只能继承一个类，但是可以实现多个接口。</li>\n<li>接口中的成员变量只能是静态常量，不能被修改且必须有初始值。</li>\n<li>抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"深拷贝和浅拷贝的区别？什么是引用拷贝？\"><a class=\"headerlink\" href=\"#深拷贝和浅拷贝的区别？什么是引用拷贝？\"></a>深拷贝和浅拷贝的区别？什么是引用拷贝？</h4>\n<ul>\n<li><strong>浅拷贝</strong>：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用<code>Object</code>的<code>clone()</code>方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。</li>\n<li><strong>深拷贝</strong>：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。</li>\n<li><strong>引用拷贝</strong>：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。</li>\n</ul>\n<h4 id=\"和-equals-的区别？\"><a class=\"headerlink\" href=\"#和-equals-的区别？\"></a>== 和 equals()的区别？</h4>\n<ul>\n<li>对于基本数据类型，<code>==</code> 比较的是值。</li>\n<li>对于引用数据类型，<code>==</code> 比较的是对象的内存地址。</li>\n<li><code>equals()</code>没有重写时，等价于<code>==</code>比较两个对象。</li>\n<li>被重写时，一般都重写<code>equals()</code>方法用来比较两个对象中的属性是否相等。</li>\n</ul>\n<h4 id=\"hashCode-有什么用？\"><a class=\"headerlink\" href=\"#hashCode-有什么用？\"></a>hashCode() 有什么用？</h4>\n<p><code>hashCode()</code>方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。</p>\n<h4 id=\"为什么重写-equals-时必须重写-hashCode-方法？\"><a class=\"headerlink\" href=\"#为什么重写-equals-时必须重写-hashCode-方法？\"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h4>\n<h5 id=\"equals-和hashCode-的合同（约定）\"><a class=\"headerlink\" href=\"#equals-和hashCode-的合同（约定）\"></a><code>equals()</code>和<code>hashCode()</code>的合同（约定）</h5>\n<p>如果两个对象根据<code>equals()</code>方法是相等的，那么它们的<code>hashCode()</code>值必须相同。</p>\n<p>如果两个对象的<code>hashCode()</code>值相同，它们不一定是相等的（但它们有可能是相等的）。</p>\n<h4 id=\"String、StringBuffer、StringBuilder-的区别？\"><a class=\"headerlink\" href=\"#String、StringBuffer、StringBuilder-的区别？\"></a>String、StringBuffer、StringBuilder 的区别？</h4>\n<ul>\n<li><strong>String</strong>：不可变的，因为不可变，所以它是线程安全的。</li>\n<li><strong>StringBuffer</strong>：可变的，允许对字符串进行修改，线程安全，所有的方法都被<code>synchronized</code>修饰。</li>\n<li><strong>StringBuilder</strong>：可变的，但不是线程安全的，没有被<code>synchronized</code>修饰。由于没有同步机制，性能比<code>StringBuffer</code>更高，适合单线程环境下使用。</li>\n<li><strong>使用场景</strong>：\n<ul>\n<li>当字符串是固定不变的时候使用<code>String</code>。</li>\n<li>当需要对字符串进行大量修改且在多线程环境下使用<code>StringBuffer</code>。</li>\n<li>当需要对字符串进行大量修改且在单线程环境下使用<code>StringBuilder</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串常量池的作用了解吗？\"><a class=\"headerlink\" href=\"#字符串常量池的作用了解吗？\"></a>字符串常量池的作用了解吗？</h4>\n<p>字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，<code>JVM</code>会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。</p>\n<h4 id=\"Exception-和-Error-有什么区别？\"><a class=\"headerlink\" href=\"#Exception-和-Error-有什么区别？\"></a>Exception 和 Error 有什么区别？</h4>\n<ul>\n<li><strong>Exception</strong>和<strong>Error</strong>都是<strong>Throwable</strong>的子类。</li>\n<li><code>Exception</code>是程序本身可以处理的异常，可以通过<code>catch</code>来捕获。<code>Exception</code>还可以分为<code>checked Exception</code>和<code>Unchecked Exception</code>。</li>\n<li><code>Error</code>是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。</li>\n</ul>\n<h4 id=\"Checked-Exception-和-Unchecked-Exception-有什么区别？\"><a class=\"headerlink\" href=\"#Checked-Exception-和-Unchecked-Exception-有什么区别？\"></a>Checked Exception 和 Unchecked Exception 有什么区别？</h4>\n<ul>\n<li><strong>Checked Exception</strong>必须被捕获或声明，否则编译器会报错。</li>\n<li><strong>Unchecked Exception</strong>也叫运行时异常，不强制要求处理，但最好捕获处理。</li>\n</ul>\n<h4 id=\"什么是泛型？有什么作用？\"><a class=\"headerlink\" href=\"#什么是泛型？有什么作用？\"></a>什么是泛型？有什么作用？</h4>\n<p>泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，从集合中取出元素时不需要进行转换。Java编译器在编译时会移除所有的泛型类型信息</p>\n<h4 id=\"反射是什么？\"><a class=\"headerlink\" href=\"#反射是什么？\"></a>反射是什么？</h4>\n<p>反射是<code>Java</code>中的一种机制，允许程序在运行时获取有关自身的信息。并能动态地调用对象的方法、访问属性和创建对象实例。反射提供了动态操作类和对象的能力，是实现框架、工具和动态代理等技术的基础。</p>\n<h4 id=\"反射的优缺点？\"><a class=\"headerlink\" href=\"#反射的优缺点？\"></a>反射的优缺点？</h4>\n<ul>\n<li><strong>反射的优点</strong>：\n<ul>\n<li>动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。</li>\n<li>很多流行的<code>Java</code>框架如<code>Spring</code>都依赖反射来实现动态代理、依赖注入。</li>\n</ul>\n</li>\n<li><strong>反射的缺点</strong>：\n<ul>\n<li>反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。</li>\n<li>反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。</li>\n<li>使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。</li>\n<li>反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"何谓注解？\"><a class=\"headerlink\" href=\"#何谓注解？\"></a>何谓注解？</h4>\n<p>注解是<code>Java</code>中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如<code>@Override</code>注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。</p>\n<h4 id=\"什么是序列化？什么是反序列化？\"><a class=\"headerlink\" href=\"#什么是序列化？什么是反序列化？\"></a>什么是序列化？什么是反序列化？</h4>\n<ul>\n<li><strong>序列化</strong>：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。</li>\n<li><strong>反序列化</strong>：将字节流恢复为Java对象的过程。通过反序列化使其恢复到序列化之前的状态。</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"对象相等和引用相等的区别\"><a class=\"headerlink\" href=\"#对象相等和引用相等的区别\"></a>对象相等和引用相等的区别</h4>\n<ul>\n<li><strong>对象相等</strong>：比较的是内存中存放的内容是否相等。</li>\n<li><strong>引用相等</strong>：比较的是它们指向的内存地址是否相等。</li>\n</ul>\n<h4 id=\"如果一个类没有声明构造方法，该程序能正确执行吗？\"><a class=\"headerlink\" href=\"#如果一个类没有声明构造方法，该程序能正确执行吗？\"></a>如果一个类没有声明构造方法，该程序能正确执行吗？</h4>\n<ul>\n<li>如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。</li>\n<li>如果添加了类的构造方法，无论是否有参，<code>Java</code>都不会添加默认不带参数的构造方法。</li>\n</ul>\n<h4 id=\"构造方法有哪些特点？是否可被重写？\"><a class=\"headerlink\" href=\"#构造方法有哪些特点？是否可被重写？\"></a>构造方法有哪些特点？是否可被重写？</h4>\n<ul>\n<li><strong>构造方法的特点</strong>：\n<ul>\n<li>名字与类名相同。</li>\n<li>没有返回值。</li>\n<li>生成类的对象时自动执行，无需调用。<br>\n构造方法不能被重写，但是可以被重载。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象的三大特征\"><a class=\"headerlink\" href=\"#面向对象的三大特征\"></a>面向对象的三大特征</h4>\n<ul>\n<li><strong>封装</strong>：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。</li>\n<li><strong>继承</strong>：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。</li>\n<li><strong>多态</strong>：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。</li>\n</ul>\n<h4 id=\"接口和抽象类有什么共同点和区别？\"><a class=\"headerlink\" href=\"#接口和抽象类有什么共同点和区别？\"></a>接口和抽象类有什么共同点和区别？</h4>\n<ul>\n<li><strong>共同点</strong>：\n<ul>\n<li>都不能被实例化。</li>\n<li>都可以包含抽象方法。</li>\n<li>都可以有默认的实现方法。</li>\n</ul>\n</li>\n<li><strong>区别</strong>：\n<ul>\n<li>接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。</li>\n<li>抽象类主要用于代码的复用，强调所属关系。</li>\n<li>一个类只能继承一个类，但是可以实现多个接口。</li>\n<li>接口中的成员变量只能是静态常量，不能被修改且必须有初始值。</li>\n<li>抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"深拷贝和浅拷贝的区别？什么是引用拷贝？\"><a class=\"headerlink\" href=\"#深拷贝和浅拷贝的区别？什么是引用拷贝？\"></a>深拷贝和浅拷贝的区别？什么是引用拷贝？</h4>\n<ul>\n<li><strong>浅拷贝</strong>：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用<code>Object</code>的<code>clone()</code>方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。</li>\n<li><strong>深拷贝</strong>：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。</li>\n<li><strong>引用拷贝</strong>：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。</li>\n</ul>\n<h4 id=\"和-equals-的区别？\"><a class=\"headerlink\" href=\"#和-equals-的区别？\"></a>== 和 equals()的区别？</h4>\n<ul>\n<li>对于基本数据类型，<code>==</code> 比较的是值。</li>\n<li>对于引用数据类型，<code>==</code> 比较的是对象的内存地址。</li>\n<li><code>equals()</code>没有重写时，等价于<code>==</code>比较两个对象。</li>\n<li>被重写时，一般都重写<code>equals()</code>方法用来比较两个对象中的属性是否相等。</li>\n</ul>\n<h4 id=\"hashCode-有什么用？\"><a class=\"headerlink\" href=\"#hashCode-有什么用？\"></a>hashCode() 有什么用？</h4>\n<p><code>hashCode()</code>方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。</p>\n<h4 id=\"为什么重写-equals-时必须重写-hashCode-方法？\"><a class=\"headerlink\" href=\"#为什么重写-equals-时必须重写-hashCode-方法？\"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h4>\n<h5 id=\"equals-和hashCode-的合同（约定）\"><a class=\"headerlink\" href=\"#equals-和hashCode-的合同（约定）\"></a><code>equals()</code>和<code>hashCode()</code>的合同（约定）</h5>\n<p>如果两个对象根据<code>equals()</code>方法是相等的，那么它们的<code>hashCode()</code>值必须相同。</p>\n<p>如果两个对象的<code>hashCode()</code>值相同，它们不一定是相等的（但它们有可能是相等的）。</p>\n<h4 id=\"String、StringBuffer、StringBuilder-的区别？\"><a class=\"headerlink\" href=\"#String、StringBuffer、StringBuilder-的区别？\"></a>String、StringBuffer、StringBuilder 的区别？</h4>\n<ul>\n<li><strong>String</strong>：不可变的，因为不可变，所以它是线程安全的。</li>\n<li><strong>StringBuffer</strong>：可变的，允许对字符串进行修改，线程安全，所有的方法都被<code>synchronized</code>修饰。</li>\n<li><strong>StringBuilder</strong>：可变的，但不是线程安全的，没有被<code>synchronized</code>修饰。由于没有同步机制，性能比<code>StringBuffer</code>更高，适合单线程环境下使用。</li>\n<li><strong>使用场景</strong>：\n<ul>\n<li>当字符串是固定不变的时候使用<code>String</code>。</li>\n<li>当需要对字符串进行大量修改且在多线程环境下使用<code>StringBuffer</code>。</li>\n<li>当需要对字符串进行大量修改且在单线程环境下使用<code>StringBuilder</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串常量池的作用了解吗？\"><a class=\"headerlink\" href=\"#字符串常量池的作用了解吗？\"></a>字符串常量池的作用了解吗？</h4>\n<p>字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，<code>JVM</code>会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。</p>\n<h4 id=\"Exception-和-Error-有什么区别？\"><a class=\"headerlink\" href=\"#Exception-和-Error-有什么区别？\"></a>Exception 和 Error 有什么区别？</h4>\n<ul>\n<li><strong>Exception</strong>和<strong>Error</strong>都是<strong>Throwable</strong>的子类。</li>\n<li><code>Exception</code>是程序本身可以处理的异常，可以通过<code>catch</code>来捕获。<code>Exception</code>还可以分为<code>checked Exception</code>和<code>Unchecked Exception</code>。</li>\n<li><code>Error</code>是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。</li>\n</ul>\n<h4 id=\"Checked-Exception-和-Unchecked-Exception-有什么区别？\"><a class=\"headerlink\" href=\"#Checked-Exception-和-Unchecked-Exception-有什么区别？\"></a>Checked Exception 和 Unchecked Exception 有什么区别？</h4>\n<ul>\n<li><strong>Checked Exception</strong>必须被捕获或声明，否则编译器会报错。</li>\n<li><strong>Unchecked Exception</strong>也叫运行时异常，不强制要求处理，但最好捕获处理。</li>\n</ul>\n<h4 id=\"什么是泛型？有什么作用？\"><a class=\"headerlink\" href=\"#什么是泛型？有什么作用？\"></a>什么是泛型？有什么作用？</h4>\n<p>泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，从集合中取出元素时不需要进行转换。Java编译器在编译时会移除所有的泛型类型信息</p>\n<h4 id=\"反射是什么？\"><a class=\"headerlink\" href=\"#反射是什么？\"></a>反射是什么？</h4>\n<p>反射是<code>Java</code>中的一种机制，允许程序在运行时获取有关自身的信息。并能动态地调用对象的方法、访问属性和创建对象实例。反射提供了动态操作类和对象的能力，是实现框架、工具和动态代理等技术的基础。</p>\n<h4 id=\"反射的优缺点？\"><a class=\"headerlink\" href=\"#反射的优缺点？\"></a>反射的优缺点？</h4>\n<ul>\n<li><strong>反射的优点</strong>：\n<ul>\n<li>动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。</li>\n<li>很多流行的<code>Java</code>框架如<code>Spring</code>都依赖反射来实现动态代理、依赖注入。</li>\n</ul>\n</li>\n<li><strong>反射的缺点</strong>：\n<ul>\n<li>反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。</li>\n<li>反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。</li>\n<li>使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。</li>\n<li>反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"何谓注解？\"><a class=\"headerlink\" href=\"#何谓注解？\"></a>何谓注解？</h4>\n<p>注解是<code>Java</code>中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如<code>@Override</code>注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。</p>\n<h4 id=\"什么是序列化？什么是反序列化？\"><a class=\"headerlink\" href=\"#什么是序列化？什么是反序列化？\"></a>什么是序列化？什么是反序列化？</h4>\n<ul>\n<li><strong>序列化</strong>：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。</li>\n<li><strong>反序列化</strong>：将字节流恢复为Java对象的过程。通过反序列化使其恢复到序列化之前的状态。</li>\n</ul>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Java集合总结","date":"2024-06-22T08:48:56.000Z","categorizes":"Java","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151141320.webp","_content":"\n# Java集合\n\n### 说说 List, Set, Queue, Map 四者的区别？\n\n- `List`：存储的元素是有序的、可重复的。\n\n- `Set`：存储的元素不可重复。\n- `Queue`：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。\n- `Map`：使用键值对存储，`key`是无序的、不可重复的，`value`是无序的、可重复的。\n\n## List\n\n### ArrayList 和 Array （数组）的区别？\n\n- **ArrayList**：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。\n- **Array（数组）**：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。 \n\n### ArrayList 可以添加 null 吗？\n\n`ArrayList`中可以存储任何类型的对象，包括`null`。\n\n#### ArrayList和LinkedList的区别是什么？\n\n- **ArrayList** 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。\n- **LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。\n\n### ArrayList如何去重？\n\n1. **使用HashSet**：通过`HashSet`的特性去重，然后转换回`ArrayList`。\n2. **使用Stream API**：使用Java 8引入的Stream的`distinct()`方法去重。\n3. **手动遍历**：手动遍历`ArrayList`并使用另一个`ArrayList`存储不重复的元素。\n\n\n\n## Map\n\n### HashMap和LinkedHashMap的区别？\n\n`LinkedHashMap`继承自`HashMap`，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。\n\n\n\n### HashMap 和 HashTable 有什么区别？\n\n因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。\n\n\n\n#### 初始化容量和扩容方式：\n\n- **HashMap**：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。\n- **Hashtable**：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1\n\n\n\n### ConcurrentHashMap和Hashtable的区别?\n\n`ConcurrentHashMap`和`Hashtable`都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。\n\n- **实现机制**：\n\n  - `ConcurrentHashMap`采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。\n  - `Hashtable`使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。\n\n  **性能**：\n\n  - `ConcurrentHashMap`性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。\n  - `Hashtable`性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。\n\n  **锁粒度**：\n\n  - `ConcurrentHashMap`锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。\n  - `Hashtable`锁粒度大，所有操作都需要获取全表锁，降低了并发能力。\n\n  **Null键和值**：\n\n  - `ConcurrentHashMap`不允许存储`null`键和`null`值，尝试存储`null`会抛出`NullPointerException`。\n  - `Hashtable`也不允许存储`null`键和`null`值，存储`null`时会抛出`NullPointerException`。\n\n  **迭代器安全性**：\n\n  - `ConcurrentHashMap`提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出`ConcurrentModificationException`，但不保证读取到的值是最新的。\n  - `Hashtable`提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出`ConcurrentModificationException`。\n\n  ### 总结：\n\n  - **ConcurrentHashMap**适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许`null`键和值。\n  - **Hashtable**适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许`null`键和值。\n\n\n\n### HashMap 的底层原理\n\n##### 1. 数据结构\n\n`HashMap`底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。\n\n- **数组**：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。\n- **链表**：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。\n- **红黑树**：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。\n\n#####  2. 插入元素\n\n1. 计算键的哈希值，并确定在数组中的索引位置。\n2. 检查该位置是否已经有元素：\n   - 如果没有元素，直接插入。\n   - 如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。\n\n##### 3. 查找元素\n\n1. 计算键的哈希值，并确定在数组中的索引位置。\n2. 在该位置的链表或红黑树中查找匹配键，返回对应的值。\n\n##### 4. 删除元素\n\n- 计算键的哈希值，并确定在数组中的索引位置。\n- 在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。\n\n##### 5. 扩容机制\n\n当`HashMap`中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：\n\n1. 创建一个新的数组，容量是原来的两倍。\n2. 将原数组中的所有元素重新哈希并放入新数组中。\n3. 重新调整链表或红黑树结构。\n\n#### 总结\n\n- **数据结构**：`HashMap`使用数组、链表和红黑树存储元素。\n- **哈希算法**：通过键的`hashCode()`计算哈希值，并通过哈希值确定数组索引。\n- **插入元素**：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。\n- **查找元素**：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。\n- **删除元素**：定位到数组索引，删除链表或红黑树中的节点。\n- **扩容机制**：当元素数量超过阈值时，`HashMap`会自动扩容，重新分配数组并调整元素位置。\n","source":"_posts/Java集合八股文.md","raw":"---\ntitle: Java集合总结\ndate: 2024-06-22 16:48:56\ntags: \n   - Java\n   - 笔记\ncategorizes: Java\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151141320.webp\n---\n\n# Java集合\n\n### 说说 List, Set, Queue, Map 四者的区别？\n\n- `List`：存储的元素是有序的、可重复的。\n\n- `Set`：存储的元素不可重复。\n- `Queue`：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。\n- `Map`：使用键值对存储，`key`是无序的、不可重复的，`value`是无序的、可重复的。\n\n## List\n\n### ArrayList 和 Array （数组）的区别？\n\n- **ArrayList**：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。\n- **Array（数组）**：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。 \n\n### ArrayList 可以添加 null 吗？\n\n`ArrayList`中可以存储任何类型的对象，包括`null`。\n\n#### ArrayList和LinkedList的区别是什么？\n\n- **ArrayList** 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。\n- **LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。\n\n### ArrayList如何去重？\n\n1. **使用HashSet**：通过`HashSet`的特性去重，然后转换回`ArrayList`。\n2. **使用Stream API**：使用Java 8引入的Stream的`distinct()`方法去重。\n3. **手动遍历**：手动遍历`ArrayList`并使用另一个`ArrayList`存储不重复的元素。\n\n\n\n## Map\n\n### HashMap和LinkedHashMap的区别？\n\n`LinkedHashMap`继承自`HashMap`，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。\n\n\n\n### HashMap 和 HashTable 有什么区别？\n\n因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。\n\n\n\n#### 初始化容量和扩容方式：\n\n- **HashMap**：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。\n- **Hashtable**：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1\n\n\n\n### ConcurrentHashMap和Hashtable的区别?\n\n`ConcurrentHashMap`和`Hashtable`都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。\n\n- **实现机制**：\n\n  - `ConcurrentHashMap`采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。\n  - `Hashtable`使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。\n\n  **性能**：\n\n  - `ConcurrentHashMap`性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。\n  - `Hashtable`性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。\n\n  **锁粒度**：\n\n  - `ConcurrentHashMap`锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。\n  - `Hashtable`锁粒度大，所有操作都需要获取全表锁，降低了并发能力。\n\n  **Null键和值**：\n\n  - `ConcurrentHashMap`不允许存储`null`键和`null`值，尝试存储`null`会抛出`NullPointerException`。\n  - `Hashtable`也不允许存储`null`键和`null`值，存储`null`时会抛出`NullPointerException`。\n\n  **迭代器安全性**：\n\n  - `ConcurrentHashMap`提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出`ConcurrentModificationException`，但不保证读取到的值是最新的。\n  - `Hashtable`提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出`ConcurrentModificationException`。\n\n  ### 总结：\n\n  - **ConcurrentHashMap**适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许`null`键和值。\n  - **Hashtable**适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许`null`键和值。\n\n\n\n### HashMap 的底层原理\n\n##### 1. 数据结构\n\n`HashMap`底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。\n\n- **数组**：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。\n- **链表**：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。\n- **红黑树**：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。\n\n#####  2. 插入元素\n\n1. 计算键的哈希值，并确定在数组中的索引位置。\n2. 检查该位置是否已经有元素：\n   - 如果没有元素，直接插入。\n   - 如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。\n\n##### 3. 查找元素\n\n1. 计算键的哈希值，并确定在数组中的索引位置。\n2. 在该位置的链表或红黑树中查找匹配键，返回对应的值。\n\n##### 4. 删除元素\n\n- 计算键的哈希值，并确定在数组中的索引位置。\n- 在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。\n\n##### 5. 扩容机制\n\n当`HashMap`中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：\n\n1. 创建一个新的数组，容量是原来的两倍。\n2. 将原数组中的所有元素重新哈希并放入新数组中。\n3. 重新调整链表或红黑树结构。\n\n#### 总结\n\n- **数据结构**：`HashMap`使用数组、链表和红黑树存储元素。\n- **哈希算法**：通过键的`hashCode()`计算哈希值，并通过哈希值确定数组索引。\n- **插入元素**：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。\n- **查找元素**：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。\n- **删除元素**：定位到数组索引，删除链表或红黑树中的节点。\n- **扩容机制**：当元素数量超过阈值时，`HashMap`会自动扩容，重新分配数组并调整元素位置。\n","slug":"Java集合八股文","published":1,"updated":"2024-07-15T04:02:14.692Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr00007tuj86eo0gmyr","content":"<h1 id=\"Java集合\"><a class=\"headerlink\" href=\"#Java集合\"></a>Java集合</h1>\n<h3 id=\"说说-List-Set-Queue-Map-四者的区别？\"><a class=\"headerlink\" href=\"#说说-List-Set-Queue-Map-四者的区别？\"></a>说说 List, Set, Queue, Map 四者的区别？</h3>\n<ul>\n<li>\n<p><code>List</code>：存储的元素是有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Set</code>：存储的元素不可重复。</p>\n</li>\n<li>\n<p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Map</code>：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的。</p>\n</li>\n</ul>\n<h2 id=\"List\"><a class=\"headerlink\" href=\"#List\"></a>List</h2>\n<h3 id=\"ArrayList-和-Array-（数组）的区别？\"><a class=\"headerlink\" href=\"#ArrayList-和-Array-（数组）的区别？\"></a>ArrayList 和 Array （数组）的区别？</h3>\n<ul>\n<li><strong>ArrayList</strong>：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。</li>\n<li><strong>Array（数组）</strong>：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。</li>\n</ul>\n<h3 id=\"ArrayList-可以添加-null-吗？\"><a class=\"headerlink\" href=\"#ArrayList-可以添加-null-吗？\"></a>ArrayList 可以添加 null 吗？</h3>\n<p><code>ArrayList</code>中可以存储任何类型的对象，包括<code>null</code>。</p>\n<h4 id=\"ArrayList和LinkedList的区别是什么？\"><a class=\"headerlink\" href=\"#ArrayList和LinkedList的区别是什么？\"></a>ArrayList和LinkedList的区别是什么？</h4>\n<ul>\n<li><strong>ArrayList</strong> 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。</li>\n<li>**LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。</li>\n</ul>\n<h3 id=\"ArrayList如何去重？\"><a class=\"headerlink\" href=\"#ArrayList如何去重？\"></a>ArrayList如何去重？</h3>\n<ol>\n<li><strong>使用HashSet</strong>：通过<code>HashSet</code>的特性去重，然后转换回<code>ArrayList</code>。</li>\n<li><strong>使用Stream API</strong>：使用Java 8引入的Stream的<code>distinct()</code>方法去重。</li>\n<li><strong>手动遍历</strong>：手动遍历<code>ArrayList</code>并使用另一个<code>ArrayList</code>存储不重复的元素。</li>\n</ol>\n<h2 id=\"Map\"><a class=\"headerlink\" href=\"#Map\"></a>Map</h2>\n<h3 id=\"HashMap和LinkedHashMap的区别？\"><a class=\"headerlink\" href=\"#HashMap和LinkedHashMap的区别？\"></a>HashMap和LinkedHashMap的区别？</h3>\n<p><code>LinkedHashMap</code>继承自<code>HashMap</code>，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。</p>\n<h3 id=\"HashMap-和-HashTable-有什么区别？\"><a class=\"headerlink\" href=\"#HashMap-和-HashTable-有什么区别？\"></a>HashMap 和 HashTable 有什么区别？</h3>\n<p>因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。</p>\n<h4 id=\"初始化容量和扩容方式：\"><a class=\"headerlink\" href=\"#初始化容量和扩容方式：\"></a>初始化容量和扩容方式：</h4>\n<ul>\n<li><strong>HashMap</strong>：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。</li>\n<li><strong>Hashtable</strong>：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1</li>\n</ul>\n<h3 id=\"ConcurrentHashMap和Hashtable的区别\"><a class=\"headerlink\" href=\"#ConcurrentHashMap和Hashtable的区别\"></a>ConcurrentHashMap和Hashtable的区别?</h3>\n<p><code>ConcurrentHashMap</code>和<code>Hashtable</code>都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。</p>\n<ul>\n<li>\n<p><strong>实现机制</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。</li>\n<li><code>Hashtable</code>使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。</li>\n</ul>\n<p><strong>性能</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。</li>\n<li><code>Hashtable</code>性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。</li>\n</ul>\n<p><strong>锁粒度</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。</li>\n<li><code>Hashtable</code>锁粒度大，所有操作都需要获取全表锁，降低了并发能力。</li>\n</ul>\n<p><strong>Null键和值</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>不允许存储<code>null</code>键和<code>null</code>值，尝试存储<code>null</code>会抛出<code>NullPointerException</code>。</li>\n<li><code>Hashtable</code>也不允许存储<code>null</code>键和<code>null</code>值，存储<code>null</code>时会抛出<code>NullPointerException</code>。</li>\n</ul>\n<p><strong>迭代器安全性</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出<code>ConcurrentModificationException</code>，但不保证读取到的值是最新的。</li>\n<li><code>Hashtable</code>提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出<code>ConcurrentModificationException</code>。</li>\n</ul>\n<h3 id=\"总结：\"><a class=\"headerlink\" href=\"#总结：\"></a>总结：</h3>\n<ul>\n<li><strong>ConcurrentHashMap</strong>适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许<code>null</code>键和值。</li>\n<li><strong>Hashtable</strong>适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许<code>null</code>键和值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HashMap-的底层原理\"><a class=\"headerlink\" href=\"#HashMap-的底层原理\"></a>HashMap 的底层原理</h3>\n<h5 id=\"1-数据结构\"><a class=\"headerlink\" href=\"#1-数据结构\"></a>1. 数据结构</h5>\n<p><code>HashMap</code>底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。</p>\n<ul>\n<li><strong>数组</strong>：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。</li>\n<li><strong>链表</strong>：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。</li>\n<li><strong>红黑树</strong>：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。</li>\n</ul>\n<h5 id=\"2-插入元素\"><a class=\"headerlink\" href=\"#2-插入元素\"></a>2. 插入元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>检查该位置是否已经有元素：\n<ul>\n<li>如果没有元素，直接插入。</li>\n<li>如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-查找元素\"><a class=\"headerlink\" href=\"#3-查找元素\"></a>3. 查找元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中查找匹配键，返回对应的值。</li>\n</ol>\n<h5 id=\"4-删除元素\"><a class=\"headerlink\" href=\"#4-删除元素\"></a>4. 删除元素</h5>\n<ul>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。</li>\n</ul>\n<h5 id=\"5-扩容机制\"><a class=\"headerlink\" href=\"#5-扩容机制\"></a>5. 扩容机制</h5>\n<p>当<code>HashMap</code>中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：</p>\n<ol>\n<li>创建一个新的数组，容量是原来的两倍。</li>\n<li>将原数组中的所有元素重新哈希并放入新数组中。</li>\n<li>重新调整链表或红黑树结构。</li>\n</ol>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>数据结构</strong>：<code>HashMap</code>使用数组、链表和红黑树存储元素。</li>\n<li><strong>哈希算法</strong>：通过键的<code>hashCode()</code>计算哈希值，并通过哈希值确定数组索引。</li>\n<li><strong>插入元素</strong>：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。</li>\n<li><strong>查找元素</strong>：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。</li>\n<li><strong>删除元素</strong>：定位到数组索引，删除链表或红黑树中的节点。</li>\n<li><strong>扩容机制</strong>：当元素数量超过阈值时，<code>HashMap</code>会自动扩容，重新分配数组并调整元素位置。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Java集合\"><a class=\"headerlink\" href=\"#Java集合\"></a>Java集合</h1>\n<h3 id=\"说说-List-Set-Queue-Map-四者的区别？\"><a class=\"headerlink\" href=\"#说说-List-Set-Queue-Map-四者的区别？\"></a>说说 List, Set, Queue, Map 四者的区别？</h3>\n<ul>\n<li>\n<p><code>List</code>：存储的元素是有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Set</code>：存储的元素不可重复。</p>\n</li>\n<li>\n<p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Map</code>：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的。</p>\n</li>\n</ul>\n<h2 id=\"List\"><a class=\"headerlink\" href=\"#List\"></a>List</h2>\n<h3 id=\"ArrayList-和-Array-（数组）的区别？\"><a class=\"headerlink\" href=\"#ArrayList-和-Array-（数组）的区别？\"></a>ArrayList 和 Array （数组）的区别？</h3>\n<ul>\n<li><strong>ArrayList</strong>：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。</li>\n<li><strong>Array（数组）</strong>：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。</li>\n</ul>\n<h3 id=\"ArrayList-可以添加-null-吗？\"><a class=\"headerlink\" href=\"#ArrayList-可以添加-null-吗？\"></a>ArrayList 可以添加 null 吗？</h3>\n<p><code>ArrayList</code>中可以存储任何类型的对象，包括<code>null</code>。</p>\n<h4 id=\"ArrayList和LinkedList的区别是什么？\"><a class=\"headerlink\" href=\"#ArrayList和LinkedList的区别是什么？\"></a>ArrayList和LinkedList的区别是什么？</h4>\n<ul>\n<li><strong>ArrayList</strong> 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。</li>\n<li>**LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。</li>\n</ul>\n<h3 id=\"ArrayList如何去重？\"><a class=\"headerlink\" href=\"#ArrayList如何去重？\"></a>ArrayList如何去重？</h3>\n<ol>\n<li><strong>使用HashSet</strong>：通过<code>HashSet</code>的特性去重，然后转换回<code>ArrayList</code>。</li>\n<li><strong>使用Stream API</strong>：使用Java 8引入的Stream的<code>distinct()</code>方法去重。</li>\n<li><strong>手动遍历</strong>：手动遍历<code>ArrayList</code>并使用另一个<code>ArrayList</code>存储不重复的元素。</li>\n</ol>\n<h2 id=\"Map\"><a class=\"headerlink\" href=\"#Map\"></a>Map</h2>\n<h3 id=\"HashMap和LinkedHashMap的区别？\"><a class=\"headerlink\" href=\"#HashMap和LinkedHashMap的区别？\"></a>HashMap和LinkedHashMap的区别？</h3>\n<p><code>LinkedHashMap</code>继承自<code>HashMap</code>，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。</p>\n<h3 id=\"HashMap-和-HashTable-有什么区别？\"><a class=\"headerlink\" href=\"#HashMap-和-HashTable-有什么区别？\"></a>HashMap 和 HashTable 有什么区别？</h3>\n<p>因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。</p>\n<h4 id=\"初始化容量和扩容方式：\"><a class=\"headerlink\" href=\"#初始化容量和扩容方式：\"></a>初始化容量和扩容方式：</h4>\n<ul>\n<li><strong>HashMap</strong>：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。</li>\n<li><strong>Hashtable</strong>：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1</li>\n</ul>\n<h3 id=\"ConcurrentHashMap和Hashtable的区别\"><a class=\"headerlink\" href=\"#ConcurrentHashMap和Hashtable的区别\"></a>ConcurrentHashMap和Hashtable的区别?</h3>\n<p><code>ConcurrentHashMap</code>和<code>Hashtable</code>都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。</p>\n<ul>\n<li>\n<p><strong>实现机制</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。</li>\n<li><code>Hashtable</code>使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。</li>\n</ul>\n<p><strong>性能</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。</li>\n<li><code>Hashtable</code>性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。</li>\n</ul>\n<p><strong>锁粒度</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。</li>\n<li><code>Hashtable</code>锁粒度大，所有操作都需要获取全表锁，降低了并发能力。</li>\n</ul>\n<p><strong>Null键和值</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>不允许存储<code>null</code>键和<code>null</code>值，尝试存储<code>null</code>会抛出<code>NullPointerException</code>。</li>\n<li><code>Hashtable</code>也不允许存储<code>null</code>键和<code>null</code>值，存储<code>null</code>时会抛出<code>NullPointerException</code>。</li>\n</ul>\n<p><strong>迭代器安全性</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出<code>ConcurrentModificationException</code>，但不保证读取到的值是最新的。</li>\n<li><code>Hashtable</code>提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出<code>ConcurrentModificationException</code>。</li>\n</ul>\n<h3 id=\"总结：\"><a class=\"headerlink\" href=\"#总结：\"></a>总结：</h3>\n<ul>\n<li><strong>ConcurrentHashMap</strong>适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许<code>null</code>键和值。</li>\n<li><strong>Hashtable</strong>适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许<code>null</code>键和值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HashMap-的底层原理\"><a class=\"headerlink\" href=\"#HashMap-的底层原理\"></a>HashMap 的底层原理</h3>\n<h5 id=\"1-数据结构\"><a class=\"headerlink\" href=\"#1-数据结构\"></a>1. 数据结构</h5>\n<p><code>HashMap</code>底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。</p>\n<ul>\n<li><strong>数组</strong>：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。</li>\n<li><strong>链表</strong>：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。</li>\n<li><strong>红黑树</strong>：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。</li>\n</ul>\n<h5 id=\"2-插入元素\"><a class=\"headerlink\" href=\"#2-插入元素\"></a>2. 插入元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>检查该位置是否已经有元素：\n<ul>\n<li>如果没有元素，直接插入。</li>\n<li>如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-查找元素\"><a class=\"headerlink\" href=\"#3-查找元素\"></a>3. 查找元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中查找匹配键，返回对应的值。</li>\n</ol>\n<h5 id=\"4-删除元素\"><a class=\"headerlink\" href=\"#4-删除元素\"></a>4. 删除元素</h5>\n<ul>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。</li>\n</ul>\n<h5 id=\"5-扩容机制\"><a class=\"headerlink\" href=\"#5-扩容机制\"></a>5. 扩容机制</h5>\n<p>当<code>HashMap</code>中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：</p>\n<ol>\n<li>创建一个新的数组，容量是原来的两倍。</li>\n<li>将原数组中的所有元素重新哈希并放入新数组中。</li>\n<li>重新调整链表或红黑树结构。</li>\n</ol>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>数据结构</strong>：<code>HashMap</code>使用数组、链表和红黑树存储元素。</li>\n<li><strong>哈希算法</strong>：通过键的<code>hashCode()</code>计算哈希值，并通过哈希值确定数组索引。</li>\n<li><strong>插入元素</strong>：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。</li>\n<li><strong>查找元素</strong>：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。</li>\n<li><strong>删除元素</strong>：定位到数组索引，删除链表或红黑树中的节点。</li>\n<li><strong>扩容机制</strong>：当元素数量超过阈值时，<code>HashMap</code>会自动扩容，重新分配数组并调整元素位置。</li>\n</ul>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Linux安装MySQL","date":"2024-06-25T04:18:14.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151131084.webp","_content":"\n# 如何在Ubuntu上安装和配置MySQL并允许远程访问\n\n在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。\n\n## 步骤1：更新包列表并安装MySQL服务器\n\n首先，确保你的包列表是最新的：\n\n```bash\nsudo apt update\n```\n\n然后安装MySQL服务器：\n\n```bash\nsudo apt install mysql-server\n```\n\n如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：\n\n```bash\nsudo apt install -y mysql-server-8.0\n```\n\n## 步骤2：检查MySQL服务状态并启用MySQL服务\n\n检查MySQL服务是否正在运行：\n\n```bash\nsudo systemctl status mysql\n```\n\n确保MySQL服务在系统启动时自动启动：\n\n```bash\nsudo systemctl enable mysql\n```\n\n## 步骤3：运行安全安装脚本\n\nMySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：\n\n```bash\nsudo mysql_secure_installation\n```\n\n在提示中，你将需要：\n\n- 选择密码规则\n- 删除匿名用户\n- 禁用远程root登录\n- 删除测试数据库和表\n\n## 步骤4：修改MySQL配置文件以允许远程连接\n\n打开MySQL配置文件`mysqld.cnf`，通常位于`/etc/mysql/mysql.conf.d/`目录中：\n\n```bash\nsudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n找到以下行：\n\n```plaintext\nbind-address = 127.0.0.1\n```\n\n将其注释掉或改为`0.0.0.0`，使MySQL监听所有网络接口：\n\n```plaintext\n# bind-address = 127.0.0.1\nbind-address = 0.0.0.0\n```\n\n保存配置文件并退出编辑器。\n\n## 步骤5：重启MySQL服务\n\n重启MySQL服务以使更改生效：\n\n```bash\nsudo systemctl restart mysql\n```\n\n## 步骤6：创建可以远程访问的用户\n\n登录到MySQL命令行：\n\n```bash\nmysql -u root -p\n```\n\n在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：\n\n```sql\nCREATE USER 'yourusername'@'%' IDENTIFIED BY 'yourpassword';\nGRANT ALL PRIVILEGES ON *.* TO 'yourusername'@'%' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n```\n\n**解释：**\n\n- **GRANT ALL PRIVILEGES**：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。\n- **ON**：授予权限的范围。`*.*`表示所有数据库和所有表。\n- **TO**：指定权限接收者。`'yourusername'`是用户名，`'%'`是主机名通配符，表示允许从任何IP地址连接的用户。\n- **WITH GRANT OPTION**：允许用户将他自己拥有的权限授予其他用户。\n\n## 步骤7：配置防火墙\n\n确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：\n\n```bash\nsudo ufw allow 3306\nsudo ufw reload\n```\n\n## 步骤8：验证远程连接\n\n在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：\n\n```bash\nmysql -u yourusername -p -h your_server_ip\n```\n\n## 其他操作\n\n### 删除某些权限或用户\n\n如果你想删除某些权限，或者从特定数据库中删除权限，可以使用`REVOKE`命令。例如：\n\n```sql\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 'existinguser'@'%';\n```\n\n### 查看某个用户的当前权限\n\n如果你想查看某个用户的当前权限，可以使用以下命令：\n\n```sql\nSHOW GRANTS FOR 'existinguser'@'%';\n```\n\n通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！\n","source":"_posts/Linux安装MySQL.md","raw":"---\ntitle: Linux安装MySQL\ndate: 2024-06-25 12:18:14\ntags:\n    - MySQL\n    - Linux\ncategories: \n    - Linux\n    - MySQL\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151131084.webp\n---\n\n# 如何在Ubuntu上安装和配置MySQL并允许远程访问\n\n在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。\n\n## 步骤1：更新包列表并安装MySQL服务器\n\n首先，确保你的包列表是最新的：\n\n```bash\nsudo apt update\n```\n\n然后安装MySQL服务器：\n\n```bash\nsudo apt install mysql-server\n```\n\n如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：\n\n```bash\nsudo apt install -y mysql-server-8.0\n```\n\n## 步骤2：检查MySQL服务状态并启用MySQL服务\n\n检查MySQL服务是否正在运行：\n\n```bash\nsudo systemctl status mysql\n```\n\n确保MySQL服务在系统启动时自动启动：\n\n```bash\nsudo systemctl enable mysql\n```\n\n## 步骤3：运行安全安装脚本\n\nMySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：\n\n```bash\nsudo mysql_secure_installation\n```\n\n在提示中，你将需要：\n\n- 选择密码规则\n- 删除匿名用户\n- 禁用远程root登录\n- 删除测试数据库和表\n\n## 步骤4：修改MySQL配置文件以允许远程连接\n\n打开MySQL配置文件`mysqld.cnf`，通常位于`/etc/mysql/mysql.conf.d/`目录中：\n\n```bash\nsudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n找到以下行：\n\n```plaintext\nbind-address = 127.0.0.1\n```\n\n将其注释掉或改为`0.0.0.0`，使MySQL监听所有网络接口：\n\n```plaintext\n# bind-address = 127.0.0.1\nbind-address = 0.0.0.0\n```\n\n保存配置文件并退出编辑器。\n\n## 步骤5：重启MySQL服务\n\n重启MySQL服务以使更改生效：\n\n```bash\nsudo systemctl restart mysql\n```\n\n## 步骤6：创建可以远程访问的用户\n\n登录到MySQL命令行：\n\n```bash\nmysql -u root -p\n```\n\n在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：\n\n```sql\nCREATE USER 'yourusername'@'%' IDENTIFIED BY 'yourpassword';\nGRANT ALL PRIVILEGES ON *.* TO 'yourusername'@'%' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n```\n\n**解释：**\n\n- **GRANT ALL PRIVILEGES**：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。\n- **ON**：授予权限的范围。`*.*`表示所有数据库和所有表。\n- **TO**：指定权限接收者。`'yourusername'`是用户名，`'%'`是主机名通配符，表示允许从任何IP地址连接的用户。\n- **WITH GRANT OPTION**：允许用户将他自己拥有的权限授予其他用户。\n\n## 步骤7：配置防火墙\n\n确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：\n\n```bash\nsudo ufw allow 3306\nsudo ufw reload\n```\n\n## 步骤8：验证远程连接\n\n在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：\n\n```bash\nmysql -u yourusername -p -h your_server_ip\n```\n\n## 其他操作\n\n### 删除某些权限或用户\n\n如果你想删除某些权限，或者从特定数据库中删除权限，可以使用`REVOKE`命令。例如：\n\n```sql\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 'existinguser'@'%';\n```\n\n### 查看某个用户的当前权限\n\n如果你想查看某个用户的当前权限，可以使用以下命令：\n\n```sql\nSHOW GRANTS FOR 'existinguser'@'%';\n```\n\n通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！\n","slug":"Linux安装MySQL","published":1,"updated":"2024-07-15T04:11:45.458Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr10008tuj80m390rgv","content":"<h1 id=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"><a class=\"headerlink\" href=\"#如何在Ubuntu上安装和配置MySQL并允许远程访问\"></a>如何在Ubuntu上安装和配置MySQL并允许远程访问</h1>\n<p>在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。</p>\n<h2 id=\"步骤1：更新包列表并安装MySQL服务器\"><a class=\"headerlink\" href=\"#步骤1：更新包列表并安装MySQL服务器\"></a>步骤1：更新包列表并安装MySQL服务器</h2>\n<p>首先，确保你的包列表是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后安装MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mysql-server-8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤2：检查MySQL服务状态并启用MySQL服务\"><a class=\"headerlink\" href=\"#步骤2：检查MySQL服务状态并启用MySQL服务\"></a>步骤2：检查MySQL服务状态并启用MySQL服务</h2>\n<p>检查MySQL服务是否正在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>确保MySQL服务在系统启动时自动启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤3：运行安全安装脚本\"><a class=\"headerlink\" href=\"#步骤3：运行安全安装脚本\"></a>步骤3：运行安全安装脚本</h2>\n<p>MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在提示中，你将需要：</p>\n<ul>\n<li>选择密码规则</li>\n<li>删除匿名用户</li>\n<li>禁用远程root登录</li>\n<li>删除测试数据库和表</li>\n</ul>\n<h2 id=\"步骤4：修改MySQL配置文件以允许远程连接\"><a class=\"headerlink\" href=\"#步骤4：修改MySQL配置文件以允许远程连接\"></a>步骤4：修改MySQL配置文件以允许远程连接</h2>\n<p>打开MySQL配置文件<code>mysqld.cnf</code>，通常位于<code>/etc/mysql/mysql.conf.d/</code>目录中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>找到以下行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bind-address &#x3D; 127.0.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将其注释掉或改为<code>0.0.0.0</code>，使MySQL监听所有网络接口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># bind-address &#x3D; 127.0.0.1\nbind-address &#x3D; 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>保存配置文件并退出编辑器。</p>\n<h2 id=\"步骤5：重启MySQL服务\"><a class=\"headerlink\" href=\"#步骤5：重启MySQL服务\"></a>步骤5：重启MySQL服务</h2>\n<p>重启MySQL服务以使更改生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤6：创建可以远程访问的用户\"><a class=\"headerlink\" href=\"#步骤6：创建可以远程访问的用户\"></a>步骤6：创建可以远程访问的用户</h2>\n<p>登录到MySQL命令行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'yourpassword'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>解释：</strong></p>\n<ul>\n<li><strong>GRANT ALL PRIVILEGES</strong>：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。</li>\n<li><strong>ON</strong>：授予权限的范围。<code>*.*</code>表示所有数据库和所有表。</li>\n<li><strong>TO</strong>：指定权限接收者。<code>'yourusername'</code>是用户名，<code>'%'</code>是主机名通配符，表示允许从任何IP地址连接的用户。</li>\n<li><strong>WITH GRANT OPTION</strong>：允许用户将他自己拥有的权限授予其他用户。</li>\n</ul>\n<h2 id=\"步骤7：配置防火墙\"><a class=\"headerlink\" href=\"#步骤7：配置防火墙\"></a>步骤7：配置防火墙</h2>\n<p>确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3306</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤8：验证远程连接\"><a class=\"headerlink\" href=\"#步骤8：验证远程连接\"></a>步骤8：验证远程连接</h2>\n<p>在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> yourusername <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-h</span> your_server_ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"其他操作\"><a class=\"headerlink\" href=\"#其他操作\"></a>其他操作</h2>\n<h3 id=\"删除某些权限或用户\"><a class=\"headerlink\" href=\"#删除某些权限或用户\"></a>删除某些权限或用户</h3>\n<p>如果你想删除某些权限，或者从特定数据库中删除权限，可以使用<code>REVOKE</code>命令。例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span> <span class=\"token keyword\">FROM</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查看某个用户的当前权限\"><a class=\"headerlink\" href=\"#查看某个用户的当前权限\"></a>查看某个用户的当前权限</h3>\n<p>如果你想查看某个用户的当前权限，可以使用以下命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！</p>\n","excerpt":"","more":"<h1 id=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"><a class=\"headerlink\" href=\"#如何在Ubuntu上安装和配置MySQL并允许远程访问\"></a>如何在Ubuntu上安装和配置MySQL并允许远程访问</h1>\n<p>在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。</p>\n<h2 id=\"步骤1：更新包列表并安装MySQL服务器\"><a class=\"headerlink\" href=\"#步骤1：更新包列表并安装MySQL服务器\"></a>步骤1：更新包列表并安装MySQL服务器</h2>\n<p>首先，确保你的包列表是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后安装MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mysql-server-8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤2：检查MySQL服务状态并启用MySQL服务\"><a class=\"headerlink\" href=\"#步骤2：检查MySQL服务状态并启用MySQL服务\"></a>步骤2：检查MySQL服务状态并启用MySQL服务</h2>\n<p>检查MySQL服务是否正在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>确保MySQL服务在系统启动时自动启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤3：运行安全安装脚本\"><a class=\"headerlink\" href=\"#步骤3：运行安全安装脚本\"></a>步骤3：运行安全安装脚本</h2>\n<p>MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在提示中，你将需要：</p>\n<ul>\n<li>选择密码规则</li>\n<li>删除匿名用户</li>\n<li>禁用远程root登录</li>\n<li>删除测试数据库和表</li>\n</ul>\n<h2 id=\"步骤4：修改MySQL配置文件以允许远程连接\"><a class=\"headerlink\" href=\"#步骤4：修改MySQL配置文件以允许远程连接\"></a>步骤4：修改MySQL配置文件以允许远程连接</h2>\n<p>打开MySQL配置文件<code>mysqld.cnf</code>，通常位于<code>/etc/mysql/mysql.conf.d/</code>目录中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>找到以下行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bind-address &#x3D; 127.0.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将其注释掉或改为<code>0.0.0.0</code>，使MySQL监听所有网络接口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># bind-address &#x3D; 127.0.0.1\nbind-address &#x3D; 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>保存配置文件并退出编辑器。</p>\n<h2 id=\"步骤5：重启MySQL服务\"><a class=\"headerlink\" href=\"#步骤5：重启MySQL服务\"></a>步骤5：重启MySQL服务</h2>\n<p>重启MySQL服务以使更改生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤6：创建可以远程访问的用户\"><a class=\"headerlink\" href=\"#步骤6：创建可以远程访问的用户\"></a>步骤6：创建可以远程访问的用户</h2>\n<p>登录到MySQL命令行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'yourpassword'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>解释：</strong></p>\n<ul>\n<li><strong>GRANT ALL PRIVILEGES</strong>：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。</li>\n<li><strong>ON</strong>：授予权限的范围。<code>*.*</code>表示所有数据库和所有表。</li>\n<li><strong>TO</strong>：指定权限接收者。<code>'yourusername'</code>是用户名，<code>'%'</code>是主机名通配符，表示允许从任何IP地址连接的用户。</li>\n<li><strong>WITH GRANT OPTION</strong>：允许用户将他自己拥有的权限授予其他用户。</li>\n</ul>\n<h2 id=\"步骤7：配置防火墙\"><a class=\"headerlink\" href=\"#步骤7：配置防火墙\"></a>步骤7：配置防火墙</h2>\n<p>确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3306</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤8：验证远程连接\"><a class=\"headerlink\" href=\"#步骤8：验证远程连接\"></a>步骤8：验证远程连接</h2>\n<p>在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> yourusername <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-h</span> your_server_ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"其他操作\"><a class=\"headerlink\" href=\"#其他操作\"></a>其他操作</h2>\n<h3 id=\"删除某些权限或用户\"><a class=\"headerlink\" href=\"#删除某些权限或用户\"></a>删除某些权限或用户</h3>\n<p>如果你想删除某些权限，或者从特定数据库中删除权限，可以使用<code>REVOKE</code>命令。例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span> <span class=\"token keyword\">FROM</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查看某个用户的当前权限\"><a class=\"headerlink\" href=\"#查看某个用户的当前权限\"></a>查看某个用户的当前权限</h3>\n<p>如果你想查看某个用户的当前权限，可以使用以下命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Mac安装JDK","date":"2024-07-14T14:13:37.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151124663.webp","_content":"\n# Mac 上的 JDK 的安装与卸载\n\n## 从 AdoptOpenJDK 到 Temurin\n\n## 卸载 AdoptOpenJDK\n如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：\n\n### 步骤 1：卸载 AdoptOpenJDK\n打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 [Homebrew 安装指南](https://blog.aixcc.top/2024/07/14/安装Homebrew/) 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：\n```bash\nbrew remove --cask adoptopenjdk8\n```\n重复上述命令，替换 `adoptopenjdk8` 为其他版本号以卸载其他版本的 JDK。\n\n### 步骤 2：移除 Homebrew 的 Tap\n完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：\n```bash\nbrew untap AdoptOpenJDK/openjdk\n```\n这样就和 AdoptOpenJDK 完成了告别。\n\n## 清除旧的 Oracle JDK\n对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：\n\n### 步骤 3：删除旧的 JDK 文件\n删除 `/Library/Java/JavaVirtualMachines/` 目录下的 JDK 文件夹。此外，清理以下位置的内容：\n- `/Library/Internet Plug-Ins/JavaAppletPlugin.plugin`\n- `/Library/PreferencePanes/JavaControlPanel.prefPane`\n- `~/Library/Application Support/Oracle/Java`\n\n## 安装 Temurin JDK\n在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。\n\n### 步骤 4：配置 Homebrew Cask 版本\n首先，确保你的 Homebrew 能够访问所有 cask 版本：\n```bash\nbrew search temurin\n```\n![](https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp)\n### 步骤 5：安装 Temurin\n现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：\n```bash\nbrew install --cask temurin@8\n```\n\n\n## 结论\n通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。\n\n","source":"_posts/Mac安装JDK.md","raw":"---\ntitle: Mac安装JDK\ndate: 2024-07-14 22:13:37\ntags:\n  - Mac\n  - Java\ncategories: Mac\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151124663.webp\n---\n\n# Mac 上的 JDK 的安装与卸载\n\n## 从 AdoptOpenJDK 到 Temurin\n\n## 卸载 AdoptOpenJDK\n如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：\n\n### 步骤 1：卸载 AdoptOpenJDK\n打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 [Homebrew 安装指南](https://blog.aixcc.top/2024/07/14/安装Homebrew/) 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：\n```bash\nbrew remove --cask adoptopenjdk8\n```\n重复上述命令，替换 `adoptopenjdk8` 为其他版本号以卸载其他版本的 JDK。\n\n### 步骤 2：移除 Homebrew 的 Tap\n完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：\n```bash\nbrew untap AdoptOpenJDK/openjdk\n```\n这样就和 AdoptOpenJDK 完成了告别。\n\n## 清除旧的 Oracle JDK\n对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：\n\n### 步骤 3：删除旧的 JDK 文件\n删除 `/Library/Java/JavaVirtualMachines/` 目录下的 JDK 文件夹。此外，清理以下位置的内容：\n- `/Library/Internet Plug-Ins/JavaAppletPlugin.plugin`\n- `/Library/PreferencePanes/JavaControlPanel.prefPane`\n- `~/Library/Application Support/Oracle/Java`\n\n## 安装 Temurin JDK\n在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。\n\n### 步骤 4：配置 Homebrew Cask 版本\n首先，确保你的 Homebrew 能够访问所有 cask 版本：\n```bash\nbrew search temurin\n```\n![](https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp)\n### 步骤 5：安装 Temurin\n现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：\n```bash\nbrew install --cask temurin@8\n```\n\n\n## 结论\n通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。\n\n","slug":"Mac安装JDK","published":1,"updated":"2024-07-15T04:42:31.909Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr20009tuj84kea3apl","content":"<h1 id=\"Mac-上的-JDK-的安装与卸载\"><a class=\"headerlink\" href=\"#Mac-上的-JDK-的安装与卸载\"></a>Mac 上的 JDK 的安装与卸载</h1>\n<h2 id=\"从-AdoptOpenJDK-到-Temurin\"><a class=\"headerlink\" href=\"#从-AdoptOpenJDK-到-Temurin\"></a>从 AdoptOpenJDK 到 Temurin</h2>\n<h2 id=\"卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#卸载-AdoptOpenJDK\"></a>卸载 AdoptOpenJDK</h2>\n<p>如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：</p>\n<h3 id=\"步骤-1：卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#步骤-1：卸载-AdoptOpenJDK\"></a>步骤 1：卸载 AdoptOpenJDK</h3>\n<p>打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 <a href=\"https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/\">Homebrew 安装指南</a> 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew remove <span class=\"token parameter variable\">--cask</span> adoptopenjdk8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>重复上述命令，替换 <code>adoptopenjdk8</code> 为其他版本号以卸载其他版本的 JDK。</p>\n<h3 id=\"步骤-2：移除-Homebrew-的-Tap\"><a class=\"headerlink\" href=\"#步骤-2：移除-Homebrew-的-Tap\"></a>步骤 2：移除 Homebrew 的 Tap</h3>\n<p>完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew untap AdoptOpenJDK/openjdk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样就和 AdoptOpenJDK 完成了告别。</p>\n<h2 id=\"清除旧的-Oracle-JDK\"><a class=\"headerlink\" href=\"#清除旧的-Oracle-JDK\"></a>清除旧的 Oracle JDK</h2>\n<p>对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：</p>\n<h3 id=\"步骤-3：删除旧的-JDK-文件\"><a class=\"headerlink\" href=\"#步骤-3：删除旧的-JDK-文件\"></a>步骤 3：删除旧的 JDK 文件</h3>\n<p>删除 <code>/Library/Java/JavaVirtualMachines/</code> 目录下的 JDK 文件夹。此外，清理以下位置的内容：</p>\n<ul>\n<li><code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin</code></li>\n<li><code>/Library/PreferencePanes/JavaControlPanel.prefPane</code></li>\n<li><code>~/Library/Application Support/Oracle/Java</code></li>\n</ul>\n<h2 id=\"安装-Temurin-JDK\"><a class=\"headerlink\" href=\"#安装-Temurin-JDK\"></a>安装 Temurin JDK</h2>\n<p>在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。</p>\n<h3 id=\"步骤-4：配置-Homebrew-Cask-版本\"><a class=\"headerlink\" href=\"#步骤-4：配置-Homebrew-Cask-版本\"></a>步骤 4：配置 Homebrew Cask 版本</h3>\n<p>首先，确保你的 Homebrew 能够访问所有 cask 版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew search temurin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"步骤-5：安装-Temurin\"><a class=\"headerlink\" href=\"#步骤-5：安装-Temurin\"></a>步骤 5：安装 Temurin</h3>\n<p>现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token parameter variable\">--cask</span> temurin@8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。</p>\n","excerpt":"","more":"<h1 id=\"Mac-上的-JDK-的安装与卸载\"><a class=\"headerlink\" href=\"#Mac-上的-JDK-的安装与卸载\"></a>Mac 上的 JDK 的安装与卸载</h1>\n<h2 id=\"从-AdoptOpenJDK-到-Temurin\"><a class=\"headerlink\" href=\"#从-AdoptOpenJDK-到-Temurin\"></a>从 AdoptOpenJDK 到 Temurin</h2>\n<h2 id=\"卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#卸载-AdoptOpenJDK\"></a>卸载 AdoptOpenJDK</h2>\n<p>如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：</p>\n<h3 id=\"步骤-1：卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#步骤-1：卸载-AdoptOpenJDK\"></a>步骤 1：卸载 AdoptOpenJDK</h3>\n<p>打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 <a href=\"https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/\">Homebrew 安装指南</a> 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew remove <span class=\"token parameter variable\">--cask</span> adoptopenjdk8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>重复上述命令，替换 <code>adoptopenjdk8</code> 为其他版本号以卸载其他版本的 JDK。</p>\n<h3 id=\"步骤-2：移除-Homebrew-的-Tap\"><a class=\"headerlink\" href=\"#步骤-2：移除-Homebrew-的-Tap\"></a>步骤 2：移除 Homebrew 的 Tap</h3>\n<p>完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew untap AdoptOpenJDK/openjdk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样就和 AdoptOpenJDK 完成了告别。</p>\n<h2 id=\"清除旧的-Oracle-JDK\"><a class=\"headerlink\" href=\"#清除旧的-Oracle-JDK\"></a>清除旧的 Oracle JDK</h2>\n<p>对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：</p>\n<h3 id=\"步骤-3：删除旧的-JDK-文件\"><a class=\"headerlink\" href=\"#步骤-3：删除旧的-JDK-文件\"></a>步骤 3：删除旧的 JDK 文件</h3>\n<p>删除 <code>/Library/Java/JavaVirtualMachines/</code> 目录下的 JDK 文件夹。此外，清理以下位置的内容：</p>\n<ul>\n<li><code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin</code></li>\n<li><code>/Library/PreferencePanes/JavaControlPanel.prefPane</code></li>\n<li><code>~/Library/Application Support/Oracle/Java</code></li>\n</ul>\n<h2 id=\"安装-Temurin-JDK\"><a class=\"headerlink\" href=\"#安装-Temurin-JDK\"></a>安装 Temurin JDK</h2>\n<p>在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。</p>\n<h3 id=\"步骤-4：配置-Homebrew-Cask-版本\"><a class=\"headerlink\" href=\"#步骤-4：配置-Homebrew-Cask-版本\"></a>步骤 4：配置 Homebrew Cask 版本</h3>\n<p>首先，确保你的 Homebrew 能够访问所有 cask 版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew search temurin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"步骤-5：安装-Temurin\"><a class=\"headerlink\" href=\"#步骤-5：安装-Temurin\"></a>步骤 5：安装 Temurin</h3>\n<p>现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token parameter variable\">--cask</span> temurin@8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Mac安装Maven","date":"2024-07-14T14:25:37.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151126918.webp","_content":"\n# Maven 环境设置：全面指南\n\n> Apache Maven 是 Java 项目的强大项目管理工具，可以自动化并简化构建过程。本指南将指导你完成在机器上设置 Maven 的步骤，包括安装 Java、Maven 以及配置开发环境。\n>\n\n## 前提条件\n在安装 Maven 之前，你需要确保计算机上已安装 Java 开发工具包（JDK）。Maven 3.3+ 需要 JDK 1.7 或更高版本才能运行。\n\n### 1. 检查 Java 安装\n打开终端并输入：\n```bash\njava -version\n```\n此命令将显示当前安装的 Java 版本。如果未安装 Java，请访问 [Mac 安装 JDK](https://blog.aixcc.top//2024/07/14/Mac安装JDK) 获取详细的安装教程\n\n## 下载 Maven\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi)。\n\n   ![](https://alist.aixcc.top/d/OneDrive/img/202407151215642.webp)\n\n2. 下载二进制归档文件（例如 `apache-maven-3.8.6-bin.tar.gz`）。\n\n## 安装 Maven\n1. 将下载的归档文件解压到你选择的目录。在基于 Unix 的系统上，一个常见的目录是 `/opt`。（也可以根据个人喜好选择其它目录）\n\n## 配置环境\n1. 使用文本编辑器打开你的 shell 配置文件（例如，如果你使用 zsh，则为 `.zshrc`）：\n   ```bash\n   vim ~/.zshrc\n   ```\n2. 将 Maven 二进制文件添加到你的 PATH：\n   ```bash\n   export PATH=/opt/apache-maven-3.8.6/bin:$PATH\n   ```\n3. 保存文件并应用更改：\n   ```bash\n   source ~/.zshrc\n   ```\n\n### 验证\n要验证 Maven 是否正确安装，请键入：\n```bash\nmvn -v\n```\n此命令应显示 Maven 版本、Java 版本和操作系统详细信息。\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151239977.webp)\n\n## 配置 Maven\n### 设置本地仓库\nMaven 将所有依赖项存储在本地。你可以在 Maven 配置文件中指定此仓库的自定义位置：\n\n编辑 `/opt/apache-maven-3.8.6/conf/settings.xml` 并添加以下内容：\n```xml\n<localRepository><存储路径></localRepository>\n# 例如<localRepository>/Users/lushiwu/Data/maven-repository</localRepository>\n```\n\n### 配置仓库镜像\n为了加速依赖项下载，配置如阿里云等镜像：\n\n在 `settings.xml` 文件的 `<mirrors>` 部分添加以下内容：\n```xml\n<mirror>\n  <id>aliyunmaven</id>\n  <mirrorOf>*</mirrorOf>\n  <name>阿里云 Maven 镜像</name>\n  <url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n```\n\n## 在 IntelliJ IDEA 中配置 Maven\n1. 打开 IntelliJ IDEA。\n2. 导航至 `设置` > `构建、执行、部署` > `构建工具` > `Maven`。\n3. 指定 `Maven 主目录` 为 `/opt/apache-maven-3.8.6`。\n4. 设置 `用户设置文件` 为你刚配置的 `settings.xml`。\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151215660.webp)\n","source":"_posts/Mac安装Maven.md","raw":"---\ntitle: Mac安装Maven\ndate: 2024-07-14 22:25:37\ntags:\n  - Mac\n  - Maven\ncategories: Mac\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151126918.webp\n---\n\n# Maven 环境设置：全面指南\n\n> Apache Maven 是 Java 项目的强大项目管理工具，可以自动化并简化构建过程。本指南将指导你完成在机器上设置 Maven 的步骤，包括安装 Java、Maven 以及配置开发环境。\n>\n\n## 前提条件\n在安装 Maven 之前，你需要确保计算机上已安装 Java 开发工具包（JDK）。Maven 3.3+ 需要 JDK 1.7 或更高版本才能运行。\n\n### 1. 检查 Java 安装\n打开终端并输入：\n```bash\njava -version\n```\n此命令将显示当前安装的 Java 版本。如果未安装 Java，请访问 [Mac 安装 JDK](https://blog.aixcc.top//2024/07/14/Mac安装JDK) 获取详细的安装教程\n\n## 下载 Maven\n1. 访问 [Maven 下载页面](https://maven.apache.org/download.cgi)。\n\n   ![](https://alist.aixcc.top/d/OneDrive/img/202407151215642.webp)\n\n2. 下载二进制归档文件（例如 `apache-maven-3.8.6-bin.tar.gz`）。\n\n## 安装 Maven\n1. 将下载的归档文件解压到你选择的目录。在基于 Unix 的系统上，一个常见的目录是 `/opt`。（也可以根据个人喜好选择其它目录）\n\n## 配置环境\n1. 使用文本编辑器打开你的 shell 配置文件（例如，如果你使用 zsh，则为 `.zshrc`）：\n   ```bash\n   vim ~/.zshrc\n   ```\n2. 将 Maven 二进制文件添加到你的 PATH：\n   ```bash\n   export PATH=/opt/apache-maven-3.8.6/bin:$PATH\n   ```\n3. 保存文件并应用更改：\n   ```bash\n   source ~/.zshrc\n   ```\n\n### 验证\n要验证 Maven 是否正确安装，请键入：\n```bash\nmvn -v\n```\n此命令应显示 Maven 版本、Java 版本和操作系统详细信息。\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151239977.webp)\n\n## 配置 Maven\n### 设置本地仓库\nMaven 将所有依赖项存储在本地。你可以在 Maven 配置文件中指定此仓库的自定义位置：\n\n编辑 `/opt/apache-maven-3.8.6/conf/settings.xml` 并添加以下内容：\n```xml\n<localRepository><存储路径></localRepository>\n# 例如<localRepository>/Users/lushiwu/Data/maven-repository</localRepository>\n```\n\n### 配置仓库镜像\n为了加速依赖项下载，配置如阿里云等镜像：\n\n在 `settings.xml` 文件的 `<mirrors>` 部分添加以下内容：\n```xml\n<mirror>\n  <id>aliyunmaven</id>\n  <mirrorOf>*</mirrorOf>\n  <name>阿里云 Maven 镜像</name>\n  <url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n```\n\n## 在 IntelliJ IDEA 中配置 Maven\n1. 打开 IntelliJ IDEA。\n2. 导航至 `设置` > `构建、执行、部署` > `构建工具` > `Maven`。\n3. 指定 `Maven 主目录` 为 `/opt/apache-maven-3.8.6`。\n4. 设置 `用户设置文件` 为你刚配置的 `settings.xml`。\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151215660.webp)\n","slug":"Mac安装Maven","published":1,"updated":"2024-07-15T04:41:18.465Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr5000dtuj8bqffepzz","content":"<h1 id=\"Maven-环境设置：全面指南\"><a class=\"headerlink\" href=\"#Maven-环境设置：全面指南\"></a>Maven 环境设置：全面指南</h1>\n<blockquote>\n<p>Apache Maven 是 Java 项目的强大项目管理工具，可以自动化并简化构建过程。本指南将指导你完成在机器上设置 Maven 的步骤，包括安装 Java、Maven 以及配置开发环境。</p>\n</blockquote>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在安装 Maven 之前，你需要确保计算机上已安装 Java 开发工具包（JDK）。Maven 3.3+ 需要 JDK 1.7 或更高版本才能运行。</p>\n<h3 id=\"1-检查-Java-安装\"><a class=\"headerlink\" href=\"#1-检查-Java-安装\"></a>1. 检查 Java 安装</h3>\n<p>打开终端并输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">java</span> <span class=\"token parameter variable\">-version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令将显示当前安装的 Java 版本。如果未安装 Java，请访问 <a href=\"https://blog.aixcc.top//2024/07/14/Mac%E5%AE%89%E8%A3%85JDK\">Mac 安装 JDK</a> 获取详细的安装教程</p>\n<h2 id=\"下载-Maven\"><a class=\"headerlink\" href=\"#下载-Maven\"></a>下载 Maven</h2>\n<ol>\n<li>\n<p>访问 <a href=\"https://maven.apache.org/download.cgi\">Maven 下载页面</a>。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215642.webp\" alt=\"\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>下载二进制归档文件（例如 <code>apache-maven-3.8.6-bin.tar.gz</code>）。</p>\n</li>\n</ol>\n<h2 id=\"安装-Maven\"><a class=\"headerlink\" href=\"#安装-Maven\"></a>安装 Maven</h2>\n<ol>\n<li>将下载的归档文件解压到你选择的目录。在基于 Unix 的系统上，一个常见的目录是 <code>/opt</code>。（也可以根据个人喜好选择其它目录）</li>\n</ol>\n<h2 id=\"配置环境\"><a class=\"headerlink\" href=\"#配置环境\"></a>配置环境</h2>\n<ol>\n<li>使用文本编辑器打开你的 shell 配置文件（例如，如果你使用 zsh，则为 <code>.zshrc</code>）：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>将 Maven 二进制文件添加到你的 PATH：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/opt/apache-maven-3.8.6/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>保存文件并应用更改：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"验证\"><a class=\"headerlink\" href=\"#验证\"></a>验证</h3>\n<p>要验证 Maven 是否正确安装，请键入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mvn <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令应显示 Maven 版本、Java 版本和操作系统详细信息。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151239977.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"配置-Maven\"><a class=\"headerlink\" href=\"#配置-Maven\"></a>配置 Maven</h2>\n<h3 id=\"设置本地仓库\"><a class=\"headerlink\" href=\"#设置本地仓库\"></a>设置本地仓库</h3>\n<p>Maven 将所有依赖项存储在本地。你可以在 Maven 配置文件中指定此仓库的自定义位置：</p>\n<p>编辑 <code>/opt/apache-maven-3.8.6/conf/settings.xml</code> 并添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>存储路径</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span>\n# 例如<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>/Users/lushiwu/Data/maven-repository<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"配置仓库镜像\"><a class=\"headerlink\" href=\"#配置仓库镜像\"></a>配置仓库镜像</h3>\n<p>为了加速依赖项下载，配置如阿里云等镜像：</p>\n<p>在 <code>settings.xml</code> 文件的 <code>&lt;mirrors&gt;</code> 部分添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>aliyunmaven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>阿里云 Maven 镜像<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://maven.aliyun.com/repository/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在-IntelliJ-IDEA-中配置-Maven\"><a class=\"headerlink\" href=\"#在-IntelliJ-IDEA-中配置-Maven\"></a>在 IntelliJ IDEA 中配置 Maven</h2>\n<ol>\n<li>打开 IntelliJ IDEA。</li>\n<li>导航至 <code>设置</code> &gt; <code>构建、执行、部署</code> &gt; <code>构建工具</code> &gt; <code>Maven</code>。</li>\n<li>指定 <code>Maven 主目录</code> 为 <code>/opt/apache-maven-3.8.6</code>。</li>\n<li>设置 <code>用户设置文件</code> 为你刚配置的 <code>settings.xml</code>。</li>\n</ol>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215660.webp\" alt=\"\" loading=\"lazy\"></p>\n","excerpt":"","more":"<h1 id=\"Maven-环境设置：全面指南\"><a class=\"headerlink\" href=\"#Maven-环境设置：全面指南\"></a>Maven 环境设置：全面指南</h1>\n<blockquote>\n<p>Apache Maven 是 Java 项目的强大项目管理工具，可以自动化并简化构建过程。本指南将指导你完成在机器上设置 Maven 的步骤，包括安装 Java、Maven 以及配置开发环境。</p>\n</blockquote>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在安装 Maven 之前，你需要确保计算机上已安装 Java 开发工具包（JDK）。Maven 3.3+ 需要 JDK 1.7 或更高版本才能运行。</p>\n<h3 id=\"1-检查-Java-安装\"><a class=\"headerlink\" href=\"#1-检查-Java-安装\"></a>1. 检查 Java 安装</h3>\n<p>打开终端并输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">java</span> <span class=\"token parameter variable\">-version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令将显示当前安装的 Java 版本。如果未安装 Java，请访问 <a href=\"https://blog.aixcc.top//2024/07/14/Mac%E5%AE%89%E8%A3%85JDK\">Mac 安装 JDK</a> 获取详细的安装教程</p>\n<h2 id=\"下载-Maven\"><a class=\"headerlink\" href=\"#下载-Maven\"></a>下载 Maven</h2>\n<ol>\n<li>\n<p>访问 <a href=\"https://maven.apache.org/download.cgi\">Maven 下载页面</a>。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215642.webp\" alt=\"\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>下载二进制归档文件（例如 <code>apache-maven-3.8.6-bin.tar.gz</code>）。</p>\n</li>\n</ol>\n<h2 id=\"安装-Maven\"><a class=\"headerlink\" href=\"#安装-Maven\"></a>安装 Maven</h2>\n<ol>\n<li>将下载的归档文件解压到你选择的目录。在基于 Unix 的系统上，一个常见的目录是 <code>/opt</code>。（也可以根据个人喜好选择其它目录）</li>\n</ol>\n<h2 id=\"配置环境\"><a class=\"headerlink\" href=\"#配置环境\"></a>配置环境</h2>\n<ol>\n<li>使用文本编辑器打开你的 shell 配置文件（例如，如果你使用 zsh，则为 <code>.zshrc</code>）：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>将 Maven 二进制文件添加到你的 PATH：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/opt/apache-maven-3.8.6/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>保存文件并应用更改：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"验证\"><a class=\"headerlink\" href=\"#验证\"></a>验证</h3>\n<p>要验证 Maven 是否正确安装，请键入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mvn <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令应显示 Maven 版本、Java 版本和操作系统详细信息。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151239977.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"配置-Maven\"><a class=\"headerlink\" href=\"#配置-Maven\"></a>配置 Maven</h2>\n<h3 id=\"设置本地仓库\"><a class=\"headerlink\" href=\"#设置本地仓库\"></a>设置本地仓库</h3>\n<p>Maven 将所有依赖项存储在本地。你可以在 Maven 配置文件中指定此仓库的自定义位置：</p>\n<p>编辑 <code>/opt/apache-maven-3.8.6/conf/settings.xml</code> 并添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>存储路径</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span>\n# 例如<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>/Users/lushiwu/Data/maven-repository<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"配置仓库镜像\"><a class=\"headerlink\" href=\"#配置仓库镜像\"></a>配置仓库镜像</h3>\n<p>为了加速依赖项下载，配置如阿里云等镜像：</p>\n<p>在 <code>settings.xml</code> 文件的 <code>&lt;mirrors&gt;</code> 部分添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>aliyunmaven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>阿里云 Maven 镜像<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://maven.aliyun.com/repository/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在-IntelliJ-IDEA-中配置-Maven\"><a class=\"headerlink\" href=\"#在-IntelliJ-IDEA-中配置-Maven\"></a>在 IntelliJ IDEA 中配置 Maven</h2>\n<ol>\n<li>打开 IntelliJ IDEA。</li>\n<li>导航至 <code>设置</code> &gt; <code>构建、执行、部署</code> &gt; <code>构建工具</code> &gt; <code>Maven</code>。</li>\n<li>指定 <code>Maven 主目录</code> 为 <code>/opt/apache-maven-3.8.6</code>。</li>\n<li>设置 <code>用户设置文件</code> 为你刚配置的 <code>settings.xml</code>。</li>\n</ol>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215660.webp\" alt=\"\" loading=\"lazy\"></p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"MyBatis应用与总结","date":"2024-06-26T09:53:37.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151140097.webp","_content":"\n# MyBatis常见面试题总结\n\n### #{} 和 ${} 的区别是什么？\n\n- `${}`是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。\n- `#{}`是 sql 的参数占位符，Mybatis 会将 sql 中`#{}`替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用`#{}`可以有效防止 sql 注入。\n\n","source":"_posts/MyBatis八股文.md","raw":"---\ntitle: MyBatis应用与总结\ndate: 2024-06-26 17:53:37\ntags:\n  - Java\n  - MyBatis\n  - 总结\ncategories: Java\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151140097.webp\n---\n\n# MyBatis常见面试题总结\n\n### #{} 和 ${} 的区别是什么？\n\n- `${}`是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。\n- `#{}`是 sql 的参数占位符，Mybatis 会将 sql 中`#{}`替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用`#{}`可以有效防止 sql 注入。\n\n","slug":"MyBatis八股文","published":1,"updated":"2024-07-15T03:44:59.263Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr6000etuj80v40fa2o","content":"<h1 id=\"MyBatis常见面试题总结\"><a class=\"headerlink\" href=\"#MyBatis常见面试题总结\"></a>MyBatis常见面试题总结</h1>\n<h3 id=\"和-的区别是什么？\"><a class=\"headerlink\" href=\"#和-的区别是什么？\"></a>#{} 和 ${} 的区别是什么？</h3>\n<ul>\n<li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。</li>\n<li><code>#&#123;&#125;</code>是 sql 的参数占位符，Mybatis 会将 sql 中<code>#&#123;&#125;</code>替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用<code>#&#123;&#125;</code>可以有效防止 sql 注入。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"MyBatis常见面试题总结\"><a class=\"headerlink\" href=\"#MyBatis常见面试题总结\"></a>MyBatis常见面试题总结</h1>\n<h3 id=\"和-的区别是什么？\"><a class=\"headerlink\" href=\"#和-的区别是什么？\"></a>#{} 和 ${} 的区别是什么？</h3>\n<ul>\n<li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。</li>\n<li><code>#&#123;&#125;</code>是 sql 的参数占位符，Mybatis 会将 sql 中<code>#&#123;&#125;</code>替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用<code>#&#123;&#125;</code>可以有效防止 sql 注入。</li>\n</ul>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"MySQL应用与总结","date":"2024-06-22T10:02:39.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151143784.webp","_content":"\n# 数据库\n\n## 索引\n\n### 为什么使用索引会加快查询？\n\n数据库文件是存储在磁盘上的，磁盘 I/O 是数据库操作中最耗时的部分之一。没有索引时，数据库会进行全表扫描（Sequential Scan），这意味着它必须读取表中的每一行数据来查找匹配的行（时间效率为 O(n)）。当表的数据量非常大时，就会导致大量的磁盘 I/O 操作。\n\n有了索引，就可以直接跳到索引指示的数据位置，而不必扫描整张表，从而大大减少了磁盘 I/O 操作的次数。\n\nMySQL 的 InnoDB 存储引擎默认使用 B+ 树来作为索引的数据结构，而 B+ 树的查询效率非常高，时间复杂度为 O(logN)。\n\n索引文件相较于数据库文件，体积小得多，查到索引之后再映射到数据库记录，查询效率就会高很多。\n\n索引就好像书的目录，通过目录去查找对应的章节内容会比一页一页的翻书快很多。\n\n### MySQL中的索引有哪些类型？\n\n- **B-Tree索引**：是MySQL中最常用的索引类型。适用于等值查询、范围查询、排序和分组操作。B-Tree索引的优点是查询效率高，尤其适合范围查询和排序操作，但对于频繁更新的列，索引维护成本较高。\n- **哈希索引**：通过哈希函数将键值映射到哈希表的位置，查找速度非常快。它适用于等值查询，但不支持范围查询、排序和分组。此外，哈希冲突会降低性能。\n- **全文索引**：用于全文搜索，支持对文本字段的关键词查询。它适合需要全文检索的场景，如搜索引擎和文章内容搜索，全文检索速度快，但建立和维护成本高，不适合实时更新的数据。\n- **空间索引**：（R-Tree索引）用于地理信息系统中的空间查询，适合多维数据的快速查询，如地理位置查询和地图服务。它能够有效地进行范围查询和最近邻查询，但不适合其他类型的数据，且建立和维护成本较高。\n- **前缀索引**：是对字符串类型的列的前几个字符创建索引，适用于字符串列较长且前缀部分区分度较高的场景。它能节省索引空间并提高查询效率，但只适用于前缀匹配查询，不支持全文匹配。\n- **聚簇索引**：决定数据在磁盘上的物理存储顺序，每个表只能有一个聚簇索引，通常是主键。它的数据访问速度快，特别适合范围查询，但更新开销较大，且非聚簇索引需要包含聚簇索引列作为引用。\n- **非聚簇索引**：的索引和数据分别存储，叶节点存储指向数据的指针。它的更新开销较小，可以有多个非聚簇索引，但查询时需要先访问索引再访问数据，速度略慢于聚簇索引。\n- **唯一索引**：确保索引列中的值是唯一的，适用于需要唯一性约束的场景，如用户名、电子邮件地址等。它能确保数据的唯一性，防止重复数据，但插入和更新时需要检查唯一性，开销较大。\n- **组合索引**：是对多个列创建的索引，能够提高多列查询的效率，适用于WHERE子句中涉及多列的查询。它能显著提高查询效率，但索引创建和维护成本较高，且需要考虑索引的顺序。\n\n## 日志\n\n### MySQL 日志文件有哪些？\n\n1. **错误日志**：记录 MySQL 服务器启动、运行或停止时出现的问题。\n2. **慢查询日志**：记录执行时间超过`long_query_time`值的所有 SQL 语句。这个时间值是可配置的，默认情况下，慢查询日志功能是关闭的。可以用来识别和优化慢 SQL。\n3. **一般查询日志**：记录所有 MySQL 服务器的链接信息以及所有的 SQL 语句，不论这些语句是否修改了数据。\n4. **二进制日志**：记录了所有修改数据库状态的 SQL 语句，以及每个语句的执行时间，如 INSERT、UPDATE、DELETE 等，但不包括 SELECT 和 SHOW 这类的操作。\n5. **重做日志**：记录对于`InnDB`表的每个写操作，不是 SQL 级的，而是物理级别的，主要用于崩溃恢复。\n6. **回滚日志**：记录数据被修改前的值，用于事务回滚。\n\n","source":"_posts/Myql八股文.md","raw":"---\ntitle: MySQL应用与总结\ndate: 2024-06-22 18:02:39\ntags:\n  - MySQL\n  - 总结\ncategories: MySQL\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151143784.webp\n---\n\n# 数据库\n\n## 索引\n\n### 为什么使用索引会加快查询？\n\n数据库文件是存储在磁盘上的，磁盘 I/O 是数据库操作中最耗时的部分之一。没有索引时，数据库会进行全表扫描（Sequential Scan），这意味着它必须读取表中的每一行数据来查找匹配的行（时间效率为 O(n)）。当表的数据量非常大时，就会导致大量的磁盘 I/O 操作。\n\n有了索引，就可以直接跳到索引指示的数据位置，而不必扫描整张表，从而大大减少了磁盘 I/O 操作的次数。\n\nMySQL 的 InnoDB 存储引擎默认使用 B+ 树来作为索引的数据结构，而 B+ 树的查询效率非常高，时间复杂度为 O(logN)。\n\n索引文件相较于数据库文件，体积小得多，查到索引之后再映射到数据库记录，查询效率就会高很多。\n\n索引就好像书的目录，通过目录去查找对应的章节内容会比一页一页的翻书快很多。\n\n### MySQL中的索引有哪些类型？\n\n- **B-Tree索引**：是MySQL中最常用的索引类型。适用于等值查询、范围查询、排序和分组操作。B-Tree索引的优点是查询效率高，尤其适合范围查询和排序操作，但对于频繁更新的列，索引维护成本较高。\n- **哈希索引**：通过哈希函数将键值映射到哈希表的位置，查找速度非常快。它适用于等值查询，但不支持范围查询、排序和分组。此外，哈希冲突会降低性能。\n- **全文索引**：用于全文搜索，支持对文本字段的关键词查询。它适合需要全文检索的场景，如搜索引擎和文章内容搜索，全文检索速度快，但建立和维护成本高，不适合实时更新的数据。\n- **空间索引**：（R-Tree索引）用于地理信息系统中的空间查询，适合多维数据的快速查询，如地理位置查询和地图服务。它能够有效地进行范围查询和最近邻查询，但不适合其他类型的数据，且建立和维护成本较高。\n- **前缀索引**：是对字符串类型的列的前几个字符创建索引，适用于字符串列较长且前缀部分区分度较高的场景。它能节省索引空间并提高查询效率，但只适用于前缀匹配查询，不支持全文匹配。\n- **聚簇索引**：决定数据在磁盘上的物理存储顺序，每个表只能有一个聚簇索引，通常是主键。它的数据访问速度快，特别适合范围查询，但更新开销较大，且非聚簇索引需要包含聚簇索引列作为引用。\n- **非聚簇索引**：的索引和数据分别存储，叶节点存储指向数据的指针。它的更新开销较小，可以有多个非聚簇索引，但查询时需要先访问索引再访问数据，速度略慢于聚簇索引。\n- **唯一索引**：确保索引列中的值是唯一的，适用于需要唯一性约束的场景，如用户名、电子邮件地址等。它能确保数据的唯一性，防止重复数据，但插入和更新时需要检查唯一性，开销较大。\n- **组合索引**：是对多个列创建的索引，能够提高多列查询的效率，适用于WHERE子句中涉及多列的查询。它能显著提高查询效率，但索引创建和维护成本较高，且需要考虑索引的顺序。\n\n## 日志\n\n### MySQL 日志文件有哪些？\n\n1. **错误日志**：记录 MySQL 服务器启动、运行或停止时出现的问题。\n2. **慢查询日志**：记录执行时间超过`long_query_time`值的所有 SQL 语句。这个时间值是可配置的，默认情况下，慢查询日志功能是关闭的。可以用来识别和优化慢 SQL。\n3. **一般查询日志**：记录所有 MySQL 服务器的链接信息以及所有的 SQL 语句，不论这些语句是否修改了数据。\n4. **二进制日志**：记录了所有修改数据库状态的 SQL 语句，以及每个语句的执行时间，如 INSERT、UPDATE、DELETE 等，但不包括 SELECT 和 SHOW 这类的操作。\n5. **重做日志**：记录对于`InnDB`表的每个写操作，不是 SQL 级的，而是物理级别的，主要用于崩溃恢复。\n6. **回滚日志**：记录数据被修改前的值，用于事务回滚。\n\n","slug":"Myql八股文","published":1,"updated":"2024-07-15T04:01:15.046Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr7000ituj83ylv5wkm","content":"<h1 id=\"数据库\"><a class=\"headerlink\" href=\"#数据库\"></a>数据库</h1>\n<h2 id=\"索引\"><a class=\"headerlink\" href=\"#索引\"></a>索引</h2>\n<h3 id=\"为什么使用索引会加快查询？\"><a class=\"headerlink\" href=\"#为什么使用索引会加快查询？\"></a>为什么使用索引会加快查询？</h3>\n<p>数据库文件是存储在磁盘上的，磁盘 I/O 是数据库操作中最耗时的部分之一。没有索引时，数据库会进行全表扫描（Sequential Scan），这意味着它必须读取表中的每一行数据来查找匹配的行（时间效率为 O(n)）。当表的数据量非常大时，就会导致大量的磁盘 I/O 操作。</p>\n<p>有了索引，就可以直接跳到索引指示的数据位置，而不必扫描整张表，从而大大减少了磁盘 I/O 操作的次数。</p>\n<p>MySQL 的 InnoDB 存储引擎默认使用 B+ 树来作为索引的数据结构，而 B+ 树的查询效率非常高，时间复杂度为 O(logN)。</p>\n<p>索引文件相较于数据库文件，体积小得多，查到索引之后再映射到数据库记录，查询效率就会高很多。</p>\n<p>索引就好像书的目录，通过目录去查找对应的章节内容会比一页一页的翻书快很多。</p>\n<h3 id=\"MySQL中的索引有哪些类型？\"><a class=\"headerlink\" href=\"#MySQL中的索引有哪些类型？\"></a>MySQL中的索引有哪些类型？</h3>\n<ul>\n<li><strong>B-Tree索引</strong>：是MySQL中最常用的索引类型。适用于等值查询、范围查询、排序和分组操作。B-Tree索引的优点是查询效率高，尤其适合范围查询和排序操作，但对于频繁更新的列，索引维护成本较高。</li>\n<li><strong>哈希索引</strong>：通过哈希函数将键值映射到哈希表的位置，查找速度非常快。它适用于等值查询，但不支持范围查询、排序和分组。此外，哈希冲突会降低性能。</li>\n<li><strong>全文索引</strong>：用于全文搜索，支持对文本字段的关键词查询。它适合需要全文检索的场景，如搜索引擎和文章内容搜索，全文检索速度快，但建立和维护成本高，不适合实时更新的数据。</li>\n<li><strong>空间索引</strong>：（R-Tree索引）用于地理信息系统中的空间查询，适合多维数据的快速查询，如地理位置查询和地图服务。它能够有效地进行范围查询和最近邻查询，但不适合其他类型的数据，且建立和维护成本较高。</li>\n<li><strong>前缀索引</strong>：是对字符串类型的列的前几个字符创建索引，适用于字符串列较长且前缀部分区分度较高的场景。它能节省索引空间并提高查询效率，但只适用于前缀匹配查询，不支持全文匹配。</li>\n<li><strong>聚簇索引</strong>：决定数据在磁盘上的物理存储顺序，每个表只能有一个聚簇索引，通常是主键。它的数据访问速度快，特别适合范围查询，但更新开销较大，且非聚簇索引需要包含聚簇索引列作为引用。</li>\n<li><strong>非聚簇索引</strong>：的索引和数据分别存储，叶节点存储指向数据的指针。它的更新开销较小，可以有多个非聚簇索引，但查询时需要先访问索引再访问数据，速度略慢于聚簇索引。</li>\n<li><strong>唯一索引</strong>：确保索引列中的值是唯一的，适用于需要唯一性约束的场景，如用户名、电子邮件地址等。它能确保数据的唯一性，防止重复数据，但插入和更新时需要检查唯一性，开销较大。</li>\n<li><strong>组合索引</strong>：是对多个列创建的索引，能够提高多列查询的效率，适用于WHERE子句中涉及多列的查询。它能显著提高查询效率，但索引创建和维护成本较高，且需要考虑索引的顺序。</li>\n</ul>\n<h2 id=\"日志\"><a class=\"headerlink\" href=\"#日志\"></a>日志</h2>\n<h3 id=\"MySQL-日志文件有哪些？\"><a class=\"headerlink\" href=\"#MySQL-日志文件有哪些？\"></a>MySQL 日志文件有哪些？</h3>\n<ol>\n<li><strong>错误日志</strong>：记录 MySQL 服务器启动、运行或停止时出现的问题。</li>\n<li><strong>慢查询日志</strong>：记录执行时间超过<code>long_query_time</code>值的所有 SQL 语句。这个时间值是可配置的，默认情况下，慢查询日志功能是关闭的。可以用来识别和优化慢 SQL。</li>\n<li><strong>一般查询日志</strong>：记录所有 MySQL 服务器的链接信息以及所有的 SQL 语句，不论这些语句是否修改了数据。</li>\n<li><strong>二进制日志</strong>：记录了所有修改数据库状态的 SQL 语句，以及每个语句的执行时间，如 INSERT、UPDATE、DELETE 等，但不包括 SELECT 和 SHOW 这类的操作。</li>\n<li><strong>重做日志</strong>：记录对于<code>InnDB</code>表的每个写操作，不是 SQL 级的，而是物理级别的，主要用于崩溃恢复。</li>\n<li><strong>回滚日志</strong>：记录数据被修改前的值，用于事务回滚。</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"数据库\"><a class=\"headerlink\" href=\"#数据库\"></a>数据库</h1>\n<h2 id=\"索引\"><a class=\"headerlink\" href=\"#索引\"></a>索引</h2>\n<h3 id=\"为什么使用索引会加快查询？\"><a class=\"headerlink\" href=\"#为什么使用索引会加快查询？\"></a>为什么使用索引会加快查询？</h3>\n<p>数据库文件是存储在磁盘上的，磁盘 I/O 是数据库操作中最耗时的部分之一。没有索引时，数据库会进行全表扫描（Sequential Scan），这意味着它必须读取表中的每一行数据来查找匹配的行（时间效率为 O(n)）。当表的数据量非常大时，就会导致大量的磁盘 I/O 操作。</p>\n<p>有了索引，就可以直接跳到索引指示的数据位置，而不必扫描整张表，从而大大减少了磁盘 I/O 操作的次数。</p>\n<p>MySQL 的 InnoDB 存储引擎默认使用 B+ 树来作为索引的数据结构，而 B+ 树的查询效率非常高，时间复杂度为 O(logN)。</p>\n<p>索引文件相较于数据库文件，体积小得多，查到索引之后再映射到数据库记录，查询效率就会高很多。</p>\n<p>索引就好像书的目录，通过目录去查找对应的章节内容会比一页一页的翻书快很多。</p>\n<h3 id=\"MySQL中的索引有哪些类型？\"><a class=\"headerlink\" href=\"#MySQL中的索引有哪些类型？\"></a>MySQL中的索引有哪些类型？</h3>\n<ul>\n<li><strong>B-Tree索引</strong>：是MySQL中最常用的索引类型。适用于等值查询、范围查询、排序和分组操作。B-Tree索引的优点是查询效率高，尤其适合范围查询和排序操作，但对于频繁更新的列，索引维护成本较高。</li>\n<li><strong>哈希索引</strong>：通过哈希函数将键值映射到哈希表的位置，查找速度非常快。它适用于等值查询，但不支持范围查询、排序和分组。此外，哈希冲突会降低性能。</li>\n<li><strong>全文索引</strong>：用于全文搜索，支持对文本字段的关键词查询。它适合需要全文检索的场景，如搜索引擎和文章内容搜索，全文检索速度快，但建立和维护成本高，不适合实时更新的数据。</li>\n<li><strong>空间索引</strong>：（R-Tree索引）用于地理信息系统中的空间查询，适合多维数据的快速查询，如地理位置查询和地图服务。它能够有效地进行范围查询和最近邻查询，但不适合其他类型的数据，且建立和维护成本较高。</li>\n<li><strong>前缀索引</strong>：是对字符串类型的列的前几个字符创建索引，适用于字符串列较长且前缀部分区分度较高的场景。它能节省索引空间并提高查询效率，但只适用于前缀匹配查询，不支持全文匹配。</li>\n<li><strong>聚簇索引</strong>：决定数据在磁盘上的物理存储顺序，每个表只能有一个聚簇索引，通常是主键。它的数据访问速度快，特别适合范围查询，但更新开销较大，且非聚簇索引需要包含聚簇索引列作为引用。</li>\n<li><strong>非聚簇索引</strong>：的索引和数据分别存储，叶节点存储指向数据的指针。它的更新开销较小，可以有多个非聚簇索引，但查询时需要先访问索引再访问数据，速度略慢于聚簇索引。</li>\n<li><strong>唯一索引</strong>：确保索引列中的值是唯一的，适用于需要唯一性约束的场景，如用户名、电子邮件地址等。它能确保数据的唯一性，防止重复数据，但插入和更新时需要检查唯一性，开销较大。</li>\n<li><strong>组合索引</strong>：是对多个列创建的索引，能够提高多列查询的效率，适用于WHERE子句中涉及多列的查询。它能显著提高查询效率，但索引创建和维护成本较高，且需要考虑索引的顺序。</li>\n</ul>\n<h2 id=\"日志\"><a class=\"headerlink\" href=\"#日志\"></a>日志</h2>\n<h3 id=\"MySQL-日志文件有哪些？\"><a class=\"headerlink\" href=\"#MySQL-日志文件有哪些？\"></a>MySQL 日志文件有哪些？</h3>\n<ol>\n<li><strong>错误日志</strong>：记录 MySQL 服务器启动、运行或停止时出现的问题。</li>\n<li><strong>慢查询日志</strong>：记录执行时间超过<code>long_query_time</code>值的所有 SQL 语句。这个时间值是可配置的，默认情况下，慢查询日志功能是关闭的。可以用来识别和优化慢 SQL。</li>\n<li><strong>一般查询日志</strong>：记录所有 MySQL 服务器的链接信息以及所有的 SQL 语句，不论这些语句是否修改了数据。</li>\n<li><strong>二进制日志</strong>：记录了所有修改数据库状态的 SQL 语句，以及每个语句的执行时间，如 INSERT、UPDATE、DELETE 等，但不包括 SELECT 和 SHOW 这类的操作。</li>\n<li><strong>重做日志</strong>：记录对于<code>InnDB</code>表的每个写操作，不是 SQL 级的，而是物理级别的，主要用于崩溃恢复。</li>\n<li><strong>回滚日志</strong>：记录数据被修改前的值，用于事务回滚。</li>\n</ol>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"RabbitMQ应用与总结","date":"2024-06-26T15:14:15.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151141368.webp","_content":"\n## RabbitMQ常见面试题总结\n\n### 什么是 RabbitMQ？\n\nRabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。\n\n\n\n### RabbitMQ 的组件有哪些？\n\n#### 1. Producer（生产者）\n\n- 生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。\n- 生成者负责创建和发送消息，不直接与队列通信。\n\n#### 2. Exchange（交换器）\n\n- 交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。\n- 交换器有不同类型，主要包括：`direct`、`topic`、`fanout`和`headers`。\n\n##### Exchange 类型\n\n- **Direct Exchange**：根据消息的路由键完全匹配队列的绑定键进行路由。\n- **Topic Exchange**：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。\n- **Fanout Exchange**：将消息广播到所有与该交换器绑定的队列，不考虑路由键。\n- **Headers Exchange**：根据消息的头属性进行路由，相对较少使用。\n\n#### 3. Queue（队列）\n\n- 队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。\n- 队列按照先进先出的顺序存储消息，可以持久化、镜像等。\n\n#### 4. Bindng（绑定）\n\n- 绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。\n- 绑定可以包含路由键和绑定参数，用于匹配消息的路由键。\n\n#### 5. Consumer（消费者）\n\n- 消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。\n\n- 消费者可以是主动拉取消息，也可以是被动推送消息。\n\n\n#### 6. Connection（连接）和Channel（信道）\n\n- 连接是应用程序与 RabbitMQ 之间的 TCP 连接。\n- 信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。\n\n#### 7. Virtual Host（虚拟机）\n\n- 虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。\n\n#### 8. Broker（代理服务器）\n\n- Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。\n\n","source":"_posts/RabbitMQ八股文.md","raw":"---\ntitle: RabbitMQ应用与总结\ndate: 2024-06-26 23:14:15\ntags:\n  - RabbitMQ\n  - 总结\n  - Java\ncategories: Java\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151141368.webp\n---\n\n## RabbitMQ常见面试题总结\n\n### 什么是 RabbitMQ？\n\nRabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。\n\n\n\n### RabbitMQ 的组件有哪些？\n\n#### 1. Producer（生产者）\n\n- 生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。\n- 生成者负责创建和发送消息，不直接与队列通信。\n\n#### 2. Exchange（交换器）\n\n- 交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。\n- 交换器有不同类型，主要包括：`direct`、`topic`、`fanout`和`headers`。\n\n##### Exchange 类型\n\n- **Direct Exchange**：根据消息的路由键完全匹配队列的绑定键进行路由。\n- **Topic Exchange**：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。\n- **Fanout Exchange**：将消息广播到所有与该交换器绑定的队列，不考虑路由键。\n- **Headers Exchange**：根据消息的头属性进行路由，相对较少使用。\n\n#### 3. Queue（队列）\n\n- 队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。\n- 队列按照先进先出的顺序存储消息，可以持久化、镜像等。\n\n#### 4. Bindng（绑定）\n\n- 绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。\n- 绑定可以包含路由键和绑定参数，用于匹配消息的路由键。\n\n#### 5. Consumer（消费者）\n\n- 消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。\n\n- 消费者可以是主动拉取消息，也可以是被动推送消息。\n\n\n#### 6. Connection（连接）和Channel（信道）\n\n- 连接是应用程序与 RabbitMQ 之间的 TCP 连接。\n- 信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。\n\n#### 7. Virtual Host（虚拟机）\n\n- 虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。\n\n#### 8. Broker（代理服务器）\n\n- Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。\n\n","slug":"RabbitMQ八股文","published":1,"updated":"2024-07-15T03:43:12.657Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr8000jtuj897jqh4j4","content":"<h2 id=\"RabbitMQ常见面试题总结\"><a class=\"headerlink\" href=\"#RabbitMQ常见面试题总结\"></a>RabbitMQ常见面试题总结</h2>\n<h3 id=\"什么是-RabbitMQ？\"><a class=\"headerlink\" href=\"#什么是-RabbitMQ？\"></a>什么是 RabbitMQ？</h3>\n<p>RabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。</p>\n<h3 id=\"RabbitMQ-的组件有哪些？\"><a class=\"headerlink\" href=\"#RabbitMQ-的组件有哪些？\"></a>RabbitMQ 的组件有哪些？</h3>\n<h4 id=\"1-Producer（生产者）\"><a class=\"headerlink\" href=\"#1-Producer（生产者）\"></a>1. Producer（生产者）</h4>\n<ul>\n<li>生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。</li>\n<li>生成者负责创建和发送消息，不直接与队列通信。</li>\n</ul>\n<h4 id=\"2-Exchange（交换器）\"><a class=\"headerlink\" href=\"#2-Exchange（交换器）\"></a>2. Exchange（交换器）</h4>\n<ul>\n<li>交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。</li>\n<li>交换器有不同类型，主要包括：<code>direct</code>、<code>topic</code>、<code>fanout</code>和<code>headers</code>。</li>\n</ul>\n<h5 id=\"Exchange-类型\"><a class=\"headerlink\" href=\"#Exchange-类型\"></a>Exchange 类型</h5>\n<ul>\n<li><strong>Direct Exchange</strong>：根据消息的路由键完全匹配队列的绑定键进行路由。</li>\n<li><strong>Topic Exchange</strong>：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。</li>\n<li><strong>Fanout Exchange</strong>：将消息广播到所有与该交换器绑定的队列，不考虑路由键。</li>\n<li><strong>Headers Exchange</strong>：根据消息的头属性进行路由，相对较少使用。</li>\n</ul>\n<h4 id=\"3-Queue（队列）\"><a class=\"headerlink\" href=\"#3-Queue（队列）\"></a>3. Queue（队列）</h4>\n<ul>\n<li>队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。</li>\n<li>队列按照先进先出的顺序存储消息，可以持久化、镜像等。</li>\n</ul>\n<h4 id=\"4-Bindng（绑定）\"><a class=\"headerlink\" href=\"#4-Bindng（绑定）\"></a>4. Bindng（绑定）</h4>\n<ul>\n<li>绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。</li>\n<li>绑定可以包含路由键和绑定参数，用于匹配消息的路由键。</li>\n</ul>\n<h4 id=\"5-Consumer（消费者）\"><a class=\"headerlink\" href=\"#5-Consumer（消费者）\"></a>5. Consumer（消费者）</h4>\n<ul>\n<li>\n<p>消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。</p>\n</li>\n<li>\n<p>消费者可以是主动拉取消息，也可以是被动推送消息。</p>\n</li>\n</ul>\n<h4 id=\"6-Connection（连接）和Channel（信道）\"><a class=\"headerlink\" href=\"#6-Connection（连接）和Channel（信道）\"></a>6. Connection（连接）和Channel（信道）</h4>\n<ul>\n<li>连接是应用程序与 RabbitMQ 之间的 TCP 连接。</li>\n<li>信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。</li>\n</ul>\n<h4 id=\"7-Virtual-Host（虚拟机）\"><a class=\"headerlink\" href=\"#7-Virtual-Host（虚拟机）\"></a>7. Virtual Host（虚拟机）</h4>\n<ul>\n<li>虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。</li>\n</ul>\n<h4 id=\"8-Broker（代理服务器）\"><a class=\"headerlink\" href=\"#8-Broker（代理服务器）\"></a>8. Broker（代理服务器）</h4>\n<ul>\n<li>Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"RabbitMQ常见面试题总结\"><a class=\"headerlink\" href=\"#RabbitMQ常见面试题总结\"></a>RabbitMQ常见面试题总结</h2>\n<h3 id=\"什么是-RabbitMQ？\"><a class=\"headerlink\" href=\"#什么是-RabbitMQ？\"></a>什么是 RabbitMQ？</h3>\n<p>RabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。</p>\n<h3 id=\"RabbitMQ-的组件有哪些？\"><a class=\"headerlink\" href=\"#RabbitMQ-的组件有哪些？\"></a>RabbitMQ 的组件有哪些？</h3>\n<h4 id=\"1-Producer（生产者）\"><a class=\"headerlink\" href=\"#1-Producer（生产者）\"></a>1. Producer（生产者）</h4>\n<ul>\n<li>生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。</li>\n<li>生成者负责创建和发送消息，不直接与队列通信。</li>\n</ul>\n<h4 id=\"2-Exchange（交换器）\"><a class=\"headerlink\" href=\"#2-Exchange（交换器）\"></a>2. Exchange（交换器）</h4>\n<ul>\n<li>交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。</li>\n<li>交换器有不同类型，主要包括：<code>direct</code>、<code>topic</code>、<code>fanout</code>和<code>headers</code>。</li>\n</ul>\n<h5 id=\"Exchange-类型\"><a class=\"headerlink\" href=\"#Exchange-类型\"></a>Exchange 类型</h5>\n<ul>\n<li><strong>Direct Exchange</strong>：根据消息的路由键完全匹配队列的绑定键进行路由。</li>\n<li><strong>Topic Exchange</strong>：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。</li>\n<li><strong>Fanout Exchange</strong>：将消息广播到所有与该交换器绑定的队列，不考虑路由键。</li>\n<li><strong>Headers Exchange</strong>：根据消息的头属性进行路由，相对较少使用。</li>\n</ul>\n<h4 id=\"3-Queue（队列）\"><a class=\"headerlink\" href=\"#3-Queue（队列）\"></a>3. Queue（队列）</h4>\n<ul>\n<li>队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。</li>\n<li>队列按照先进先出的顺序存储消息，可以持久化、镜像等。</li>\n</ul>\n<h4 id=\"4-Bindng（绑定）\"><a class=\"headerlink\" href=\"#4-Bindng（绑定）\"></a>4. Bindng（绑定）</h4>\n<ul>\n<li>绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。</li>\n<li>绑定可以包含路由键和绑定参数，用于匹配消息的路由键。</li>\n</ul>\n<h4 id=\"5-Consumer（消费者）\"><a class=\"headerlink\" href=\"#5-Consumer（消费者）\"></a>5. Consumer（消费者）</h4>\n<ul>\n<li>\n<p>消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。</p>\n</li>\n<li>\n<p>消费者可以是主动拉取消息，也可以是被动推送消息。</p>\n</li>\n</ul>\n<h4 id=\"6-Connection（连接）和Channel（信道）\"><a class=\"headerlink\" href=\"#6-Connection（连接）和Channel（信道）\"></a>6. Connection（连接）和Channel（信道）</h4>\n<ul>\n<li>连接是应用程序与 RabbitMQ 之间的 TCP 连接。</li>\n<li>信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。</li>\n</ul>\n<h4 id=\"7-Virtual-Host（虚拟机）\"><a class=\"headerlink\" href=\"#7-Virtual-Host（虚拟机）\"></a>7. Virtual Host（虚拟机）</h4>\n<ul>\n<li>虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。</li>\n</ul>\n<h4 id=\"8-Broker（代理服务器）\"><a class=\"headerlink\" href=\"#8-Broker（代理服务器）\"></a>8. Broker（代理服务器）</h4>\n<ul>\n<li>Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。</li>\n</ul>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Redis应用与总结","date":"2024-06-26T12:18:49.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151132401.webp","_content":"\n## Redis 常见面试题总结\n\n### Redis 为什么这么快？\n\n1. Redis 基于内存，内存的访问速度比磁盘块很多；\n\n2. Redis 主要是单线程事件循环和 IO 多路复用；\n\n3. Redis 内置了多重优化过后的数据类型、结构实现，性能非常高\n\n4. Redis 通信协议实现简单且解析高效。\n\n   #### 为什么不直接使用 Redis 当主数据库呢？\n\n   主要是因为内存成本太高且 Redis 提供的数据持久化仍然会有数据丢失风险。\n\n### 为什么用 Redis？\n\n1. 访问速度更快\n\n2. 高并发\n\n3. 功能全面\n\n   Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。\n\n\n\n### Redis 除了做缓存，还能做什么？\n\n- **分布式锁**：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。\n- **限流**：一半通过 Redis 和 Lua 脚本的方式来实现限流。如果不想写 Lua 脚本的话，也可以直接利用 Redisson中的`RRateLimiter`来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。\n- **消息队列**：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。\n- **延时队列**：Redisson 内置了延时队列（基于 Sorted Set 实现的）。\n- **分布式 Session**：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。\n\n### Redis 常用的数据类型有哪些？\n\n- **5 种基本数据类型**：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\n- **3 种特殊数据类型**：HyperLogLog（基数统计）、Bitmap（位图）、Geospatial（地理位置）。\n\n\n\n### String 的应用场景有哪些？\n\nString 是 Redis 中最简单同时也是最常用的一个数据类型。可以用来存储任何类型的数据。\n\n- 常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；\n- 计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\n- 分布式锁（利用`SETNX key value`命令可以实现一个最简易的分布式锁）；\n\n\n\n### Redis 持久化机制\n\nRedis提供了两种主要的持久化机制：RDB（Redis DataBase）快照和 AOF(Append Only File）日志。这两种机制各有特点，满足不同的持久化需求。\n\n1. **RDB（Redis DataBase）快照**\n\n   RDB 持久化是指在指定的时间间隔内将 Redis 的内存数据生成快照并保存到磁盘。它会创建一个二进制文件（通常是 dump.rdb），包含某个时间点上的数据。\n\n   ​\t**优点：**\n\n   ​\tRDB 文件是一个紧凑的二进制文件，可以较快地进行备份和恢复。\n\n   ​\tRDB 文件保存时不会对 Redis 的性能产生显著的影响，适合用于大规模数据的冷备份。\n\n   ​\t**缺点：**\n\n   ​\tRDB 快照是定期进行的，如果 Redis 意外宕机，可能会丢失最后一次快照之后的所有数据。\n\n   ​\tRDB 快照需要较长的时间进行，所以不适用于需要频繁备份的数据场景。\n\n2. **AOF（Append Only File）日志**\n\n   AOF 持久化记录每个写操作到日志文件中（通常是 appendonly.aof），Redis 可以通过重新执行日志中的命令来恢复数据。AOF日志文件默认不定期压缩，以减小文件体积。\n\n\n​\t\t**优点：**\n\n​\t\tAOF可以提供更高的数据持久性，因为它记录每次写操作，数据丢失的窗口更小。\n\n​\t\tAOF 文件是可读的文本文件，便于分析和调试。\n\n​\t\t**缺点：**\n\n​\t\tAOF 文件通常比 RDB 文件更大，恢复速度相对慢。\n\n​\t\tAOF在每次写操作时都会记录日志，可能会对 Redis 性能产生一定影响，特别是在写操作频繁的情况下。\n\n#### 混合持久化\n\nRedis 4.0 引入了混合持久化（Hybid Persistence），结合了 RDB 和 AOF 的优点。在进行快照时，将当前的 RDB 快照和 AOF 日志混合存储，以提高数据恢复速度和性能。\n\n\n\n### 缓存穿透\n\n#### 什么是缓存穿透？\n\n缓存穿透是指查询一个在缓存和数据库中都不存在的数据，每次请求都会穿透缓存直接查询数据库，可能导致数据库压力过大。\n\n#### 有哪些解决办法？\n\n最基本的就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。\n\n比如查询数据库 id 不能小于 0、传入邮箱格式不对的时候直接返回错误信息给客户端等等。\n\n##### 1. 使用缓存空值\n\n将查询结果为空的数据也缓存起来，但要设置一个较短的过期时间，防止缓存中大量的空值数据占用内存。\n\n##### 2. 布隆过滤器\n\n布隆过滤器是一种概率型数据结构，可以用来判断一个元素是否在一个集合中。将所有可能存在查询条件都存入布隆过滤器，在查询缓存和数据库之前先通过布隆过滤器进行判断，如果布隆过滤器判断该元素不存在，则直接返回。\n\n##### 3. 接口限流\n\n根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采用黑名单机制，例如将异常 IP 列入黑名单。\n\n\n\n### 缓存击穿\n\n#### 什么是缓存击穿？\n\n缓存击穿是指某些缓存中的热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到了数据库，对数据库造成了巨大的压力，通常发生在缓存中存放的热门数据突然过期的情况下。\n\n#### 有哪些解决方法？\n\n##### 1. 永不过期\n\n将热点数据设置为永不过期，防止其被清除出缓存，从而避免缓存失效带来的问题。\n\n##### 2.提前预热\n\n在系统启动或业务高峰期来临之前，提前将热点数据加载到缓存中，避免缓存过期。\n\n##### 3. 加锁\n\n当缓存失效时，使用分布式锁来控制只有一个请求可以访问数据库并重建缓存，其余请求等待缓存重建完成后再访问缓存。\n\n\n\n#### 缓存穿透和缓存击穿有什么区别？\n\n- 缓存穿透是查询一个在缓存和数据中都不存在的数据。\n\n- 缓存击穿是缓存中热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到数据库。\n\n\n\n### 缓存雪崩\n\n#### 什么是缓存雪崩？\n\n缓存雪崩是指缓存中大量数据在同一时间过期或者缓存服务器宕机了，导致大量请求直接访问数据库，与缓存击穿不同的是，缓存雪崩涉及大量缓存同时失效或缓存服务不可用。\n\n#### 有哪些解决方法？\n\n##### 针对Redis 服务不可用的情况：\n\n1. **Redis 集群**：采用 Redis 集群，避免单机出现问题整个缓存服务器都无法使用。\n2. **多级缓存**：通过构建多级缓存（如本地缓存和分布式缓存），在缓存失效时优先从本地缓存读取数据，减轻数据库压力。\n\n##### 针对大量缓存同时失效的情况:\n\n1. **过期时间随机化**：避免大量缓存在同一时间失效，可以设置缓存数据过期时间增加一个随机值，使缓存数据的过期时间分散。\n2. **缓存预热**：在系统启动或流量高峰前，提前将热点数据加载到缓存中，避免缓存雪崩。\n3. **主动更新**：对于经常更新的热点数据，可以在其过期之前主动更新缓存，确保缓存中的数据始终有效。\n\n\n\n### 如何保证缓存和数据库数据一致性？\n\n#### 1. Cache Aside Pattern（旁路缓存模式）\n\n当需要读取数据时，先从缓存读取，若缓存未命中，再从数据库读取，并将数据写入缓存。当数据更新时，先更新数据库，然后使缓存失效。\n\n#### 2. Write Through Cache（写直达缓存）\n\n所有的数据更新操作都会先写入缓存，再写入数据库，这样可以确保缓存和数据库的一致性，但写操作的性能会受到一定影响。\n\n#### 3. Write Behind Cache（异步写缓存）\n\n写操作会先写入缓存，并在后台异步更新数据库。这种方式可以提高操作的性能，但实现和维护比较复杂。\n\n#### 4. Cache and Database Double Write（双写一致性）\n\n确保每次写操作，同时更新缓存和数据库。需要通过合适的事务机制或分布式锁来保证这两个操作的原子性。\n\n#### 5. 使用消息队列实现最终一致性\n\n写操作更新数据库后，将更新时间发送到消息队列，消费者接收消息后更新缓存，实现最终一致性。\n\n#### 总结\n\n- **Cache Aside Pattern（旁路缓存模式）**：读操作先查缓存，缓存未命中再查数据库，写操作先更新数据库，再使缓存失效。\n- **Write Through Cache（写直达缓存）**：写操作先更新缓存，再同步更新数据库。\n- **Write Behind Cache（异步写缓存）**：写操作先更新缓存，再异步批量更新数据库。\n- **双写一致性（Cache and Database Double Write）**：写操作时同时更新缓存和数据库，确保原子性。\n- **使用消息队列实现最终一致性**：更新数据库后发送消息队列，消费者接收消息后更新缓存，实现最终一致性。\n","source":"_posts/Redis八股文.md","raw":"---\ntitle: Redis应用与总结\ndate: 2024-06-26 20:18:49\ntags: \n  - Redis\n  - 总结\ncategories: Java\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151132401.webp\n---\n\n## Redis 常见面试题总结\n\n### Redis 为什么这么快？\n\n1. Redis 基于内存，内存的访问速度比磁盘块很多；\n\n2. Redis 主要是单线程事件循环和 IO 多路复用；\n\n3. Redis 内置了多重优化过后的数据类型、结构实现，性能非常高\n\n4. Redis 通信协议实现简单且解析高效。\n\n   #### 为什么不直接使用 Redis 当主数据库呢？\n\n   主要是因为内存成本太高且 Redis 提供的数据持久化仍然会有数据丢失风险。\n\n### 为什么用 Redis？\n\n1. 访问速度更快\n\n2. 高并发\n\n3. 功能全面\n\n   Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。\n\n\n\n### Redis 除了做缓存，还能做什么？\n\n- **分布式锁**：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。\n- **限流**：一半通过 Redis 和 Lua 脚本的方式来实现限流。如果不想写 Lua 脚本的话，也可以直接利用 Redisson中的`RRateLimiter`来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。\n- **消息队列**：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。\n- **延时队列**：Redisson 内置了延时队列（基于 Sorted Set 实现的）。\n- **分布式 Session**：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。\n\n### Redis 常用的数据类型有哪些？\n\n- **5 种基本数据类型**：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\n- **3 种特殊数据类型**：HyperLogLog（基数统计）、Bitmap（位图）、Geospatial（地理位置）。\n\n\n\n### String 的应用场景有哪些？\n\nString 是 Redis 中最简单同时也是最常用的一个数据类型。可以用来存储任何类型的数据。\n\n- 常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；\n- 计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；\n- 分布式锁（利用`SETNX key value`命令可以实现一个最简易的分布式锁）；\n\n\n\n### Redis 持久化机制\n\nRedis提供了两种主要的持久化机制：RDB（Redis DataBase）快照和 AOF(Append Only File）日志。这两种机制各有特点，满足不同的持久化需求。\n\n1. **RDB（Redis DataBase）快照**\n\n   RDB 持久化是指在指定的时间间隔内将 Redis 的内存数据生成快照并保存到磁盘。它会创建一个二进制文件（通常是 dump.rdb），包含某个时间点上的数据。\n\n   ​\t**优点：**\n\n   ​\tRDB 文件是一个紧凑的二进制文件，可以较快地进行备份和恢复。\n\n   ​\tRDB 文件保存时不会对 Redis 的性能产生显著的影响，适合用于大规模数据的冷备份。\n\n   ​\t**缺点：**\n\n   ​\tRDB 快照是定期进行的，如果 Redis 意外宕机，可能会丢失最后一次快照之后的所有数据。\n\n   ​\tRDB 快照需要较长的时间进行，所以不适用于需要频繁备份的数据场景。\n\n2. **AOF（Append Only File）日志**\n\n   AOF 持久化记录每个写操作到日志文件中（通常是 appendonly.aof），Redis 可以通过重新执行日志中的命令来恢复数据。AOF日志文件默认不定期压缩，以减小文件体积。\n\n\n​\t\t**优点：**\n\n​\t\tAOF可以提供更高的数据持久性，因为它记录每次写操作，数据丢失的窗口更小。\n\n​\t\tAOF 文件是可读的文本文件，便于分析和调试。\n\n​\t\t**缺点：**\n\n​\t\tAOF 文件通常比 RDB 文件更大，恢复速度相对慢。\n\n​\t\tAOF在每次写操作时都会记录日志，可能会对 Redis 性能产生一定影响，特别是在写操作频繁的情况下。\n\n#### 混合持久化\n\nRedis 4.0 引入了混合持久化（Hybid Persistence），结合了 RDB 和 AOF 的优点。在进行快照时，将当前的 RDB 快照和 AOF 日志混合存储，以提高数据恢复速度和性能。\n\n\n\n### 缓存穿透\n\n#### 什么是缓存穿透？\n\n缓存穿透是指查询一个在缓存和数据库中都不存在的数据，每次请求都会穿透缓存直接查询数据库，可能导致数据库压力过大。\n\n#### 有哪些解决办法？\n\n最基本的就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。\n\n比如查询数据库 id 不能小于 0、传入邮箱格式不对的时候直接返回错误信息给客户端等等。\n\n##### 1. 使用缓存空值\n\n将查询结果为空的数据也缓存起来，但要设置一个较短的过期时间，防止缓存中大量的空值数据占用内存。\n\n##### 2. 布隆过滤器\n\n布隆过滤器是一种概率型数据结构，可以用来判断一个元素是否在一个集合中。将所有可能存在查询条件都存入布隆过滤器，在查询缓存和数据库之前先通过布隆过滤器进行判断，如果布隆过滤器判断该元素不存在，则直接返回。\n\n##### 3. 接口限流\n\n根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采用黑名单机制，例如将异常 IP 列入黑名单。\n\n\n\n### 缓存击穿\n\n#### 什么是缓存击穿？\n\n缓存击穿是指某些缓存中的热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到了数据库，对数据库造成了巨大的压力，通常发生在缓存中存放的热门数据突然过期的情况下。\n\n#### 有哪些解决方法？\n\n##### 1. 永不过期\n\n将热点数据设置为永不过期，防止其被清除出缓存，从而避免缓存失效带来的问题。\n\n##### 2.提前预热\n\n在系统启动或业务高峰期来临之前，提前将热点数据加载到缓存中，避免缓存过期。\n\n##### 3. 加锁\n\n当缓存失效时，使用分布式锁来控制只有一个请求可以访问数据库并重建缓存，其余请求等待缓存重建完成后再访问缓存。\n\n\n\n#### 缓存穿透和缓存击穿有什么区别？\n\n- 缓存穿透是查询一个在缓存和数据中都不存在的数据。\n\n- 缓存击穿是缓存中热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到数据库。\n\n\n\n### 缓存雪崩\n\n#### 什么是缓存雪崩？\n\n缓存雪崩是指缓存中大量数据在同一时间过期或者缓存服务器宕机了，导致大量请求直接访问数据库，与缓存击穿不同的是，缓存雪崩涉及大量缓存同时失效或缓存服务不可用。\n\n#### 有哪些解决方法？\n\n##### 针对Redis 服务不可用的情况：\n\n1. **Redis 集群**：采用 Redis 集群，避免单机出现问题整个缓存服务器都无法使用。\n2. **多级缓存**：通过构建多级缓存（如本地缓存和分布式缓存），在缓存失效时优先从本地缓存读取数据，减轻数据库压力。\n\n##### 针对大量缓存同时失效的情况:\n\n1. **过期时间随机化**：避免大量缓存在同一时间失效，可以设置缓存数据过期时间增加一个随机值，使缓存数据的过期时间分散。\n2. **缓存预热**：在系统启动或流量高峰前，提前将热点数据加载到缓存中，避免缓存雪崩。\n3. **主动更新**：对于经常更新的热点数据，可以在其过期之前主动更新缓存，确保缓存中的数据始终有效。\n\n\n\n### 如何保证缓存和数据库数据一致性？\n\n#### 1. Cache Aside Pattern（旁路缓存模式）\n\n当需要读取数据时，先从缓存读取，若缓存未命中，再从数据库读取，并将数据写入缓存。当数据更新时，先更新数据库，然后使缓存失效。\n\n#### 2. Write Through Cache（写直达缓存）\n\n所有的数据更新操作都会先写入缓存，再写入数据库，这样可以确保缓存和数据库的一致性，但写操作的性能会受到一定影响。\n\n#### 3. Write Behind Cache（异步写缓存）\n\n写操作会先写入缓存，并在后台异步更新数据库。这种方式可以提高操作的性能，但实现和维护比较复杂。\n\n#### 4. Cache and Database Double Write（双写一致性）\n\n确保每次写操作，同时更新缓存和数据库。需要通过合适的事务机制或分布式锁来保证这两个操作的原子性。\n\n#### 5. 使用消息队列实现最终一致性\n\n写操作更新数据库后，将更新时间发送到消息队列，消费者接收消息后更新缓存，实现最终一致性。\n\n#### 总结\n\n- **Cache Aside Pattern（旁路缓存模式）**：读操作先查缓存，缓存未命中再查数据库，写操作先更新数据库，再使缓存失效。\n- **Write Through Cache（写直达缓存）**：写操作先更新缓存，再同步更新数据库。\n- **Write Behind Cache（异步写缓存）**：写操作先更新缓存，再异步批量更新数据库。\n- **双写一致性（Cache and Database Double Write）**：写操作时同时更新缓存和数据库，确保原子性。\n- **使用消息队列实现最终一致性**：更新数据库后发送消息队列，消费者接收消息后更新缓存，实现最终一致性。\n","slug":"Redis八股文","published":1,"updated":"2024-07-15T03:43:26.137Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xr9000ntuj8cy66aqmr","content":"<h2 id=\"Redis-常见面试题总结\"><a class=\"headerlink\" href=\"#Redis-常见面试题总结\"></a>Redis 常见面试题总结</h2>\n<h3 id=\"Redis-为什么这么快？\"><a class=\"headerlink\" href=\"#Redis-为什么这么快？\"></a>Redis 为什么这么快？</h3>\n<ol>\n<li>\n<p>Redis 基于内存，内存的访问速度比磁盘块很多；</p>\n</li>\n<li>\n<p>Redis 主要是单线程事件循环和 IO 多路复用；</p>\n</li>\n<li>\n<p>Redis 内置了多重优化过后的数据类型、结构实现，性能非常高</p>\n</li>\n<li>\n<p>Redis 通信协议实现简单且解析高效。</p>\n<h4 id=\"为什么不直接使用-Redis-当主数据库呢？\"><a class=\"headerlink\" href=\"#为什么不直接使用-Redis-当主数据库呢？\"></a>为什么不直接使用 Redis 当主数据库呢？</h4>\n<p>主要是因为内存成本太高且 Redis 提供的数据持久化仍然会有数据丢失风险。</p>\n</li>\n</ol>\n<h3 id=\"为什么用-Redis？\"><a class=\"headerlink\" href=\"#为什么用-Redis？\"></a>为什么用 Redis？</h3>\n<ol>\n<li>\n<p>访问速度更快</p>\n</li>\n<li>\n<p>高并发</p>\n</li>\n<li>\n<p>功能全面</p>\n<p>Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。</p>\n</li>\n</ol>\n<h3 id=\"Redis-除了做缓存，还能做什么？\"><a class=\"headerlink\" href=\"#Redis-除了做缓存，还能做什么？\"></a>Redis 除了做缓存，还能做什么？</h3>\n<ul>\n<li><strong>分布式锁</strong>：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。</li>\n<li><strong>限流</strong>：一半通过 Redis 和 Lua 脚本的方式来实现限流。如果不想写 Lua 脚本的话，也可以直接利用 Redisson中的<code>RRateLimiter</code>来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。</li>\n<li><strong>消息队列</strong>：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。</li>\n<li><strong>延时队列</strong>：Redisson 内置了延时队列（基于 Sorted Set 实现的）。</li>\n<li><strong>分布式 Session</strong>：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。</li>\n</ul>\n<h3 id=\"Redis-常用的数据类型有哪些？\"><a class=\"headerlink\" href=\"#Redis-常用的数据类型有哪些？\"></a>Redis 常用的数据类型有哪些？</h3>\n<ul>\n<li><strong>5 种基本数据类型</strong>：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</li>\n<li><strong>3 种特殊数据类型</strong>：HyperLogLog（基数统计）、Bitmap（位图）、Geospatial（地理位置）。</li>\n</ul>\n<h3 id=\"String-的应用场景有哪些？\"><a class=\"headerlink\" href=\"#String-的应用场景有哪些？\"></a>String 的应用场景有哪些？</h3>\n<p>String 是 Redis 中最简单同时也是最常用的一个数据类型。可以用来存储任何类型的数据。</p>\n<ul>\n<li>常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；</li>\n<li>计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；</li>\n<li>分布式锁（利用<code>SETNX key value</code>命令可以实现一个最简易的分布式锁）；</li>\n</ul>\n<h3 id=\"Redis-持久化机制\"><a class=\"headerlink\" href=\"#Redis-持久化机制\"></a>Redis 持久化机制</h3>\n<p>Redis提供了两种主要的持久化机制：RDB（Redis DataBase）快照和 AOF(Append Only File）日志。这两种机制各有特点，满足不同的持久化需求。</p>\n<ol>\n<li>\n<p><strong>RDB（Redis DataBase）快照</strong></p>\n<p>RDB 持久化是指在指定的时间间隔内将 Redis 的内存数据生成快照并保存到磁盘。它会创建一个二进制文件（通常是 dump.rdb），包含某个时间点上的数据。</p>\n<p>​\t<strong>优点：</strong></p>\n<p>​\tRDB 文件是一个紧凑的二进制文件，可以较快地进行备份和恢复。</p>\n<p>​\tRDB 文件保存时不会对 Redis 的性能产生显著的影响，适合用于大规模数据的冷备份。</p>\n<p>​\t<strong>缺点：</strong></p>\n<p>​\tRDB 快照是定期进行的，如果 Redis 意外宕机，可能会丢失最后一次快照之后的所有数据。</p>\n<p>​\tRDB 快照需要较长的时间进行，所以不适用于需要频繁备份的数据场景。</p>\n</li>\n<li>\n<p><strong>AOF（Append Only File）日志</strong></p>\n<p>AOF 持久化记录每个写操作到日志文件中（通常是 appendonly.aof），Redis 可以通过重新执行日志中的命令来恢复数据。AOF日志文件默认不定期压缩，以减小文件体积。</p>\n</li>\n</ol>\n<p>​\t\t<strong>优点：</strong></p>\n<p>​\t\tAOF可以提供更高的数据持久性，因为它记录每次写操作，数据丢失的窗口更小。</p>\n<p>​\t\tAOF 文件是可读的文本文件，便于分析和调试。</p>\n<p>​\t\t<strong>缺点：</strong></p>\n<p>​\t\tAOF 文件通常比 RDB 文件更大，恢复速度相对慢。</p>\n<p>​\t\tAOF在每次写操作时都会记录日志，可能会对 Redis 性能产生一定影响，特别是在写操作频繁的情况下。</p>\n<h4 id=\"混合持久化\"><a class=\"headerlink\" href=\"#混合持久化\"></a>混合持久化</h4>\n<p>Redis 4.0 引入了混合持久化（Hybid Persistence），结合了 RDB 和 AOF 的优点。在进行快照时，将当前的 RDB 快照和 AOF 日志混合存储，以提高数据恢复速度和性能。</p>\n<h3 id=\"缓存穿透\"><a class=\"headerlink\" href=\"#缓存穿透\"></a>缓存穿透</h3>\n<h4 id=\"什么是缓存穿透？\"><a class=\"headerlink\" href=\"#什么是缓存穿透？\"></a>什么是缓存穿透？</h4>\n<p>缓存穿透是指查询一个在缓存和数据库中都不存在的数据，每次请求都会穿透缓存直接查询数据库，可能导致数据库压力过大。</p>\n<h4 id=\"有哪些解决办法？\"><a class=\"headerlink\" href=\"#有哪些解决办法？\"></a>有哪些解决办法？</h4>\n<p>最基本的就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。</p>\n<p>比如查询数据库 id 不能小于 0、传入邮箱格式不对的时候直接返回错误信息给客户端等等。</p>\n<h5 id=\"1-使用缓存空值\"><a class=\"headerlink\" href=\"#1-使用缓存空值\"></a>1. 使用缓存空值</h5>\n<p>将查询结果为空的数据也缓存起来，但要设置一个较短的过期时间，防止缓存中大量的空值数据占用内存。</p>\n<h5 id=\"2-布隆过滤器\"><a class=\"headerlink\" href=\"#2-布隆过滤器\"></a>2. 布隆过滤器</h5>\n<p>布隆过滤器是一种概率型数据结构，可以用来判断一个元素是否在一个集合中。将所有可能存在查询条件都存入布隆过滤器，在查询缓存和数据库之前先通过布隆过滤器进行判断，如果布隆过滤器判断该元素不存在，则直接返回。</p>\n<h5 id=\"3-接口限流\"><a class=\"headerlink\" href=\"#3-接口限流\"></a>3. 接口限流</h5>\n<p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采用黑名单机制，例如将异常 IP 列入黑名单。</p>\n<h3 id=\"缓存击穿\"><a class=\"headerlink\" href=\"#缓存击穿\"></a>缓存击穿</h3>\n<h4 id=\"什么是缓存击穿？\"><a class=\"headerlink\" href=\"#什么是缓存击穿？\"></a>什么是缓存击穿？</h4>\n<p>缓存击穿是指某些缓存中的热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到了数据库，对数据库造成了巨大的压力，通常发生在缓存中存放的热门数据突然过期的情况下。</p>\n<h4 id=\"有哪些解决方法？\"><a class=\"headerlink\" href=\"#有哪些解决方法？\"></a>有哪些解决方法？</h4>\n<h5 id=\"1-永不过期\"><a class=\"headerlink\" href=\"#1-永不过期\"></a>1. 永不过期</h5>\n<p>将热点数据设置为永不过期，防止其被清除出缓存，从而避免缓存失效带来的问题。</p>\n<h5 id=\"2-提前预热\"><a class=\"headerlink\" href=\"#2-提前预热\"></a>2.提前预热</h5>\n<p>在系统启动或业务高峰期来临之前，提前将热点数据加载到缓存中，避免缓存过期。</p>\n<h5 id=\"3-加锁\"><a class=\"headerlink\" href=\"#3-加锁\"></a>3. 加锁</h5>\n<p>当缓存失效时，使用分布式锁来控制只有一个请求可以访问数据库并重建缓存，其余请求等待缓存重建完成后再访问缓存。</p>\n<h4 id=\"缓存穿透和缓存击穿有什么区别？\"><a class=\"headerlink\" href=\"#缓存穿透和缓存击穿有什么区别？\"></a>缓存穿透和缓存击穿有什么区别？</h4>\n<ul>\n<li>\n<p>缓存穿透是查询一个在缓存和数据中都不存在的数据。</p>\n</li>\n<li>\n<p>缓存击穿是缓存中热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到数据库。</p>\n</li>\n</ul>\n<h3 id=\"缓存雪崩\"><a class=\"headerlink\" href=\"#缓存雪崩\"></a>缓存雪崩</h3>\n<h4 id=\"什么是缓存雪崩？\"><a class=\"headerlink\" href=\"#什么是缓存雪崩？\"></a>什么是缓存雪崩？</h4>\n<p>缓存雪崩是指缓存中大量数据在同一时间过期或者缓存服务器宕机了，导致大量请求直接访问数据库，与缓存击穿不同的是，缓存雪崩涉及大量缓存同时失效或缓存服务不可用。</p>\n<h4 id=\"有哪些解决方法？-2\"><a class=\"headerlink\" href=\"#有哪些解决方法？-2\"></a>有哪些解决方法？</h4>\n<h5 id=\"针对Redis-服务不可用的情况：\"><a class=\"headerlink\" href=\"#针对Redis-服务不可用的情况：\"></a>针对Redis 服务不可用的情况：</h5>\n<ol>\n<li><strong>Redis 集群</strong>：采用 Redis 集群，避免单机出现问题整个缓存服务器都无法使用。</li>\n<li><strong>多级缓存</strong>：通过构建多级缓存（如本地缓存和分布式缓存），在缓存失效时优先从本地缓存读取数据，减轻数据库压力。</li>\n</ol>\n<h5 id=\"针对大量缓存同时失效的情况\"><a class=\"headerlink\" href=\"#针对大量缓存同时失效的情况\"></a>针对大量缓存同时失效的情况:</h5>\n<ol>\n<li><strong>过期时间随机化</strong>：避免大量缓存在同一时间失效，可以设置缓存数据过期时间增加一个随机值，使缓存数据的过期时间分散。</li>\n<li><strong>缓存预热</strong>：在系统启动或流量高峰前，提前将热点数据加载到缓存中，避免缓存雪崩。</li>\n<li><strong>主动更新</strong>：对于经常更新的热点数据，可以在其过期之前主动更新缓存，确保缓存中的数据始终有效。</li>\n</ol>\n<h3 id=\"如何保证缓存和数据库数据一致性？\"><a class=\"headerlink\" href=\"#如何保证缓存和数据库数据一致性？\"></a>如何保证缓存和数据库数据一致性？</h3>\n<h4 id=\"1-Cache-Aside-Pattern（旁路缓存模式）\"><a class=\"headerlink\" href=\"#1-Cache-Aside-Pattern（旁路缓存模式）\"></a>1. Cache Aside Pattern（旁路缓存模式）</h4>\n<p>当需要读取数据时，先从缓存读取，若缓存未命中，再从数据库读取，并将数据写入缓存。当数据更新时，先更新数据库，然后使缓存失效。</p>\n<h4 id=\"2-Write-Through-Cache（写直达缓存）\"><a class=\"headerlink\" href=\"#2-Write-Through-Cache（写直达缓存）\"></a>2. Write Through Cache（写直达缓存）</h4>\n<p>所有的数据更新操作都会先写入缓存，再写入数据库，这样可以确保缓存和数据库的一致性，但写操作的性能会受到一定影响。</p>\n<h4 id=\"3-Write-Behind-Cache（异步写缓存）\"><a class=\"headerlink\" href=\"#3-Write-Behind-Cache（异步写缓存）\"></a>3. Write Behind Cache（异步写缓存）</h4>\n<p>写操作会先写入缓存，并在后台异步更新数据库。这种方式可以提高操作的性能，但实现和维护比较复杂。</p>\n<h4 id=\"4-Cache-and-Database-Double-Write（双写一致性）\"><a class=\"headerlink\" href=\"#4-Cache-and-Database-Double-Write（双写一致性）\"></a>4. Cache and Database Double Write（双写一致性）</h4>\n<p>确保每次写操作，同时更新缓存和数据库。需要通过合适的事务机制或分布式锁来保证这两个操作的原子性。</p>\n<h4 id=\"5-使用消息队列实现最终一致性\"><a class=\"headerlink\" href=\"#5-使用消息队列实现最终一致性\"></a>5. 使用消息队列实现最终一致性</h4>\n<p>写操作更新数据库后，将更新时间发送到消息队列，消费者接收消息后更新缓存，实现最终一致性。</p>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>Cache Aside Pattern（旁路缓存模式）</strong>：读操作先查缓存，缓存未命中再查数据库，写操作先更新数据库，再使缓存失效。</li>\n<li><strong>Write Through Cache（写直达缓存）</strong>：写操作先更新缓存，再同步更新数据库。</li>\n<li><strong>Write Behind Cache（异步写缓存）</strong>：写操作先更新缓存，再异步批量更新数据库。</li>\n<li><strong>双写一致性（Cache and Database Double Write）</strong>：写操作时同时更新缓存和数据库，确保原子性。</li>\n<li><strong>使用消息队列实现最终一致性</strong>：更新数据库后发送消息队列，消费者接收消息后更新缓存，实现最终一致性。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Redis-常见面试题总结\"><a class=\"headerlink\" href=\"#Redis-常见面试题总结\"></a>Redis 常见面试题总结</h2>\n<h3 id=\"Redis-为什么这么快？\"><a class=\"headerlink\" href=\"#Redis-为什么这么快？\"></a>Redis 为什么这么快？</h3>\n<ol>\n<li>\n<p>Redis 基于内存，内存的访问速度比磁盘块很多；</p>\n</li>\n<li>\n<p>Redis 主要是单线程事件循环和 IO 多路复用；</p>\n</li>\n<li>\n<p>Redis 内置了多重优化过后的数据类型、结构实现，性能非常高</p>\n</li>\n<li>\n<p>Redis 通信协议实现简单且解析高效。</p>\n<h4 id=\"为什么不直接使用-Redis-当主数据库呢？\"><a class=\"headerlink\" href=\"#为什么不直接使用-Redis-当主数据库呢？\"></a>为什么不直接使用 Redis 当主数据库呢？</h4>\n<p>主要是因为内存成本太高且 Redis 提供的数据持久化仍然会有数据丢失风险。</p>\n</li>\n</ol>\n<h3 id=\"为什么用-Redis？\"><a class=\"headerlink\" href=\"#为什么用-Redis？\"></a>为什么用 Redis？</h3>\n<ol>\n<li>\n<p>访问速度更快</p>\n</li>\n<li>\n<p>高并发</p>\n</li>\n<li>\n<p>功能全面</p>\n<p>Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。</p>\n</li>\n</ol>\n<h3 id=\"Redis-除了做缓存，还能做什么？\"><a class=\"headerlink\" href=\"#Redis-除了做缓存，还能做什么？\"></a>Redis 除了做缓存，还能做什么？</h3>\n<ul>\n<li><strong>分布式锁</strong>：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。</li>\n<li><strong>限流</strong>：一半通过 Redis 和 Lua 脚本的方式来实现限流。如果不想写 Lua 脚本的话，也可以直接利用 Redisson中的<code>RRateLimiter</code>来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。</li>\n<li><strong>消息队列</strong>：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。</li>\n<li><strong>延时队列</strong>：Redisson 内置了延时队列（基于 Sorted Set 实现的）。</li>\n<li><strong>分布式 Session</strong>：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。</li>\n</ul>\n<h3 id=\"Redis-常用的数据类型有哪些？\"><a class=\"headerlink\" href=\"#Redis-常用的数据类型有哪些？\"></a>Redis 常用的数据类型有哪些？</h3>\n<ul>\n<li><strong>5 种基本数据类型</strong>：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</li>\n<li><strong>3 种特殊数据类型</strong>：HyperLogLog（基数统计）、Bitmap（位图）、Geospatial（地理位置）。</li>\n</ul>\n<h3 id=\"String-的应用场景有哪些？\"><a class=\"headerlink\" href=\"#String-的应用场景有哪些？\"></a>String 的应用场景有哪些？</h3>\n<p>String 是 Redis 中最简单同时也是最常用的一个数据类型。可以用来存储任何类型的数据。</p>\n<ul>\n<li>常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；</li>\n<li>计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；</li>\n<li>分布式锁（利用<code>SETNX key value</code>命令可以实现一个最简易的分布式锁）；</li>\n</ul>\n<h3 id=\"Redis-持久化机制\"><a class=\"headerlink\" href=\"#Redis-持久化机制\"></a>Redis 持久化机制</h3>\n<p>Redis提供了两种主要的持久化机制：RDB（Redis DataBase）快照和 AOF(Append Only File）日志。这两种机制各有特点，满足不同的持久化需求。</p>\n<ol>\n<li>\n<p><strong>RDB（Redis DataBase）快照</strong></p>\n<p>RDB 持久化是指在指定的时间间隔内将 Redis 的内存数据生成快照并保存到磁盘。它会创建一个二进制文件（通常是 dump.rdb），包含某个时间点上的数据。</p>\n<p>​\t<strong>优点：</strong></p>\n<p>​\tRDB 文件是一个紧凑的二进制文件，可以较快地进行备份和恢复。</p>\n<p>​\tRDB 文件保存时不会对 Redis 的性能产生显著的影响，适合用于大规模数据的冷备份。</p>\n<p>​\t<strong>缺点：</strong></p>\n<p>​\tRDB 快照是定期进行的，如果 Redis 意外宕机，可能会丢失最后一次快照之后的所有数据。</p>\n<p>​\tRDB 快照需要较长的时间进行，所以不适用于需要频繁备份的数据场景。</p>\n</li>\n<li>\n<p><strong>AOF（Append Only File）日志</strong></p>\n<p>AOF 持久化记录每个写操作到日志文件中（通常是 appendonly.aof），Redis 可以通过重新执行日志中的命令来恢复数据。AOF日志文件默认不定期压缩，以减小文件体积。</p>\n</li>\n</ol>\n<p>​\t\t<strong>优点：</strong></p>\n<p>​\t\tAOF可以提供更高的数据持久性，因为它记录每次写操作，数据丢失的窗口更小。</p>\n<p>​\t\tAOF 文件是可读的文本文件，便于分析和调试。</p>\n<p>​\t\t<strong>缺点：</strong></p>\n<p>​\t\tAOF 文件通常比 RDB 文件更大，恢复速度相对慢。</p>\n<p>​\t\tAOF在每次写操作时都会记录日志，可能会对 Redis 性能产生一定影响，特别是在写操作频繁的情况下。</p>\n<h4 id=\"混合持久化\"><a class=\"headerlink\" href=\"#混合持久化\"></a>混合持久化</h4>\n<p>Redis 4.0 引入了混合持久化（Hybid Persistence），结合了 RDB 和 AOF 的优点。在进行快照时，将当前的 RDB 快照和 AOF 日志混合存储，以提高数据恢复速度和性能。</p>\n<h3 id=\"缓存穿透\"><a class=\"headerlink\" href=\"#缓存穿透\"></a>缓存穿透</h3>\n<h4 id=\"什么是缓存穿透？\"><a class=\"headerlink\" href=\"#什么是缓存穿透？\"></a>什么是缓存穿透？</h4>\n<p>缓存穿透是指查询一个在缓存和数据库中都不存在的数据，每次请求都会穿透缓存直接查询数据库，可能导致数据库压力过大。</p>\n<h4 id=\"有哪些解决办法？\"><a class=\"headerlink\" href=\"#有哪些解决办法？\"></a>有哪些解决办法？</h4>\n<p>最基本的就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。</p>\n<p>比如查询数据库 id 不能小于 0、传入邮箱格式不对的时候直接返回错误信息给客户端等等。</p>\n<h5 id=\"1-使用缓存空值\"><a class=\"headerlink\" href=\"#1-使用缓存空值\"></a>1. 使用缓存空值</h5>\n<p>将查询结果为空的数据也缓存起来，但要设置一个较短的过期时间，防止缓存中大量的空值数据占用内存。</p>\n<h5 id=\"2-布隆过滤器\"><a class=\"headerlink\" href=\"#2-布隆过滤器\"></a>2. 布隆过滤器</h5>\n<p>布隆过滤器是一种概率型数据结构，可以用来判断一个元素是否在一个集合中。将所有可能存在查询条件都存入布隆过滤器，在查询缓存和数据库之前先通过布隆过滤器进行判断，如果布隆过滤器判断该元素不存在，则直接返回。</p>\n<h5 id=\"3-接口限流\"><a class=\"headerlink\" href=\"#3-接口限流\"></a>3. 接口限流</h5>\n<p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采用黑名单机制，例如将异常 IP 列入黑名单。</p>\n<h3 id=\"缓存击穿\"><a class=\"headerlink\" href=\"#缓存击穿\"></a>缓存击穿</h3>\n<h4 id=\"什么是缓存击穿？\"><a class=\"headerlink\" href=\"#什么是缓存击穿？\"></a>什么是缓存击穿？</h4>\n<p>缓存击穿是指某些缓存中的热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到了数据库，对数据库造成了巨大的压力，通常发生在缓存中存放的热门数据突然过期的情况下。</p>\n<h4 id=\"有哪些解决方法？\"><a class=\"headerlink\" href=\"#有哪些解决方法？\"></a>有哪些解决方法？</h4>\n<h5 id=\"1-永不过期\"><a class=\"headerlink\" href=\"#1-永不过期\"></a>1. 永不过期</h5>\n<p>将热点数据设置为永不过期，防止其被清除出缓存，从而避免缓存失效带来的问题。</p>\n<h5 id=\"2-提前预热\"><a class=\"headerlink\" href=\"#2-提前预热\"></a>2.提前预热</h5>\n<p>在系统启动或业务高峰期来临之前，提前将热点数据加载到缓存中，避免缓存过期。</p>\n<h5 id=\"3-加锁\"><a class=\"headerlink\" href=\"#3-加锁\"></a>3. 加锁</h5>\n<p>当缓存失效时，使用分布式锁来控制只有一个请求可以访问数据库并重建缓存，其余请求等待缓存重建完成后再访问缓存。</p>\n<h4 id=\"缓存穿透和缓存击穿有什么区别？\"><a class=\"headerlink\" href=\"#缓存穿透和缓存击穿有什么区别？\"></a>缓存穿透和缓存击穿有什么区别？</h4>\n<ul>\n<li>\n<p>缓存穿透是查询一个在缓存和数据中都不存在的数据。</p>\n</li>\n<li>\n<p>缓存击穿是缓存中热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到数据库。</p>\n</li>\n</ul>\n<h3 id=\"缓存雪崩\"><a class=\"headerlink\" href=\"#缓存雪崩\"></a>缓存雪崩</h3>\n<h4 id=\"什么是缓存雪崩？\"><a class=\"headerlink\" href=\"#什么是缓存雪崩？\"></a>什么是缓存雪崩？</h4>\n<p>缓存雪崩是指缓存中大量数据在同一时间过期或者缓存服务器宕机了，导致大量请求直接访问数据库，与缓存击穿不同的是，缓存雪崩涉及大量缓存同时失效或缓存服务不可用。</p>\n<h4 id=\"有哪些解决方法？-2\"><a class=\"headerlink\" href=\"#有哪些解决方法？-2\"></a>有哪些解决方法？</h4>\n<h5 id=\"针对Redis-服务不可用的情况：\"><a class=\"headerlink\" href=\"#针对Redis-服务不可用的情况：\"></a>针对Redis 服务不可用的情况：</h5>\n<ol>\n<li><strong>Redis 集群</strong>：采用 Redis 集群，避免单机出现问题整个缓存服务器都无法使用。</li>\n<li><strong>多级缓存</strong>：通过构建多级缓存（如本地缓存和分布式缓存），在缓存失效时优先从本地缓存读取数据，减轻数据库压力。</li>\n</ol>\n<h5 id=\"针对大量缓存同时失效的情况\"><a class=\"headerlink\" href=\"#针对大量缓存同时失效的情况\"></a>针对大量缓存同时失效的情况:</h5>\n<ol>\n<li><strong>过期时间随机化</strong>：避免大量缓存在同一时间失效，可以设置缓存数据过期时间增加一个随机值，使缓存数据的过期时间分散。</li>\n<li><strong>缓存预热</strong>：在系统启动或流量高峰前，提前将热点数据加载到缓存中，避免缓存雪崩。</li>\n<li><strong>主动更新</strong>：对于经常更新的热点数据，可以在其过期之前主动更新缓存，确保缓存中的数据始终有效。</li>\n</ol>\n<h3 id=\"如何保证缓存和数据库数据一致性？\"><a class=\"headerlink\" href=\"#如何保证缓存和数据库数据一致性？\"></a>如何保证缓存和数据库数据一致性？</h3>\n<h4 id=\"1-Cache-Aside-Pattern（旁路缓存模式）\"><a class=\"headerlink\" href=\"#1-Cache-Aside-Pattern（旁路缓存模式）\"></a>1. Cache Aside Pattern（旁路缓存模式）</h4>\n<p>当需要读取数据时，先从缓存读取，若缓存未命中，再从数据库读取，并将数据写入缓存。当数据更新时，先更新数据库，然后使缓存失效。</p>\n<h4 id=\"2-Write-Through-Cache（写直达缓存）\"><a class=\"headerlink\" href=\"#2-Write-Through-Cache（写直达缓存）\"></a>2. Write Through Cache（写直达缓存）</h4>\n<p>所有的数据更新操作都会先写入缓存，再写入数据库，这样可以确保缓存和数据库的一致性，但写操作的性能会受到一定影响。</p>\n<h4 id=\"3-Write-Behind-Cache（异步写缓存）\"><a class=\"headerlink\" href=\"#3-Write-Behind-Cache（异步写缓存）\"></a>3. Write Behind Cache（异步写缓存）</h4>\n<p>写操作会先写入缓存，并在后台异步更新数据库。这种方式可以提高操作的性能，但实现和维护比较复杂。</p>\n<h4 id=\"4-Cache-and-Database-Double-Write（双写一致性）\"><a class=\"headerlink\" href=\"#4-Cache-and-Database-Double-Write（双写一致性）\"></a>4. Cache and Database Double Write（双写一致性）</h4>\n<p>确保每次写操作，同时更新缓存和数据库。需要通过合适的事务机制或分布式锁来保证这两个操作的原子性。</p>\n<h4 id=\"5-使用消息队列实现最终一致性\"><a class=\"headerlink\" href=\"#5-使用消息队列实现最终一致性\"></a>5. 使用消息队列实现最终一致性</h4>\n<p>写操作更新数据库后，将更新时间发送到消息队列，消费者接收消息后更新缓存，实现最终一致性。</p>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>Cache Aside Pattern（旁路缓存模式）</strong>：读操作先查缓存，缓存未命中再查数据库，写操作先更新数据库，再使缓存失效。</li>\n<li><strong>Write Through Cache（写直达缓存）</strong>：写操作先更新缓存，再同步更新数据库。</li>\n<li><strong>Write Behind Cache（异步写缓存）</strong>：写操作先更新缓存，再异步批量更新数据库。</li>\n<li><strong>双写一致性（Cache and Database Double Write）</strong>：写操作时同时更新缓存和数据库，确保原子性。</li>\n<li><strong>使用消息队列实现最终一致性</strong>：更新数据库后发送消息队列，消费者接收消息后更新缓存，实现最终一致性。</li>\n</ul>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Spring应用与总结","date":"2024-06-22T10:11:04.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151158232.webp","_content":"\n## Spring 常见面试题总结\n\n### 什么是Spring框架？\n\nSpring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。\n\n\n\n### 谈谈自己对于Spring IoC的了解\n\n**IoC** （Inversion of Control 控制反转）是一种设计模式，用来实现对象之间的解耦。\n\nIoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。\n\n\n\n#### 为什么叫控制反转？\n\n- **控制**：指的是对象创建（实例化、管理）的权利\n- **反转**：控制权交给外部环境（Spring框架、IoC容器）\n\n将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。\n\n\n\n### 什么是 Bean？\n\nBean 就是哪些被 IoC 容器所管理的对象。\n\n\n\n### @Component和@Bean的区别是什么？\n\n- @Component 注解用于类，@Bean 注解用于方法。\n- @Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我需要的时候给我。\n- @Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。\n\n\n\n### 注入Bean的注解有哪些？\n\nSpring 内置的`@Autowired` 还有 JDK 内置的 `@Resource` 和 `@Inject` 都可以用于注入 Bean。\n\n\n\n### @Autowired和@Resource的区别是什么？\n\n- `@Autowired` 是 Spring 提供的注解，`@Resource` 是 JDK 提供的注解。\n- `Autowired` 默认的注入方式为`byType`（根据类型进行匹配），`@Resource`默认注入方式为 `byName`（根据名称进行匹配）。\n- 当一个接口存在多个实现类的情况下，`@Autowired` 和 `@Resource` 都需要通过名称才能正确匹配到对应的  Bean。`Autowired` 可以通过 `@Qualifier` 注解来显式指定名称，`@Resource` 可以通过 name 属性来显式指定名称。\n- @Autowired 支持在构造函数、方法、字段和参数上使用。`@Resource` 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。\n\n\n\n### Bean 的作用域有哪些?\n\n- **Singleton** Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。\n- **prototype**  每次请求都会创建一个新的 bean 实例。\n- **Request** 每次 Http 请求都会创建一个新的 bean 实例。\n- **Session** 每个 Http Session 中会有一个 bean 实例。\n\n\n\n### Bean 是线程安全的吗？\n\n在 Spring 中 Bean 是否安全，取决于其作用域和状态。\n\n单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。\n\n\n\n### Bean的生命周期了解么？\n\nbean 的生命周期分为五个阶段：\n\n1. 调用构造器或者是通过工厂的方式创建 bean \n2. 给 bean 的属性注入值\n3. 调用初始化方法，进行初始化\n4. bean 被完全初始化和配置，就可以使用了\n5. 当 IOC 容器关闭的时候，销毁 bean\n\n\n\n### 谈谈对于AOP的了解\n\nAOP（面向切面编程）将与业务无关但在多个模块中重复出现的通用逻辑（如事务管理、日志管理、权限控制等）从业务逻辑中分离出来。通过将这些横切关注点封装到独立的模块中，从而减少系统的重复代码，降低模块之间的耦合度，并提高系统的扩展性和可维护性。\n\nSpring AOP 是通过动态代理来实现切面功能，**JDK动态代理**：用于代理实现了接口的类。**CGLIB代理**：用于代理没有实现接口的类，通过生成目标类的子类来实现。\n\n\n\n### Spring AOP 和 AspectJ AOP 有什么区别？\n\nSpring AOP 和 AspectJ AOP 的主要区别在于实现机制、功能范围和性能。Spring AOP 基于动态代理实现，主要适用于方法级别的拦截，配置简单，适合大多数常用的 AOP 场景。AspectJ AOP 则基于编译时和类加载时织入，支持更广泛的连接点(如构造函数、字段等)，功能更强大，但配置和使用相对复杂，性能也更高，适用于需要精细控制和高性能场景。\n\n\n\n### AspectJ 定义的通知类型有哪些？\n\n- **Before**（前置通知）：在方法执行之前运行。\n\n- **After**（后置通知）：在方法执行之后运行，无论方法是否成功完成。\n\n- **AfterReturning**（返回通知）：在方法成功完成后运行。\n\n- **AfterThorowing**（异常通知）：在方法抛出异常后运行。\n\n- **Around**（环绕通知）：既可以在方法执行之前运行，也可以在方法执行之后运行。\n\n  \n\n### 多个切面执行顺序如何控制？\n\n1. 通常使用`@Order` 注解直接定义切面顺序\n2. 实现`Ordered`接口重写`getOrder`方法\n\n\n\n### 说说自己对于 Spring MVC 了解？\n\nSpringMVC是一个基于Java的实现了MVC设计模式的轻量级Web框架。它通过分离应用程序的业务逻辑、用户界面和控制流程，简化了Web应用程序的开发和维护。\n\n### SpringMVC 的工作流程是什么？\n\n1. 客户端请求首先到达`DispatcherServlet`。\n2. `DispatcherServlet`通过`HandlerMapping`找到具体的处理器（Controller）。\n3. `DispatcherServlet`通过`HandlerAdapter`调用处理器中的具体方法。\n4. 处理器方法执行完毕后返回`ModelAndView`对象，包含视图名称和模型数据。\n5. `DispatcherServlet`使用`ViewResolver`将视图名称解析为具体的视图。\n6. 最后，`DispatcherServlet`将模型数据传递给视图，视图渲染并返回响应给客户端。\n\n客户端发送请求 -> 2. DispatcherServlet接收请求 -> 3. HandlerMapping查找控制器 -> 4. HandlerAdapter调用控制器方法 -> 5. Controller处理请求 -> 6. ViewResolver解析视图 -> 7. 视图渲染 -> 8. 返回响应给客户端\n\n\n\n### 统一异常处理怎么做？\n\n使用注解的方式统一异常处理，使用`@controllerAdvice`和`@ExceptionHandler`这两个注解。\n\n\n\n### Spring 中用到了哪些设计模式？\n\n- **工厂设计模式**：Spring 使用工厂模式通过`BeanFactory`、`ApplicationContext`创建 bean 对象。\n- **代理设计模式**：SpringAOP 功能实现。\n- **单例设计模式**：Spring 中的 Bean 默认都是单例的。\n- **模版方法模式**：Spring 中`jdbcTemplate`、`hibernateTemplate`等以 Template 结尾的对数据库操作的类，都使用到了模版模式。\n- **包装器设计模式**：项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们刚开业根据客户的需求能够动态切换不同的数据。\n- **观察者模式**：Spring 事件驱动模型就是观察者模式。\n- **适配器模式**：Spring AOP 的增强或通知使用到了适配器模式、SpringMVC 中也用到了适配器模式适配`Controller`。\n\n\n\n### Spring 循环依赖了解吗，怎么解决？\n\nSpring 中的循环依赖就是指两个及以上的 Bean互相依赖，形成一个循环。比如 BeanA 依赖于 BenaB，而 BeanB 又依赖 BeanA。这种情况可能导致 Spring 容器无法正确初始化这些 Bean。\n\n#### 使用 setter 注入\n\nSpring 中可以通过 Setter 注入解决循环依赖问题，因为Spring 在注入 Bean 的属性时会先创建 Bean 的实例，然后再注入依赖的属性。这样可以保证即使两个 Bean 互相依赖，Spring 也能正确的初始化它们。\n\n#### 使用 @Lazy 注解\n\n在其中一个 Bean 的依赖上使用`@Lazy`注解，这样 Spring 容器在首次访问该 Bean 时才会进行初始化，避免循环依赖问题。\n\n\n\n### Spring 管理事务的方式有几种？\n\n- **编程式事务**：在代码中硬编码（在分布式系统中推荐使用）：通过`TranscationTemplate`或者`TransactionManager`在手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。\n- **声明式事务**：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用）：实际时通过 AOP 实现（基于`@Transcational`的全注解方式使用最多）\n\n\n\n### Srping事务中哪几种事务传播行为？\n\n> 事务传播行为是为了解决业务层方法之间互相调用的事务问题。\n>\n> 当事务方法被另一个事务方法调用时，必须制定事务应该如何传播。\n>\n> 例如：方法可能继续在现有的事务中运行，也可能开启一个新事物，并在自己的事物中运行。\n\n1. **`TransactionDefinition.PROPAGATION_REQUIRED`**：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事物。\n\n\n\n### 什么是 SpringBoot？为什么要有 SpringBoot？\n\nSpringBoot 可以简化 Spring 开发（减少配置文件、开箱即用 ）\n\n\n\n### 如何在 SpringBoot 应用程序中使用 Jetty 而不是 Tomcat？\n\nSpringBoot（spirng-boot-starter-web）使用Tomcat 作为默认的嵌入式 servlet 容器，如果想使用 Jetty 的话，只需要修改 pom.xml （Maven）文件就可以了。\n\n\n\n\n\n### 介绍一下 @SpringBootApplication 注解\n\n`@SpringBootApplication`可以看作是`@Configuration、@EnableAutoConfiguration、@ComponentScan`注解的集合。\n\n- `@Configuration`：运行在上下文中注册额外的`bean`或导入其他配置类\n- `@EnableAutoConfiguration`：启用 Springboot 的自动配置机制\n- `@ComponentScan`：扫描被`@Component`(`@Service`,`@Controller`)注解的 bean，默认会扫描该类所在的包下的所有的类。\n\n\n\n### SpringBoot 的自动配置是如何实现的？\n\n当 SpringBoot 应用启动时，@EnableAutoConfiguration`注解会触发自动配置类的加载。\n\nSpringBoot 会扫描`spring.factories`文件，并加载列出自动配置类。然后 SpringBoot 会根据条件注解的判断，决定是否进行相应的配置。\n\n\n\n### SpringBoot 常用的两种配置文件\n\n我们可以通过`applcation.properties`或者`application.yml`对SpringBoot 程序进行简单的配置。如果不进行配置的话，就是使用默认配置。\n\n\n\n### 什么是 YAML ? YAML配置的优势在哪里？\n\nYAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的树形，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。\n\n相比 Properties 配置文件，YAML 配置方式更加直观清晰，简洁明了，有层次感。\n\n但是 YAML 配置文件不支持`@PropertySource` 注解导入自定义的 YAML 配置。\n\n\n\n### SpringBoot 常用的读取配置文件的方法有哪些？\n\n1. 通过`@Value(\"${property}\")`读取比较简单的配置信息\n\n   > `@value` 这种方式是不被推荐的\n\n2. 通过`@ConfigurationProperties`读取并与 bean 绑定\n\n3. 通过`@ConfigurationProperies`读取并校验\n\n4. 通过`@PropertySource`读取指定的 properties 文件\n\n\n\n### SpringBoot 如何做请求参数校验？\n\n使用 JSR 提供的校验注解\n\n\n\n### SpringBoot 如何监控系统运行状态？\n\n可以使用 SpringBoot Actuator 来对 SpringBoot 项目进行简单的监控。\n\n\n\n\n\n### SpringBoot 中如何实现定时任务？\n\n我们使用`@Scheduled`注解就能很方便地创建一个定时任务。\n\n还需要再 SpringBoot 启动类上添加`@EnableScheduling`注解，这个注解的作用是发现`@Scheduled`的任务并在后台执行该任务。\n\n","source":"_posts/Spring八股文.md","raw":"---\ntitle: Spring应用与总结\ndate: 2024-06-22 18:11:04\ntags:\n  - Java\n  - Spring\n  - 总结\ncategories: Java\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151158232.webp\n---\n\n## Spring 常见面试题总结\n\n### 什么是Spring框架？\n\nSpring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。\n\n\n\n### 谈谈自己对于Spring IoC的了解\n\n**IoC** （Inversion of Control 控制反转）是一种设计模式，用来实现对象之间的解耦。\n\nIoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。\n\n\n\n#### 为什么叫控制反转？\n\n- **控制**：指的是对象创建（实例化、管理）的权利\n- **反转**：控制权交给外部环境（Spring框架、IoC容器）\n\n将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。\n\n\n\n### 什么是 Bean？\n\nBean 就是哪些被 IoC 容器所管理的对象。\n\n\n\n### @Component和@Bean的区别是什么？\n\n- @Component 注解用于类，@Bean 注解用于方法。\n- @Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我需要的时候给我。\n- @Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。\n\n\n\n### 注入Bean的注解有哪些？\n\nSpring 内置的`@Autowired` 还有 JDK 内置的 `@Resource` 和 `@Inject` 都可以用于注入 Bean。\n\n\n\n### @Autowired和@Resource的区别是什么？\n\n- `@Autowired` 是 Spring 提供的注解，`@Resource` 是 JDK 提供的注解。\n- `Autowired` 默认的注入方式为`byType`（根据类型进行匹配），`@Resource`默认注入方式为 `byName`（根据名称进行匹配）。\n- 当一个接口存在多个实现类的情况下，`@Autowired` 和 `@Resource` 都需要通过名称才能正确匹配到对应的  Bean。`Autowired` 可以通过 `@Qualifier` 注解来显式指定名称，`@Resource` 可以通过 name 属性来显式指定名称。\n- @Autowired 支持在构造函数、方法、字段和参数上使用。`@Resource` 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。\n\n\n\n### Bean 的作用域有哪些?\n\n- **Singleton** Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。\n- **prototype**  每次请求都会创建一个新的 bean 实例。\n- **Request** 每次 Http 请求都会创建一个新的 bean 实例。\n- **Session** 每个 Http Session 中会有一个 bean 实例。\n\n\n\n### Bean 是线程安全的吗？\n\n在 Spring 中 Bean 是否安全，取决于其作用域和状态。\n\n单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。\n\n\n\n### Bean的生命周期了解么？\n\nbean 的生命周期分为五个阶段：\n\n1. 调用构造器或者是通过工厂的方式创建 bean \n2. 给 bean 的属性注入值\n3. 调用初始化方法，进行初始化\n4. bean 被完全初始化和配置，就可以使用了\n5. 当 IOC 容器关闭的时候，销毁 bean\n\n\n\n### 谈谈对于AOP的了解\n\nAOP（面向切面编程）将与业务无关但在多个模块中重复出现的通用逻辑（如事务管理、日志管理、权限控制等）从业务逻辑中分离出来。通过将这些横切关注点封装到独立的模块中，从而减少系统的重复代码，降低模块之间的耦合度，并提高系统的扩展性和可维护性。\n\nSpring AOP 是通过动态代理来实现切面功能，**JDK动态代理**：用于代理实现了接口的类。**CGLIB代理**：用于代理没有实现接口的类，通过生成目标类的子类来实现。\n\n\n\n### Spring AOP 和 AspectJ AOP 有什么区别？\n\nSpring AOP 和 AspectJ AOP 的主要区别在于实现机制、功能范围和性能。Spring AOP 基于动态代理实现，主要适用于方法级别的拦截，配置简单，适合大多数常用的 AOP 场景。AspectJ AOP 则基于编译时和类加载时织入，支持更广泛的连接点(如构造函数、字段等)，功能更强大，但配置和使用相对复杂，性能也更高，适用于需要精细控制和高性能场景。\n\n\n\n### AspectJ 定义的通知类型有哪些？\n\n- **Before**（前置通知）：在方法执行之前运行。\n\n- **After**（后置通知）：在方法执行之后运行，无论方法是否成功完成。\n\n- **AfterReturning**（返回通知）：在方法成功完成后运行。\n\n- **AfterThorowing**（异常通知）：在方法抛出异常后运行。\n\n- **Around**（环绕通知）：既可以在方法执行之前运行，也可以在方法执行之后运行。\n\n  \n\n### 多个切面执行顺序如何控制？\n\n1. 通常使用`@Order` 注解直接定义切面顺序\n2. 实现`Ordered`接口重写`getOrder`方法\n\n\n\n### 说说自己对于 Spring MVC 了解？\n\nSpringMVC是一个基于Java的实现了MVC设计模式的轻量级Web框架。它通过分离应用程序的业务逻辑、用户界面和控制流程，简化了Web应用程序的开发和维护。\n\n### SpringMVC 的工作流程是什么？\n\n1. 客户端请求首先到达`DispatcherServlet`。\n2. `DispatcherServlet`通过`HandlerMapping`找到具体的处理器（Controller）。\n3. `DispatcherServlet`通过`HandlerAdapter`调用处理器中的具体方法。\n4. 处理器方法执行完毕后返回`ModelAndView`对象，包含视图名称和模型数据。\n5. `DispatcherServlet`使用`ViewResolver`将视图名称解析为具体的视图。\n6. 最后，`DispatcherServlet`将模型数据传递给视图，视图渲染并返回响应给客户端。\n\n客户端发送请求 -> 2. DispatcherServlet接收请求 -> 3. HandlerMapping查找控制器 -> 4. HandlerAdapter调用控制器方法 -> 5. Controller处理请求 -> 6. ViewResolver解析视图 -> 7. 视图渲染 -> 8. 返回响应给客户端\n\n\n\n### 统一异常处理怎么做？\n\n使用注解的方式统一异常处理，使用`@controllerAdvice`和`@ExceptionHandler`这两个注解。\n\n\n\n### Spring 中用到了哪些设计模式？\n\n- **工厂设计模式**：Spring 使用工厂模式通过`BeanFactory`、`ApplicationContext`创建 bean 对象。\n- **代理设计模式**：SpringAOP 功能实现。\n- **单例设计模式**：Spring 中的 Bean 默认都是单例的。\n- **模版方法模式**：Spring 中`jdbcTemplate`、`hibernateTemplate`等以 Template 结尾的对数据库操作的类，都使用到了模版模式。\n- **包装器设计模式**：项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们刚开业根据客户的需求能够动态切换不同的数据。\n- **观察者模式**：Spring 事件驱动模型就是观察者模式。\n- **适配器模式**：Spring AOP 的增强或通知使用到了适配器模式、SpringMVC 中也用到了适配器模式适配`Controller`。\n\n\n\n### Spring 循环依赖了解吗，怎么解决？\n\nSpring 中的循环依赖就是指两个及以上的 Bean互相依赖，形成一个循环。比如 BeanA 依赖于 BenaB，而 BeanB 又依赖 BeanA。这种情况可能导致 Spring 容器无法正确初始化这些 Bean。\n\n#### 使用 setter 注入\n\nSpring 中可以通过 Setter 注入解决循环依赖问题，因为Spring 在注入 Bean 的属性时会先创建 Bean 的实例，然后再注入依赖的属性。这样可以保证即使两个 Bean 互相依赖，Spring 也能正确的初始化它们。\n\n#### 使用 @Lazy 注解\n\n在其中一个 Bean 的依赖上使用`@Lazy`注解，这样 Spring 容器在首次访问该 Bean 时才会进行初始化，避免循环依赖问题。\n\n\n\n### Spring 管理事务的方式有几种？\n\n- **编程式事务**：在代码中硬编码（在分布式系统中推荐使用）：通过`TranscationTemplate`或者`TransactionManager`在手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。\n- **声明式事务**：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用）：实际时通过 AOP 实现（基于`@Transcational`的全注解方式使用最多）\n\n\n\n### Srping事务中哪几种事务传播行为？\n\n> 事务传播行为是为了解决业务层方法之间互相调用的事务问题。\n>\n> 当事务方法被另一个事务方法调用时，必须制定事务应该如何传播。\n>\n> 例如：方法可能继续在现有的事务中运行，也可能开启一个新事物，并在自己的事物中运行。\n\n1. **`TransactionDefinition.PROPAGATION_REQUIRED`**：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事物。\n\n\n\n### 什么是 SpringBoot？为什么要有 SpringBoot？\n\nSpringBoot 可以简化 Spring 开发（减少配置文件、开箱即用 ）\n\n\n\n### 如何在 SpringBoot 应用程序中使用 Jetty 而不是 Tomcat？\n\nSpringBoot（spirng-boot-starter-web）使用Tomcat 作为默认的嵌入式 servlet 容器，如果想使用 Jetty 的话，只需要修改 pom.xml （Maven）文件就可以了。\n\n\n\n\n\n### 介绍一下 @SpringBootApplication 注解\n\n`@SpringBootApplication`可以看作是`@Configuration、@EnableAutoConfiguration、@ComponentScan`注解的集合。\n\n- `@Configuration`：运行在上下文中注册额外的`bean`或导入其他配置类\n- `@EnableAutoConfiguration`：启用 Springboot 的自动配置机制\n- `@ComponentScan`：扫描被`@Component`(`@Service`,`@Controller`)注解的 bean，默认会扫描该类所在的包下的所有的类。\n\n\n\n### SpringBoot 的自动配置是如何实现的？\n\n当 SpringBoot 应用启动时，@EnableAutoConfiguration`注解会触发自动配置类的加载。\n\nSpringBoot 会扫描`spring.factories`文件，并加载列出自动配置类。然后 SpringBoot 会根据条件注解的判断，决定是否进行相应的配置。\n\n\n\n### SpringBoot 常用的两种配置文件\n\n我们可以通过`applcation.properties`或者`application.yml`对SpringBoot 程序进行简单的配置。如果不进行配置的话，就是使用默认配置。\n\n\n\n### 什么是 YAML ? YAML配置的优势在哪里？\n\nYAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的树形，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。\n\n相比 Properties 配置文件，YAML 配置方式更加直观清晰，简洁明了，有层次感。\n\n但是 YAML 配置文件不支持`@PropertySource` 注解导入自定义的 YAML 配置。\n\n\n\n### SpringBoot 常用的读取配置文件的方法有哪些？\n\n1. 通过`@Value(\"${property}\")`读取比较简单的配置信息\n\n   > `@value` 这种方式是不被推荐的\n\n2. 通过`@ConfigurationProperties`读取并与 bean 绑定\n\n3. 通过`@ConfigurationProperies`读取并校验\n\n4. 通过`@PropertySource`读取指定的 properties 文件\n\n\n\n### SpringBoot 如何做请求参数校验？\n\n使用 JSR 提供的校验注解\n\n\n\n### SpringBoot 如何监控系统运行状态？\n\n可以使用 SpringBoot Actuator 来对 SpringBoot 项目进行简单的监控。\n\n\n\n\n\n### SpringBoot 中如何实现定时任务？\n\n我们使用`@Scheduled`注解就能很方便地创建一个定时任务。\n\n还需要再 SpringBoot 启动类上添加`@EnableScheduling`注解，这个注解的作用是发现`@Scheduled`的任务并在后台执行该任务。\n\n","slug":"Spring八股文","published":1,"updated":"2024-07-15T04:01:25.796Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xra000qtuj86n5zgwmc","content":"<h2 id=\"Spring-常见面试题总结\"><a class=\"headerlink\" href=\"#Spring-常见面试题总结\"></a>Spring 常见面试题总结</h2>\n<h3 id=\"什么是Spring框架？\"><a class=\"headerlink\" href=\"#什么是Spring框架？\"></a>什么是Spring框架？</h3>\n<p>Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。</p>\n<h3 id=\"谈谈自己对于Spring-IoC的了解\"><a class=\"headerlink\" href=\"#谈谈自己对于Spring-IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3>\n<p><strong>IoC</strong> （Inversion of Control 控制反转）是一种设计模式，用来实现对象之间的解耦。</p>\n<p>IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。</p>\n<h4 id=\"为什么叫控制反转？\"><a class=\"headerlink\" href=\"#为什么叫控制反转？\"></a>为什么叫控制反转？</h4>\n<ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权利</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<h3 id=\"什么是-Bean？\"><a class=\"headerlink\" href=\"#什么是-Bean？\"></a>什么是 Bean？</h3>\n<p>Bean 就是哪些被 IoC 容器所管理的对象。</p>\n<h3 id=\"Component和-Bean的区别是什么？\"><a class=\"headerlink\" href=\"#Component和-Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3>\n<ul>\n<li>@Component 注解用于类，@Bean 注解用于方法。</li>\n<li>@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我需要的时候给我。</li>\n<li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。</li>\n</ul>\n<h3 id=\"注入Bean的注解有哪些？\"><a class=\"headerlink\" href=\"#注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3>\n<p>Spring 内置的<code>@Autowired</code> 还有 JDK 内置的 <code>@Resource</code> 和 <code>@Inject</code> 都可以用于注入 Bean。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a class=\"headerlink\" href=\"#Autowired和-Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3>\n<ul>\n<li><code>@Autowired</code> 是 Spring 提供的注解，<code>@Resource</code> 是 JDK 提供的注解。</li>\n<li><code>Autowired</code> 默认的注入方式为<code>byType</code>（根据类型进行匹配），<code>@Resource</code>默认注入方式为 <code>byName</code>（根据名称进行匹配）。</li>\n<li>当一个接口存在多个实现类的情况下，<code>@Autowired</code> 和 <code>@Resource</code> 都需要通过名称才能正确匹配到对应的  Bean。<code>Autowired</code> 可以通过 <code>@Qualifier</code> 注解来显式指定名称，<code>@Resource</code> 可以通过 name 属性来显式指定名称。</li>\n<li>@Autowired 支持在构造函数、方法、字段和参数上使用。<code>@Resource</code> 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li>\n</ul>\n<h3 id=\"Bean-的作用域有哪些\"><a class=\"headerlink\" href=\"#Bean-的作用域有哪些\"></a>Bean 的作用域有哪些?</h3>\n<ul>\n<li><strong>Singleton</strong> Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。</li>\n<li><strong>prototype</strong>  每次请求都会创建一个新的 bean 实例。</li>\n<li><strong>Request</strong> 每次 Http 请求都会创建一个新的 bean 实例。</li>\n<li><strong>Session</strong> 每个 Http Session 中会有一个 bean 实例。</li>\n</ul>\n<h3 id=\"Bean-是线程安全的吗？\"><a class=\"headerlink\" href=\"#Bean-是线程安全的吗？\"></a>Bean 是线程安全的吗？</h3>\n<p>在 Spring 中 Bean 是否安全，取决于其作用域和状态。</p>\n<p>单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。</p>\n<h3 id=\"Bean的生命周期了解么？\"><a class=\"headerlink\" href=\"#Bean的生命周期了解么？\"></a>Bean的生命周期了解么？</h3>\n<p>bean 的生命周期分为五个阶段：</p>\n<ol>\n<li>调用构造器或者是通过工厂的方式创建 bean</li>\n<li>给 bean 的属性注入值</li>\n<li>调用初始化方法，进行初始化</li>\n<li>bean 被完全初始化和配置，就可以使用了</li>\n<li>当 IOC 容器关闭的时候，销毁 bean</li>\n</ol>\n<h3 id=\"谈谈对于AOP的了解\"><a class=\"headerlink\" href=\"#谈谈对于AOP的了解\"></a>谈谈对于AOP的了解</h3>\n<p>AOP（面向切面编程）将与业务无关但在多个模块中重复出现的通用逻辑（如事务管理、日志管理、权限控制等）从业务逻辑中分离出来。通过将这些横切关注点封装到独立的模块中，从而减少系统的重复代码，降低模块之间的耦合度，并提高系统的扩展性和可维护性。</p>\n<p>Spring AOP 是通过动态代理来实现切面功能，<strong>JDK动态代理</strong>：用于代理实现了接口的类。<strong>CGLIB代理</strong>：用于代理没有实现接口的类，通过生成目标类的子类来实现。</p>\n<h3 id=\"Spring-AOP-和-AspectJ-AOP-有什么区别？\"><a class=\"headerlink\" href=\"#Spring-AOP-和-AspectJ-AOP-有什么区别？\"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h3>\n<p>Spring AOP 和 AspectJ AOP 的主要区别在于实现机制、功能范围和性能。Spring AOP 基于动态代理实现，主要适用于方法级别的拦截，配置简单，适合大多数常用的 AOP 场景。AspectJ AOP 则基于编译时和类加载时织入，支持更广泛的连接点(如构造函数、字段等)，功能更强大，但配置和使用相对复杂，性能也更高，适用于需要精细控制和高性能场景。</p>\n<h3 id=\"AspectJ-定义的通知类型有哪些？\"><a class=\"headerlink\" href=\"#AspectJ-定义的通知类型有哪些？\"></a>AspectJ 定义的通知类型有哪些？</h3>\n<ul>\n<li>\n<p><strong>Before</strong>（前置通知）：在方法执行之前运行。</p>\n</li>\n<li>\n<p><strong>After</strong>（后置通知）：在方法执行之后运行，无论方法是否成功完成。</p>\n</li>\n<li>\n<p><strong>AfterReturning</strong>（返回通知）：在方法成功完成后运行。</p>\n</li>\n<li>\n<p><strong>AfterThorowing</strong>（异常通知）：在方法抛出异常后运行。</p>\n</li>\n<li>\n<p><strong>Around</strong>（环绕通知）：既可以在方法执行之前运行，也可以在方法执行之后运行。</p>\n</li>\n</ul>\n<h3 id=\"多个切面执行顺序如何控制？\"><a class=\"headerlink\" href=\"#多个切面执行顺序如何控制？\"></a>多个切面执行顺序如何控制？</h3>\n<ol>\n<li>通常使用<code>@Order</code> 注解直接定义切面顺序</li>\n<li>实现<code>Ordered</code>接口重写<code>getOrder</code>方法</li>\n</ol>\n<h3 id=\"说说自己对于-Spring-MVC-了解？\"><a class=\"headerlink\" href=\"#说说自己对于-Spring-MVC-了解？\"></a>说说自己对于 Spring MVC 了解？</h3>\n<p>SpringMVC是一个基于Java的实现了MVC设计模式的轻量级Web框架。它通过分离应用程序的业务逻辑、用户界面和控制流程，简化了Web应用程序的开发和维护。</p>\n<h3 id=\"SpringMVC-的工作流程是什么？\"><a class=\"headerlink\" href=\"#SpringMVC-的工作流程是什么？\"></a>SpringMVC 的工作流程是什么？</h3>\n<ol>\n<li>客户端请求首先到达<code>DispatcherServlet</code>。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerMapping</code>找到具体的处理器（Controller）。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerAdapter</code>调用处理器中的具体方法。</li>\n<li>处理器方法执行完毕后返回<code>ModelAndView</code>对象，包含视图名称和模型数据。</li>\n<li><code>DispatcherServlet</code>使用<code>ViewResolver</code>将视图名称解析为具体的视图。</li>\n<li>最后，<code>DispatcherServlet</code>将模型数据传递给视图，视图渲染并返回响应给客户端。</li>\n</ol>\n<p>客户端发送请求 -&gt; 2. DispatcherServlet接收请求 -&gt; 3. HandlerMapping查找控制器 -&gt; 4. HandlerAdapter调用控制器方法 -&gt; 5. Controller处理请求 -&gt; 6. ViewResolver解析视图 -&gt; 7. 视图渲染 -&gt; 8. 返回响应给客户端</p>\n<h3 id=\"统一异常处理怎么做？\"><a class=\"headerlink\" href=\"#统一异常处理怎么做？\"></a>统一异常处理怎么做？</h3>\n<p>使用注解的方式统一异常处理，使用<code>@controllerAdvice</code>和<code>@ExceptionHandler</code>这两个注解。</p>\n<h3 id=\"Spring-中用到了哪些设计模式？\"><a class=\"headerlink\" href=\"#Spring-中用到了哪些设计模式？\"></a>Spring 中用到了哪些设计模式？</h3>\n<ul>\n<li><strong>工厂设计模式</strong>：Spring 使用工厂模式通过<code>BeanFactory</code>、<code>ApplicationContext</code>创建 bean 对象。</li>\n<li><strong>代理设计模式</strong>：SpringAOP 功能实现。</li>\n<li><strong>单例设计模式</strong>：Spring 中的 Bean 默认都是单例的。</li>\n<li><strong>模版方法模式</strong>：Spring 中<code>jdbcTemplate</code>、<code>hibernateTemplate</code>等以 Template 结尾的对数据库操作的类，都使用到了模版模式。</li>\n<li><strong>包装器设计模式</strong>：项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们刚开业根据客户的需求能够动态切换不同的数据。</li>\n<li><strong>观察者模式</strong>：Spring 事件驱动模型就是观察者模式。</li>\n<li><strong>适配器模式</strong>：Spring AOP 的增强或通知使用到了适配器模式、SpringMVC 中也用到了适配器模式适配<code>Controller</code>。</li>\n</ul>\n<h3 id=\"Spring-循环依赖了解吗，怎么解决？\"><a class=\"headerlink\" href=\"#Spring-循环依赖了解吗，怎么解决？\"></a>Spring 循环依赖了解吗，怎么解决？</h3>\n<p>Spring 中的循环依赖就是指两个及以上的 Bean互相依赖，形成一个循环。比如 BeanA 依赖于 BenaB，而 BeanB 又依赖 BeanA。这种情况可能导致 Spring 容器无法正确初始化这些 Bean。</p>\n<h4 id=\"使用-setter-注入\"><a class=\"headerlink\" href=\"#使用-setter-注入\"></a>使用 setter 注入</h4>\n<p>Spring 中可以通过 Setter 注入解决循环依赖问题，因为Spring 在注入 Bean 的属性时会先创建 Bean 的实例，然后再注入依赖的属性。这样可以保证即使两个 Bean 互相依赖，Spring 也能正确的初始化它们。</p>\n<h4 id=\"使用-Lazy-注解\"><a class=\"headerlink\" href=\"#使用-Lazy-注解\"></a>使用 @Lazy 注解</h4>\n<p>在其中一个 Bean 的依赖上使用<code>@Lazy</code>注解，这样 Spring 容器在首次访问该 Bean 时才会进行初始化，避免循环依赖问题。</p>\n<h3 id=\"Spring-管理事务的方式有几种？\"><a class=\"headerlink\" href=\"#Spring-管理事务的方式有几种？\"></a>Spring 管理事务的方式有几种？</h3>\n<ul>\n<li><strong>编程式事务</strong>：在代码中硬编码（在分布式系统中推荐使用）：通过<code>TranscationTemplate</code>或者<code>TransactionManager</code>在手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。</li>\n<li><strong>声明式事务</strong>：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用）：实际时通过 AOP 实现（基于<code>@Transcational</code>的全注解方式使用最多）</li>\n</ul>\n<h3 id=\"Srping事务中哪几种事务传播行为？\"><a class=\"headerlink\" href=\"#Srping事务中哪几种事务传播行为？\"></a>Srping事务中哪几种事务传播行为？</h3>\n<blockquote>\n<p>事务传播行为是为了解决业务层方法之间互相调用的事务问题。</p>\n<p>当事务方法被另一个事务方法调用时，必须制定事务应该如何传播。</p>\n<p>例如：方法可能继续在现有的事务中运行，也可能开启一个新事物，并在自己的事物中运行。</p>\n</blockquote>\n<ol>\n<li><strong><code>TransactionDefinition.PROPAGATION_REQUIRED</code></strong>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事物。</li>\n</ol>\n<h3 id=\"什么是-SpringBoot？为什么要有-SpringBoot？\"><a class=\"headerlink\" href=\"#什么是-SpringBoot？为什么要有-SpringBoot？\"></a>什么是 SpringBoot？为什么要有 SpringBoot？</h3>\n<p>SpringBoot 可以简化 Spring 开发（减少配置文件、开箱即用 ）</p>\n<h3 id=\"如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"><a class=\"headerlink\" href=\"#如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"></a>如何在 SpringBoot 应用程序中使用 Jetty 而不是 Tomcat？</h3>\n<p>SpringBoot（spirng-boot-starter-web）使用Tomcat 作为默认的嵌入式 servlet 容器，如果想使用 Jetty 的话，只需要修改 pom.xml （Maven）文件就可以了。</p>\n<h3 id=\"介绍一下-SpringBootApplication-注解\"><a class=\"headerlink\" href=\"#介绍一下-SpringBootApplication-注解\"></a>介绍一下 @SpringBootApplication 注解</h3>\n<p><code>@SpringBootApplication</code>可以看作是<code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code>注解的集合。</p>\n<ul>\n<li><code>@Configuration</code>：运行在上下文中注册额外的<code>bean</code>或导入其他配置类</li>\n<li><code>@EnableAutoConfiguration</code>：启用 Springboot 的自动配置机制</li>\n<li><code>@ComponentScan</code>：扫描被<code>@Component</code>(<code>@Service</code>,<code>@Controller</code>)注解的 bean，默认会扫描该类所在的包下的所有的类。</li>\n</ul>\n<h3 id=\"SpringBoot-的自动配置是如何实现的？\"><a class=\"headerlink\" href=\"#SpringBoot-的自动配置是如何实现的？\"></a>SpringBoot 的自动配置是如何实现的？</h3>\n<p>当 SpringBoot 应用启动时，@EnableAutoConfiguration`注解会触发自动配置类的加载。</p>\n<p>SpringBoot 会扫描<code>spring.factories</code>文件，并加载列出自动配置类。然后 SpringBoot 会根据条件注解的判断，决定是否进行相应的配置。</p>\n<h3 id=\"SpringBoot-常用的两种配置文件\"><a class=\"headerlink\" href=\"#SpringBoot-常用的两种配置文件\"></a>SpringBoot 常用的两种配置文件</h3>\n<p>我们可以通过<code>applcation.properties</code>或者<code>application.yml</code>对SpringBoot 程序进行简单的配置。如果不进行配置的话，就是使用默认配置。</p>\n<h3 id=\"什么是-YAML-YAML配置的优势在哪里？\"><a class=\"headerlink\" href=\"#什么是-YAML-YAML配置的优势在哪里？\"></a>什么是 YAML ? YAML配置的优势在哪里？</h3>\n<p>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的树形，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。</p>\n<p>相比 Properties 配置文件，YAML 配置方式更加直观清晰，简洁明了，有层次感。</p>\n<p>但是 YAML 配置文件不支持<code>@PropertySource</code> 注解导入自定义的 YAML 配置。</p>\n<h3 id=\"SpringBoot-常用的读取配置文件的方法有哪些？\"><a class=\"headerlink\" href=\"#SpringBoot-常用的读取配置文件的方法有哪些？\"></a>SpringBoot 常用的读取配置文件的方法有哪些？</h3>\n<ol>\n<li>\n<p>通过<code>@Value(&quot;$&#123;property&#125;&quot;)</code>读取比较简单的配置信息</p>\n<blockquote>\n<p><code>@value</code> 这种方式是不被推荐的</p>\n</blockquote>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperties</code>读取并与 bean 绑定</p>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperies</code>读取并校验</p>\n</li>\n<li>\n<p>通过<code>@PropertySource</code>读取指定的 properties 文件</p>\n</li>\n</ol>\n<h3 id=\"SpringBoot-如何做请求参数校验？\"><a class=\"headerlink\" href=\"#SpringBoot-如何做请求参数校验？\"></a>SpringBoot 如何做请求参数校验？</h3>\n<p>使用 JSR 提供的校验注解</p>\n<h3 id=\"SpringBoot-如何监控系统运行状态？\"><a class=\"headerlink\" href=\"#SpringBoot-如何监控系统运行状态？\"></a>SpringBoot 如何监控系统运行状态？</h3>\n<p>可以使用 SpringBoot Actuator 来对 SpringBoot 项目进行简单的监控。</p>\n<h3 id=\"SpringBoot-中如何实现定时任务？\"><a class=\"headerlink\" href=\"#SpringBoot-中如何实现定时任务？\"></a>SpringBoot 中如何实现定时任务？</h3>\n<p>我们使用<code>@Scheduled</code>注解就能很方便地创建一个定时任务。</p>\n<p>还需要再 SpringBoot 启动类上添加<code>@EnableScheduling</code>注解，这个注解的作用是发现<code>@Scheduled</code>的任务并在后台执行该任务。</p>\n","excerpt":"","more":"<h2 id=\"Spring-常见面试题总结\"><a class=\"headerlink\" href=\"#Spring-常见面试题总结\"></a>Spring 常见面试题总结</h2>\n<h3 id=\"什么是Spring框架？\"><a class=\"headerlink\" href=\"#什么是Spring框架？\"></a>什么是Spring框架？</h3>\n<p>Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。</p>\n<h3 id=\"谈谈自己对于Spring-IoC的了解\"><a class=\"headerlink\" href=\"#谈谈自己对于Spring-IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3>\n<p><strong>IoC</strong> （Inversion of Control 控制反转）是一种设计模式，用来实现对象之间的解耦。</p>\n<p>IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。</p>\n<h4 id=\"为什么叫控制反转？\"><a class=\"headerlink\" href=\"#为什么叫控制反转？\"></a>为什么叫控制反转？</h4>\n<ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权利</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<h3 id=\"什么是-Bean？\"><a class=\"headerlink\" href=\"#什么是-Bean？\"></a>什么是 Bean？</h3>\n<p>Bean 就是哪些被 IoC 容器所管理的对象。</p>\n<h3 id=\"Component和-Bean的区别是什么？\"><a class=\"headerlink\" href=\"#Component和-Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3>\n<ul>\n<li>@Component 注解用于类，@Bean 注解用于方法。</li>\n<li>@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我需要的时候给我。</li>\n<li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。</li>\n</ul>\n<h3 id=\"注入Bean的注解有哪些？\"><a class=\"headerlink\" href=\"#注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3>\n<p>Spring 内置的<code>@Autowired</code> 还有 JDK 内置的 <code>@Resource</code> 和 <code>@Inject</code> 都可以用于注入 Bean。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a class=\"headerlink\" href=\"#Autowired和-Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3>\n<ul>\n<li><code>@Autowired</code> 是 Spring 提供的注解，<code>@Resource</code> 是 JDK 提供的注解。</li>\n<li><code>Autowired</code> 默认的注入方式为<code>byType</code>（根据类型进行匹配），<code>@Resource</code>默认注入方式为 <code>byName</code>（根据名称进行匹配）。</li>\n<li>当一个接口存在多个实现类的情况下，<code>@Autowired</code> 和 <code>@Resource</code> 都需要通过名称才能正确匹配到对应的  Bean。<code>Autowired</code> 可以通过 <code>@Qualifier</code> 注解来显式指定名称，<code>@Resource</code> 可以通过 name 属性来显式指定名称。</li>\n<li>@Autowired 支持在构造函数、方法、字段和参数上使用。<code>@Resource</code> 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li>\n</ul>\n<h3 id=\"Bean-的作用域有哪些\"><a class=\"headerlink\" href=\"#Bean-的作用域有哪些\"></a>Bean 的作用域有哪些?</h3>\n<ul>\n<li><strong>Singleton</strong> Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。</li>\n<li><strong>prototype</strong>  每次请求都会创建一个新的 bean 实例。</li>\n<li><strong>Request</strong> 每次 Http 请求都会创建一个新的 bean 实例。</li>\n<li><strong>Session</strong> 每个 Http Session 中会有一个 bean 实例。</li>\n</ul>\n<h3 id=\"Bean-是线程安全的吗？\"><a class=\"headerlink\" href=\"#Bean-是线程安全的吗？\"></a>Bean 是线程安全的吗？</h3>\n<p>在 Spring 中 Bean 是否安全，取决于其作用域和状态。</p>\n<p>单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。</p>\n<h3 id=\"Bean的生命周期了解么？\"><a class=\"headerlink\" href=\"#Bean的生命周期了解么？\"></a>Bean的生命周期了解么？</h3>\n<p>bean 的生命周期分为五个阶段：</p>\n<ol>\n<li>调用构造器或者是通过工厂的方式创建 bean</li>\n<li>给 bean 的属性注入值</li>\n<li>调用初始化方法，进行初始化</li>\n<li>bean 被完全初始化和配置，就可以使用了</li>\n<li>当 IOC 容器关闭的时候，销毁 bean</li>\n</ol>\n<h3 id=\"谈谈对于AOP的了解\"><a class=\"headerlink\" href=\"#谈谈对于AOP的了解\"></a>谈谈对于AOP的了解</h3>\n<p>AOP（面向切面编程）将与业务无关但在多个模块中重复出现的通用逻辑（如事务管理、日志管理、权限控制等）从业务逻辑中分离出来。通过将这些横切关注点封装到独立的模块中，从而减少系统的重复代码，降低模块之间的耦合度，并提高系统的扩展性和可维护性。</p>\n<p>Spring AOP 是通过动态代理来实现切面功能，<strong>JDK动态代理</strong>：用于代理实现了接口的类。<strong>CGLIB代理</strong>：用于代理没有实现接口的类，通过生成目标类的子类来实现。</p>\n<h3 id=\"Spring-AOP-和-AspectJ-AOP-有什么区别？\"><a class=\"headerlink\" href=\"#Spring-AOP-和-AspectJ-AOP-有什么区别？\"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h3>\n<p>Spring AOP 和 AspectJ AOP 的主要区别在于实现机制、功能范围和性能。Spring AOP 基于动态代理实现，主要适用于方法级别的拦截，配置简单，适合大多数常用的 AOP 场景。AspectJ AOP 则基于编译时和类加载时织入，支持更广泛的连接点(如构造函数、字段等)，功能更强大，但配置和使用相对复杂，性能也更高，适用于需要精细控制和高性能场景。</p>\n<h3 id=\"AspectJ-定义的通知类型有哪些？\"><a class=\"headerlink\" href=\"#AspectJ-定义的通知类型有哪些？\"></a>AspectJ 定义的通知类型有哪些？</h3>\n<ul>\n<li>\n<p><strong>Before</strong>（前置通知）：在方法执行之前运行。</p>\n</li>\n<li>\n<p><strong>After</strong>（后置通知）：在方法执行之后运行，无论方法是否成功完成。</p>\n</li>\n<li>\n<p><strong>AfterReturning</strong>（返回通知）：在方法成功完成后运行。</p>\n</li>\n<li>\n<p><strong>AfterThorowing</strong>（异常通知）：在方法抛出异常后运行。</p>\n</li>\n<li>\n<p><strong>Around</strong>（环绕通知）：既可以在方法执行之前运行，也可以在方法执行之后运行。</p>\n</li>\n</ul>\n<h3 id=\"多个切面执行顺序如何控制？\"><a class=\"headerlink\" href=\"#多个切面执行顺序如何控制？\"></a>多个切面执行顺序如何控制？</h3>\n<ol>\n<li>通常使用<code>@Order</code> 注解直接定义切面顺序</li>\n<li>实现<code>Ordered</code>接口重写<code>getOrder</code>方法</li>\n</ol>\n<h3 id=\"说说自己对于-Spring-MVC-了解？\"><a class=\"headerlink\" href=\"#说说自己对于-Spring-MVC-了解？\"></a>说说自己对于 Spring MVC 了解？</h3>\n<p>SpringMVC是一个基于Java的实现了MVC设计模式的轻量级Web框架。它通过分离应用程序的业务逻辑、用户界面和控制流程，简化了Web应用程序的开发和维护。</p>\n<h3 id=\"SpringMVC-的工作流程是什么？\"><a class=\"headerlink\" href=\"#SpringMVC-的工作流程是什么？\"></a>SpringMVC 的工作流程是什么？</h3>\n<ol>\n<li>客户端请求首先到达<code>DispatcherServlet</code>。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerMapping</code>找到具体的处理器（Controller）。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerAdapter</code>调用处理器中的具体方法。</li>\n<li>处理器方法执行完毕后返回<code>ModelAndView</code>对象，包含视图名称和模型数据。</li>\n<li><code>DispatcherServlet</code>使用<code>ViewResolver</code>将视图名称解析为具体的视图。</li>\n<li>最后，<code>DispatcherServlet</code>将模型数据传递给视图，视图渲染并返回响应给客户端。</li>\n</ol>\n<p>客户端发送请求 -&gt; 2. DispatcherServlet接收请求 -&gt; 3. HandlerMapping查找控制器 -&gt; 4. HandlerAdapter调用控制器方法 -&gt; 5. Controller处理请求 -&gt; 6. ViewResolver解析视图 -&gt; 7. 视图渲染 -&gt; 8. 返回响应给客户端</p>\n<h3 id=\"统一异常处理怎么做？\"><a class=\"headerlink\" href=\"#统一异常处理怎么做？\"></a>统一异常处理怎么做？</h3>\n<p>使用注解的方式统一异常处理，使用<code>@controllerAdvice</code>和<code>@ExceptionHandler</code>这两个注解。</p>\n<h3 id=\"Spring-中用到了哪些设计模式？\"><a class=\"headerlink\" href=\"#Spring-中用到了哪些设计模式？\"></a>Spring 中用到了哪些设计模式？</h3>\n<ul>\n<li><strong>工厂设计模式</strong>：Spring 使用工厂模式通过<code>BeanFactory</code>、<code>ApplicationContext</code>创建 bean 对象。</li>\n<li><strong>代理设计模式</strong>：SpringAOP 功能实现。</li>\n<li><strong>单例设计模式</strong>：Spring 中的 Bean 默认都是单例的。</li>\n<li><strong>模版方法模式</strong>：Spring 中<code>jdbcTemplate</code>、<code>hibernateTemplate</code>等以 Template 结尾的对数据库操作的类，都使用到了模版模式。</li>\n<li><strong>包装器设计模式</strong>：项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们刚开业根据客户的需求能够动态切换不同的数据。</li>\n<li><strong>观察者模式</strong>：Spring 事件驱动模型就是观察者模式。</li>\n<li><strong>适配器模式</strong>：Spring AOP 的增强或通知使用到了适配器模式、SpringMVC 中也用到了适配器模式适配<code>Controller</code>。</li>\n</ul>\n<h3 id=\"Spring-循环依赖了解吗，怎么解决？\"><a class=\"headerlink\" href=\"#Spring-循环依赖了解吗，怎么解决？\"></a>Spring 循环依赖了解吗，怎么解决？</h3>\n<p>Spring 中的循环依赖就是指两个及以上的 Bean互相依赖，形成一个循环。比如 BeanA 依赖于 BenaB，而 BeanB 又依赖 BeanA。这种情况可能导致 Spring 容器无法正确初始化这些 Bean。</p>\n<h4 id=\"使用-setter-注入\"><a class=\"headerlink\" href=\"#使用-setter-注入\"></a>使用 setter 注入</h4>\n<p>Spring 中可以通过 Setter 注入解决循环依赖问题，因为Spring 在注入 Bean 的属性时会先创建 Bean 的实例，然后再注入依赖的属性。这样可以保证即使两个 Bean 互相依赖，Spring 也能正确的初始化它们。</p>\n<h4 id=\"使用-Lazy-注解\"><a class=\"headerlink\" href=\"#使用-Lazy-注解\"></a>使用 @Lazy 注解</h4>\n<p>在其中一个 Bean 的依赖上使用<code>@Lazy</code>注解，这样 Spring 容器在首次访问该 Bean 时才会进行初始化，避免循环依赖问题。</p>\n<h3 id=\"Spring-管理事务的方式有几种？\"><a class=\"headerlink\" href=\"#Spring-管理事务的方式有几种？\"></a>Spring 管理事务的方式有几种？</h3>\n<ul>\n<li><strong>编程式事务</strong>：在代码中硬编码（在分布式系统中推荐使用）：通过<code>TranscationTemplate</code>或者<code>TransactionManager</code>在手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。</li>\n<li><strong>声明式事务</strong>：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用）：实际时通过 AOP 实现（基于<code>@Transcational</code>的全注解方式使用最多）</li>\n</ul>\n<h3 id=\"Srping事务中哪几种事务传播行为？\"><a class=\"headerlink\" href=\"#Srping事务中哪几种事务传播行为？\"></a>Srping事务中哪几种事务传播行为？</h3>\n<blockquote>\n<p>事务传播行为是为了解决业务层方法之间互相调用的事务问题。</p>\n<p>当事务方法被另一个事务方法调用时，必须制定事务应该如何传播。</p>\n<p>例如：方法可能继续在现有的事务中运行，也可能开启一个新事物，并在自己的事物中运行。</p>\n</blockquote>\n<ol>\n<li><strong><code>TransactionDefinition.PROPAGATION_REQUIRED</code></strong>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事物。</li>\n</ol>\n<h3 id=\"什么是-SpringBoot？为什么要有-SpringBoot？\"><a class=\"headerlink\" href=\"#什么是-SpringBoot？为什么要有-SpringBoot？\"></a>什么是 SpringBoot？为什么要有 SpringBoot？</h3>\n<p>SpringBoot 可以简化 Spring 开发（减少配置文件、开箱即用 ）</p>\n<h3 id=\"如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"><a class=\"headerlink\" href=\"#如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"></a>如何在 SpringBoot 应用程序中使用 Jetty 而不是 Tomcat？</h3>\n<p>SpringBoot（spirng-boot-starter-web）使用Tomcat 作为默认的嵌入式 servlet 容器，如果想使用 Jetty 的话，只需要修改 pom.xml （Maven）文件就可以了。</p>\n<h3 id=\"介绍一下-SpringBootApplication-注解\"><a class=\"headerlink\" href=\"#介绍一下-SpringBootApplication-注解\"></a>介绍一下 @SpringBootApplication 注解</h3>\n<p><code>@SpringBootApplication</code>可以看作是<code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code>注解的集合。</p>\n<ul>\n<li><code>@Configuration</code>：运行在上下文中注册额外的<code>bean</code>或导入其他配置类</li>\n<li><code>@EnableAutoConfiguration</code>：启用 Springboot 的自动配置机制</li>\n<li><code>@ComponentScan</code>：扫描被<code>@Component</code>(<code>@Service</code>,<code>@Controller</code>)注解的 bean，默认会扫描该类所在的包下的所有的类。</li>\n</ul>\n<h3 id=\"SpringBoot-的自动配置是如何实现的？\"><a class=\"headerlink\" href=\"#SpringBoot-的自动配置是如何实现的？\"></a>SpringBoot 的自动配置是如何实现的？</h3>\n<p>当 SpringBoot 应用启动时，@EnableAutoConfiguration`注解会触发自动配置类的加载。</p>\n<p>SpringBoot 会扫描<code>spring.factories</code>文件，并加载列出自动配置类。然后 SpringBoot 会根据条件注解的判断，决定是否进行相应的配置。</p>\n<h3 id=\"SpringBoot-常用的两种配置文件\"><a class=\"headerlink\" href=\"#SpringBoot-常用的两种配置文件\"></a>SpringBoot 常用的两种配置文件</h3>\n<p>我们可以通过<code>applcation.properties</code>或者<code>application.yml</code>对SpringBoot 程序进行简单的配置。如果不进行配置的话，就是使用默认配置。</p>\n<h3 id=\"什么是-YAML-YAML配置的优势在哪里？\"><a class=\"headerlink\" href=\"#什么是-YAML-YAML配置的优势在哪里？\"></a>什么是 YAML ? YAML配置的优势在哪里？</h3>\n<p>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的树形，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。</p>\n<p>相比 Properties 配置文件，YAML 配置方式更加直观清晰，简洁明了，有层次感。</p>\n<p>但是 YAML 配置文件不支持<code>@PropertySource</code> 注解导入自定义的 YAML 配置。</p>\n<h3 id=\"SpringBoot-常用的读取配置文件的方法有哪些？\"><a class=\"headerlink\" href=\"#SpringBoot-常用的读取配置文件的方法有哪些？\"></a>SpringBoot 常用的读取配置文件的方法有哪些？</h3>\n<ol>\n<li>\n<p>通过<code>@Value(&quot;$&#123;property&#125;&quot;)</code>读取比较简单的配置信息</p>\n<blockquote>\n<p><code>@value</code> 这种方式是不被推荐的</p>\n</blockquote>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperties</code>读取并与 bean 绑定</p>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperies</code>读取并校验</p>\n</li>\n<li>\n<p>通过<code>@PropertySource</code>读取指定的 properties 文件</p>\n</li>\n</ol>\n<h3 id=\"SpringBoot-如何做请求参数校验？\"><a class=\"headerlink\" href=\"#SpringBoot-如何做请求参数校验？\"></a>SpringBoot 如何做请求参数校验？</h3>\n<p>使用 JSR 提供的校验注解</p>\n<h3 id=\"SpringBoot-如何监控系统运行状态？\"><a class=\"headerlink\" href=\"#SpringBoot-如何监控系统运行状态？\"></a>SpringBoot 如何监控系统运行状态？</h3>\n<p>可以使用 SpringBoot Actuator 来对 SpringBoot 项目进行简单的监控。</p>\n<h3 id=\"SpringBoot-中如何实现定时任务？\"><a class=\"headerlink\" href=\"#SpringBoot-中如何实现定时任务？\"></a>SpringBoot 中如何实现定时任务？</h3>\n<p>我们使用<code>@Scheduled</code>注解就能很方便地创建一个定时任务。</p>\n<p>还需要再 SpringBoot 启动类上添加<code>@EnableScheduling</code>注解，这个注解的作用是发现<code>@Scheduled</code>的任务并在后台执行该任务。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Vaultwarden搭建","date":"2024-06-24T08:56:37.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151200065.webp","_content":"\n# 如何搭建 Vaultwarden 服务器：一步步教程\n\nVaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。\n\n## 前提条件\n\n在开始之前，确保你的系统已经安装了 **Docker** 和 **Docker Compose**。\n\n## 步骤 1: 创建数据存储目录\n\n首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。\n\n```bash\nmkdir -p /opt/docker_data/vaultwarden\ncd /opt/docker_data/vaultwarden\n```\n\n## 步骤 2: 创建 Docker Compose 文件\n\n接下来，我们将创建一个 `docker-compose.yml` 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：\n\n```bash\nvim docker-compose.yml\n```\n\n然后，将以下配置粘贴到 `docker-compose.yml` 文件中：\n\n```yaml\nversion: '3'\n\nservices:\n  vaultwarden:\n    container_name: vaultwarden\n    image: vaultwarden/server:latest\n    restart: unless-stopped\n    volumes:\n      - ./data/:/data/\n    ports:\n      - 8080:80\n    environment:\n      - DOMAIN=https://subdomain.yourdomain.com # 关联的域名。\n      - LOGIN_RATELIMIT_MAX_BURST=10 # 最大请求次数。\n      - LOGIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_RATELIMIT_MAX_BURST=10 # admin最大请求次数。\n      - ADMIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_SESSION_LIFETIME=20 # 会话持续时间\n      - ADMIN_TOKEN=YourReallyStrongAdminTokenHere # 管理员面板的令牌\n      - SENDS_ALLOWED=true  # 是否允许用户创建Bitwarden发送\n      - EMERGENCY_ACCESS_ALLOWED=true # 控制用户是否可以启用紧急访问其账户的权限\n      - WEB_VAULT_ENABLED=true # 网络保险库是否可访问。\n      - SIGNUPS_ALLOWED=true # 新用户是否可以在没有邀请的情况下注册账户\n```\n\n## 步骤 3: 启动 Vaultwarden\n\n配置好 `docker-compose.yml` 文件后，使用以下命令启动 Vaultwarden 服务：\n\n```bash\ndocker-compose up -d\n```\n\n这个命令会在后台启动 Vaultwarden 服务。可以通过访问 `http://localhost:8080` 或在配置文件中指定的域名来访问 Vaultwarden。\n\n\n## 总结\n\n恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！\n","source":"_posts/Vaultwarden搭建.md","raw":"---\ntitle: Vaultwarden搭建\ndate: 2024-06-24 16:56:37\ntags: Linux\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151200065.webp\ncategories: Linux\n---\n\n# 如何搭建 Vaultwarden 服务器：一步步教程\n\nVaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。\n\n## 前提条件\n\n在开始之前，确保你的系统已经安装了 **Docker** 和 **Docker Compose**。\n\n## 步骤 1: 创建数据存储目录\n\n首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。\n\n```bash\nmkdir -p /opt/docker_data/vaultwarden\ncd /opt/docker_data/vaultwarden\n```\n\n## 步骤 2: 创建 Docker Compose 文件\n\n接下来，我们将创建一个 `docker-compose.yml` 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：\n\n```bash\nvim docker-compose.yml\n```\n\n然后，将以下配置粘贴到 `docker-compose.yml` 文件中：\n\n```yaml\nversion: '3'\n\nservices:\n  vaultwarden:\n    container_name: vaultwarden\n    image: vaultwarden/server:latest\n    restart: unless-stopped\n    volumes:\n      - ./data/:/data/\n    ports:\n      - 8080:80\n    environment:\n      - DOMAIN=https://subdomain.yourdomain.com # 关联的域名。\n      - LOGIN_RATELIMIT_MAX_BURST=10 # 最大请求次数。\n      - LOGIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_RATELIMIT_MAX_BURST=10 # admin最大请求次数。\n      - ADMIN_RATELIMIT_SECONDS=60 # 平均秒数\n      - ADMIN_SESSION_LIFETIME=20 # 会话持续时间\n      - ADMIN_TOKEN=YourReallyStrongAdminTokenHere # 管理员面板的令牌\n      - SENDS_ALLOWED=true  # 是否允许用户创建Bitwarden发送\n      - EMERGENCY_ACCESS_ALLOWED=true # 控制用户是否可以启用紧急访问其账户的权限\n      - WEB_VAULT_ENABLED=true # 网络保险库是否可访问。\n      - SIGNUPS_ALLOWED=true # 新用户是否可以在没有邀请的情况下注册账户\n```\n\n## 步骤 3: 启动 Vaultwarden\n\n配置好 `docker-compose.yml` 文件后，使用以下命令启动 Vaultwarden 服务：\n\n```bash\ndocker-compose up -d\n```\n\n这个命令会在后台启动 Vaultwarden 服务。可以通过访问 `http://localhost:8080` 或在配置文件中指定的域名来访问 Vaultwarden。\n\n\n## 总结\n\n恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！\n","slug":"Vaultwarden搭建","published":1,"updated":"2024-07-15T04:00:50.768Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrc000utuj83km66ghf","content":"<h1 id=\"如何搭建-Vaultwarden-服务器：一步步教程\"><a class=\"headerlink\" href=\"#如何搭建-Vaultwarden-服务器：一步步教程\"></a>如何搭建 Vaultwarden 服务器：一步步教程</h1>\n<p>Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。</p>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在开始之前，确保你的系统已经安装了 <strong>Docker</strong> 和 <strong>Docker Compose</strong>。</p>\n<h2 id=\"步骤-1-创建数据存储目录\"><a class=\"headerlink\" href=\"#步骤-1-创建数据存储目录\"></a>步骤 1: 创建数据存储目录</h2>\n<p>首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/docker_data/vaultwarden\n<span class=\"token builtin class-name\">cd</span> /opt/docker_data/vaultwarden<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-2-创建-Docker-Compose-文件\"><a class=\"headerlink\" href=\"#步骤-2-创建-Docker-Compose-文件\"></a>步骤 2: 创建 Docker Compose 文件</h2>\n<p>接下来，我们将创建一个 <code>docker-compose.yml</code> 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> docker-compose.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，将以下配置粘贴到 <code>docker-compose.yml</code> 文件中：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">vaultwarden</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> vaultwarden\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> vaultwarden/server<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./data/<span class=\"token punctuation\">:</span>/data/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 8080<span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DOMAIN=https<span class=\"token punctuation\">:</span>//subdomain.yourdomain.com <span class=\"token comment\"># 关联的域名。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># 最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># admin最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_SESSION_LIFETIME=20 <span class=\"token comment\"># 会话持续时间</span>\n      <span class=\"token punctuation\">-</span> ADMIN_TOKEN=YourReallyStrongAdminTokenHere <span class=\"token comment\"># 管理员面板的令牌</span>\n      <span class=\"token punctuation\">-</span> SENDS_ALLOWED=true  <span class=\"token comment\"># 是否允许用户创建Bitwarden发送</span>\n      <span class=\"token punctuation\">-</span> EMERGENCY_ACCESS_ALLOWED=true <span class=\"token comment\"># 控制用户是否可以启用紧急访问其账户的权限</span>\n      <span class=\"token punctuation\">-</span> WEB_VAULT_ENABLED=true <span class=\"token comment\"># 网络保险库是否可访问。</span>\n      <span class=\"token punctuation\">-</span> SIGNUPS_ALLOWED=true <span class=\"token comment\"># 新用户是否可以在没有邀请的情况下注册账户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-3-启动-Vaultwarden\"><a class=\"headerlink\" href=\"#步骤-3-启动-Vaultwarden\"></a>步骤 3: 启动 Vaultwarden</h2>\n<p>配置好 <code>docker-compose.yml</code> 文件后，使用以下命令启动 Vaultwarden 服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个命令会在后台启动 Vaultwarden 服务。可以通过访问 <code>http://localhost:8080</code> 或在配置文件中指定的域名来访问 Vaultwarden。</p>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！</p>\n","excerpt":"","more":"<h1 id=\"如何搭建-Vaultwarden-服务器：一步步教程\"><a class=\"headerlink\" href=\"#如何搭建-Vaultwarden-服务器：一步步教程\"></a>如何搭建 Vaultwarden 服务器：一步步教程</h1>\n<p>Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。</p>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在开始之前，确保你的系统已经安装了 <strong>Docker</strong> 和 <strong>Docker Compose</strong>。</p>\n<h2 id=\"步骤-1-创建数据存储目录\"><a class=\"headerlink\" href=\"#步骤-1-创建数据存储目录\"></a>步骤 1: 创建数据存储目录</h2>\n<p>首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/docker_data/vaultwarden\n<span class=\"token builtin class-name\">cd</span> /opt/docker_data/vaultwarden<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-2-创建-Docker-Compose-文件\"><a class=\"headerlink\" href=\"#步骤-2-创建-Docker-Compose-文件\"></a>步骤 2: 创建 Docker Compose 文件</h2>\n<p>接下来，我们将创建一个 <code>docker-compose.yml</code> 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> docker-compose.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，将以下配置粘贴到 <code>docker-compose.yml</code> 文件中：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">vaultwarden</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> vaultwarden\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> vaultwarden/server<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./data/<span class=\"token punctuation\">:</span>/data/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 8080<span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DOMAIN=https<span class=\"token punctuation\">:</span>//subdomain.yourdomain.com <span class=\"token comment\"># 关联的域名。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># 最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># admin最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_SESSION_LIFETIME=20 <span class=\"token comment\"># 会话持续时间</span>\n      <span class=\"token punctuation\">-</span> ADMIN_TOKEN=YourReallyStrongAdminTokenHere <span class=\"token comment\"># 管理员面板的令牌</span>\n      <span class=\"token punctuation\">-</span> SENDS_ALLOWED=true  <span class=\"token comment\"># 是否允许用户创建Bitwarden发送</span>\n      <span class=\"token punctuation\">-</span> EMERGENCY_ACCESS_ALLOWED=true <span class=\"token comment\"># 控制用户是否可以启用紧急访问其账户的权限</span>\n      <span class=\"token punctuation\">-</span> WEB_VAULT_ENABLED=true <span class=\"token comment\"># 网络保险库是否可访问。</span>\n      <span class=\"token punctuation\">-</span> SIGNUPS_ALLOWED=true <span class=\"token comment\"># 新用户是否可以在没有邀请的情况下注册账户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-3-启动-Vaultwarden\"><a class=\"headerlink\" href=\"#步骤-3-启动-Vaultwarden\"></a>步骤 3: 启动 Vaultwarden</h2>\n<p>配置好 <code>docker-compose.yml</code> 文件后，使用以下命令启动 Vaultwarden 服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个命令会在后台启动 Vaultwarden 服务。可以通过访问 <code>http://localhost:8080</code> 或在配置文件中指定的域名来访问 Vaultwarden。</p>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"使用AList定时备份文件","date":"2024-06-18T08:37:21.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151131096.webp","_content":"# 使用AList定时备份文件\n本教程详细介绍如何使用 `AList` 通过 `API` 自动备份服务器文件，包括获取 `JWT Token` 和自动上传备份文件至 `AList` 服务器。\n## 环境配置\n首先，确保服务器上安装了 `curl` 和 `jq`。`curl` 用于发送 `HTTP` 请求，而 `jq` 用于解析 `JSON` 响应。\n```bash\nsudo apt update && sudo apt install curl jq\n```\n\n### 设置环境变量\n为确保脚本能自动读取 `AList` 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。  \n通过在服务器的 `~/.bashrc` 或 `~/.profile` 文件中添加以下行来永久设置环境变量：\n```bash\nexport ALIST_USERNAME=\"<your_username>\"\nexport ALIST_PASSWORD=\"<your_password>\"\n```\n确保替换 \"your_username\" 和 \"your_password\" 为你的 AList 登录用户名和密码。\n### 应用环境变量\n修改文件后，为使环境变量立即生效，执行以下命令：\n```bash\nsource ~/.bashrc\n```\n或者，如果你是在 ~/.profile 中设置的环境变量，使用：\n```bash\nsource ~/.profile\n```\n这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。\n\n\n## 获取 JWT Token\n\n要与 `AList` 的 `API` 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 `API` 获取 `Token`。\n### 创建 Token 获取脚本\n- **脚本位置**：在 `/opt/alist` 目录下创建 `get_token.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `get_token.sh` 文件。\n\n```bash\ntouch /opt/alist/get_token.sh\nvim /opt/alist/get_token.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 读取环境变量中的用户名和密码\nalist_username=\"$ALIST_USERNAME\"\nalist_password=\"$ALIST_PASSWORD\"\n\n# 使用curl发送POST请求获取token\nresponse=$(curl -k -s -X POST \"http://<服务器域名或IP地址>:<端口号>/api/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"username\\\":\\\"$alist_username\\\", \\\"password\\\":\\\"$alist_password\\\"}\")\n\n# 解析响应获取token\n# 检查token是否成功获取\nif [ -z \"$token\" ] || [ \"$token\" == \"null\" ]; then\n  echo \"Failed to get token\"\n  exit 1\nelse\n  echo \"Token retrieved successfully\"\n  echo $token > /tmp/alist_token.txt\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/get_token.sh\n```\n\n## 上传备份文件\n\n使用 PUT `/api/fs/put` API 上传备份文件。创建一个脚本自动执行备份和上传。\n\n### 创建上传脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `upload_backup.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `upload_backup.sh` 文件。\n\n```bash\ntouch /opt/alist/upload_backup.sh\nvim /opt/alist/upload_backup.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 日志文件夹位置\nLOG_FILE=\"/opt/alist/log/upload_back_$(date +'%Y%m%d%H%M%S').log\"\n\n# 函数：带时间戳的echo\nlog() {\n  echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# 删除超过30天的日志文件\nfind /opt/alist/log -type f -name \"*.log\" -mtime +30 -exec rm -f {} \\;\n\n# 目标 API URL\nAPI_URL=\"https://<alist服务器域名或IP地址>/api/fs/put\"\n\n# 要备份的目录\nBACKUP_DIR=\"/opt/alist/data\"\n\n# 备份文件存储位置，包含时间戳\nBACKUP_PATH=\"/tmp/alist/alist_backup_$(date +%Y%m%d%H%M%S).tar.gz\"\n\n# 创建备份文件\ntar -czf \"$BACKUP_PATH\" -C \"$BACKUP_DIR\" .\n\n# 获取文件大小\nCONTENT_LENGTH=$(stat -c %s \"$BACKUP_PATH\")\n\n# URL编码的完整目标文件路径\nENCODED_FILE_PATH=$(echo -n \"<alist上的路径>$(basename $BACKUP_PATH)\" | jq -sRr @uri)\n\n# 读取存储的token\ntoken=$(cat /tmp/alist_token.txt)\n\n# 使用curl PUT请求上传文件\nresponse=$(curl -s -X PUT \"$API_URL\" \\\n    -H \"Authorization: $token\" \\\n    -H \"File-Path: $ENCODED_FILE_PATH\" \\\n    -H \"Content-Type: application/octet-stream\" \\\n    -H \"Content-Length: $CONTENT_LENGTH\" \\\n    -T \"$BACKUP_PATH\")\n\n# 检查上传是否成功并记录日志\nlog \"$response\"\n# 删除本地临时备份文件\nrm \"$BACKUP_PATH\"\nif [[ $? -eq 0 ]]; then\n    log \"Local backup file deleted\"\nelse\n    log \"Failed to delete local backup file\"\n    exit 1\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/upload_backup.sh\n```\n\n## 设置定时任务\n\n使用 `crontab -e` 添加定时任务自动执行以上脚本。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh\n5 1 * * * /opt/alist/upload_backup.sh\n```\n\n这将在每天凌晨 1 点自动获取新的 `Token`，并在五分钟后上传最新的备份文件。\n\n## 日志记录\n\n考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh >> /var/log/alist_backup.log 2>&1\n5 1 * * * /opt/alist/upload_backup.sh >> /var/log/alist_backup.log 2>&1\n```\n\n这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 `AList` 完成文件的存储和备份。\n\n---","source":"_posts/使用AList定时备份服务器文件.md","raw":"---\ntitle: 使用AList定时备份文件\ndate: 2024-06-18 16:37:21\ntags: Alist\ncategories: Linux\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151131096.webp\n---\n# 使用AList定时备份文件\n本教程详细介绍如何使用 `AList` 通过 `API` 自动备份服务器文件，包括获取 `JWT Token` 和自动上传备份文件至 `AList` 服务器。\n## 环境配置\n首先，确保服务器上安装了 `curl` 和 `jq`。`curl` 用于发送 `HTTP` 请求，而 `jq` 用于解析 `JSON` 响应。\n```bash\nsudo apt update && sudo apt install curl jq\n```\n\n### 设置环境变量\n为确保脚本能自动读取 `AList` 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。  \n通过在服务器的 `~/.bashrc` 或 `~/.profile` 文件中添加以下行来永久设置环境变量：\n```bash\nexport ALIST_USERNAME=\"<your_username>\"\nexport ALIST_PASSWORD=\"<your_password>\"\n```\n确保替换 \"your_username\" 和 \"your_password\" 为你的 AList 登录用户名和密码。\n### 应用环境变量\n修改文件后，为使环境变量立即生效，执行以下命令：\n```bash\nsource ~/.bashrc\n```\n或者，如果你是在 ~/.profile 中设置的环境变量，使用：\n```bash\nsource ~/.profile\n```\n这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。\n\n\n## 获取 JWT Token\n\n要与 `AList` 的 `API` 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 `API` 获取 `Token`。\n### 创建 Token 获取脚本\n- **脚本位置**：在 `/opt/alist` 目录下创建 `get_token.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `get_token.sh` 文件。\n\n```bash\ntouch /opt/alist/get_token.sh\nvim /opt/alist/get_token.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 读取环境变量中的用户名和密码\nalist_username=\"$ALIST_USERNAME\"\nalist_password=\"$ALIST_PASSWORD\"\n\n# 使用curl发送POST请求获取token\nresponse=$(curl -k -s -X POST \"http://<服务器域名或IP地址>:<端口号>/api/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"username\\\":\\\"$alist_username\\\", \\\"password\\\":\\\"$alist_password\\\"}\")\n\n# 解析响应获取token\n# 检查token是否成功获取\nif [ -z \"$token\" ] || [ \"$token\" == \"null\" ]; then\n  echo \"Failed to get token\"\n  exit 1\nelse\n  echo \"Token retrieved successfully\"\n  echo $token > /tmp/alist_token.txt\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/get_token.sh\n```\n\n## 上传备份文件\n\n使用 PUT `/api/fs/put` API 上传备份文件。创建一个脚本自动执行备份和上传。\n\n### 创建上传脚本\n\n- **脚本位置**：在 `/opt/alist` 目录下创建 `upload_backup.sh` 脚本。\n- **编辑脚本**：使用 `Vim` 或任意文本编辑器创建和编辑 `upload_backup.sh` 文件。\n\n```bash\ntouch /opt/alist/upload_backup.sh\nvim /opt/alist/upload_backup.sh\n```\n\n- **脚本内容**：\n\n```bash\n#!/bin/bash\n\n# 日志文件夹位置\nLOG_FILE=\"/opt/alist/log/upload_back_$(date +'%Y%m%d%H%M%S').log\"\n\n# 函数：带时间戳的echo\nlog() {\n  echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# 删除超过30天的日志文件\nfind /opt/alist/log -type f -name \"*.log\" -mtime +30 -exec rm -f {} \\;\n\n# 目标 API URL\nAPI_URL=\"https://<alist服务器域名或IP地址>/api/fs/put\"\n\n# 要备份的目录\nBACKUP_DIR=\"/opt/alist/data\"\n\n# 备份文件存储位置，包含时间戳\nBACKUP_PATH=\"/tmp/alist/alist_backup_$(date +%Y%m%d%H%M%S).tar.gz\"\n\n# 创建备份文件\ntar -czf \"$BACKUP_PATH\" -C \"$BACKUP_DIR\" .\n\n# 获取文件大小\nCONTENT_LENGTH=$(stat -c %s \"$BACKUP_PATH\")\n\n# URL编码的完整目标文件路径\nENCODED_FILE_PATH=$(echo -n \"<alist上的路径>$(basename $BACKUP_PATH)\" | jq -sRr @uri)\n\n# 读取存储的token\ntoken=$(cat /tmp/alist_token.txt)\n\n# 使用curl PUT请求上传文件\nresponse=$(curl -s -X PUT \"$API_URL\" \\\n    -H \"Authorization: $token\" \\\n    -H \"File-Path: $ENCODED_FILE_PATH\" \\\n    -H \"Content-Type: application/octet-stream\" \\\n    -H \"Content-Length: $CONTENT_LENGTH\" \\\n    -T \"$BACKUP_PATH\")\n\n# 检查上传是否成功并记录日志\nlog \"$response\"\n# 删除本地临时备份文件\nrm \"$BACKUP_PATH\"\nif [[ $? -eq 0 ]]; then\n    log \"Local backup file deleted\"\nelse\n    log \"Failed to delete local backup file\"\n    exit 1\nfi\n```\n\n- **赋予脚本执行权限**：\n\n```bash\nchmod +x /opt/alist/upload_backup.sh\n```\n\n## 设置定时任务\n\n使用 `crontab -e` 添加定时任务自动执行以上脚本。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh\n5 1 * * * /opt/alist/upload_backup.sh\n```\n\n这将在每天凌晨 1 点自动获取新的 `Token`，并在五分钟后上传最新的备份文件。\n\n## 日志记录\n\n考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。\n\n```bash\n0 1 * * * /opt/alist/get_token.sh >> /var/log/alist_backup.log 2>&1\n5 1 * * * /opt/alist/upload_backup.sh >> /var/log/alist_backup.log 2>&1\n```\n\n这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 `AList` 完成文件的存储和备份。\n\n---","slug":"使用AList定时备份服务器文件","published":1,"updated":"2024-07-15T03:42:35.819Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrc000wtuj88f7cf1pd","content":"<h1 id=\"使用AList定时备份文件\"><a class=\"headerlink\" href=\"#使用AList定时备份文件\"></a>使用AList定时备份文件</h1>\n<p>本教程详细介绍如何使用 <code>AList</code> 通过 <code>API</code> 自动备份服务器文件，包括获取 <code>JWT Token</code> 和自动上传备份文件至 <code>AList</code> 服务器。</p>\n<h2 id=\"环境配置\"><a class=\"headerlink\" href=\"#环境配置\"></a>环境配置</h2>\n<p>首先，确保服务器上安装了 <code>curl</code> 和 <code>jq</code>。<code>curl</code> 用于发送 <code>HTTP</code> 请求，而 <code>jq</code> 用于解析 <code>JSON</code> 响应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> jq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"设置环境变量\"><a class=\"headerlink\" href=\"#设置环境变量\"></a>设置环境变量</h3>\n<p>为确保脚本能自动读取 <code>AList</code> 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。<br>\n通过在服务器的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中添加以下行来永久设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_username>\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_password>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>确保替换 “your_username” 和 “your_password” 为你的 AList 登录用户名和密码。</p>\n<h3 id=\"应用环境变量\"><a class=\"headerlink\" href=\"#应用环境变量\"></a>应用环境变量</h3>\n<p>修改文件后，为使环境变量立即生效，执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，如果你是在 ~/.profile 中设置的环境变量，使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。</p>\n<h2 id=\"获取-JWT-Token\"><a class=\"headerlink\" href=\"#获取-JWT-Token\"></a>获取 JWT Token</h2>\n<p>要与 <code>AList</code> 的 <code>API</code> 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 <code>API</code> 获取 <code>Token</code>。</p>\n<h3 id=\"创建-Token-获取脚本\"><a class=\"headerlink\" href=\"#创建-Token-获取脚本\"></a>创建 Token 获取脚本</h3>\n<ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/get_token.sh\n<span class=\"token function\">vim</span> /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 读取环境变量中的用户名和密码</span>\n<span class=\"token assign-left variable\">alist_username</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_USERNAME</span>\"</span>\n<span class=\"token assign-left variable\">alist_password</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_PASSWORD</span>\"</span>\n\n<span class=\"token comment\"># 使用curl发送POST请求获取token</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"&#123;<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>username<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_username</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>password<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_password</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&#125;\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 解析响应获取token</span>\n<span class=\"token comment\"># 检查token是否成功获取</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to get token\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token retrieved successfully\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span> <span class=\"token operator\">></span> /tmp/alist_token.txt\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"上传备份文件\"><a class=\"headerlink\" href=\"#上传备份文件\"></a>上传备份文件</h2>\n<p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p>\n<h3 id=\"创建上传脚本\"><a class=\"headerlink\" href=\"#创建上传脚本\"></a>创建上传脚本</h3>\n<ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/upload_backup.sh\n<span class=\"token function\">vim</span> /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 日志文件夹位置</span>\n<span class=\"token assign-left variable\">LOG_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/log/upload_back_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y%m%d%H%M%S'</span><span class=\"token variable\">)</span></span>.log\"</span>\n\n<span class=\"token comment\"># 函数：带时间戳的echo</span>\n<span class=\"token function-name function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token variable\">)</span></span>] <span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$LOG_FILE</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 删除超过30天的日志文件</span>\n<span class=\"token function\">find</span> /opt/alist/log <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.log\"</span> <span class=\"token parameter variable\">-mtime</span> +30 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 目标 API URL</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://&lt;alist服务器域名或IP地址>/api/fs/put\"</span>\n\n<span class=\"token comment\"># 要备份的目录</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/data\"</span>\n\n<span class=\"token comment\"># 备份文件存储位置，包含时间戳</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/alist/alist_backup_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y%m%d%H%M%S<span class=\"token variable\">)</span></span>.tar.gz\"</span>\n\n<span class=\"token comment\"># 创建备份文件</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 获取文件大小</span>\n<span class=\"token assign-left variable\">CONTENT_LENGTH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">-c</span> %s <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># URL编码的完整目标文件路径</span>\n<span class=\"token assign-left variable\">ENCODED_FILE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"&lt;alist上的路径><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $BACKUP_PATH<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-sRr</span> @uri<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 读取存储的token</span>\n<span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 使用curl PUT请求上传文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"File-Path: <span class=\"token variable\">$ENCODED_FILE_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/octet-stream\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Length: <span class=\"token variable\">$CONTENT_LENGTH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-T</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 检查上传是否成功并记录日志</span>\nlog <span class=\"token string\">\"<span class=\"token variable\">$response</span>\"</span>\n<span class=\"token comment\"># 删除本地临时备份文件</span>\n<span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    log <span class=\"token string\">\"Local backup file deleted\"</span>\n<span class=\"token keyword\">else</span>\n    log <span class=\"token string\">\"Failed to delete local backup file\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"设置定时任务\"><a class=\"headerlink\" href=\"#设置定时任务\"></a>设置定时任务</h2>\n<p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这将在每天凌晨 1 点自动获取新的 <code>Token</code>，并在五分钟后上传最新的备份文件。</p>\n<h2 id=\"日志记录\"><a class=\"headerlink\" href=\"#日志记录\"></a>日志记录</h2>\n<p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 <code>AList</code> 完成文件的存储和备份。</p>\n<hr>\n","excerpt":"","more":"<h1 id=\"使用AList定时备份文件\"><a class=\"headerlink\" href=\"#使用AList定时备份文件\"></a>使用AList定时备份文件</h1>\n<p>本教程详细介绍如何使用 <code>AList</code> 通过 <code>API</code> 自动备份服务器文件，包括获取 <code>JWT Token</code> 和自动上传备份文件至 <code>AList</code> 服务器。</p>\n<h2 id=\"环境配置\"><a class=\"headerlink\" href=\"#环境配置\"></a>环境配置</h2>\n<p>首先，确保服务器上安装了 <code>curl</code> 和 <code>jq</code>。<code>curl</code> 用于发送 <code>HTTP</code> 请求，而 <code>jq</code> 用于解析 <code>JSON</code> 响应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> jq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"设置环境变量\"><a class=\"headerlink\" href=\"#设置环境变量\"></a>设置环境变量</h3>\n<p>为确保脚本能自动读取 <code>AList</code> 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。<br>\n通过在服务器的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中添加以下行来永久设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_username>\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_password>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>确保替换 “your_username” 和 “your_password” 为你的 AList 登录用户名和密码。</p>\n<h3 id=\"应用环境变量\"><a class=\"headerlink\" href=\"#应用环境变量\"></a>应用环境变量</h3>\n<p>修改文件后，为使环境变量立即生效，执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，如果你是在 ~/.profile 中设置的环境变量，使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。</p>\n<h2 id=\"获取-JWT-Token\"><a class=\"headerlink\" href=\"#获取-JWT-Token\"></a>获取 JWT Token</h2>\n<p>要与 <code>AList</code> 的 <code>API</code> 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 <code>API</code> 获取 <code>Token</code>。</p>\n<h3 id=\"创建-Token-获取脚本\"><a class=\"headerlink\" href=\"#创建-Token-获取脚本\"></a>创建 Token 获取脚本</h3>\n<ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/get_token.sh\n<span class=\"token function\">vim</span> /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 读取环境变量中的用户名和密码</span>\n<span class=\"token assign-left variable\">alist_username</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_USERNAME</span>\"</span>\n<span class=\"token assign-left variable\">alist_password</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_PASSWORD</span>\"</span>\n\n<span class=\"token comment\"># 使用curl发送POST请求获取token</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"&#123;<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>username<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_username</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>password<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_password</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&#125;\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 解析响应获取token</span>\n<span class=\"token comment\"># 检查token是否成功获取</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to get token\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token retrieved successfully\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span> <span class=\"token operator\">></span> /tmp/alist_token.txt\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"上传备份文件\"><a class=\"headerlink\" href=\"#上传备份文件\"></a>上传备份文件</h2>\n<p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p>\n<h3 id=\"创建上传脚本\"><a class=\"headerlink\" href=\"#创建上传脚本\"></a>创建上传脚本</h3>\n<ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/upload_backup.sh\n<span class=\"token function\">vim</span> /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 日志文件夹位置</span>\n<span class=\"token assign-left variable\">LOG_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/log/upload_back_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y%m%d%H%M%S'</span><span class=\"token variable\">)</span></span>.log\"</span>\n\n<span class=\"token comment\"># 函数：带时间戳的echo</span>\n<span class=\"token function-name function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token variable\">)</span></span>] <span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$LOG_FILE</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 删除超过30天的日志文件</span>\n<span class=\"token function\">find</span> /opt/alist/log <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.log\"</span> <span class=\"token parameter variable\">-mtime</span> +30 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 目标 API URL</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://&lt;alist服务器域名或IP地址>/api/fs/put\"</span>\n\n<span class=\"token comment\"># 要备份的目录</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/data\"</span>\n\n<span class=\"token comment\"># 备份文件存储位置，包含时间戳</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/alist/alist_backup_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y%m%d%H%M%S<span class=\"token variable\">)</span></span>.tar.gz\"</span>\n\n<span class=\"token comment\"># 创建备份文件</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 获取文件大小</span>\n<span class=\"token assign-left variable\">CONTENT_LENGTH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">-c</span> %s <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># URL编码的完整目标文件路径</span>\n<span class=\"token assign-left variable\">ENCODED_FILE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"&lt;alist上的路径><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $BACKUP_PATH<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-sRr</span> @uri<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 读取存储的token</span>\n<span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 使用curl PUT请求上传文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"File-Path: <span class=\"token variable\">$ENCODED_FILE_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/octet-stream\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Length: <span class=\"token variable\">$CONTENT_LENGTH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-T</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 检查上传是否成功并记录日志</span>\nlog <span class=\"token string\">\"<span class=\"token variable\">$response</span>\"</span>\n<span class=\"token comment\"># 删除本地临时备份文件</span>\n<span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    log <span class=\"token string\">\"Local backup file deleted\"</span>\n<span class=\"token keyword\">else</span>\n    log <span class=\"token string\">\"Failed to delete local backup file\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"设置定时任务\"><a class=\"headerlink\" href=\"#设置定时任务\"></a>设置定时任务</h2>\n<p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这将在每天凌晨 1 点自动获取新的 <code>Token</code>，并在五分钟后上传最新的备份文件。</p>\n<h2 id=\"日志记录\"><a class=\"headerlink\" href=\"#日志记录\"></a>日志记录</h2>\n<p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 <code>AList</code> 完成文件的存储和备份。</p>\n<hr>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"Vue3快速上手","date":"2024-07-13T15:56:37.000Z","categorizes":"前端","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151139287.webp","_content":"\n# 1. Vue3简介\n\n- 2020年9月18日，`Vue.js`发布版`3.0`版本，代号：`One Piece`（n\n\n- 经历了：[4800+次提交](https://github.com/vuejs/core/commits/main)、[40+个RFC](https://github.com/vuejs/rfcs/tree/master/active-rfcs)、[600+次PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+)、[300+贡献者](https://github.com/vuejs/core/graphs/contributors)\n\n- 官方发版地址：[Release v3.0.0 One Piece · vuejs/core](https://github.com/vuejs/core/releases/tag/v3.0.0)\n\n- 截止2023年10月，最新的公开版本为：`3.3.4`\n\n  ![image.png](https://alist.aixcc.top/d/OneDrive/img/202407151232363.webp) \n\n## 1.1. 【性能的提升】\n\n- 打包大小减少`41%`。\n\n- 初次渲染快`55%`, 更新渲染快`133%`。\n\n- 内存减少`54%`。\n\n  \n\n## 1.2.【 源码的升级】\n\n- 使用`Proxy`代替`defineProperty`实现响应式。\n\n- 重写虚拟`DOM`的实现和`Tree-Shaking`。\n\n  \n\n## 1.3. 【拥抱TypeScript】\n\n- `Vue3`可以更好的支持`TypeScript`。\n\n  \n\n## 1.4. 【新的特性】\n\n1. `Composition API`（组合`API`）：\n\n   - `setup`\n\n   - `ref`与`reactive`\n\n   - `computed`与`watch`\n\n     ......\n\n2. 新的内置组件：\n\n   - `Fragment`\n\n   - `Teleport`\n\n   - `Suspense`\n\n     ......\n\n3. 其他改变：\n\n   - 新的生命周期钩子\n\n   - `data` 选项应始终被声明为一个函数\n\n   - 移除`keyCode`支持作为` v-on` 的修饰符\n\n     ......\n\n\n\n# 2. 创建Vue3工程\n\n## 2.1. 【基于 vue-cli 创建】\n\n点击查看[官方文档](https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create)\n\n> 备注：目前`vue-cli`已处于维护模式，官方推荐基于 `Vite` 创建项目。\n\n```powershell\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n\n## 安装或者升级你的@vue/cli \nnpm install -g @vue/cli\n\n## 执行创建命令\nvue create vue_test\n\n##  随后选择3.x\n##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)\n##  > 3.x\n##    2.x\n\n## 启动\ncd vue_test\nnpm run serve\n```\n\n---\n\n## 2.2. 【基于 vite 创建】(推荐)\n\n`vite` 是新一代前端构建工具，官网地址：[https://vitejs.cn](https://vitejs.cn/)，`vite`的优势如下：\n\n- 轻量快速的热重载（`HMR`），能实现极速的服务启动。\n- 对 `TypeScript`、`JSX`、`CSS` 等支持开箱即用。\n- 真正的按需编译，不再等待整个应用编译完成。\n- `webpack`构建 与 `vite`构建对比图如下：\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232253.webp)\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232053.webp)\n\n* 具体操作如下（点击查看[官方文档](https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application)）\n\n```powershell\n## 1.创建命令\nnpm create vue@latest\n\n## 2.具体配置\n## 配置项目名称\n√ Project name: vue3_test\n## 是否添加TypeScript支持\n√ Add TypeScript?  Yes\n## 是否添加JSX支持\n√ Add JSX Support?  No\n## 是否添加路由环境\n√ Add Vue Router for Single Page Application development?  No\n## 是否添加pinia环境\n√ Add Pinia for state management?  No\n## 是否添加单元测试\n√ Add Vitest for Unit Testing?  No\n## 是否添加端到端测试方案\n√ Add an End-to-End Testing Solution? » No\n## 是否添加ESLint语法检查\n√ Add ESLint for code quality?  Yes\n## 是否添加Prettiert代码格式化\n√ Add Prettier for code formatting?  No\n```\n\n自己动手编写一个App组件\n\n```vue\n<template>\n  <div class=\"app\">\n    <h1>你好啊！</h1>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App' //组件名\n  }\n</script>\n\n<style>\n  .app {\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  }\n</style>\n```\n\n安装官方推荐的`vscode`插件：\n\n![Snipaste_2023-10-08_20-46-34](https://alist.aixcc.top/d/OneDrive/img/202407151232847.webp) \n\n![image-20231218085906380](https://alist.aixcc.top/d/OneDrive/img/202407151232668.webp) \n\n总结：\n\n- `Vite` 项目中，`index.html` 是项目的入口文件，在项目最外层。\n- 加载`index.html`后，`Vite` 解析 `<script type=\"module\" src=\"xxx\">` 指向的`JavaScript`。\n- `Vue3`**中是通过 **`createApp` 函数创建一个应用实例。\n\n## 2.3. 【一个简单的效果】\n\n`Vue3`向下兼容`Vue2`语法，且`Vue3`中的模板中可以没有根标签\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App',\n    data() {\n      return {\n        name:'张三',\n        age:18,\n        tel:'13888888888'\n      }\n    },\n    methods:{\n      changeName(){\n        this.name = 'zhang-san'\n      },\n      changeAge(){\n        this.age += 1\n      },\n      showTel(){\n        alert(this.tel)\n      }\n    },\n  }\n</script>\n```\n\n\n# 3. Vue3核心语法\n\n## 3.1.  【OptionsAPI 与 CompositionAPI】\n\n- `Vue2`的`API`设计是`Options`（配置）风格的。\n- `Vue3`的`API`设计是`Composition`（组合）风格的。\n\n###  Options API 的弊端\n\n`Options`类型的 `API`，数据、方法、计算属性等，是分散在：`data`、`methods`、`computed`中的，若想新增或者修改一个需求，就需要分别修改：`data`、`methods`、`computed`，不便于维护和复用。\n\n![](https://img.aixcc.top/file/c3edadbf9a9bbfd22d442.gif)![](https://img.aixcc.top/file/d978f7c4fd1f8a2a2e8f9.gif)\n\n### Composition API 的优势\n\n可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。\n\n![](https://img.aixcc.top/file/9acc07d0f3690f12a9fda.gif)![](https://img.aixcc.top/file/2e7d2a90529d10cad9c93.gif)\n\n> 说明：以上四张动图原创作者：大帅老猿\n\n## 3.2. 【拉开序幕的 setup】\n\n### setup 概述\n\n`setup`是`Vue3`中一个新的配置项，值是一个函数，它是 `Composition API` **“表演的舞台**_**”**_，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在`setup`中。\n\n特点如下：\n\n- `setup`函数返回的对象中的内容，可直接在模板中使用。\n- `setup`中访问`this`是`undefined`。\n- `setup`函数会在`beforeCreate`之前调用，它是“领先”所有钩子执行的。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n    setup(){\n      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name = '张三'\n      let age = 18\n      let tel = '13888888888'\n\n      // 方法，原来写在methods中\n      function changeName(){\n        name = 'zhang-san' //注意：此时这么修改name页面是不变化的\n        console.log(name)\n      }\n      function changeAge(){\n        age += 1 //注意：此时这么修改age页面是不变化的\n        console.log(age)\n      }\n      function showTel(){\n        alert(tel)\n      }\n\n      // 返回一个对象，对象中的内容，模板中可以直接使用\n      return {name,age,tel,changeName,changeAge,showTel}\n    }\n  }\n</script>\n```\n\n### setup 的返回值\n\n- 若返回一个**对象**：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**\n- 若返回一个**函数**：则可以自定义渲染内容，代码如下：\n\n```jsx\nsetup(){\n  return ()=> '你好啊！'\n}\n```\n\n### setup 与 Options API 的关系\n\n- `Vue2` 的配置（`data`、`methos`......）中**可以访问到** `setup`中的属性、方法。\n- 但在`setup`中**不能访问到**`Vue2`的配置（`data`、`methos`......）。\n- 如果与`Vue2`冲突，则`setup`优先。\n\n### setup 语法糖\n\n`setup`函数有一个语法糖，这个语法糖，可以让我们把`setup`独立出去，代码如下：\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changName\">修改名字</button>\n    <button @click=\"changAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n  }\n</script>\n\n<!-- 下面的写法是setup语法糖 -->\n<script setup lang=\"ts\">\n  console.log(this) //undefined\n  \n  // 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name = '张三'\n  let age = 18\n  let tel = '13888888888'\n\n  // 方法\n  function changName(){\n    name = '李四'//注意：此时这么修改name页面是不变化的\n  }\n  function changAge(){\n    console.log(age)\n    age += 1 //注意：此时这么修改age页面是不变化的\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n\n扩展：上述代码，还需要编写一个不写`setup`的`script`标签，去指定组件名字，比较麻烦，我们可以借助`vite`中的插件简化\n\n1. 第一步：`npm i vite-plugin-vue-setup-extend -D`\n2. 第二步：`vite.config.ts`\n\n```jsx\nimport { defineConfig } from 'vite'\nimport VueSetupExtend from 'vite-plugin-vue-setup-extend'\n\nexport default defineConfig({\n  plugins: [ VueSetupExtend() ]\n})\n```\n\n3. 第三步：`<script setup lang=\"ts\" name=\"Person\">`\n\n## 3.3. 【ref 创建：基本类型的响应式数据】\n\n- **作用：**定义响应式变量。\n- **语法：**`let xxx = ref(初始值)`。\n- **返回值：**一个`RefImpl`的实例对象，简称`ref对象`或`ref`，`ref`对象的`value`**属性是响应式的**。\n- **注意点：**\n  - `JS`中操作数据需要：`xxx.value`，但模板中不需要`.value`，直接使用即可。\n  - 对于`let name = ref('张三')`来说，`name`不是响应式的，`name.value`是响应式的。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Person\">\n  import {ref} from 'vue'\n  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name = ref('张三')\n  let age = ref(18)\n  // tel就是一个普通的字符串，不是响应式的\n  let tel = '13888888888'\n\n  function changeName(){\n    // JS中操作ref对象时候需要.value\n    name.value = '李四'\n    console.log(name.value)\n\n    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    // name = ref('zhang-san')\n  }\n  function changeAge(){\n    // JS中操作ref对象时候需要.value\n    age.value += 1 \n    console.log(age.value)\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n\n## 3.4. 【reactive 创建：对象类型的响应式数据】\n\n- **作用：**定义一个**响应式对象**（基本类型不要用它，要用`ref`，否则报错）\n- **语法：**`let 响应式对象= reactive(源对象)`。\n- **返回值：**一个`Proxy`的实例对象，简称：响应式对象。\n- **注意点：**`reactive`定义的响应式数据是“深层次”的。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { reactive } from 'vue'\n\n// 数据\nlet car = reactive({ brand: '奔驰', price: 100 })\nlet games = reactive([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = reactive({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nfunction changeCarPrice() {\n  car.price += 10\n}\nfunction changeFirstGame() {\n  games[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.a.b.c.d = 999\n}\n</script>\n```\n\n## 3.5. 【ref 创建：对象类型的响应式数据】\n\n- 其实`ref`接收的数据可以是：**基本类型**、**对象类型**。\n- 若`ref`接收的是对象类型，内部其实也是调用了`reactive`函数。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { ref } from 'vue'\n\n// 数据\nlet car = ref({ brand: '奔驰', price: 100 })\nlet games = ref([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = ref({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nconsole.log(car)\n\nfunction changeCarPrice() {\n  car.value.price += 10\n}\nfunction changeFirstGame() {\n  games.value[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.value.a.b.c.d = 999\n}\n</script>\n```\n\n## 3.6. 【ref 对比 reactive】\n\n宏观角度看：\n\n> 1. `ref`用来定义：**基本类型数据**、**对象类型数据**；\n>\n> 2. `reactive`用来定义：**对象类型数据**。\n\n- 区别：\n\n> 1. `ref`创建的变量必须使用`.value`（可以使用`volar`插件自动添加`.value`）。\n>\n>    ![自动补充value](https://alist.aixcc.top/d/OneDrive/img/202407151232718.webp) \n>\n> 2. `reactive`重新分配一个新对象，会**失去**响应式（可以使用`Object.assign`去整体替换）。\n\n- 使用原则：\n\n> 1. 若需要一个基本类型的响应式数据，必须使用`ref`。\n> 2. 若需要一个响应式对象，层级不深，`ref`、`reactive`都可以。\n> 3. 若需要一个响应式对象，且层级较深，推荐使用`reactive`。\n\n## 3.7. 【toRefs 与 toRef】\n\n- 作用：将一个响应式对象中的每一个属性，转换为`ref`对象。\n- 备注：`toRefs`与`toRef`功能一致，但`toRefs`可以批量转换。\n- 语法如下：\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{person.name}}</h2>\n    <h2>年龄：{{person.age}}</h2>\n    <h2>性别：{{person.gender}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeGender\">修改性别</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,reactive,toRefs,toRef} from 'vue'\n\n  // 数据\n  let person = reactive({name:'张三', age:18, gender:'男'})\n\t\n  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let {name,gender} =  toRefs(person)\n\t\n  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age = toRef(person,'age')\n\n  // 方法\n  function changeName(){\n    name.value += '~'\n  }\n  function changeAge(){\n    age.value += 1\n  }\n  function changeGender(){\n    gender.value = '女'\n  }\n</script>\n```\n\n## 3.8. 【computed】\n\n作用：根据已有数据计算出新数据（和`Vue2`中的`computed`作用一致）。\n\n![](https://img.aixcc.top/file/35111db5e18d3bb69aee9.gif)  \n\n```vue\n<template>\n  <div class=\"person\">\n    姓：<input type=\"text\" v-model=\"firstName\"> <br>\n    名：<input type=\"text\" v-model=\"lastName\"> <br>\n    全名：<span>{{fullName}}</span> <br>\n    <button @click=\"changeFullName\">全名改为：li-si</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"App\">\n  import {ref,computed} from 'vue'\n\n  let firstName = ref('zhang')\n  let lastName = ref('san')\n\n  // 计算属性——只读取，不修改\n  /* let fullName = computed(()=>{\n    return firstName.value + '-' + lastName.value\n  }) */\n\n\n  // 计算属性——既读取又修改\n  let fullName = computed({\n    // 读取\n    get(){\n      return firstName.value + '-' + lastName.value\n    },\n    // 修改\n    set(val){\n      console.log('有人修改了fullName',val)\n      firstName.value = val.split('-')[0]\n      lastName.value = val.split('-')[1]\n    }\n  })\n\n  function changeFullName(){\n    fullName.value = 'li-si'\n  } \n</script>\n```\n\n## 3.9.【watch】\n\n- 作用：监视数据的变化（和`Vue2`中的`watch`作用一致）\n- 特点：`Vue3`中的`watch`只能监视以下**四种数据**：\n\n> 1. `ref`定义的数据。\n> 2. `reactive`定义的数据。\n> 3. 函数返回一个值（`getter`函数）。\n> 4. 一个包含上述内容的数组。\n\n我们在`Vue3`中使用`watch`的时候，通常会遇到以下几种情况：\n\n### * 情况一\n\n监视`ref`定义的【基本类型】数据：直接写数据名即可，监视的是其`value`值的改变。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况一：监视【ref】定义的【基本类型】数据</h1>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"changeSum\">点我sum+1</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let sum = ref(0)\n  // 方法\n  function changeSum(){\n    sum.value += 1\n  }\n  // 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch = watch(sum,(newValue,oldValue)=>{\n    console.log('sum变化了',newValue,oldValue)\n    if(newValue >= 10){\n      stopWatch()\n    }\n  })\n</script>\n```\n\n### * 情况二\n\n监视`ref`定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。\n\n> 注意：\n>\n> * 若修改的是`ref`定义的对象中的属性，`newValue` 和 `oldValue` 都是新值，因为它们是同一个对象。\n>\n> * 若修改整个`ref`定义的对象，`newValue` 是新值， `oldValue` 是旧值，因为不是同一个对象了。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况二：监视【ref】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let person = ref({\n    name:'张三',\n    age:18\n  })\n  // 方法\n  function changeName(){\n    person.value.name += '~'\n  }\n  function changeAge(){\n    person.value.age += 1\n  }\n  function changePerson(){\n    person.value = {name:'李四',age:90}\n  }\n  /* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  */\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  },{deep:true})\n  \n</script>\n```\n\n### *  情况三\n\n监视`reactive`定义的【对象类型】数据，且默认开启了深度监视。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况三：监视【reactive】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n    <hr>\n    <h2>测试：{{obj.a.b.c}}</h2>\n    <button @click=\"test\">修改obj.a.b.c</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18\n  })\n  let obj = reactive({\n    a:{\n      b:{\n        c:666\n      }\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changePerson(){\n    Object.assign(person,{name:'李四',age:80})\n  }\n  function test(){\n    obj.a.b.c = 888\n  }\n\n  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  })\n  watch(obj,(newValue,oldValue)=>{\n    console.log('Obj变化了',newValue,oldValue)\n  })\n</script>\n```\n\n### * 情况四\n\n监视`ref`或`reactive`定义的【对象类型】数据中的**某个属性**，注意点如下：\n\n1. 若该属性值**不是**【对象类型】，需要写成函数形式。\n2. 若该属性值是**依然**是【对象类型】，可直接编，也可写成函数，建议写成函数。\n\n结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  /* watch(()=> person.name,(newValue,oldValue)=>{\n    console.log('person.name变化了',newValue,oldValue)\n  }) */\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()=>person.car,(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n</script>\n```\n\n### * 情况五\n\n监视上述的多个数据\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况五：监视上述的多个数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况五：监视上述的多个数据\n  watch([()=>person.name,person.car],(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n\n</script>\n```\n\n## 3.10. 【watchEffect】\n\n* 官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。\n\n* `watch`对比`watchEffect`\n\n  > 1. 都能监听响应式数据的变化，不同的是监听数据变化的方式不同\n  >\n  > 2. `watch`：要明确指出监视的数据\n  >\n  > 3. `watchEffect`：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。\n\n* 示例代码：\n\n  ```vue\n  <template>\n    <div class=\"person\">\n      <h1>需求：水温达到50℃，或水位达到20cm，则联系服务器</h1>\n      <h2 id=\"demo\">水温：{{temp}}</h2>\n      <h2>水位：{{height}}</h2>\n      <button @click=\"changePrice\">水温+1</button>\n      <button @click=\"changeSum\">水位+10</button>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"Person\">\n    import {ref,watch,watchEffect} from 'vue'\n    // 数据\n    let temp = ref(0)\n    let height = ref(0)\n  \n    // 方法\n    function changePrice(){\n      temp.value += 10\n    }\n    function changeSum(){\n      height.value += 1\n    }\n  \n    // 用watch实现，需要明确的指出要监视：temp、height\n    watch([temp,height],(value)=>{\n      // 从value中获取最新的temp值、height值\n      const [newTemp,newHeight] = value\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(newTemp >= 50 || newHeight >= 20){\n        console.log('联系服务器')\n      }\n    })\n  \n    // 用watchEffect实现，不用\n    const stopWtach = watchEffect(()=>{\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(temp.value >= 50 || height.value >= 20){\n        console.log(document.getElementById('demo')?.innerText)\n        console.log('联系服务器')\n      }\n      // 水温达到100，或水位达到50，取消监视\n      if(temp.value === 100 || height.value === 50){\n        console.log('清理了')\n        stopWtach()\n      }\n    })\n  </script>\n  ```\n\n  \n\n## 3.11. 【标签的 ref 属性】\n\n作用：用于注册模板引用。\n\n> * 用在普通`DOM`标签上，获取的是`DOM`节点。\n>\n> * 用在组件标签上，获取的是组件实例对象。\n\n用在普通`DOM`标签上：\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1 ref=\"title1\">尚硅谷</h1>\n    <h2 ref=\"title2\">前端</h2>\n    <h3 ref=\"title3\">Vue</h3>\n    <input type=\"text\" ref=\"inpt\"> <br><br>\n    <button @click=\"showLog\">点我打印内容</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref} from 'vue'\n\t\n  let title1 = ref()\n  let title2 = ref()\n  let title3 = ref()\n\n  function showLog(){\n    // 通过id获取元素\n    const t1 = document.getElementById('title1')\n    // 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((<HTMLElement>t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t/************************************/\n\t\t\n    // 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  }\n</script>\n```\n\n用在组件标签上：\n\n```vue\n<!-- 父组件App.vue -->\n<template>\n  <Person ref=\"ren\"/>\n  <button @click=\"test\">测试</button>\n</template>\n\n<script lang=\"ts\" setup name=\"App\">\n  import Person from './components/Person.vue'\n  import {ref} from 'vue'\n\n  let ren = ref()\n\n  function test(){\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  }\n</script>\n\n\n<!-- 子组件Person.vue中要使用defineExpose暴露内容 -->\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,defineExpose} from 'vue'\n\t// 数据\n  let name = ref('张三')\n  let age = ref(18)\n  /****************************/\n  /****************************/\n  // 使用defineExpose将组件中的数据交给外部\n  defineExpose({name,age})\n</script>\n```\n\n\n\n## 3.12. 【props】\n\n> ```js\n> // 定义一个接口，限制每个Person对象的格式\n> export interface PersonInter {\n> id:string,\n> name:string,\n>  age:number\n> }\n> \n> // 定义一个自定义类型Persons\n> export type Persons = Array<PersonInter>\n> ```\n>\n> `App.vue`中代码：\n>\n> ```vue\n> <template>\n> \t<Person :list=\"persons\"/>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"App\">\n> import Person from './components/Person.vue'\n> import {reactive} from 'vue'\n>  import {type Persons} from './types'\n> \n>  let persons = reactive<Persons>([\n>   {id:'e98219e12',name:'张三',age:18},\n>    {id:'e98219e13',name:'李四',age:19},\n>     {id:'e98219e14',name:'王五',age:20}\n>   ])\n> </script>\n> \n> ```\n>\n> `Person.vue`中代码：\n>\n> ```Vue\n> <template>\n> <div class=\"person\">\n> <ul>\n>   <li v-for=\"item in list\" :key=\"item.id\">\n>      {{item.name}}--{{item.age}}\n>    </li>\n>  </ul>\n> </div>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"Person\">\n> import {defineProps} from 'vue'\n> import {type PersonInter} from '@/types'\n> \n> // 第一种写法：仅接收\n> // const props = defineProps(['list'])\n> \n> // 第二种写法：接收+限制类型\n> // defineProps<{list:Persons}>()\n> \n> // 第三种写法：接收+限制类型+指定默认值+限制必要性\n> let props = withDefaults(defineProps<{list?:Persons}>(),{\n>   list:()=>[{id:'asdasg01',name:'小猪佩奇',age:18}]\n> })\n> console.log(props)\n> </script>\n> ```\n\n## 3.13. 【生命周期】\n\n* 概念：`Vue`组件实例在创建时要经历一系列的初始化步骤，在此过程中`Vue`会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子\n\n* 规律：\n\n  > 生命周期整体分为四个阶段，分别是：**创建、挂载、更新、销毁**，每个阶段都有两个钩子，一前一后。\n\n* `Vue2`的生命周期\n\n  > 创建阶段：`beforeCreate`、`created`\n  >\n  > 挂载阶段：`beforeMount`、`mounted`\n  >\n  > 更新阶段：`beforeUpdate`、`updated`\n  >\n  > 销毁阶段：`beforeDestroy`、`destroyed`\n\n* `Vue3`的生命周期\n\n  > 创建阶段：`setup`\n  >\n  > 挂载阶段：`onBeforeMount`、`onMounted`\n  >\n  > 更新阶段：`onBeforeUpdate`、`onUpdated`\n  >\n  > 卸载阶段：`onBeforeUnmount`、`onUnmounted`\n\n* 常用的钩子：`onMounted`(挂载完毕)、`onUpdated`(更新完毕)、`onBeforeUnmount`(卸载之前)\n\n* 示例代码：\n\n  ```vue\n  <template>\n    <div class=\"person\">\n      <h2>当前求和为：{{ sum }}</h2>\n      <button @click=\"changeSum\">点我sum+1</button>\n    </div>\n  </template>\n  \n  <!-- vue3写法 -->\n  <script lang=\"ts\" setup name=\"Person\">\n    import { \n      ref, \n      onBeforeMount, \n      onMounted, \n      onBeforeUpdate, \n      onUpdated, \n      onBeforeUnmount, \n      onUnmounted \n    } from 'vue'\n  \n    // 数据\n    let sum = ref(0)\n    // 方法\n    function changeSum() {\n      sum.value += 1\n    }\n    console.log('setup')\n    // 生命周期钩子\n    onBeforeMount(()=>{\n      console.log('挂载之前')\n    })\n    onMounted(()=>{\n      console.log('挂载完毕')\n    })\n    onBeforeUpdate(()=>{\n      console.log('更新之前')\n    })\n    onUpdated(()=>{\n      console.log('更新完毕')\n    })\n    onBeforeUnmount(()=>{\n      console.log('卸载之前')\n    })\n    onUnmounted(()=>{\n      console.log('卸载完毕')\n    })\n  </script>\n  ```\n\n## 3.14. 【自定义hook】\n\n- 什么是`hook`？—— 本质是一个函数，把`setup`函数中使用的`Composition API`进行了封装，类似于`vue2.x`中的`mixin`。\n\n- 自定义`hook`的优势：复用代码, 让`setup`中的逻辑更清楚易懂。\n\n示例代码：\n\n- `useSum.ts`中内容如下：\n\n  ```js\n  import {ref,onMounted} from 'vue'\n  \n  export default function(){\n    let sum = ref(0)\n  \n    const increment = ()=>{\n      sum.value += 1\n    }\n    const decrement = ()=>{\n      sum.value -= 1\n    }\n    onMounted(()=>{\n      increment()\n    })\n  \n    //向外部暴露数据\n    return {sum,increment,decrement}\n  }\t\t\n  ```\n\n- `useDog.ts`中内容如下：\n\n  ```js\n  import {reactive,onMounted} from 'vue'\n  import axios,{AxiosError} from 'axios'\n  \n  export default function(){\n    let dogList = reactive<string[]>([])\n  \n    // 方法\n    async function getDog(){\n      try {\n        // 发请求\n        let {data} = await axios.get('https://dog.ceo/api/breed/pembroke/images/random')\n        // 维护数据\n        dogList.push(data.message)\n      } catch (error) {\n        // 处理错误\n        const err = <AxiosError>error\n        console.log(err.message)\n      }\n    }\n  \n    // 挂载钩子\n    onMounted(()=>{\n      getDog()\n    })\n  \t\n    //向外部暴露数据\n    return {dogList,getDog}\n  }\n  ```\n\n- 组件中具体使用：\n\n  ```vue\n  <template>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"increment\">点我+1</button>\n    <button @click=\"decrement\">点我-1</button>\n    <hr>\n    <img v-for=\"(u,index) in dogList.urlList\" :key=\"index\" :src=\"(u as string)\"> \n    <span v-show=\"dogList.isLoading\">加载中......</span><br>\n    <button @click=\"getDog\">再来一只狗</button>\n  </template>\n  \n  <script lang=\"ts\">\n    import {defineComponent} from 'vue'\n  \n    export default defineComponent({\n      name:'App',\n    })\n  </script>\n  \n  <script setup lang=\"ts\">\n    import useSum from './hooks/useSum'\n    import useDog from './hooks/useDog'\n  \t\n    let {sum,increment,decrement} = useSum()\n    let {dogList,getDog} = useDog()\n  </script>\n  ```\n\n    \n\n---\n\n# 4. 路由\n\n## 4.1. 【对路由的理解】\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232332.webp) \n\n## 4.2. 【基本切换效果】\n\n- `Vue3`中要使用`vue-router`的最新版本，目前是`4`版本。\n\n- 路由配置文件代码如下：\n\n  ```js\n  import {createRouter,createWebHistory} from 'vue-router'\n  import Home from '@/pages/Home.vue'\n  import News from '@/pages/News.vue'\n  import About from '@/pages/About.vue'\n  \n  const router = createRouter({\n  \thistory:createWebHistory(),\n  \troutes:[\n  \t\t{\n  \t\t\tpath:'/home',\n  \t\t\tcomponent:Home\n  \t\t},\n  \t\t{\n  \t\t\tpath:'/about',\n  \t\t\tcomponent:About\n  \t\t}\n  \t]\n  })\n  export default router\n  ```\n\n* `main.ts`代码如下：\n\n  ```js\n  import router from './router/index'\n  app.use(router)\n  \n  app.mount('#app')\n  ```\n\n- `App.vue`代码如下\n\n  ```vue\n  <template>\n    <div class=\"app\">\n      <h2 class=\"title\">Vue路由测试</h2>\n      <!-- 导航区 -->\n      <div class=\"navigate\">\n        <RouterLink to=\"/home\" active-class=\"active\">首页</RouterLink>\n        <RouterLink to=\"/news\" active-class=\"active\">新闻</RouterLink>\n        <RouterLink to=\"/about\" active-class=\"active\">关于</RouterLink>\n      </div>\n      <!-- 展示区 -->\n      <div class=\"main-content\">\n        <RouterView></RouterView>\n      </div>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"App\">\n    import {RouterLink,RouterView} from 'vue-router'  \n  </script>\n  ```\n\n## 4.3. 【两个注意点】\n\n> 1. 路由组件通常存放在`pages` 或 `views`文件夹，一般组件通常存放在`components`文件夹。\n>\n> 2. 通过点击导航，视觉效果上“消失” 了的路由组件，默认是被**卸载**掉的，需要的时候再去**挂载**。\n\n## 4.4.【路由器工作模式】\n\n1. `history`模式\n\n   > 优点：`URL`更加美观，不带有`#`，更接近传统的网站`URL`。\n   >\n   > 缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有`404`错误。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHistory(), //history模式\n   > \t/******/\n   > })\n   > ```\n\n2. `hash`模式\n\n   > 优点：兼容性更好，因为不需要服务器端处理路径。\n   >\n   > 缺点：`URL`带有`#`不太美观，且在`SEO`优化方面相对较差。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHashHistory(), //hash模式\n   > \t/******/\n   > })\n   > ```\n\n## 4.5. 【to的两种写法】\n\n```vue\n<!-- 第一种：to的字符串写法 -->\n<router-link active-class=\"active\" to=\"/home\">主页</router-link>\n\n<!-- 第二种：to的对象写法 -->\n<router-link active-class=\"active\" :to=\"{path:'/home'}\">Home</router-link>\n```\n\n## 4.6. 【命名路由】\n\n作用：可以简化路由跳转及传参（后面就讲）。\n\n给路由规则命名：\n\n```js\nroutes:[\n  {\n    name:'zhuye',\n    path:'/home',\n    component:Home\n  },\n  {\n    name:'xinwen',\n    path:'/news',\n    component:News,\n  },\n  {\n    name:'guanyu',\n    path:'/about',\n    component:About\n  }\n]\n```\n\n跳转路由：\n\n```vue\n<!--简化前：需要写完整的路径（to的字符串写法） -->\n<router-link to=\"/news/detail\">跳转</router-link>\n\n<!--简化后：直接通过名字跳转（to的对象写法配合name属性） -->\n<router-link :to=\"{name:'guanyu'}\">跳转</router-link>\n```\n\n\n\n## 4.7. 【嵌套路由】\n\n1. 编写`News`的子路由：`Detail.vue`\n\n2. 配置路由规则，使用`children`配置项：\n\n   ```ts\n   const router = createRouter({\n     history:createWebHistory(),\n   \troutes:[\n   \t\t{\n   \t\t\tname:'zhuye',\n   \t\t\tpath:'/home',\n   \t\t\tcomponent:Home\n   \t\t},\n   \t\t{\n   \t\t\tname:'xinwen',\n   \t\t\tpath:'/news',\n   \t\t\tcomponent:News,\n   \t\t\tchildren:[\n   \t\t\t\t{\n   \t\t\t\t\tname:'xiang',\n   \t\t\t\t\tpath:'detail',\n   \t\t\t\t\tcomponent:Detail\n   \t\t\t\t}\n   \t\t\t]\n   \t\t},\n   \t\t{\n   \t\t\tname:'guanyu',\n   \t\t\tpath:'/about',\n   \t\t\tcomponent:About\n   \t\t}\n   \t]\n   })\n   export default router\n   ```\n\n3. 跳转路由（记得要加完整路径）：\n\n   ```vue\n   <router-link to=\"/news/detail\">xxxx</router-link>\n   <!-- 或 -->\n   <router-link :to=\"{path:'/news/detail'}\">xxxx</router-link>\n   ```\n\n4. 记得去`Home`组件中预留一个`<router-view>`\n\n   ```vue\n   <template>\n     <div class=\"news\">\n       <nav class=\"news-list\">\n         <RouterLink v-for=\"news in newsList\" :key=\"news.id\" :to=\"{path:'/news/detail'}\">\n           {{news.name}}\n         </RouterLink>\n       </nav>\n       <div class=\"news-detail\">\n         <RouterView/>\n       </div>\n     </div>\n   </template>\n   ```\n\n   \n\n## 4.8. 【路由传参】\n\n### query参数\n\n   1. 传递参数\n\n      ```vue\n      <!-- 跳转并携带query参数（to的字符串写法） -->\n      <router-link to=\"/news/detail?a=1&b=2&content=欢迎你\">\n      \t跳转\n      </router-link>\n      \t\t\t\t\n      <!-- 跳转并携带query参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          //name:'xiang', //用name也可以跳转\n          path:'/news/detail',\n          query:{\n            id:news.id,\n            title:news.title,\n            content:news.content\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印query参数\n      console.log(route.query)\n      ```\n\n\n### params参数\n\n   1. 传递参数\n\n      ```vue\n      <!-- 跳转并携带params参数（to的字符串写法） -->\n      <RouterLink :to=\"`/news/detail/001/新闻001/内容001`\">{{news.title}}</RouterLink>\n      \t\t\t\t\n      <!-- 跳转并携带params参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          name:'xiang', //用name跳转\n          params:{\n            id:news.id,\n            title:news.title,\n            content:news.title\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印params参数\n      console.log(route.params)\n      ```\n\n> 备注1：传递`params`参数时，若使用`to`的对象写法，必须使用`name`配置项，不能用`path`。\n>\n> 备注2：传递`params`参数时，需要提前在规则中占位。\n\n## 4.9. 【路由的props配置】\n\n作用：让路由组件更方便的收到参数（可以将路由参数作为`props`传给组件）\n\n```js\n{\n\tname:'xiang',\n\tpath:'detail/:id/:title/:content',\n\tcomponent:Detail,\n\n  // props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件\n  // props:{a:1,b:2,c:3}, \n\n  // props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件\n  // props:true\n  \n  // props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件\n  props(route){\n    return route.query\n  }\n}\n```\n\n## 4.10. 【 replace属性】\n\n  1. 作用：控制路由跳转时操作浏览器历史记录的模式。\n\n  2. 浏览器的历史记录有两种写入方式：分别为```push```和```replace```：\n\n     - ```push```是追加历史记录（默认值）。\n     - `replace`是替换当前记录。\n\n  3. 开启`replace`模式：\n\n     ```vue\n     <RouterLink replace .......>News</RouterLink>\n     ```\n\n## 4.11. 【编程式导航】\n\n路由组件的两个重要的属性：`$route`和`$router`变成了两个`hooks`\n\n```js\nimport {useRoute,useRouter} from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconsole.log(route.query)\nconsole.log(route.parmas)\nconsole.log(router.push)\nconsole.log(router.replace)\n```\n\n## 4.12. 【重定向】\n\n1. 作用：将特定的路径，重新定向到已有路由。\n\n2. 具体编码：\n\n   ```js\n   {\n       path:'/',\n       redirect:'/about'\n   }\n   ```\n\n\n\n# 5. pinia \n\n## 5.1【准备一个效果】\n\n![](https://img.aixcc.top/file/f14ee7ea7c72a9003d7b8.gif) \n\n## 5.2【搭建 pinia 环境】\n\n第一步：`npm install pinia`\n\n第二步：操作`src/main.ts`\n\n```ts\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n/* 引入createPinia，用于创建pinia */\nimport { createPinia } from 'pinia'\n\n/* 创建pinia */\nconst pinia = createPinia()\nconst app = createApp(App)\n\n/* 使用插件 */{}\napp.use(pinia)\napp.mount('#app')\n```\n\n此时开发者工具中已经有了`pinia`选项\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232851.webp)\n\n## 5.3【存储+读取数据】\n\n1. `Store`是一个保存：**状态**、**业务逻辑** 的实体，每个组件都可以**读取**、**写入**它。\n\n2. 它有三个概念：`state`、`getter`、`action`，相当于组件中的： `data`、 `computed` 和 `methods`。\n\n3. 具体编码：`src/store/count.ts`\n\n   ```ts\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useCountStore = defineStore('count',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         sum:6\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n\n4. 具体编码：`src/store/talk.ts`\n\n   ```js\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useTalkStore = defineStore('talk',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         talkList:[\n           {id:'yuysada01',content:'你今天有点怪，哪里怪？怪好看的！'},\n        \t\t{id:'yuysada02',content:'草莓、蓝莓、蔓越莓，你想我了没？'},\n           {id:'yuysada03',content:'心里给你留了一块地，我的死心塌地'}\n         ]\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n\n5. 组件中使用`state`中的数据\n\n   ```vue\n   <template>\n     <h2>当前求和为：{{ sumStore.sum }}</h2>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     // 引入对应的useXxxxxStore\t\n     import {useSumStore} from '@/store/sum'\n     \n     // 调用useXxxxxStore得到对应的store\n     const sumStore = useSumStore()\n   </script>\n   ```\n\n   ```vue\n   <template>\n   \t<ul>\n       <li v-for=\"talk in talkStore.talkList\" :key=\"talk.id\">\n         {{ talk.content }}\n       </li>\n     </ul>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     import axios from 'axios'\n     import {useTalkStore} from '@/store/talk'\n   \n     const talkStore = useTalkStore()\n   </script>\n   ```\n\n   \n\n## 5.4.【修改数据】(三种方式)\n\n1. 第一种修改方式，直接修改\n\n   ```ts\n   countStore.sum = 666\n   ```\n\n2. 第二种修改方式：批量修改\n\n   ```ts\n   countStore.$patch({\n     sum:999,\n     school:'atguigu'\n   })\n   ```\n\n3. 第三种修改方式：借助`action`修改（`action`中可以编写一些业务逻辑）\n\n   ```js\n   import { defineStore } from 'pinia'\n   \n   export const useCountStore = defineStore('count', {\n     /*************/\n     actions: {\n       //加\n       increment(value:number) {\n         if (this.sum < 10) {\n           //操作countStore中的sum\n           this.sum += value\n         }\n       },\n       //减\n       decrement(value:number){\n         if(this.sum > 1){\n           this.sum -= value\n         }\n       }\n     },\n     /*************/\n   })\n   ```\n\n4. 组件中调用`action`即可\n\n   ```js\n   // 使用countStore\n   const countStore = useCountStore()\n   \n   // 调用对应action\n   countStore.incrementOdd(n.value)\n   ```\n\n\n## 5.5.【storeToRefs】\n\n- 借助`storeToRefs`将`store`中的数据转为`ref`对象，方便在模板中使用。\n- 注意：`pinia`提供的`storeToRefs`只会将数据做转换，而`Vue`的`toRefs`会转换`store`中数据。\n\n```vue\n<template>\n\t<div class=\"count\">\n\t\t<h2>当前求和为：{{sum}}</h2>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Count\">\n  import { useCountStore } from '@/store/count'\n  /* 引入storeToRefs */\n  import { storeToRefs } from 'pinia'\n\n\t/* 得到countStore */\n  const countStore = useCountStore()\n  /* 使用storeToRefs转换countStore，随后解构 */\n  const {sum} = storeToRefs(countStore)\n</script>\n\n```\n\n## 5.6.【getters】\n\n  1. 概念：当`state`中的数据，需要经过处理后再使用时，可以使用`getters`配置。\n\n  2. 追加```getters```配置。\n\n     ```js\n     // 引入defineStore用于创建store\n     import {defineStore} from 'pinia'\n     \n     // 定义并暴露一个store\n     export const useCountStore = defineStore('count',{\n       // 动作\n       actions:{\n         /************/\n       },\n       // 状态\n       state(){\n         return {\n           sum:1,\n           school:'atguigu'\n         }\n       },\n       // 计算\n       getters:{\n         bigSum:(state):number => state.sum *10,\n         upperSchool():string{\n           return this. school.toUpperCase()\n         }\n       }\n     })\n     ```\n\n  3. 组件中读取数据：\n\n     ```js\n     const {increment,decrement} = countStore\n     let {sum,school,bigSum,upperSchool} = storeToRefs(countStore)\n     ```\n\n     \n\n## 5.7.【$subscribe】\n\n通过 store 的 `$subscribe()` 方法侦听 `state` 及其变化\n\n```ts\ntalkStore.$subscribe((mutate,state)=>{\n  console.log('LoveTalk',mutate,state)\n  localStorage.setItem('talk',JSON.stringify(talkList.value))\n})\n```\n\n\n\n## 5.8. 【store组合式写法】\n\n```ts\nimport {defineStore} from 'pinia'\nimport axios from 'axios'\nimport {nanoid} from 'nanoid'\nimport {reactive} from 'vue'\n\nexport const useTalkStore = defineStore('talk',()=>{\n  // talkList就是state\n  const talkList = reactive(\n    JSON.parse(localStorage.getItem('talkList') as string) || []\n  )\n\n  // getATalk函数相当于action\n  async function getATalk(){\n    // 发请求，下面这行的写法是：连续解构赋值+重命名\n    let {data:{content:title}} = await axios.get('https://api.uomg.com/api/rand.qinghua?format=json')\n    // 把请求回来的字符串，包装成一个对象\n    let obj = {id:nanoid(),title}\n    // 放到数组中\n    talkList.unshift(obj)\n  }\n  return {talkList,getATalk}\n})\n```\n\n\n\n# 6. 组件通信\n\n**`Vue3`组件通信和`Vue2`的区别：**\n\n* 移出事件总线，使用`mitt`代替。\n\n- `vuex`换成了`pinia`。\n- 把`.sync`优化到了`v-model`里面了。\n- 把`$listeners`所有的东西，合并到`$attrs`中了。\n- `$children`被砍掉了。\n\n**常见搭配形式：**\n\n![image-20231119185900990](https://alist.aixcc.top/d/OneDrive/img/202407151232507.webp) \n\n## 6.1. 【props】\n\n概述：`props`是使用频率最高的一种通信方式，常用与 ：**父 ↔ 子**。\n\n- 若 **父传子**：属性值是**非函数**。\n- 若 **子传父**：属性值是**函数**。\n\n父组件：\n\n```vue\n<template>\n  <div class=\"father\">\n    <h3>父组件，</h3>\n\t\t<h4>我的车：{{ car }}</h4>\n\t\t<h4>儿子给的玩具：{{ toy }}</h4>\n\t\t<Child :car=\"car\" :getToy=\"getToy\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\t// 数据\n\tconst car = ref('奔驰')\n\tconst toy = ref()\n\t// 方法\n\tfunction getToy(value:string){\n\t\ttoy.value = value\n\t}\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div class=\"child\">\n    <h3>子组件</h3>\n\t\t<h4>我的玩具：{{ toy }}</h4>\n\t\t<h4>父给我的车：{{ car }}</h4>\n\t\t<button @click=\"getToy(toy)\">玩具给父亲</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport { ref } from \"vue\";\n\tconst toy = ref('奥特曼')\n\t\n\tdefineProps(['car','getToy'])\n</script>\n```\n\n## 6.2. 【自定义事件】\n\n1. 概述：自定义事件常用于：**子 => 父。**\n2. 注意区分好：原生事件、自定义事件。\n\n- 原生事件：\n  - 事件名是特定的（`click`、`mosueenter`等等）\t\n  - 事件对象`$event`: 是包含事件相关信息的对象（`pageX`、`pageY`、`target`、`keyCode`）\n- 自定义事件：\n  - 事件名是任意名称\n  - <strong style=\"color:red\">事件对象`$event`: 是调用`emit`时所提供的数据，可以是任意类型！！！</strong >\n\n3. 示例：\n\n   ```html\n   <!--在父组件中，给子组件绑定自定义事件：-->\n   <Child @send-toy=\"toy = $event\"/>\n   \n   <!--注意区分原生事件与自定义事件中的$event-->\n   <button @click=\"toy = $event\">测试</button>\n   ```\n\n   ```js\n   //子组件中，触发事件：\n   this.$emit('send-toy', 具体数据)\n   ```\n\n## 6.3. 【mitt】\n\n概述：与消息订阅与发布（`pubsub`）功能类似，可以实现任意组件间通信。\n\n安装`mitt`\n\n```shell\nnpm i mitt\n```\n\n新建文件：`src\\utils\\emitter.ts`\n\n```javascript\n// 引入mitt \nimport mitt from \"mitt\";\n\n// 创建emitter\nconst emitter = mitt()\n\n/*\n  // 绑定事件\n  emitter.on('abc',(value)=>{\n    console.log('abc事件被触发',value)\n  })\n  emitter.on('xyz',(value)=>{\n    console.log('xyz事件被触发',value)\n  })\n\n  setInterval(() => {\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  }, 1000);\n\n  setTimeout(() => {\n    // 清理事件\n    emitter.all.clear()\n  }, 3000); \n*/\n\n// 创建并暴露mitt\nexport default emitter\n```\n\n接收数据的组件中：绑定事件、同时在销毁前解绑事件：\n\n```typescript\nimport emitter from \"@/utils/emitter\";\nimport { onUnmounted } from \"vue\";\n\n// 绑定事件\nemitter.on('send-toy',(value)=>{\n  console.log('send-toy事件被触发',value)\n})\n\nonUnmounted(()=>{\n  // 解绑事件\n  emitter.off('send-toy')\n})\n```\n\n【第三步】：提供数据的组件，在合适的时候触发事件\n\n```javascript\nimport emitter from \"@/utils/emitter\";\n\nfunction sendToy(){\n  // 触发事件\n  emitter.emit('send-toy',toy.value)\n}\n```\n\n**注意这个重要的内置关系，总线依赖着这个内置关系**\n\n## 6.4.【v-model】\n\n1. 概述：实现 **父↔子** 之间相互通信。\n\n2. 前序知识 —— `v-model`的本质\n\n   ```vue\n   <!-- 使用v-model指令 -->\n   <input type=\"text\" v-model=\"userName\">\n   \n   <!-- v-model的本质是下面这行代码 -->\n   <input \n     type=\"text\" \n     :value=\"userName\" \n     @input=\"userName =(<HTMLInputElement>$event.target).value\"\n   >\n   ```\n\n3. 组件标签上的`v-model`的本质：`:moldeValue` ＋ `update:modelValue`事件。\n\n   ```vue\n   <!-- 组件标签上使用v-model指令 -->\n   <AtguiguInput v-model=\"userName\"/>\n   \n   <!-- 组件标签上v-model的本质 -->\n   <AtguiguInput :modelValue=\"userName\" @update:model-value=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```vue\n   <template>\n     <div class=\"box\">\n       <!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 -->\n   \t\t<!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件-->\n       <input \n          type=\"text\" \n          :value=\"modelValue\" \n          @input=\"emit('update:model-value',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['modelValue'])\n     // 声明事件\n     const emit = defineEmits(['update:model-value'])\n   </script>\n   ```\n\n4. 也可以更换`value`，例如改成`abc`\n\n   ```vue\n   <!-- 也可以更换value，例如改成abc-->\n   <AtguiguInput v-model:abc=\"userName\"/>\n   \n   <!-- 上面代码的本质如下 -->\n   <AtguiguInput :abc=\"userName\" @update:abc=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```vue\n   <template>\n     <div class=\"box\">\n       <input \n          type=\"text\" \n          :value=\"abc\" \n          @input=\"emit('update:abc',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['abc'])\n     // 声明事件\n     const emit = defineEmits(['update:abc'])\n   </script>\n   ```\n\n5. 如果`value`可以更换，那么就可以在组件标签上多次使用`v-model`\n\n   ```vue\n   <AtguiguInput v-model:abc=\"userName\" v-model:xyz=\"password\"/>\n   ```\n\n   \n\n\n## 6.5.【$attrs 】\n\n1. 概述：`$attrs`用于实现**当前组件的父组件**，向**当前组件的子组件**通信（**祖→孙**）。\n\n2. 具体说明：`$attrs`是一个对象，包含所有父组件传入的标签属性。\n\n   >  注意：`$attrs`会自动排除`props`中声明的属性(可以认为声明过的 `props` 被子组件自己“消费”了)\n\n父组件：\n\n```vue\n<template>\n  <div class=\"father\">\n    <h3>父组件</h3>\n\t\t<Child :a=\"a\" :b=\"b\" :c=\"c\" :d=\"d\" v-bind=\"{x:100,y:200}\" :updateA=\"updateA\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\tlet a = ref(1)\n\tlet b = ref(2)\n\tlet c = ref(3)\n\tlet d = ref(4)\n\n\tfunction updateA(value){\n\t\ta.value = value\n\t}\n</script>\n```\n\n子组件：\n\n```vue\n<template>\n\t<div class=\"child\">\n\t\t<h3>子组件</h3>\n\t\t<GrandChild v-bind=\"$attrs\"/>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport GrandChild from './GrandChild.vue'\n</script>\n```\n\n孙组件：\n\n```vue\n<template>\n\t<div class=\"grand-child\">\n\t\t<h3>孙组件</h3>\n\t\t<h4>a：{{ a }}</h4>\n\t\t<h4>b：{{ b }}</h4>\n\t\t<h4>c：{{ c }}</h4>\n\t\t<h4>d：{{ d }}</h4>\n\t\t<h4>x：{{ x }}</h4>\n\t\t<h4>y：{{ y }}</h4>\n\t\t<button @click=\"updateA(666)\">点我更新A</button>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"GrandChild\">\n\tdefineProps(['a','b','c','d','x','y','updateA'])\n</script>\n```\n\n## 6.6. 【$refs、$parent】\n\n1. 概述：\n\n   * `$refs`用于 ：**父→子。**\n   * `$parent`用于：**子→父。**\n\n2. 原理如下：\n\n   | 属性      | 说明                                                     |\n   | --------- | -------------------------------------------------------- |\n   | `$refs`   | 值为对象，包含所有被`ref`属性标识的`DOM`元素或组件实例。 |\n   | `$parent` | 值为对象，当前组件的父组件实例对象。                     |\n\n## 6.7. 【provide、inject】\n\n1. 概述：实现**祖孙组件**直接通信\n\n2. 具体使用：\n\n   * 在祖先组件中通过`provide`配置向后代组件提供数据\n   * 在后代组件中通过`inject`配置来声明接收数据\n\n3. 具体编码：\n\n   【第一步】父组件中，使用`provide`提供数据\n\n   ```vue\n   <template>\n     <div class=\"father\">\n       <h3>父组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"money += 1\">资产+1</button>\n       <button @click=\"car.price += 1\">汽车价格+1</button>\n       <Child/>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Father\">\n     import Child from './Child.vue'\n     import { ref,reactive,provide } from \"vue\";\n     // 数据\n     let money = ref(100)\n     let car = reactive({\n       brand:'奔驰',\n       price:100\n     })\n     // 用于更新money的方法\n     function updateMoney(value:number){\n       money.value += value\n     }\n     // 提供数据\n     provide('moneyContext',{money,updateMoney})\n     provide('car',car)\n   </script>\n   ```\n\n   > 注意：子组件中不用编写任何东西，是不受到任何打扰的\n\n   【第二步】孙组件中使用`inject`配置项接受数据。\n\n   ```vue\n   <template>\n     <div class=\"grand-child\">\n       <h3>我是孙组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"updateMoney(6)\">点我</button>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"GrandChild\">\n     import { inject } from 'vue';\n     // 注入数据\n    let {money,updateMoney} = inject('moneyContext',{money:0,updateMoney:(x:number)=>{}})\n     let car = inject('car')\n   </script>\n   ```\n\n\n## 6.8. 【pinia】\n\n参考之前`pinia`部分的讲解\n\n## 6.9. 【slot】\n\n### 1. 默认插槽\n\n![img](https://alist.aixcc.top/d/OneDrive/img/202407151232099.webp)\n\n```vue\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <ul>\n            <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n          </ul>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <!-- 默认插槽 -->\n            <slot></slot>\n          </div>\n        </template>\n```\n\n### 2. 具名插槽\n\n```vue\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <template v-slot:s1>\n            <ul>\n              <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n            </ul>\n          </template>\n          <template #s2>\n            <a href=\"\">更多</a>\n          </template>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <slot name=\"s1\"></slot>\n            <slot name=\"s2\"></slot>\n          </div>\n        </template>\n```\n\n### 3. 作用域插槽 \n\n1. 理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在`News`组件中，但使用数据所遍历出来的结构由`App`组件决定）\n\n2. 具体编码：\n\n   ```vue\n   父组件中：\n         <Game v-slot=\"params\">\n         <!-- <Game v-slot:default=\"params\"> -->\n         <!-- <Game #default=\"params\"> -->\n           <ul>\n             <li v-for=\"g in params.games\" :key=\"g.id\">{{ g.name }}</li>\n           </ul>\n         </Game>\n   \n   子组件中：\n         <template>\n           <div class=\"category\">\n             <h2>今日游戏榜单</h2>\n             <slot :games=\"games\" a=\"哈哈\"></slot>\n           </div>\n         </template>\n   \n         <script setup lang=\"ts\" name=\"Category\">\n           import {reactive} from 'vue'\n           let games = reactive([\n             {id:'asgdytsa01',name:'英雄联盟'},\n             {id:'asgdytsa02',name:'王者荣耀'},\n             {id:'asgdytsa03',name:'红色警戒'},\n             {id:'asgdytsa04',name:'斗罗大陆'}\n           ])\n         </script>\n   ```\n\n\n\n# 7. 其它 API\n\n## 7.1.【shallowRef 与 shallowReactive 】\n\n### `shallowRef`\n\n1. 作用：创建一个响应式数据，但只对顶层属性进行响应式处理。\n\n2. 用法：\n\n   ```js\n   let myVar = shallowRef(initialValue);\n   ```\n\n3. 特点：只跟踪引用值的变化，不关心值内部的属性变化。\n\n### `shallowReactive`\n\n1. 作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的\n\n2. 用法：\n\n   ```js\n   const myObj = shallowReactive({ ... });\n   ```\n\n3. 特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。\n\n### 总结\n\n> 通过使用 [`shallowRef()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref) 和 [`shallowReactive()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive) 来绕开深度响应。浅层式 `API` 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。\n\n\n\n## 7.2.【readonly 与 shallowReadonly】\n\n### **`readonly`**\n\n1. 作用：用于创建一个对象的深只读副本。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const readOnlyCopy = readonly(original);\n   ```\n\n3. 特点：\n\n   * 对象的所有嵌套属性都将变为只读。\n   * 任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。\n\n4. 应用场景：\n\n   * 创建不可变的状态快照。\n   * 保护全局状态或配置不被修改。\n\n### **`shallowReadonly`**\n\n1. 作用：与 `readonly` 类似，但只作用于对象的顶层属性。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const shallowReadOnlyCopy = shallowReadonly(original);\n   ```\n\n3. 特点：\n\n   * 只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。\n\n   * 适用于只需保护对象顶层属性的场景。\n\n     \n\n## 7.3.【toRaw 与 markRaw】\n\n### `toRaw`\n\n1. 作用：用于获取一个响应式对象的原始对象， `toRaw` 返回的对象不再是响应式的，不会触发视图更新。\n\n   > 官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。\n\n   > 何时使用？ —— 在需要将响应式对象传递给非 `Vue` 的库或外部系统时，使用 `toRaw` 可以确保它们收到的是普通对象\n\n2. 具体编码：\n\n   ```js\n   import { reactive,toRaw,markRaw,isReactive } from \"vue\";\n   \n   /* toRaw */\n   // 响应式对象\n   let person = reactive({name:'tony',age:18})\n   // 原始对象\n   let rawPerson = toRaw(person)\n   \n   \n   /* markRaw */\n   let citysd = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   console.log(isReactive(person))\n   console.log(isReactive(rawPerson))\n   console.log(isReactive(citys))\n   console.log(isReactive(citys2))\n   ```\n\n### `markRaw`\n\n1. 作用：标记一个对象，使其**永远不会**变成响应式的。\n\n   > 例如使用`mockjs`时，为了防止误把`mockjs`变为响应式对象，可以使用 `markRaw` 去标记`mockjs`\n\n2. 编码：\n\n   ```js\n   /* markRaw */\n   let citys = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   ```\n\n## 7.4.【customRef】\n\n作用：创建一个自定义的`ref`，并对其依赖项跟踪和更新触发进行逻辑控制。\n\n实现防抖效果（`useSumRef.ts`）：\n\n```typescript\nimport {customRef } from \"vue\";\n\nexport default function(initValue:string,delay:number){\n  let msg = customRef((track,trigger)=>{\n    let timer:number\n    return {\n      get(){\n        track() // 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新\n        return initValue\n      },\n      set(value){\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n          initValue = value\n          trigger() //通知Vue数据msg变化了\n        }, delay);\n      }\n    }\n  }) \n  return {msg}\n}\n```\n\n组件中使用：\n\n\n\n\n\n# 8. Vue3新组件\n\n## 8.1. 【Teleport】\n\n- 什么是Teleport？—— Teleport 是一种能够将我们的**组件html结构**移动到指定位置的技术。\n\n```html\n<teleport to='body' >\n    <div class=\"modal\" v-show=\"isShow\">\n      <h2>我是一个弹窗</h2>\n      <p>我是弹窗中的一些内容</p>\n      <button @click=\"isShow = false\">关闭弹窗</button>\n    </div>\n</teleport>\n```\n\n## 8.2. 【Suspense】\n\n-  等待异步组件时渲染一些额外内容，让应用有更好的用户体验 \n-  使用步骤： \n   -  异步引入组件\n   -  使用`Suspense`包裹组件，并配置好`default` 与 `fallback`\n\n```tsx\nimport { defineAsyncComponent,Suspense } from \"vue\";\nconst Child = defineAsyncComponent(()=>import('./Child.vue'))\n```\n\n```vue\n<template>\n    <div class=\"app\">\n        <h3>我是App组件</h3>\n        <Suspense>\n          <template v-slot:default>\n            <Child/>\n          </template>\n          <template v-slot:fallback>\n            <h3>加载中.......</h3>\n          </template>\n        </Suspense>\n    </div>\n</template>\n```\n\n\n\n## 8.3.【全局API转移到应用对象】\n\n- `app.component`\n- `app.config`\n- `app.directive`\n- `app.mount`\n- `app.unmount`\n- `app.use`\n\n## 8.4.【其他】\n\n- 过渡类名 `v-enter` 修改为 `v-enter-from`、过渡类名 `v-leave` 修改为 `v-leave-from`。\n\n\n- `keyCode` 作为 `v-on` 修饰符的支持。\n\n- `v-model` 指令在组件上的使用已经被重新设计，替换掉了 `v-bind.sync。`\n\n- `v-if` 和 `v-for` 在同一个元素身上使用时的优先级发生了变化。\n\n- 移除了`$on`、`$off` 和 `$once` 实例方法。\n\n- 移除了过滤器 `filter`。\n\n- 移除了`$children` 实例 `propert`。\n\n  ......\n\n------\n\n**本文内容来源于尚硅谷Vue.js教程，原文地址：[尚硅谷Vue教程](http://www.atguigu.com/video/284/)。感谢尚硅谷提供的优秀文档资源。**\n","source":"_posts/Vue3快速上手.md","raw":"---\ntitle: Vue3快速上手\ndate: 2024-07-13 23:56:37\ntags: \n  - Vue\n  - 前端\ncategorizes: 前端\ncategories: 前端\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151139287.webp\n---\n\n# 1. Vue3简介\n\n- 2020年9月18日，`Vue.js`发布版`3.0`版本，代号：`One Piece`（n\n\n- 经历了：[4800+次提交](https://github.com/vuejs/core/commits/main)、[40+个RFC](https://github.com/vuejs/rfcs/tree/master/active-rfcs)、[600+次PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+)、[300+贡献者](https://github.com/vuejs/core/graphs/contributors)\n\n- 官方发版地址：[Release v3.0.0 One Piece · vuejs/core](https://github.com/vuejs/core/releases/tag/v3.0.0)\n\n- 截止2023年10月，最新的公开版本为：`3.3.4`\n\n  ![image.png](https://alist.aixcc.top/d/OneDrive/img/202407151232363.webp) \n\n## 1.1. 【性能的提升】\n\n- 打包大小减少`41%`。\n\n- 初次渲染快`55%`, 更新渲染快`133%`。\n\n- 内存减少`54%`。\n\n  \n\n## 1.2.【 源码的升级】\n\n- 使用`Proxy`代替`defineProperty`实现响应式。\n\n- 重写虚拟`DOM`的实现和`Tree-Shaking`。\n\n  \n\n## 1.3. 【拥抱TypeScript】\n\n- `Vue3`可以更好的支持`TypeScript`。\n\n  \n\n## 1.4. 【新的特性】\n\n1. `Composition API`（组合`API`）：\n\n   - `setup`\n\n   - `ref`与`reactive`\n\n   - `computed`与`watch`\n\n     ......\n\n2. 新的内置组件：\n\n   - `Fragment`\n\n   - `Teleport`\n\n   - `Suspense`\n\n     ......\n\n3. 其他改变：\n\n   - 新的生命周期钩子\n\n   - `data` 选项应始终被声明为一个函数\n\n   - 移除`keyCode`支持作为` v-on` 的修饰符\n\n     ......\n\n\n\n# 2. 创建Vue3工程\n\n## 2.1. 【基于 vue-cli 创建】\n\n点击查看[官方文档](https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create)\n\n> 备注：目前`vue-cli`已处于维护模式，官方推荐基于 `Vite` 创建项目。\n\n```powershell\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n\n## 安装或者升级你的@vue/cli \nnpm install -g @vue/cli\n\n## 执行创建命令\nvue create vue_test\n\n##  随后选择3.x\n##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)\n##  > 3.x\n##    2.x\n\n## 启动\ncd vue_test\nnpm run serve\n```\n\n---\n\n## 2.2. 【基于 vite 创建】(推荐)\n\n`vite` 是新一代前端构建工具，官网地址：[https://vitejs.cn](https://vitejs.cn/)，`vite`的优势如下：\n\n- 轻量快速的热重载（`HMR`），能实现极速的服务启动。\n- 对 `TypeScript`、`JSX`、`CSS` 等支持开箱即用。\n- 真正的按需编译，不再等待整个应用编译完成。\n- `webpack`构建 与 `vite`构建对比图如下：\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232253.webp)\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232053.webp)\n\n* 具体操作如下（点击查看[官方文档](https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application)）\n\n```powershell\n## 1.创建命令\nnpm create vue@latest\n\n## 2.具体配置\n## 配置项目名称\n√ Project name: vue3_test\n## 是否添加TypeScript支持\n√ Add TypeScript?  Yes\n## 是否添加JSX支持\n√ Add JSX Support?  No\n## 是否添加路由环境\n√ Add Vue Router for Single Page Application development?  No\n## 是否添加pinia环境\n√ Add Pinia for state management?  No\n## 是否添加单元测试\n√ Add Vitest for Unit Testing?  No\n## 是否添加端到端测试方案\n√ Add an End-to-End Testing Solution? » No\n## 是否添加ESLint语法检查\n√ Add ESLint for code quality?  Yes\n## 是否添加Prettiert代码格式化\n√ Add Prettier for code formatting?  No\n```\n\n自己动手编写一个App组件\n\n```vue\n<template>\n  <div class=\"app\">\n    <h1>你好啊！</h1>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App' //组件名\n  }\n</script>\n\n<style>\n  .app {\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  }\n</style>\n```\n\n安装官方推荐的`vscode`插件：\n\n![Snipaste_2023-10-08_20-46-34](https://alist.aixcc.top/d/OneDrive/img/202407151232847.webp) \n\n![image-20231218085906380](https://alist.aixcc.top/d/OneDrive/img/202407151232668.webp) \n\n总结：\n\n- `Vite` 项目中，`index.html` 是项目的入口文件，在项目最外层。\n- 加载`index.html`后，`Vite` 解析 `<script type=\"module\" src=\"xxx\">` 指向的`JavaScript`。\n- `Vue3`**中是通过 **`createApp` 函数创建一个应用实例。\n\n## 2.3. 【一个简单的效果】\n\n`Vue3`向下兼容`Vue2`语法，且`Vue3`中的模板中可以没有根标签\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App',\n    data() {\n      return {\n        name:'张三',\n        age:18,\n        tel:'13888888888'\n      }\n    },\n    methods:{\n      changeName(){\n        this.name = 'zhang-san'\n      },\n      changeAge(){\n        this.age += 1\n      },\n      showTel(){\n        alert(this.tel)\n      }\n    },\n  }\n</script>\n```\n\n\n# 3. Vue3核心语法\n\n## 3.1.  【OptionsAPI 与 CompositionAPI】\n\n- `Vue2`的`API`设计是`Options`（配置）风格的。\n- `Vue3`的`API`设计是`Composition`（组合）风格的。\n\n###  Options API 的弊端\n\n`Options`类型的 `API`，数据、方法、计算属性等，是分散在：`data`、`methods`、`computed`中的，若想新增或者修改一个需求，就需要分别修改：`data`、`methods`、`computed`，不便于维护和复用。\n\n![](https://img.aixcc.top/file/c3edadbf9a9bbfd22d442.gif)![](https://img.aixcc.top/file/d978f7c4fd1f8a2a2e8f9.gif)\n\n### Composition API 的优势\n\n可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。\n\n![](https://img.aixcc.top/file/9acc07d0f3690f12a9fda.gif)![](https://img.aixcc.top/file/2e7d2a90529d10cad9c93.gif)\n\n> 说明：以上四张动图原创作者：大帅老猿\n\n## 3.2. 【拉开序幕的 setup】\n\n### setup 概述\n\n`setup`是`Vue3`中一个新的配置项，值是一个函数，它是 `Composition API` **“表演的舞台**_**”**_，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在`setup`中。\n\n特点如下：\n\n- `setup`函数返回的对象中的内容，可直接在模板中使用。\n- `setup`中访问`this`是`undefined`。\n- `setup`函数会在`beforeCreate`之前调用，它是“领先”所有钩子执行的。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n    setup(){\n      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name = '张三'\n      let age = 18\n      let tel = '13888888888'\n\n      // 方法，原来写在methods中\n      function changeName(){\n        name = 'zhang-san' //注意：此时这么修改name页面是不变化的\n        console.log(name)\n      }\n      function changeAge(){\n        age += 1 //注意：此时这么修改age页面是不变化的\n        console.log(age)\n      }\n      function showTel(){\n        alert(tel)\n      }\n\n      // 返回一个对象，对象中的内容，模板中可以直接使用\n      return {name,age,tel,changeName,changeAge,showTel}\n    }\n  }\n</script>\n```\n\n### setup 的返回值\n\n- 若返回一个**对象**：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**\n- 若返回一个**函数**：则可以自定义渲染内容，代码如下：\n\n```jsx\nsetup(){\n  return ()=> '你好啊！'\n}\n```\n\n### setup 与 Options API 的关系\n\n- `Vue2` 的配置（`data`、`methos`......）中**可以访问到** `setup`中的属性、方法。\n- 但在`setup`中**不能访问到**`Vue2`的配置（`data`、`methos`......）。\n- 如果与`Vue2`冲突，则`setup`优先。\n\n### setup 语法糖\n\n`setup`函数有一个语法糖，这个语法糖，可以让我们把`setup`独立出去，代码如下：\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changName\">修改名字</button>\n    <button @click=\"changAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n  }\n</script>\n\n<!-- 下面的写法是setup语法糖 -->\n<script setup lang=\"ts\">\n  console.log(this) //undefined\n  \n  // 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name = '张三'\n  let age = 18\n  let tel = '13888888888'\n\n  // 方法\n  function changName(){\n    name = '李四'//注意：此时这么修改name页面是不变化的\n  }\n  function changAge(){\n    console.log(age)\n    age += 1 //注意：此时这么修改age页面是不变化的\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n\n扩展：上述代码，还需要编写一个不写`setup`的`script`标签，去指定组件名字，比较麻烦，我们可以借助`vite`中的插件简化\n\n1. 第一步：`npm i vite-plugin-vue-setup-extend -D`\n2. 第二步：`vite.config.ts`\n\n```jsx\nimport { defineConfig } from 'vite'\nimport VueSetupExtend from 'vite-plugin-vue-setup-extend'\n\nexport default defineConfig({\n  plugins: [ VueSetupExtend() ]\n})\n```\n\n3. 第三步：`<script setup lang=\"ts\" name=\"Person\">`\n\n## 3.3. 【ref 创建：基本类型的响应式数据】\n\n- **作用：**定义响应式变量。\n- **语法：**`let xxx = ref(初始值)`。\n- **返回值：**一个`RefImpl`的实例对象，简称`ref对象`或`ref`，`ref`对象的`value`**属性是响应式的**。\n- **注意点：**\n  - `JS`中操作数据需要：`xxx.value`，但模板中不需要`.value`，直接使用即可。\n  - 对于`let name = ref('张三')`来说，`name`不是响应式的，`name.value`是响应式的。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Person\">\n  import {ref} from 'vue'\n  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name = ref('张三')\n  let age = ref(18)\n  // tel就是一个普通的字符串，不是响应式的\n  let tel = '13888888888'\n\n  function changeName(){\n    // JS中操作ref对象时候需要.value\n    name.value = '李四'\n    console.log(name.value)\n\n    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    // name = ref('zhang-san')\n  }\n  function changeAge(){\n    // JS中操作ref对象时候需要.value\n    age.value += 1 \n    console.log(age.value)\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n\n## 3.4. 【reactive 创建：对象类型的响应式数据】\n\n- **作用：**定义一个**响应式对象**（基本类型不要用它，要用`ref`，否则报错）\n- **语法：**`let 响应式对象= reactive(源对象)`。\n- **返回值：**一个`Proxy`的实例对象，简称：响应式对象。\n- **注意点：**`reactive`定义的响应式数据是“深层次”的。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { reactive } from 'vue'\n\n// 数据\nlet car = reactive({ brand: '奔驰', price: 100 })\nlet games = reactive([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = reactive({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nfunction changeCarPrice() {\n  car.price += 10\n}\nfunction changeFirstGame() {\n  games[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.a.b.c.d = 999\n}\n</script>\n```\n\n## 3.5. 【ref 创建：对象类型的响应式数据】\n\n- 其实`ref`接收的数据可以是：**基本类型**、**对象类型**。\n- 若`ref`接收的是对象类型，内部其实也是调用了`reactive`函数。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { ref } from 'vue'\n\n// 数据\nlet car = ref({ brand: '奔驰', price: 100 })\nlet games = ref([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = ref({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nconsole.log(car)\n\nfunction changeCarPrice() {\n  car.value.price += 10\n}\nfunction changeFirstGame() {\n  games.value[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.value.a.b.c.d = 999\n}\n</script>\n```\n\n## 3.6. 【ref 对比 reactive】\n\n宏观角度看：\n\n> 1. `ref`用来定义：**基本类型数据**、**对象类型数据**；\n>\n> 2. `reactive`用来定义：**对象类型数据**。\n\n- 区别：\n\n> 1. `ref`创建的变量必须使用`.value`（可以使用`volar`插件自动添加`.value`）。\n>\n>    ![自动补充value](https://alist.aixcc.top/d/OneDrive/img/202407151232718.webp) \n>\n> 2. `reactive`重新分配一个新对象，会**失去**响应式（可以使用`Object.assign`去整体替换）。\n\n- 使用原则：\n\n> 1. 若需要一个基本类型的响应式数据，必须使用`ref`。\n> 2. 若需要一个响应式对象，层级不深，`ref`、`reactive`都可以。\n> 3. 若需要一个响应式对象，且层级较深，推荐使用`reactive`。\n\n## 3.7. 【toRefs 与 toRef】\n\n- 作用：将一个响应式对象中的每一个属性，转换为`ref`对象。\n- 备注：`toRefs`与`toRef`功能一致，但`toRefs`可以批量转换。\n- 语法如下：\n\n```vue\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{person.name}}</h2>\n    <h2>年龄：{{person.age}}</h2>\n    <h2>性别：{{person.gender}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeGender\">修改性别</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,reactive,toRefs,toRef} from 'vue'\n\n  // 数据\n  let person = reactive({name:'张三', age:18, gender:'男'})\n\t\n  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let {name,gender} =  toRefs(person)\n\t\n  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age = toRef(person,'age')\n\n  // 方法\n  function changeName(){\n    name.value += '~'\n  }\n  function changeAge(){\n    age.value += 1\n  }\n  function changeGender(){\n    gender.value = '女'\n  }\n</script>\n```\n\n## 3.8. 【computed】\n\n作用：根据已有数据计算出新数据（和`Vue2`中的`computed`作用一致）。\n\n![](https://img.aixcc.top/file/35111db5e18d3bb69aee9.gif)  \n\n```vue\n<template>\n  <div class=\"person\">\n    姓：<input type=\"text\" v-model=\"firstName\"> <br>\n    名：<input type=\"text\" v-model=\"lastName\"> <br>\n    全名：<span>{{fullName}}</span> <br>\n    <button @click=\"changeFullName\">全名改为：li-si</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"App\">\n  import {ref,computed} from 'vue'\n\n  let firstName = ref('zhang')\n  let lastName = ref('san')\n\n  // 计算属性——只读取，不修改\n  /* let fullName = computed(()=>{\n    return firstName.value + '-' + lastName.value\n  }) */\n\n\n  // 计算属性——既读取又修改\n  let fullName = computed({\n    // 读取\n    get(){\n      return firstName.value + '-' + lastName.value\n    },\n    // 修改\n    set(val){\n      console.log('有人修改了fullName',val)\n      firstName.value = val.split('-')[0]\n      lastName.value = val.split('-')[1]\n    }\n  })\n\n  function changeFullName(){\n    fullName.value = 'li-si'\n  } \n</script>\n```\n\n## 3.9.【watch】\n\n- 作用：监视数据的变化（和`Vue2`中的`watch`作用一致）\n- 特点：`Vue3`中的`watch`只能监视以下**四种数据**：\n\n> 1. `ref`定义的数据。\n> 2. `reactive`定义的数据。\n> 3. 函数返回一个值（`getter`函数）。\n> 4. 一个包含上述内容的数组。\n\n我们在`Vue3`中使用`watch`的时候，通常会遇到以下几种情况：\n\n### * 情况一\n\n监视`ref`定义的【基本类型】数据：直接写数据名即可，监视的是其`value`值的改变。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况一：监视【ref】定义的【基本类型】数据</h1>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"changeSum\">点我sum+1</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let sum = ref(0)\n  // 方法\n  function changeSum(){\n    sum.value += 1\n  }\n  // 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch = watch(sum,(newValue,oldValue)=>{\n    console.log('sum变化了',newValue,oldValue)\n    if(newValue >= 10){\n      stopWatch()\n    }\n  })\n</script>\n```\n\n### * 情况二\n\n监视`ref`定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。\n\n> 注意：\n>\n> * 若修改的是`ref`定义的对象中的属性，`newValue` 和 `oldValue` 都是新值，因为它们是同一个对象。\n>\n> * 若修改整个`ref`定义的对象，`newValue` 是新值， `oldValue` 是旧值，因为不是同一个对象了。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况二：监视【ref】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let person = ref({\n    name:'张三',\n    age:18\n  })\n  // 方法\n  function changeName(){\n    person.value.name += '~'\n  }\n  function changeAge(){\n    person.value.age += 1\n  }\n  function changePerson(){\n    person.value = {name:'李四',age:90}\n  }\n  /* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  */\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  },{deep:true})\n  \n</script>\n```\n\n### *  情况三\n\n监视`reactive`定义的【对象类型】数据，且默认开启了深度监视。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况三：监视【reactive】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n    <hr>\n    <h2>测试：{{obj.a.b.c}}</h2>\n    <button @click=\"test\">修改obj.a.b.c</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18\n  })\n  let obj = reactive({\n    a:{\n      b:{\n        c:666\n      }\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changePerson(){\n    Object.assign(person,{name:'李四',age:80})\n  }\n  function test(){\n    obj.a.b.c = 888\n  }\n\n  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  })\n  watch(obj,(newValue,oldValue)=>{\n    console.log('Obj变化了',newValue,oldValue)\n  })\n</script>\n```\n\n### * 情况四\n\n监视`ref`或`reactive`定义的【对象类型】数据中的**某个属性**，注意点如下：\n\n1. 若该属性值**不是**【对象类型】，需要写成函数形式。\n2. 若该属性值是**依然**是【对象类型】，可直接编，也可写成函数，建议写成函数。\n\n结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  /* watch(()=> person.name,(newValue,oldValue)=>{\n    console.log('person.name变化了',newValue,oldValue)\n  }) */\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()=>person.car,(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n</script>\n```\n\n### * 情况五\n\n监视上述的多个数据\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1>情况五：监视上述的多个数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况五：监视上述的多个数据\n  watch([()=>person.name,person.car],(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n\n</script>\n```\n\n## 3.10. 【watchEffect】\n\n* 官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。\n\n* `watch`对比`watchEffect`\n\n  > 1. 都能监听响应式数据的变化，不同的是监听数据变化的方式不同\n  >\n  > 2. `watch`：要明确指出监视的数据\n  >\n  > 3. `watchEffect`：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。\n\n* 示例代码：\n\n  ```vue\n  <template>\n    <div class=\"person\">\n      <h1>需求：水温达到50℃，或水位达到20cm，则联系服务器</h1>\n      <h2 id=\"demo\">水温：{{temp}}</h2>\n      <h2>水位：{{height}}</h2>\n      <button @click=\"changePrice\">水温+1</button>\n      <button @click=\"changeSum\">水位+10</button>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"Person\">\n    import {ref,watch,watchEffect} from 'vue'\n    // 数据\n    let temp = ref(0)\n    let height = ref(0)\n  \n    // 方法\n    function changePrice(){\n      temp.value += 10\n    }\n    function changeSum(){\n      height.value += 1\n    }\n  \n    // 用watch实现，需要明确的指出要监视：temp、height\n    watch([temp,height],(value)=>{\n      // 从value中获取最新的temp值、height值\n      const [newTemp,newHeight] = value\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(newTemp >= 50 || newHeight >= 20){\n        console.log('联系服务器')\n      }\n    })\n  \n    // 用watchEffect实现，不用\n    const stopWtach = watchEffect(()=>{\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(temp.value >= 50 || height.value >= 20){\n        console.log(document.getElementById('demo')?.innerText)\n        console.log('联系服务器')\n      }\n      // 水温达到100，或水位达到50，取消监视\n      if(temp.value === 100 || height.value === 50){\n        console.log('清理了')\n        stopWtach()\n      }\n    })\n  </script>\n  ```\n\n  \n\n## 3.11. 【标签的 ref 属性】\n\n作用：用于注册模板引用。\n\n> * 用在普通`DOM`标签上，获取的是`DOM`节点。\n>\n> * 用在组件标签上，获取的是组件实例对象。\n\n用在普通`DOM`标签上：\n\n```vue\n<template>\n  <div class=\"person\">\n    <h1 ref=\"title1\">尚硅谷</h1>\n    <h2 ref=\"title2\">前端</h2>\n    <h3 ref=\"title3\">Vue</h3>\n    <input type=\"text\" ref=\"inpt\"> <br><br>\n    <button @click=\"showLog\">点我打印内容</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref} from 'vue'\n\t\n  let title1 = ref()\n  let title2 = ref()\n  let title3 = ref()\n\n  function showLog(){\n    // 通过id获取元素\n    const t1 = document.getElementById('title1')\n    // 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((<HTMLElement>t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t/************************************/\n\t\t\n    // 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  }\n</script>\n```\n\n用在组件标签上：\n\n```vue\n<!-- 父组件App.vue -->\n<template>\n  <Person ref=\"ren\"/>\n  <button @click=\"test\">测试</button>\n</template>\n\n<script lang=\"ts\" setup name=\"App\">\n  import Person from './components/Person.vue'\n  import {ref} from 'vue'\n\n  let ren = ref()\n\n  function test(){\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  }\n</script>\n\n\n<!-- 子组件Person.vue中要使用defineExpose暴露内容 -->\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,defineExpose} from 'vue'\n\t// 数据\n  let name = ref('张三')\n  let age = ref(18)\n  /****************************/\n  /****************************/\n  // 使用defineExpose将组件中的数据交给外部\n  defineExpose({name,age})\n</script>\n```\n\n\n\n## 3.12. 【props】\n\n> ```js\n> // 定义一个接口，限制每个Person对象的格式\n> export interface PersonInter {\n> id:string,\n> name:string,\n>  age:number\n> }\n> \n> // 定义一个自定义类型Persons\n> export type Persons = Array<PersonInter>\n> ```\n>\n> `App.vue`中代码：\n>\n> ```vue\n> <template>\n> \t<Person :list=\"persons\"/>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"App\">\n> import Person from './components/Person.vue'\n> import {reactive} from 'vue'\n>  import {type Persons} from './types'\n> \n>  let persons = reactive<Persons>([\n>   {id:'e98219e12',name:'张三',age:18},\n>    {id:'e98219e13',name:'李四',age:19},\n>     {id:'e98219e14',name:'王五',age:20}\n>   ])\n> </script>\n> \n> ```\n>\n> `Person.vue`中代码：\n>\n> ```Vue\n> <template>\n> <div class=\"person\">\n> <ul>\n>   <li v-for=\"item in list\" :key=\"item.id\">\n>      {{item.name}}--{{item.age}}\n>    </li>\n>  </ul>\n> </div>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"Person\">\n> import {defineProps} from 'vue'\n> import {type PersonInter} from '@/types'\n> \n> // 第一种写法：仅接收\n> // const props = defineProps(['list'])\n> \n> // 第二种写法：接收+限制类型\n> // defineProps<{list:Persons}>()\n> \n> // 第三种写法：接收+限制类型+指定默认值+限制必要性\n> let props = withDefaults(defineProps<{list?:Persons}>(),{\n>   list:()=>[{id:'asdasg01',name:'小猪佩奇',age:18}]\n> })\n> console.log(props)\n> </script>\n> ```\n\n## 3.13. 【生命周期】\n\n* 概念：`Vue`组件实例在创建时要经历一系列的初始化步骤，在此过程中`Vue`会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子\n\n* 规律：\n\n  > 生命周期整体分为四个阶段，分别是：**创建、挂载、更新、销毁**，每个阶段都有两个钩子，一前一后。\n\n* `Vue2`的生命周期\n\n  > 创建阶段：`beforeCreate`、`created`\n  >\n  > 挂载阶段：`beforeMount`、`mounted`\n  >\n  > 更新阶段：`beforeUpdate`、`updated`\n  >\n  > 销毁阶段：`beforeDestroy`、`destroyed`\n\n* `Vue3`的生命周期\n\n  > 创建阶段：`setup`\n  >\n  > 挂载阶段：`onBeforeMount`、`onMounted`\n  >\n  > 更新阶段：`onBeforeUpdate`、`onUpdated`\n  >\n  > 卸载阶段：`onBeforeUnmount`、`onUnmounted`\n\n* 常用的钩子：`onMounted`(挂载完毕)、`onUpdated`(更新完毕)、`onBeforeUnmount`(卸载之前)\n\n* 示例代码：\n\n  ```vue\n  <template>\n    <div class=\"person\">\n      <h2>当前求和为：{{ sum }}</h2>\n      <button @click=\"changeSum\">点我sum+1</button>\n    </div>\n  </template>\n  \n  <!-- vue3写法 -->\n  <script lang=\"ts\" setup name=\"Person\">\n    import { \n      ref, \n      onBeforeMount, \n      onMounted, \n      onBeforeUpdate, \n      onUpdated, \n      onBeforeUnmount, \n      onUnmounted \n    } from 'vue'\n  \n    // 数据\n    let sum = ref(0)\n    // 方法\n    function changeSum() {\n      sum.value += 1\n    }\n    console.log('setup')\n    // 生命周期钩子\n    onBeforeMount(()=>{\n      console.log('挂载之前')\n    })\n    onMounted(()=>{\n      console.log('挂载完毕')\n    })\n    onBeforeUpdate(()=>{\n      console.log('更新之前')\n    })\n    onUpdated(()=>{\n      console.log('更新完毕')\n    })\n    onBeforeUnmount(()=>{\n      console.log('卸载之前')\n    })\n    onUnmounted(()=>{\n      console.log('卸载完毕')\n    })\n  </script>\n  ```\n\n## 3.14. 【自定义hook】\n\n- 什么是`hook`？—— 本质是一个函数，把`setup`函数中使用的`Composition API`进行了封装，类似于`vue2.x`中的`mixin`。\n\n- 自定义`hook`的优势：复用代码, 让`setup`中的逻辑更清楚易懂。\n\n示例代码：\n\n- `useSum.ts`中内容如下：\n\n  ```js\n  import {ref,onMounted} from 'vue'\n  \n  export default function(){\n    let sum = ref(0)\n  \n    const increment = ()=>{\n      sum.value += 1\n    }\n    const decrement = ()=>{\n      sum.value -= 1\n    }\n    onMounted(()=>{\n      increment()\n    })\n  \n    //向外部暴露数据\n    return {sum,increment,decrement}\n  }\t\t\n  ```\n\n- `useDog.ts`中内容如下：\n\n  ```js\n  import {reactive,onMounted} from 'vue'\n  import axios,{AxiosError} from 'axios'\n  \n  export default function(){\n    let dogList = reactive<string[]>([])\n  \n    // 方法\n    async function getDog(){\n      try {\n        // 发请求\n        let {data} = await axios.get('https://dog.ceo/api/breed/pembroke/images/random')\n        // 维护数据\n        dogList.push(data.message)\n      } catch (error) {\n        // 处理错误\n        const err = <AxiosError>error\n        console.log(err.message)\n      }\n    }\n  \n    // 挂载钩子\n    onMounted(()=>{\n      getDog()\n    })\n  \t\n    //向外部暴露数据\n    return {dogList,getDog}\n  }\n  ```\n\n- 组件中具体使用：\n\n  ```vue\n  <template>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"increment\">点我+1</button>\n    <button @click=\"decrement\">点我-1</button>\n    <hr>\n    <img v-for=\"(u,index) in dogList.urlList\" :key=\"index\" :src=\"(u as string)\"> \n    <span v-show=\"dogList.isLoading\">加载中......</span><br>\n    <button @click=\"getDog\">再来一只狗</button>\n  </template>\n  \n  <script lang=\"ts\">\n    import {defineComponent} from 'vue'\n  \n    export default defineComponent({\n      name:'App',\n    })\n  </script>\n  \n  <script setup lang=\"ts\">\n    import useSum from './hooks/useSum'\n    import useDog from './hooks/useDog'\n  \t\n    let {sum,increment,decrement} = useSum()\n    let {dogList,getDog} = useDog()\n  </script>\n  ```\n\n    \n\n---\n\n# 4. 路由\n\n## 4.1. 【对路由的理解】\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232332.webp) \n\n## 4.2. 【基本切换效果】\n\n- `Vue3`中要使用`vue-router`的最新版本，目前是`4`版本。\n\n- 路由配置文件代码如下：\n\n  ```js\n  import {createRouter,createWebHistory} from 'vue-router'\n  import Home from '@/pages/Home.vue'\n  import News from '@/pages/News.vue'\n  import About from '@/pages/About.vue'\n  \n  const router = createRouter({\n  \thistory:createWebHistory(),\n  \troutes:[\n  \t\t{\n  \t\t\tpath:'/home',\n  \t\t\tcomponent:Home\n  \t\t},\n  \t\t{\n  \t\t\tpath:'/about',\n  \t\t\tcomponent:About\n  \t\t}\n  \t]\n  })\n  export default router\n  ```\n\n* `main.ts`代码如下：\n\n  ```js\n  import router from './router/index'\n  app.use(router)\n  \n  app.mount('#app')\n  ```\n\n- `App.vue`代码如下\n\n  ```vue\n  <template>\n    <div class=\"app\">\n      <h2 class=\"title\">Vue路由测试</h2>\n      <!-- 导航区 -->\n      <div class=\"navigate\">\n        <RouterLink to=\"/home\" active-class=\"active\">首页</RouterLink>\n        <RouterLink to=\"/news\" active-class=\"active\">新闻</RouterLink>\n        <RouterLink to=\"/about\" active-class=\"active\">关于</RouterLink>\n      </div>\n      <!-- 展示区 -->\n      <div class=\"main-content\">\n        <RouterView></RouterView>\n      </div>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"App\">\n    import {RouterLink,RouterView} from 'vue-router'  \n  </script>\n  ```\n\n## 4.3. 【两个注意点】\n\n> 1. 路由组件通常存放在`pages` 或 `views`文件夹，一般组件通常存放在`components`文件夹。\n>\n> 2. 通过点击导航，视觉效果上“消失” 了的路由组件，默认是被**卸载**掉的，需要的时候再去**挂载**。\n\n## 4.4.【路由器工作模式】\n\n1. `history`模式\n\n   > 优点：`URL`更加美观，不带有`#`，更接近传统的网站`URL`。\n   >\n   > 缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有`404`错误。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHistory(), //history模式\n   > \t/******/\n   > })\n   > ```\n\n2. `hash`模式\n\n   > 优点：兼容性更好，因为不需要服务器端处理路径。\n   >\n   > 缺点：`URL`带有`#`不太美观，且在`SEO`优化方面相对较差。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHashHistory(), //hash模式\n   > \t/******/\n   > })\n   > ```\n\n## 4.5. 【to的两种写法】\n\n```vue\n<!-- 第一种：to的字符串写法 -->\n<router-link active-class=\"active\" to=\"/home\">主页</router-link>\n\n<!-- 第二种：to的对象写法 -->\n<router-link active-class=\"active\" :to=\"{path:'/home'}\">Home</router-link>\n```\n\n## 4.6. 【命名路由】\n\n作用：可以简化路由跳转及传参（后面就讲）。\n\n给路由规则命名：\n\n```js\nroutes:[\n  {\n    name:'zhuye',\n    path:'/home',\n    component:Home\n  },\n  {\n    name:'xinwen',\n    path:'/news',\n    component:News,\n  },\n  {\n    name:'guanyu',\n    path:'/about',\n    component:About\n  }\n]\n```\n\n跳转路由：\n\n```vue\n<!--简化前：需要写完整的路径（to的字符串写法） -->\n<router-link to=\"/news/detail\">跳转</router-link>\n\n<!--简化后：直接通过名字跳转（to的对象写法配合name属性） -->\n<router-link :to=\"{name:'guanyu'}\">跳转</router-link>\n```\n\n\n\n## 4.7. 【嵌套路由】\n\n1. 编写`News`的子路由：`Detail.vue`\n\n2. 配置路由规则，使用`children`配置项：\n\n   ```ts\n   const router = createRouter({\n     history:createWebHistory(),\n   \troutes:[\n   \t\t{\n   \t\t\tname:'zhuye',\n   \t\t\tpath:'/home',\n   \t\t\tcomponent:Home\n   \t\t},\n   \t\t{\n   \t\t\tname:'xinwen',\n   \t\t\tpath:'/news',\n   \t\t\tcomponent:News,\n   \t\t\tchildren:[\n   \t\t\t\t{\n   \t\t\t\t\tname:'xiang',\n   \t\t\t\t\tpath:'detail',\n   \t\t\t\t\tcomponent:Detail\n   \t\t\t\t}\n   \t\t\t]\n   \t\t},\n   \t\t{\n   \t\t\tname:'guanyu',\n   \t\t\tpath:'/about',\n   \t\t\tcomponent:About\n   \t\t}\n   \t]\n   })\n   export default router\n   ```\n\n3. 跳转路由（记得要加完整路径）：\n\n   ```vue\n   <router-link to=\"/news/detail\">xxxx</router-link>\n   <!-- 或 -->\n   <router-link :to=\"{path:'/news/detail'}\">xxxx</router-link>\n   ```\n\n4. 记得去`Home`组件中预留一个`<router-view>`\n\n   ```vue\n   <template>\n     <div class=\"news\">\n       <nav class=\"news-list\">\n         <RouterLink v-for=\"news in newsList\" :key=\"news.id\" :to=\"{path:'/news/detail'}\">\n           {{news.name}}\n         </RouterLink>\n       </nav>\n       <div class=\"news-detail\">\n         <RouterView/>\n       </div>\n     </div>\n   </template>\n   ```\n\n   \n\n## 4.8. 【路由传参】\n\n### query参数\n\n   1. 传递参数\n\n      ```vue\n      <!-- 跳转并携带query参数（to的字符串写法） -->\n      <router-link to=\"/news/detail?a=1&b=2&content=欢迎你\">\n      \t跳转\n      </router-link>\n      \t\t\t\t\n      <!-- 跳转并携带query参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          //name:'xiang', //用name也可以跳转\n          path:'/news/detail',\n          query:{\n            id:news.id,\n            title:news.title,\n            content:news.content\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印query参数\n      console.log(route.query)\n      ```\n\n\n### params参数\n\n   1. 传递参数\n\n      ```vue\n      <!-- 跳转并携带params参数（to的字符串写法） -->\n      <RouterLink :to=\"`/news/detail/001/新闻001/内容001`\">{{news.title}}</RouterLink>\n      \t\t\t\t\n      <!-- 跳转并携带params参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          name:'xiang', //用name跳转\n          params:{\n            id:news.id,\n            title:news.title,\n            content:news.title\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印params参数\n      console.log(route.params)\n      ```\n\n> 备注1：传递`params`参数时，若使用`to`的对象写法，必须使用`name`配置项，不能用`path`。\n>\n> 备注2：传递`params`参数时，需要提前在规则中占位。\n\n## 4.9. 【路由的props配置】\n\n作用：让路由组件更方便的收到参数（可以将路由参数作为`props`传给组件）\n\n```js\n{\n\tname:'xiang',\n\tpath:'detail/:id/:title/:content',\n\tcomponent:Detail,\n\n  // props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件\n  // props:{a:1,b:2,c:3}, \n\n  // props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件\n  // props:true\n  \n  // props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件\n  props(route){\n    return route.query\n  }\n}\n```\n\n## 4.10. 【 replace属性】\n\n  1. 作用：控制路由跳转时操作浏览器历史记录的模式。\n\n  2. 浏览器的历史记录有两种写入方式：分别为```push```和```replace```：\n\n     - ```push```是追加历史记录（默认值）。\n     - `replace`是替换当前记录。\n\n  3. 开启`replace`模式：\n\n     ```vue\n     <RouterLink replace .......>News</RouterLink>\n     ```\n\n## 4.11. 【编程式导航】\n\n路由组件的两个重要的属性：`$route`和`$router`变成了两个`hooks`\n\n```js\nimport {useRoute,useRouter} from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconsole.log(route.query)\nconsole.log(route.parmas)\nconsole.log(router.push)\nconsole.log(router.replace)\n```\n\n## 4.12. 【重定向】\n\n1. 作用：将特定的路径，重新定向到已有路由。\n\n2. 具体编码：\n\n   ```js\n   {\n       path:'/',\n       redirect:'/about'\n   }\n   ```\n\n\n\n# 5. pinia \n\n## 5.1【准备一个效果】\n\n![](https://img.aixcc.top/file/f14ee7ea7c72a9003d7b8.gif) \n\n## 5.2【搭建 pinia 环境】\n\n第一步：`npm install pinia`\n\n第二步：操作`src/main.ts`\n\n```ts\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n/* 引入createPinia，用于创建pinia */\nimport { createPinia } from 'pinia'\n\n/* 创建pinia */\nconst pinia = createPinia()\nconst app = createApp(App)\n\n/* 使用插件 */{}\napp.use(pinia)\napp.mount('#app')\n```\n\n此时开发者工具中已经有了`pinia`选项\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151232851.webp)\n\n## 5.3【存储+读取数据】\n\n1. `Store`是一个保存：**状态**、**业务逻辑** 的实体，每个组件都可以**读取**、**写入**它。\n\n2. 它有三个概念：`state`、`getter`、`action`，相当于组件中的： `data`、 `computed` 和 `methods`。\n\n3. 具体编码：`src/store/count.ts`\n\n   ```ts\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useCountStore = defineStore('count',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         sum:6\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n\n4. 具体编码：`src/store/talk.ts`\n\n   ```js\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useTalkStore = defineStore('talk',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         talkList:[\n           {id:'yuysada01',content:'你今天有点怪，哪里怪？怪好看的！'},\n        \t\t{id:'yuysada02',content:'草莓、蓝莓、蔓越莓，你想我了没？'},\n           {id:'yuysada03',content:'心里给你留了一块地，我的死心塌地'}\n         ]\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n\n5. 组件中使用`state`中的数据\n\n   ```vue\n   <template>\n     <h2>当前求和为：{{ sumStore.sum }}</h2>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     // 引入对应的useXxxxxStore\t\n     import {useSumStore} from '@/store/sum'\n     \n     // 调用useXxxxxStore得到对应的store\n     const sumStore = useSumStore()\n   </script>\n   ```\n\n   ```vue\n   <template>\n   \t<ul>\n       <li v-for=\"talk in talkStore.talkList\" :key=\"talk.id\">\n         {{ talk.content }}\n       </li>\n     </ul>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     import axios from 'axios'\n     import {useTalkStore} from '@/store/talk'\n   \n     const talkStore = useTalkStore()\n   </script>\n   ```\n\n   \n\n## 5.4.【修改数据】(三种方式)\n\n1. 第一种修改方式，直接修改\n\n   ```ts\n   countStore.sum = 666\n   ```\n\n2. 第二种修改方式：批量修改\n\n   ```ts\n   countStore.$patch({\n     sum:999,\n     school:'atguigu'\n   })\n   ```\n\n3. 第三种修改方式：借助`action`修改（`action`中可以编写一些业务逻辑）\n\n   ```js\n   import { defineStore } from 'pinia'\n   \n   export const useCountStore = defineStore('count', {\n     /*************/\n     actions: {\n       //加\n       increment(value:number) {\n         if (this.sum < 10) {\n           //操作countStore中的sum\n           this.sum += value\n         }\n       },\n       //减\n       decrement(value:number){\n         if(this.sum > 1){\n           this.sum -= value\n         }\n       }\n     },\n     /*************/\n   })\n   ```\n\n4. 组件中调用`action`即可\n\n   ```js\n   // 使用countStore\n   const countStore = useCountStore()\n   \n   // 调用对应action\n   countStore.incrementOdd(n.value)\n   ```\n\n\n## 5.5.【storeToRefs】\n\n- 借助`storeToRefs`将`store`中的数据转为`ref`对象，方便在模板中使用。\n- 注意：`pinia`提供的`storeToRefs`只会将数据做转换，而`Vue`的`toRefs`会转换`store`中数据。\n\n```vue\n<template>\n\t<div class=\"count\">\n\t\t<h2>当前求和为：{{sum}}</h2>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Count\">\n  import { useCountStore } from '@/store/count'\n  /* 引入storeToRefs */\n  import { storeToRefs } from 'pinia'\n\n\t/* 得到countStore */\n  const countStore = useCountStore()\n  /* 使用storeToRefs转换countStore，随后解构 */\n  const {sum} = storeToRefs(countStore)\n</script>\n\n```\n\n## 5.6.【getters】\n\n  1. 概念：当`state`中的数据，需要经过处理后再使用时，可以使用`getters`配置。\n\n  2. 追加```getters```配置。\n\n     ```js\n     // 引入defineStore用于创建store\n     import {defineStore} from 'pinia'\n     \n     // 定义并暴露一个store\n     export const useCountStore = defineStore('count',{\n       // 动作\n       actions:{\n         /************/\n       },\n       // 状态\n       state(){\n         return {\n           sum:1,\n           school:'atguigu'\n         }\n       },\n       // 计算\n       getters:{\n         bigSum:(state):number => state.sum *10,\n         upperSchool():string{\n           return this. school.toUpperCase()\n         }\n       }\n     })\n     ```\n\n  3. 组件中读取数据：\n\n     ```js\n     const {increment,decrement} = countStore\n     let {sum,school,bigSum,upperSchool} = storeToRefs(countStore)\n     ```\n\n     \n\n## 5.7.【$subscribe】\n\n通过 store 的 `$subscribe()` 方法侦听 `state` 及其变化\n\n```ts\ntalkStore.$subscribe((mutate,state)=>{\n  console.log('LoveTalk',mutate,state)\n  localStorage.setItem('talk',JSON.stringify(talkList.value))\n})\n```\n\n\n\n## 5.8. 【store组合式写法】\n\n```ts\nimport {defineStore} from 'pinia'\nimport axios from 'axios'\nimport {nanoid} from 'nanoid'\nimport {reactive} from 'vue'\n\nexport const useTalkStore = defineStore('talk',()=>{\n  // talkList就是state\n  const talkList = reactive(\n    JSON.parse(localStorage.getItem('talkList') as string) || []\n  )\n\n  // getATalk函数相当于action\n  async function getATalk(){\n    // 发请求，下面这行的写法是：连续解构赋值+重命名\n    let {data:{content:title}} = await axios.get('https://api.uomg.com/api/rand.qinghua?format=json')\n    // 把请求回来的字符串，包装成一个对象\n    let obj = {id:nanoid(),title}\n    // 放到数组中\n    talkList.unshift(obj)\n  }\n  return {talkList,getATalk}\n})\n```\n\n\n\n# 6. 组件通信\n\n**`Vue3`组件通信和`Vue2`的区别：**\n\n* 移出事件总线，使用`mitt`代替。\n\n- `vuex`换成了`pinia`。\n- 把`.sync`优化到了`v-model`里面了。\n- 把`$listeners`所有的东西，合并到`$attrs`中了。\n- `$children`被砍掉了。\n\n**常见搭配形式：**\n\n![image-20231119185900990](https://alist.aixcc.top/d/OneDrive/img/202407151232507.webp) \n\n## 6.1. 【props】\n\n概述：`props`是使用频率最高的一种通信方式，常用与 ：**父 ↔ 子**。\n\n- 若 **父传子**：属性值是**非函数**。\n- 若 **子传父**：属性值是**函数**。\n\n父组件：\n\n```vue\n<template>\n  <div class=\"father\">\n    <h3>父组件，</h3>\n\t\t<h4>我的车：{{ car }}</h4>\n\t\t<h4>儿子给的玩具：{{ toy }}</h4>\n\t\t<Child :car=\"car\" :getToy=\"getToy\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\t// 数据\n\tconst car = ref('奔驰')\n\tconst toy = ref()\n\t// 方法\n\tfunction getToy(value:string){\n\t\ttoy.value = value\n\t}\n</script>\n```\n\n子组件\n\n```vue\n<template>\n  <div class=\"child\">\n    <h3>子组件</h3>\n\t\t<h4>我的玩具：{{ toy }}</h4>\n\t\t<h4>父给我的车：{{ car }}</h4>\n\t\t<button @click=\"getToy(toy)\">玩具给父亲</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport { ref } from \"vue\";\n\tconst toy = ref('奥特曼')\n\t\n\tdefineProps(['car','getToy'])\n</script>\n```\n\n## 6.2. 【自定义事件】\n\n1. 概述：自定义事件常用于：**子 => 父。**\n2. 注意区分好：原生事件、自定义事件。\n\n- 原生事件：\n  - 事件名是特定的（`click`、`mosueenter`等等）\t\n  - 事件对象`$event`: 是包含事件相关信息的对象（`pageX`、`pageY`、`target`、`keyCode`）\n- 自定义事件：\n  - 事件名是任意名称\n  - <strong style=\"color:red\">事件对象`$event`: 是调用`emit`时所提供的数据，可以是任意类型！！！</strong >\n\n3. 示例：\n\n   ```html\n   <!--在父组件中，给子组件绑定自定义事件：-->\n   <Child @send-toy=\"toy = $event\"/>\n   \n   <!--注意区分原生事件与自定义事件中的$event-->\n   <button @click=\"toy = $event\">测试</button>\n   ```\n\n   ```js\n   //子组件中，触发事件：\n   this.$emit('send-toy', 具体数据)\n   ```\n\n## 6.3. 【mitt】\n\n概述：与消息订阅与发布（`pubsub`）功能类似，可以实现任意组件间通信。\n\n安装`mitt`\n\n```shell\nnpm i mitt\n```\n\n新建文件：`src\\utils\\emitter.ts`\n\n```javascript\n// 引入mitt \nimport mitt from \"mitt\";\n\n// 创建emitter\nconst emitter = mitt()\n\n/*\n  // 绑定事件\n  emitter.on('abc',(value)=>{\n    console.log('abc事件被触发',value)\n  })\n  emitter.on('xyz',(value)=>{\n    console.log('xyz事件被触发',value)\n  })\n\n  setInterval(() => {\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  }, 1000);\n\n  setTimeout(() => {\n    // 清理事件\n    emitter.all.clear()\n  }, 3000); \n*/\n\n// 创建并暴露mitt\nexport default emitter\n```\n\n接收数据的组件中：绑定事件、同时在销毁前解绑事件：\n\n```typescript\nimport emitter from \"@/utils/emitter\";\nimport { onUnmounted } from \"vue\";\n\n// 绑定事件\nemitter.on('send-toy',(value)=>{\n  console.log('send-toy事件被触发',value)\n})\n\nonUnmounted(()=>{\n  // 解绑事件\n  emitter.off('send-toy')\n})\n```\n\n【第三步】：提供数据的组件，在合适的时候触发事件\n\n```javascript\nimport emitter from \"@/utils/emitter\";\n\nfunction sendToy(){\n  // 触发事件\n  emitter.emit('send-toy',toy.value)\n}\n```\n\n**注意这个重要的内置关系，总线依赖着这个内置关系**\n\n## 6.4.【v-model】\n\n1. 概述：实现 **父↔子** 之间相互通信。\n\n2. 前序知识 —— `v-model`的本质\n\n   ```vue\n   <!-- 使用v-model指令 -->\n   <input type=\"text\" v-model=\"userName\">\n   \n   <!-- v-model的本质是下面这行代码 -->\n   <input \n     type=\"text\" \n     :value=\"userName\" \n     @input=\"userName =(<HTMLInputElement>$event.target).value\"\n   >\n   ```\n\n3. 组件标签上的`v-model`的本质：`:moldeValue` ＋ `update:modelValue`事件。\n\n   ```vue\n   <!-- 组件标签上使用v-model指令 -->\n   <AtguiguInput v-model=\"userName\"/>\n   \n   <!-- 组件标签上v-model的本质 -->\n   <AtguiguInput :modelValue=\"userName\" @update:model-value=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```vue\n   <template>\n     <div class=\"box\">\n       <!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 -->\n   \t\t<!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件-->\n       <input \n          type=\"text\" \n          :value=\"modelValue\" \n          @input=\"emit('update:model-value',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['modelValue'])\n     // 声明事件\n     const emit = defineEmits(['update:model-value'])\n   </script>\n   ```\n\n4. 也可以更换`value`，例如改成`abc`\n\n   ```vue\n   <!-- 也可以更换value，例如改成abc-->\n   <AtguiguInput v-model:abc=\"userName\"/>\n   \n   <!-- 上面代码的本质如下 -->\n   <AtguiguInput :abc=\"userName\" @update:abc=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```vue\n   <template>\n     <div class=\"box\">\n       <input \n          type=\"text\" \n          :value=\"abc\" \n          @input=\"emit('update:abc',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['abc'])\n     // 声明事件\n     const emit = defineEmits(['update:abc'])\n   </script>\n   ```\n\n5. 如果`value`可以更换，那么就可以在组件标签上多次使用`v-model`\n\n   ```vue\n   <AtguiguInput v-model:abc=\"userName\" v-model:xyz=\"password\"/>\n   ```\n\n   \n\n\n## 6.5.【$attrs 】\n\n1. 概述：`$attrs`用于实现**当前组件的父组件**，向**当前组件的子组件**通信（**祖→孙**）。\n\n2. 具体说明：`$attrs`是一个对象，包含所有父组件传入的标签属性。\n\n   >  注意：`$attrs`会自动排除`props`中声明的属性(可以认为声明过的 `props` 被子组件自己“消费”了)\n\n父组件：\n\n```vue\n<template>\n  <div class=\"father\">\n    <h3>父组件</h3>\n\t\t<Child :a=\"a\" :b=\"b\" :c=\"c\" :d=\"d\" v-bind=\"{x:100,y:200}\" :updateA=\"updateA\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\tlet a = ref(1)\n\tlet b = ref(2)\n\tlet c = ref(3)\n\tlet d = ref(4)\n\n\tfunction updateA(value){\n\t\ta.value = value\n\t}\n</script>\n```\n\n子组件：\n\n```vue\n<template>\n\t<div class=\"child\">\n\t\t<h3>子组件</h3>\n\t\t<GrandChild v-bind=\"$attrs\"/>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport GrandChild from './GrandChild.vue'\n</script>\n```\n\n孙组件：\n\n```vue\n<template>\n\t<div class=\"grand-child\">\n\t\t<h3>孙组件</h3>\n\t\t<h4>a：{{ a }}</h4>\n\t\t<h4>b：{{ b }}</h4>\n\t\t<h4>c：{{ c }}</h4>\n\t\t<h4>d：{{ d }}</h4>\n\t\t<h4>x：{{ x }}</h4>\n\t\t<h4>y：{{ y }}</h4>\n\t\t<button @click=\"updateA(666)\">点我更新A</button>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"GrandChild\">\n\tdefineProps(['a','b','c','d','x','y','updateA'])\n</script>\n```\n\n## 6.6. 【$refs、$parent】\n\n1. 概述：\n\n   * `$refs`用于 ：**父→子。**\n   * `$parent`用于：**子→父。**\n\n2. 原理如下：\n\n   | 属性      | 说明                                                     |\n   | --------- | -------------------------------------------------------- |\n   | `$refs`   | 值为对象，包含所有被`ref`属性标识的`DOM`元素或组件实例。 |\n   | `$parent` | 值为对象，当前组件的父组件实例对象。                     |\n\n## 6.7. 【provide、inject】\n\n1. 概述：实现**祖孙组件**直接通信\n\n2. 具体使用：\n\n   * 在祖先组件中通过`provide`配置向后代组件提供数据\n   * 在后代组件中通过`inject`配置来声明接收数据\n\n3. 具体编码：\n\n   【第一步】父组件中，使用`provide`提供数据\n\n   ```vue\n   <template>\n     <div class=\"father\">\n       <h3>父组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"money += 1\">资产+1</button>\n       <button @click=\"car.price += 1\">汽车价格+1</button>\n       <Child/>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Father\">\n     import Child from './Child.vue'\n     import { ref,reactive,provide } from \"vue\";\n     // 数据\n     let money = ref(100)\n     let car = reactive({\n       brand:'奔驰',\n       price:100\n     })\n     // 用于更新money的方法\n     function updateMoney(value:number){\n       money.value += value\n     }\n     // 提供数据\n     provide('moneyContext',{money,updateMoney})\n     provide('car',car)\n   </script>\n   ```\n\n   > 注意：子组件中不用编写任何东西，是不受到任何打扰的\n\n   【第二步】孙组件中使用`inject`配置项接受数据。\n\n   ```vue\n   <template>\n     <div class=\"grand-child\">\n       <h3>我是孙组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"updateMoney(6)\">点我</button>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"GrandChild\">\n     import { inject } from 'vue';\n     // 注入数据\n    let {money,updateMoney} = inject('moneyContext',{money:0,updateMoney:(x:number)=>{}})\n     let car = inject('car')\n   </script>\n   ```\n\n\n## 6.8. 【pinia】\n\n参考之前`pinia`部分的讲解\n\n## 6.9. 【slot】\n\n### 1. 默认插槽\n\n![img](https://alist.aixcc.top/d/OneDrive/img/202407151232099.webp)\n\n```vue\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <ul>\n            <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n          </ul>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <!-- 默认插槽 -->\n            <slot></slot>\n          </div>\n        </template>\n```\n\n### 2. 具名插槽\n\n```vue\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <template v-slot:s1>\n            <ul>\n              <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n            </ul>\n          </template>\n          <template #s2>\n            <a href=\"\">更多</a>\n          </template>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <slot name=\"s1\"></slot>\n            <slot name=\"s2\"></slot>\n          </div>\n        </template>\n```\n\n### 3. 作用域插槽 \n\n1. 理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在`News`组件中，但使用数据所遍历出来的结构由`App`组件决定）\n\n2. 具体编码：\n\n   ```vue\n   父组件中：\n         <Game v-slot=\"params\">\n         <!-- <Game v-slot:default=\"params\"> -->\n         <!-- <Game #default=\"params\"> -->\n           <ul>\n             <li v-for=\"g in params.games\" :key=\"g.id\">{{ g.name }}</li>\n           </ul>\n         </Game>\n   \n   子组件中：\n         <template>\n           <div class=\"category\">\n             <h2>今日游戏榜单</h2>\n             <slot :games=\"games\" a=\"哈哈\"></slot>\n           </div>\n         </template>\n   \n         <script setup lang=\"ts\" name=\"Category\">\n           import {reactive} from 'vue'\n           let games = reactive([\n             {id:'asgdytsa01',name:'英雄联盟'},\n             {id:'asgdytsa02',name:'王者荣耀'},\n             {id:'asgdytsa03',name:'红色警戒'},\n             {id:'asgdytsa04',name:'斗罗大陆'}\n           ])\n         </script>\n   ```\n\n\n\n# 7. 其它 API\n\n## 7.1.【shallowRef 与 shallowReactive 】\n\n### `shallowRef`\n\n1. 作用：创建一个响应式数据，但只对顶层属性进行响应式处理。\n\n2. 用法：\n\n   ```js\n   let myVar = shallowRef(initialValue);\n   ```\n\n3. 特点：只跟踪引用值的变化，不关心值内部的属性变化。\n\n### `shallowReactive`\n\n1. 作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的\n\n2. 用法：\n\n   ```js\n   const myObj = shallowReactive({ ... });\n   ```\n\n3. 特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。\n\n### 总结\n\n> 通过使用 [`shallowRef()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref) 和 [`shallowReactive()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive) 来绕开深度响应。浅层式 `API` 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。\n\n\n\n## 7.2.【readonly 与 shallowReadonly】\n\n### **`readonly`**\n\n1. 作用：用于创建一个对象的深只读副本。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const readOnlyCopy = readonly(original);\n   ```\n\n3. 特点：\n\n   * 对象的所有嵌套属性都将变为只读。\n   * 任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。\n\n4. 应用场景：\n\n   * 创建不可变的状态快照。\n   * 保护全局状态或配置不被修改。\n\n### **`shallowReadonly`**\n\n1. 作用：与 `readonly` 类似，但只作用于对象的顶层属性。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const shallowReadOnlyCopy = shallowReadonly(original);\n   ```\n\n3. 特点：\n\n   * 只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。\n\n   * 适用于只需保护对象顶层属性的场景。\n\n     \n\n## 7.3.【toRaw 与 markRaw】\n\n### `toRaw`\n\n1. 作用：用于获取一个响应式对象的原始对象， `toRaw` 返回的对象不再是响应式的，不会触发视图更新。\n\n   > 官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。\n\n   > 何时使用？ —— 在需要将响应式对象传递给非 `Vue` 的库或外部系统时，使用 `toRaw` 可以确保它们收到的是普通对象\n\n2. 具体编码：\n\n   ```js\n   import { reactive,toRaw,markRaw,isReactive } from \"vue\";\n   \n   /* toRaw */\n   // 响应式对象\n   let person = reactive({name:'tony',age:18})\n   // 原始对象\n   let rawPerson = toRaw(person)\n   \n   \n   /* markRaw */\n   let citysd = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   console.log(isReactive(person))\n   console.log(isReactive(rawPerson))\n   console.log(isReactive(citys))\n   console.log(isReactive(citys2))\n   ```\n\n### `markRaw`\n\n1. 作用：标记一个对象，使其**永远不会**变成响应式的。\n\n   > 例如使用`mockjs`时，为了防止误把`mockjs`变为响应式对象，可以使用 `markRaw` 去标记`mockjs`\n\n2. 编码：\n\n   ```js\n   /* markRaw */\n   let citys = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   ```\n\n## 7.4.【customRef】\n\n作用：创建一个自定义的`ref`，并对其依赖项跟踪和更新触发进行逻辑控制。\n\n实现防抖效果（`useSumRef.ts`）：\n\n```typescript\nimport {customRef } from \"vue\";\n\nexport default function(initValue:string,delay:number){\n  let msg = customRef((track,trigger)=>{\n    let timer:number\n    return {\n      get(){\n        track() // 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新\n        return initValue\n      },\n      set(value){\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n          initValue = value\n          trigger() //通知Vue数据msg变化了\n        }, delay);\n      }\n    }\n  }) \n  return {msg}\n}\n```\n\n组件中使用：\n\n\n\n\n\n# 8. Vue3新组件\n\n## 8.1. 【Teleport】\n\n- 什么是Teleport？—— Teleport 是一种能够将我们的**组件html结构**移动到指定位置的技术。\n\n```html\n<teleport to='body' >\n    <div class=\"modal\" v-show=\"isShow\">\n      <h2>我是一个弹窗</h2>\n      <p>我是弹窗中的一些内容</p>\n      <button @click=\"isShow = false\">关闭弹窗</button>\n    </div>\n</teleport>\n```\n\n## 8.2. 【Suspense】\n\n-  等待异步组件时渲染一些额外内容，让应用有更好的用户体验 \n-  使用步骤： \n   -  异步引入组件\n   -  使用`Suspense`包裹组件，并配置好`default` 与 `fallback`\n\n```tsx\nimport { defineAsyncComponent,Suspense } from \"vue\";\nconst Child = defineAsyncComponent(()=>import('./Child.vue'))\n```\n\n```vue\n<template>\n    <div class=\"app\">\n        <h3>我是App组件</h3>\n        <Suspense>\n          <template v-slot:default>\n            <Child/>\n          </template>\n          <template v-slot:fallback>\n            <h3>加载中.......</h3>\n          </template>\n        </Suspense>\n    </div>\n</template>\n```\n\n\n\n## 8.3.【全局API转移到应用对象】\n\n- `app.component`\n- `app.config`\n- `app.directive`\n- `app.mount`\n- `app.unmount`\n- `app.use`\n\n## 8.4.【其他】\n\n- 过渡类名 `v-enter` 修改为 `v-enter-from`、过渡类名 `v-leave` 修改为 `v-leave-from`。\n\n\n- `keyCode` 作为 `v-on` 修饰符的支持。\n\n- `v-model` 指令在组件上的使用已经被重新设计，替换掉了 `v-bind.sync。`\n\n- `v-if` 和 `v-for` 在同一个元素身上使用时的优先级发生了变化。\n\n- 移除了`$on`、`$off` 和 `$once` 实例方法。\n\n- 移除了过滤器 `filter`。\n\n- 移除了`$children` 实例 `propert`。\n\n  ......\n\n------\n\n**本文内容来源于尚硅谷Vue.js教程，原文地址：[尚硅谷Vue教程](http://www.atguigu.com/video/284/)。感谢尚硅谷提供的优秀文档资源。**\n","slug":"Vue3快速上手","published":1,"updated":"2024-07-15T04:32:53.680Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrd0010tuj86f2461hd","content":"<h1 id=\"1-Vue3简介\"><a class=\"headerlink\" href=\"#1-Vue3简介\"></a>1. Vue3简介</h1>\n<ul>\n<li>\n<p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p>\n</li>\n<li>\n<p>经历了：<a href=\"https://github.com/vuejs/core/commits/main\">4800+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">40+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/core/graphs/contributors\">300+贡献者</a></p>\n</li>\n<li>\n<p>官方发版地址：<a href=\"https://github.com/vuejs/core/releases/tag/v3.0.0\">Release v3.0.0 One Piece · vuejs/core</a></p>\n</li>\n<li>\n<p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232363.webp\" alt=\"image.png\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2 id=\"1-1-【性能的提升】\"><a class=\"headerlink\" href=\"#1-1-【性能的提升】\"></a>1.1. 【性能的提升】</h2>\n<ul>\n<li>\n<p>打包大小减少<code>41%</code>。</p>\n</li>\n<li>\n<p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p>\n</li>\n<li>\n<p>内存减少<code>54%</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-2-【-源码的升级】\"><a class=\"headerlink\" href=\"#1-2-【-源码的升级】\"></a>1.2.【 源码的升级】</h2>\n<ul>\n<li>\n<p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p>\n</li>\n<li>\n<p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-3-【拥抱TypeScript】\"><a class=\"headerlink\" href=\"#1-3-【拥抱TypeScript】\"></a>1.3. 【拥抱TypeScript】</h2>\n<ul>\n<li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li>\n</ul>\n<h2 id=\"1-4-【新的特性】\"><a class=\"headerlink\" href=\"#1-4-【新的特性】\"></a>1.4. 【新的特性】</h2>\n<ol>\n<li>\n<p><code>Composition API</code>（组合<code>API</code>）：</p>\n<ul>\n<li>\n<p><code>setup</code></p>\n</li>\n<li>\n<p><code>ref</code>与<code>reactive</code></p>\n</li>\n<li>\n<p><code>computed</code>与<code>watch</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>新的内置组件：</p>\n<ul>\n<li>\n<p><code>Fragment</code></p>\n</li>\n<li>\n<p><code>Teleport</code></p>\n</li>\n<li>\n<p><code>Suspense</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>其他改变：</p>\n<ul>\n<li>\n<p>新的生命周期钩子</p>\n</li>\n<li>\n<p><code>data</code> 选项应始终被声明为一个函数</p>\n</li>\n<li>\n<p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p>\n<p>…</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-创建Vue3工程\"><a class=\"headerlink\" href=\"#2-创建Vue3工程\"></a>2. 创建Vue3工程</h1>\n<h2 id=\"2-1-【基于-vue-cli-创建】\"><a class=\"headerlink\" href=\"#2-1-【基于-vue-cli-创建】\"></a>2.1. 【基于 vue-cli 创建】</h2>\n<p>点击查看<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">官方文档</a></p>\n<blockquote>\n<p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>\nvue <span class=\"token operator\">--</span>version\n\n<span class=\"token comment\">## 安装或者升级你的@vue/cli </span>\nnpm install <span class=\"token operator\">-</span>g @vue/<span class=\"token function\">cli</span>\n\n<span class=\"token comment\">## 执行创建命令</span>\nvue create vue_test\n\n<span class=\"token comment\">##  随后选择3.x</span>\n<span class=\"token comment\">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span>\n<span class=\"token comment\">##  > 3.x</span>\n<span class=\"token comment\">##    2.x</span>\n\n<span class=\"token comment\">## 启动</span>\ncd vue_test\nnpm run serve<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h2 id=\"2-2-【基于-vite-创建】-推荐\"><a class=\"headerlink\" href=\"#2-2-【基于-vite-创建】-推荐\"></a>2.2. 【基于 vite 创建】(推荐)</h2>\n<p><code>vite</code> 是新一代前端构建工具，官网地址：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p>\n<ul>\n<li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li>\n<li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n<li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：</li>\n</ul>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232253.webp\" alt=\"\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232053.webp\" alt=\"\" loading=\"lazy\"></p>\n<ul>\n<li>具体操作如下（点击查看<a href=\"https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application\">官方文档</a>）</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 1.创建命令</span>\nnpm create vue@latest\n\n<span class=\"token comment\">## 2.具体配置</span>\n<span class=\"token comment\">## 配置项目名称</span>\n√ Project name: vue3_test\n<span class=\"token comment\">## 是否添加TypeScript支持</span>\n√ Add TypeScript?  Yes\n<span class=\"token comment\">## 是否添加JSX支持</span>\n√ Add JSX Support?  No\n<span class=\"token comment\">## 是否添加路由环境</span>\n√ Add Vue Router <span class=\"token keyword\">for</span> Single Page Application development?  No\n<span class=\"token comment\">## 是否添加pinia环境</span>\n√ Add Pinia <span class=\"token keyword\">for</span> state management?  No\n<span class=\"token comment\">## 是否添加单元测试</span>\n√ Add Vitest <span class=\"token keyword\">for</span> Unit Testing?  No\n<span class=\"token comment\">## 是否添加端到端测试方案</span>\n√ Add an <span class=\"token keyword\">End</span><span class=\"token operator\">-</span>to-<span class=\"token keyword\">End</span> Testing Solution? » No\n<span class=\"token comment\">## 是否添加ESLint语法检查</span>\n√ Add ESLint <span class=\"token keyword\">for</span> code quality?  Yes\n<span class=\"token comment\">## 是否添加Prettiert代码格式化</span>\n√ Add Prettier <span class=\"token keyword\">for</span> code formatting?  No<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>自己动手编写一个App组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h1&gt;你好啊！&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39; &#x2F;&#x2F;组件名\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n  .app &#123;\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  &#125;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装官方推荐的<code>vscode</code>插件：</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232847.webp\" alt=\"Snipaste_2023-10-08_20-46-34\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232668.webp\" alt=\"image-20231218085906380\" loading=\"lazy\"></p>\n<p>总结：</p>\n<ul>\n<li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li>\n<li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li>\n<li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li>\n</ul>\n<h2 id=\"2-3-【一个简单的效果】\"><a class=\"headerlink\" href=\"#2-3-【一个简单的效果】\"></a>2.3. 【一个简单的效果】</h2>\n<p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39;,\n    data() &#123;\n      return &#123;\n        name:&#39;张三&#39;,\n        age:18,\n        tel:&#39;13888888888&#39;\n      &#125;\n    &#125;,\n    methods:&#123;\n      changeName()&#123;\n        this.name &#x3D; &#39;zhang-san&#39;\n      &#125;,\n      changeAge()&#123;\n        this.age +&#x3D; 1\n      &#125;,\n      showTel()&#123;\n        alert(this.tel)\n      &#125;\n    &#125;,\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"3-Vue3核心语法\"><a class=\"headerlink\" href=\"#3-Vue3核心语法\"></a>3. Vue3核心语法</h1>\n<h2 id=\"3-1-【OptionsAPI-与-CompositionAPI】\"><a class=\"headerlink\" href=\"#3-1-【OptionsAPI-与-CompositionAPI】\"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2>\n<ul>\n<li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li>\n<li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li>\n</ul>\n<h3 id=\"Options-API-的弊端\"><a class=\"headerlink\" href=\"#Options-API-的弊端\"></a>Options API 的弊端</h3>\n<p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p>\n<p><img src=\"https://img.aixcc.top/file/c3edadbf9a9bbfd22d442.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/d978f7c4fd1f8a2a2e8f9.gif\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"Composition-API-的优势\"><a class=\"headerlink\" href=\"#Composition-API-的优势\"></a>Composition API 的优势</h3>\n<p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p>\n<p><img src=\"https://img.aixcc.top/file/9acc07d0f3690f12a9fda.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/2e7d2a90529d10cad9c93.gif\" alt=\"\" loading=\"lazy\"></p>\n<blockquote>\n<p>说明：以上四张动图原创作者：大帅老猿</p>\n</blockquote>\n<h2 id=\"3-2-【拉开序幕的-setup】\"><a class=\"headerlink\" href=\"#3-2-【拉开序幕的-setup】\"></a>3.2. 【拉开序幕的 setup】</h2>\n<h3 id=\"setup-概述\"><a class=\"headerlink\" href=\"#setup-概述\"></a>setup 概述</h3>\n<p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视…等等，均配置在<code>setup</code>中。</p>\n<p>特点如下：</p>\n<ul>\n<li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li>\n<li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li>\n<li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n    setup()&#123;\n      &#x2F;&#x2F; 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name &#x3D; &#39;张三&#39;\n      let age &#x3D; 18\n      let tel &#x3D; &#39;13888888888&#39;\n\n      &#x2F;&#x2F; 方法，原来写在methods中\n      function changeName()&#123;\n        name &#x3D; &#39;zhang-san&#39; &#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n        console.log(name)\n      &#125;\n      function changeAge()&#123;\n        age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n        console.log(age)\n      &#125;\n      function showTel()&#123;\n        alert(tel)\n      &#125;\n\n      &#x2F;&#x2F; 返回一个对象，对象中的内容，模板中可以直接使用\n      return &#123;name,age,tel,changeName,changeAge,showTel&#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-的返回值\"><a class=\"headerlink\" href=\"#setup-的返回值\"></a>setup 的返回值</h3>\n<ul>\n<li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**</li>\n<li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token string\">'你好啊！'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-与-Options-API-的关系\"><a class=\"headerlink\" href=\"#setup-与-Options-API-的关系\"></a>setup 与 Options API 的关系</h3>\n<ul>\n<li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>…）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li>\n<li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>…）。</li>\n<li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li>\n</ul>\n<h3 id=\"setup-语法糖\"><a class=\"headerlink\" href=\"#setup-语法糖\"></a>setup 语法糖</h3>\n<p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;!-- 下面的写法是setup语法糖 --&gt;\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  console.log(this) &#x2F;&#x2F;undefined\n  \n  &#x2F;&#x2F; 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name &#x3D; &#39;张三&#39;\n  let age &#x3D; 18\n  let tel &#x3D; &#39;13888888888&#39;\n\n  &#x2F;&#x2F; 方法\n  function changName()&#123;\n    name &#x3D; &#39;李四&#39;&#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n  &#125;\n  function changAge()&#123;\n    console.log(age)\n    age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p>\n<ol>\n<li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li>\n<li>第二步：<code>vite.config.ts</code></li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span>\n<span class=\"token keyword\">import</span> VueSetupExtend <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-vue-setup-extend'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">VueSetupExtend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li>\n</ol>\n<h2 id=\"3-3-【ref-创建：基本类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-3-【ref-创建：基本类型的响应式数据】\"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2>\n<ul>\n<li>**作用：**定义响应式变量。</li>\n<li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li>\n<li>**返回值：**一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li>\n<li><strong>注意点：</strong>\n<ul>\n<li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li>\n<li>对于<code>let name = ref('张三')</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;&#x2F; tel就是一个普通的字符串，不是响应式的\n  let tel &#x3D; &#39;13888888888&#39;\n\n  function changeName()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    name.value &#x3D; &#39;李四&#39;\n    console.log(name.value)\n\n    &#x2F;&#x2F; 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    &#x2F;&#x2F; name &#x3D; ref(&#39;zhang-san&#39;)\n  &#125;\n  function changeAge()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    age.value +&#x3D; 1 \n    console.log(age.value)\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-4-【reactive-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-4-【reactive-创建：对象类型的响应式数据】\"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2>\n<ul>\n<li><strong>作用：<strong>定义一个</strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li>\n<li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li>\n<li>**返回值：**一个<code>Proxy</code>的实例对象，简称：响应式对象。</li>\n<li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; reactive &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; reactive(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; reactive([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; reactive(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nfunction changeCarPrice() &#123;\n  car.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-5-【ref-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-5-【ref-创建：对象类型的响应式数据】\"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2>\n<ul>\n<li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li>\n<li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; ref(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; ref([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; ref(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nconsole.log(car)\n\nfunction changeCarPrice() &#123;\n  car.value.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games.value[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.value.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-6-【ref-对比-reactive】\"><a class=\"headerlink\" href=\"#3-6-【ref-对比-reactive】\"></a>3.6. 【ref 对比 reactive】</h2>\n<p>宏观角度看：</p>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p>\n</li>\n<li>\n<p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>区别：</li>\n</ul>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232718.webp\" alt=\"自动补充value\" loading=\"lazy\"></p>\n</li>\n<li>\n<p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>使用原则：</li>\n</ul>\n<blockquote>\n<ol>\n<li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li>\n<li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li>\n<li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-7-【toRefs-与-toRef】\"><a class=\"headerlink\" href=\"#3-7-【toRefs-与-toRef】\"></a>3.7. 【toRefs 与 toRef】</h2>\n<ul>\n<li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li>\n<li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li>\n<li>语法如下：</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeGender&quot;&gt;修改性别&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,reactive,toRefs,toRef&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;name:&#39;张三&#39;, age:18, gender:&#39;男&#39;&#125;)\n\t\n  &#x2F;&#x2F; 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let &#123;name,gender&#125; &#x3D;  toRefs(person)\n\t\n  &#x2F;&#x2F; 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age &#x3D; toRef(person,&#39;age&#39;)\n\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    name.value +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    age.value +&#x3D; 1\n  &#125;\n  function changeGender()&#123;\n    gender.value &#x3D; &#39;女&#39;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-8-【computed】\"><a class=\"headerlink\" href=\"#3-8-【computed】\"></a>3.8. 【computed】</h2>\n<p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p>\n<p><img src=\"https://img.aixcc.top/file/35111db5e18d3bb69aee9.gif\" alt=\"\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&gt;\n    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;br&gt;\n    &lt;button @click&#x3D;&quot;changeFullName&quot;&gt;全名改为：li-si&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;App&quot;&gt;\n  import &#123;ref,computed&#125; from &#39;vue&#39;\n\n  let firstName &#x3D; ref(&#39;zhang&#39;)\n  let lastName &#x3D; ref(&#39;san&#39;)\n\n  &#x2F;&#x2F; 计算属性——只读取，不修改\n  &#x2F;* let fullName &#x3D; computed(()&#x3D;&gt;&#123;\n    return firstName.value + &#39;-&#39; + lastName.value\n  &#125;) *&#x2F;\n\n\n  &#x2F;&#x2F; 计算属性——既读取又修改\n  let fullName &#x3D; computed(&#123;\n    &#x2F;&#x2F; 读取\n    get()&#123;\n      return firstName.value + &#39;-&#39; + lastName.value\n    &#125;,\n    &#x2F;&#x2F; 修改\n    set(val)&#123;\n      console.log(&#39;有人修改了fullName&#39;,val)\n      firstName.value &#x3D; val.split(&#39;-&#39;)[0]\n      lastName.value &#x3D; val.split(&#39;-&#39;)[1]\n    &#125;\n  &#125;)\n\n  function changeFullName()&#123;\n    fullName.value &#x3D; &#39;li-si&#39;\n  &#125; \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-9-【watch】\"><a class=\"headerlink\" href=\"#3-9-【watch】\"></a>3.9.【watch】</h2>\n<ul>\n<li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li>\n<li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li>\n</ul>\n<blockquote>\n<ol>\n<li><code>ref</code>定义的数据。</li>\n<li><code>reactive</code>定义的数据。</li>\n<li>函数返回一个值（<code>getter</code>函数）。</li>\n<li>一个包含上述内容的数组。</li>\n</ol>\n</blockquote>\n<p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p>\n<h3 id=\"情况一\"><a class=\"headerlink\" href=\"#情况一\"></a>* 情况一</h3>\n<p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum()&#123;\n    sum.value +&#x3D; 1\n  &#125;\n  &#x2F;&#x2F; 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch &#x3D; watch(sum,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;sum变化了&#39;,newValue,oldValue)\n    if(newValue &gt;&#x3D; 10)&#123;\n      stopWatch()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况二\"><a class=\"headerlink\" href=\"#情况二\"></a>* 情况二</h3>\n<p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>\n<p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p>\n</li>\n<li>\n<p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; ref(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.value.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.value.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    person.value &#x3D; &#123;name:&#39;李四&#39;,age:90&#125;\n  &#125;\n  &#x2F;* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  *&#x2F;\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况三\"><a class=\"headerlink\" href=\"#情况三\"></a>*  情况三</h3>\n<p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n    &lt;hr&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;修改obj.a.b.c&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  let obj &#x3D; reactive(&#123;\n    a:&#123;\n      b:&#123;\n        c:666\n      &#125;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    Object.assign(person,&#123;name:&#39;李四&#39;,age:80&#125;)\n  &#125;\n  function test()&#123;\n    obj.a.b.c &#x3D; 888\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;)\n  watch(obj,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;Obj变化了&#39;,newValue,oldValue)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况四\"><a class=\"headerlink\" href=\"#情况四\"></a>* 情况四</h3>\n<p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p>\n<ol>\n<li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li>\n<li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li>\n</ol>\n<p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  &#x2F;* watch(()&#x3D;&gt; person.name,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.name变化了&#39;,newValue,oldValue)\n  &#125;) *&#x2F;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()&#x3D;&gt;person.car,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况五\"><a class=\"headerlink\" href=\"#情况五\"></a>* 情况五</h3>\n<p>监视上述的多个数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况五：监视上述的多个数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况五：监视上述的多个数据\n  watch([()&#x3D;&gt;person.name,person.car],(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-10-【watchEffect】\"><a class=\"headerlink\" href=\"#3-10-【watchEffect】\"></a>3.10. 【watchEffect】</h2>\n<ul>\n<li>\n<p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p>\n</li>\n<li>\n<p><code>watch</code>对比<code>watchEffect</code></p>\n<blockquote>\n<ol>\n<li>\n<p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p>\n</li>\n<li>\n<p><code>watch</code>：要明确指出监视的数据</p>\n</li>\n<li>\n<p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;&#x2F;h1&gt;\n    &lt;h2 id&#x3D;&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changePrice&quot;&gt;水温+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;水位+10&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch,watchEffect&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let temp &#x3D; ref(0)\n  let height &#x3D; ref(0)\n\n  &#x2F;&#x2F; 方法\n  function changePrice()&#123;\n    temp.value +&#x3D; 10\n  &#125;\n  function changeSum()&#123;\n    height.value +&#x3D; 1\n  &#125;\n\n  &#x2F;&#x2F; 用watch实现，需要明确的指出要监视：temp、height\n  watch([temp,height],(value)&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 从value中获取最新的temp值、height值\n    const [newTemp,newHeight] &#x3D; value\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(newTemp &gt;&#x3D; 50 || newHeight &gt;&#x3D; 20)&#123;\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n  &#125;)\n\n  &#x2F;&#x2F; 用watchEffect实现，不用\n  const stopWtach &#x3D; watchEffect(()&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(temp.value &gt;&#x3D; 50 || height.value &gt;&#x3D; 20)&#123;\n      console.log(document.getElementById(&#39;demo&#39;)?.innerText)\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n    &#x2F;&#x2F; 水温达到100，或水位达到50，取消监视\n    if(temp.value &#x3D;&#x3D;&#x3D; 100 || height.value &#x3D;&#x3D;&#x3D; 50)&#123;\n      console.log(&#39;清理了&#39;)\n      stopWtach()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-11-【标签的-ref-属性】\"><a class=\"headerlink\" href=\"#3-11-【标签的-ref-属性】\"></a>3.11. 【标签的 ref 属性】</h2>\n<p>作用：用于注册模板引用。</p>\n<blockquote>\n<ul>\n<li>\n<p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p>\n</li>\n<li>\n<p>用在组件标签上，获取的是组件实例对象。</p>\n</li>\n</ul>\n</blockquote>\n<p>用在普通<code>DOM</code>标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1 ref&#x3D;&quot;title1&quot;&gt;尚硅谷&lt;&#x2F;h1&gt;\n    &lt;h2 ref&#x3D;&quot;title2&quot;&gt;前端&lt;&#x2F;h2&gt;\n    &lt;h3 ref&#x3D;&quot;title3&quot;&gt;Vue&lt;&#x2F;h3&gt;\n    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;\n    &lt;button @click&#x3D;&quot;showLog&quot;&gt;点我打印内容&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n\t\n  let title1 &#x3D; ref()\n  let title2 &#x3D; ref()\n  let title3 &#x3D; ref()\n\n  function showLog()&#123;\n    &#x2F;&#x2F; 通过id获取元素\n    const t1 &#x3D; document.getElementById(&#39;title1&#39;)\n    &#x2F;&#x2F; 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((&lt;HTMLElement&gt;t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t&#x2F;************************************&#x2F;\n\t\t\n    &#x2F;&#x2F; 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用在组件标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 父组件App.vue --&gt;\n&lt;template&gt;\n  &lt;Person ref&#x3D;&quot;ren&quot;&#x2F;&gt;\n  &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\n  import &#123;ref&#125; from &#39;vue&#39;\n\n  let ren &#x3D; ref()\n\n  function test()&#123;\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  &#125;\n&lt;&#x2F;script&gt;\n\n\n&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,defineExpose&#125; from &#39;vue&#39;\n\t&#x2F;&#x2F; 数据\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;****************************&#x2F;\n  &#x2F;****************************&#x2F;\n  &#x2F;&#x2F; 使用defineExpose将组件中的数据交给外部\n  defineExpose(&#123;name,age&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-12-【props】\"><a class=\"headerlink\" href=\"#3-12-【props】\"></a>3.12. 【props】</h2>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义一个接口，限制每个Person对象的格式</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInter</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>number\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 定义一个自定义类型Persons</span>\n<span class=\"token keyword\">export</span> type Persons <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>PersonInter<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>App.vue</code>中代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;Person :list&#x3D;&quot;persons&quot;&#x2F;&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\nimport Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\nimport &#123;reactive&#125; from &#39;vue&#39;\n import &#123;type Persons&#125; from &#39;.&#x2F;types&#39;\n\n let persons &#x3D; reactive&lt;Persons&gt;([\n  &#123;id:&#39;e98219e12&#39;,name:&#39;张三&#39;,age:18&#125;,\n   &#123;id:&#39;e98219e13&#39;,name:&#39;李四&#39;,age:19&#125;,\n    &#123;id:&#39;e98219e14&#39;,name:&#39;王五&#39;,age:20&#125;\n  ])\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Person.vue</code>中代码：</p>\n<pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;template&gt;\n&lt;div class&#x3D;&quot;person&quot;&gt;\n&lt;ul&gt;\n  &lt;li v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item.id&quot;&gt;\n     &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;\n   &lt;&#x2F;li&gt;\n &lt;&#x2F;ul&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123;defineProps&#125; from &#39;vue&#39;\nimport &#123;type PersonInter&#125; from &#39;@&#x2F;types&#39;\n\n&#x2F;&#x2F; 第一种写法：仅接收\n&#x2F;&#x2F; const props &#x3D; defineProps([&#39;list&#39;])\n\n&#x2F;&#x2F; 第二种写法：接收+限制类型\n&#x2F;&#x2F; defineProps&lt;&#123;list:Persons&#125;&gt;()\n\n&#x2F;&#x2F; 第三种写法：接收+限制类型+指定默认值+限制必要性\nlet props &#x3D; withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;\n  list:()&#x3D;&gt;[&#123;id:&#39;asdasg01&#39;,name:&#39;小猪佩奇&#39;,age:18&#125;]\n&#125;)\nconsole.log(props)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"3-13-【生命周期】\"><a class=\"headerlink\" href=\"#3-13-【生命周期】\"></a>3.13. 【生命周期】</h2>\n<ul>\n<li>\n<p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p>\n</li>\n<li>\n<p>规律：</p>\n<blockquote>\n<p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue2</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>beforeCreate</code>、<code>created</code></p>\n<p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p>\n<p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p>\n<p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue3</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>setup</code></p>\n<p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p>\n<p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p>\n<p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p>\n</blockquote>\n</li>\n<li>\n<p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;!-- vue3写法 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123; \n    ref, \n    onBeforeMount, \n    onMounted, \n    onBeforeUpdate, \n    onUpdated, \n    onBeforeUnmount, \n    onUnmounted \n  &#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum() &#123;\n    sum.value +&#x3D; 1\n  &#125;\n  console.log(&#39;setup&#39;)\n  &#x2F;&#x2F; 生命周期钩子\n  onBeforeMount(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载之前&#39;)\n  &#125;)\n  onMounted(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载完毕&#39;)\n  &#125;)\n  onBeforeUpdate(()&#x3D;&gt;&#123;\n    console.log(&#39;更新之前&#39;)\n  &#125;)\n  onUpdated(()&#x3D;&gt;&#123;\n    console.log(&#39;更新完毕&#39;)\n  &#125;)\n  onBeforeUnmount(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载之前&#39;)\n  &#125;)\n  onUnmounted(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载完毕&#39;)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-14-【自定义hook】\"><a class=\"headerlink\" href=\"#3-14-【自定义hook】\"></a>3.14. 【自定义hook】</h2>\n<ul>\n<li>\n<p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p>\n</li>\n<li>\n<p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<ul>\n<li>\n<p><code>useSum.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>useDog.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>AxiosError<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> dogList <span class=\"token operator\">=</span> reactive<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 方法</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 发请求</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://dog.ceo/api/breed/pembroke/images/random'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 维护数据</span>\n      dogList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 处理错误</span>\n      <span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>AxiosError<span class=\"token operator\">></span>error\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 挂载钩子</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>dogList<span class=\"token punctuation\">,</span>getDog<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中具体使用：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n  &lt;button @click&#x3D;&quot;increment&quot;&gt;点我+1&lt;&#x2F;button&gt;\n  &lt;button @click&#x3D;&quot;decrement&quot;&gt;点我-1&lt;&#x2F;button&gt;\n  &lt;hr&gt;\n  &lt;img v-for&#x3D;&quot;(u,index) in dogList.urlList&quot; :key&#x3D;&quot;index&quot; :src&#x3D;&quot;(u as string)&quot;&gt; \n  &lt;span v-show&#x3D;&quot;dogList.isLoading&quot;&gt;加载中......&lt;&#x2F;span&gt;&lt;br&gt;\n  &lt;button @click&#x3D;&quot;getDog&quot;&gt;再来一只狗&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  import &#123;defineComponent&#125; from &#39;vue&#39;\n\n  export default defineComponent(&#123;\n    name:&#39;App&#39;,\n  &#125;)\n&lt;&#x2F;script&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  import useSum from &#39;.&#x2F;hooks&#x2F;useSum&#39;\n  import useDog from &#39;.&#x2F;hooks&#x2F;useDog&#39;\n\t\n  let &#123;sum,increment,decrement&#125; &#x3D; useSum()\n  let &#123;dogList,getDog&#125; &#x3D; useDog()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<hr>\n<h1 id=\"4-路由\"><a class=\"headerlink\" href=\"#4-路由\"></a>4. 路由</h1>\n<h2 id=\"4-1-【对路由的理解】\"><a class=\"headerlink\" href=\"#4-1-【对路由的理解】\"></a>4.1. 【对路由的理解】</h2>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232332.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"4-2-【基本切换效果】\"><a class=\"headerlink\" href=\"#4-2-【基本切换效果】\"></a>4.2. 【基本切换效果】</h2>\n<ul>\n<li>\n<p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p>\n</li>\n<li>\n<p>路由配置文件代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>createRouter<span class=\"token punctuation\">,</span>createWebHistory<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/Home.vue'</span>\n<span class=\"token keyword\">import</span> News <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/News.vue'</span>\n<span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/About.vue'</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>main.ts</code>代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router/index'</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>App.vue</code>代码如下</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h2 class&#x3D;&quot;title&quot;&gt;Vue路由测试&lt;&#x2F;h2&gt;\n    &lt;!-- 导航区 --&gt;\n    &lt;div class&#x3D;&quot;navigate&quot;&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;home&quot; active-class&#x3D;&quot;active&quot;&gt;首页&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;news&quot; active-class&#x3D;&quot;active&quot;&gt;新闻&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;about&quot; active-class&#x3D;&quot;active&quot;&gt;关于&lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;div&gt;\n    &lt;!-- 展示区 --&gt;\n    &lt;div class&#x3D;&quot;main-content&quot;&gt;\n      &lt;RouterView&gt;&lt;&#x2F;RouterView&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import &#123;RouterLink,RouterView&#125; from &#39;vue-router&#39;  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"4-3-【两个注意点】\"><a class=\"headerlink\" href=\"#4-3-【两个注意点】\"></a>4.3. 【两个注意点】</h2>\n<blockquote>\n<ol>\n<li>\n<p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p>\n</li>\n<li>\n<p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"4-4-【路由器工作模式】\"><a class=\"headerlink\" href=\"#4-4-【路由器工作模式】\"></a>4.4.【路由器工作模式】</h2>\n<ol>\n<li>\n<p><code>history</code>模式</p>\n<blockquote>\n<p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p>\n<p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//history模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n<li>\n<p><code>hash</code>模式</p>\n<blockquote>\n<p>优点：兼容性更好，因为不需要服务器端处理路径。</p>\n<p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//hash模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-5-【to的两种写法】\"><a class=\"headerlink\" href=\"#4-5-【to的两种写法】\"></a>4.5. 【to的两种写法】</h2>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 第一种：to的字符串写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&quot;&gt;主页&lt;&#x2F;router-link&gt;\n\n&lt;!-- 第二种：to的对象写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;home&#39;&#125;&quot;&gt;Home&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-6-【命名路由】\"><a class=\"headerlink\" href=\"#4-6-【命名路由】\"></a>4.6. 【命名路由】</h2>\n<p>作用：可以简化路由跳转及传参（后面就讲）。</p>\n<p>给路由规则命名：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>跳转路由：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;name:&#39;guanyu&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-7-【嵌套路由】\"><a class=\"headerlink\" href=\"#4-7-【嵌套路由】\"></a>4.7. 【嵌套路由】</h2>\n<ol>\n<li>\n<p>编写<code>News</code>的子路由：<code>Detail.vue</code></p>\n</li>\n<li>\n<p>配置路由规则，使用<code>children</code>配置项：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  history<span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\troutes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n\t\t\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tcomponent<span class=\"token operator\">:</span>Detail\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>跳转路由（记得要加完整路径）：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;xxxx&lt;&#x2F;router-link&gt;\n&lt;!-- 或 --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;xxxx&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;news&quot;&gt;\n    &lt;nav class&#x3D;&quot;news-list&quot;&gt;\n      &lt;RouterLink v-for&#x3D;&quot;news in newsList&quot; :key&#x3D;&quot;news.id&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;\n        &#123;&#123;news.name&#125;&#125;\n      &lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;nav&gt;\n    &lt;div class&#x3D;&quot;news-detail&quot;&gt;\n      &lt;RouterView&#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-8-【路由传参】\"><a class=\"headerlink\" href=\"#4-8-【路由传参】\"></a>4.8. 【路由传参】</h2>\n<h3 id=\"query参数\"><a class=\"headerlink\" href=\"#query参数\"></a>query参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail?a&#x3D;1&amp;b&#x3D;2&amp;content&#x3D;欢迎你&quot;&gt;\n\t跳转\n&lt;&#x2F;router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    &#x2F;&#x2F;name:&#39;xiang&#39;, &#x2F;&#x2F;用name也可以跳转\n    path:&#39;&#x2F;news&#x2F;detail&#39;,\n    query:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.content\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印query参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"params参数\"><a class=\"headerlink\" href=\"#params参数\"></a>params参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;\n&lt;RouterLink :to&#x3D;&quot;&#96;&#x2F;news&#x2F;detail&#x2F;001&#x2F;新闻001&#x2F;内容001&#96;&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;&#x2F;RouterLink&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    name:&#39;xiang&#39;, &#x2F;&#x2F;用name跳转\n    params:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.title\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印params参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<blockquote>\n<p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p>\n<p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p>\n</blockquote>\n<h2 id=\"4-9-【路由的props配置】\"><a class=\"headerlink\" href=\"#4-9-【路由的props配置】\"></a>4.9. 【路由的props配置】</h2>\n<p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'detail/:id/:title/:content'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Detail<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:&#123;a:1,b:2,c:3&#125;, </span>\n\n  <span class=\"token comment\">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:true</span>\n  \n  <span class=\"token comment\">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span>\n  <span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> route<span class=\"token punctuation\">.</span>query\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-10-【-replace属性】\"><a class=\"headerlink\" href=\"#4-10-【-replace属性】\"></a>4.10. 【 replace属性】</h2>\n<ol>\n<li>\n<p>作用：控制路由跳转时操作浏览器历史记录的模式。</p>\n</li>\n<li>\n<p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p>\n<ul>\n<li><code>push</code>是追加历史记录（默认值）。</li>\n<li><code>replace</code>是替换当前记录。</li>\n</ul>\n</li>\n<li>\n<p>开启<code>replace</code>模式：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;RouterLink replace .......&gt;News&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-11-【编程式导航】\"><a class=\"headerlink\" href=\"#4-11-【编程式导航】\"></a>4.11. 【编程式导航】</h2>\n<p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">,</span>useRouter<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>parmas<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-12-【重定向】\"><a class=\"headerlink\" href=\"#4-12-【重定向】\"></a>4.12. 【重定向】</h2>\n<ol>\n<li>\n<p>作用：将特定的路径，重新定向到已有路由。</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"5-pinia\"><a class=\"headerlink\" href=\"#5-pinia\"></a>5. pinia</h1>\n<h2 id=\"5-1【准备一个效果】\"><a class=\"headerlink\" href=\"#5-1【准备一个效果】\"></a>5.1【准备一个效果】</h2>\n<p><img src=\"https://img.aixcc.top/file/f14ee7ea7c72a9003d7b8.gif\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-2【搭建-pinia-环境】\"><a class=\"headerlink\" href=\"#5-2【搭建-pinia-环境】\"></a>5.2【搭建 pinia 环境】</h2>\n<p>第一步：<code>npm install pinia</code></p>\n<p>第二步：操作<code>src/main.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span>\n\n<span class=\"token comment\">/* 引入createPinia，用于创建pinia */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">/* 创建pinia */</span>\n<span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 使用插件 */</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时开发者工具中已经有了<code>pinia</code>选项</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232851.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-3【存储-读取数据】\"><a class=\"headerlink\" href=\"#5-3【存储-读取数据】\"></a>5.3【存储+读取数据】</h2>\n<ol>\n<li>\n<p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p>\n</li>\n<li>\n<p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p>\n</li>\n<li>\n<p>具体编码：<code>src/store/count.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  actions<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      sum<span class=\"token operator\">:</span><span class=\"token number\">6</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  getters<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>具体编码：<code>src/store/talk.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">talkList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'你今天有点怪，哪里怪？怪好看的！'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n     \t\t<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'草莓、蓝莓、蔓越莓，你想我了没？'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'心里给你留了一块地，我的死心塌地'</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中使用<code>state</code>中的数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;&#x2F;h2&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  &#x2F;&#x2F; 引入对应的useXxxxxStore\t\n  import &#123;useSumStore&#125; from &#39;@&#x2F;store&#x2F;sum&#39;\n  \n  &#x2F;&#x2F; 调用useXxxxxStore得到对应的store\n  const sumStore &#x3D; useSumStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;ul&gt;\n    &lt;li v-for&#x3D;&quot;talk in talkStore.talkList&quot; :key&#x3D;&quot;talk.id&quot;&gt;\n      &#123;&#123; talk.content &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import axios from &#39;axios&#39;\n  import &#123;useTalkStore&#125; from &#39;@&#x2F;store&#x2F;talk&#39;\n\n  const talkStore &#x3D; useTalkStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-4-【修改数据】-三种方式\"><a class=\"headerlink\" href=\"#5-4-【修改数据】-三种方式\"></a>5.4.【修改数据】(三种方式)</h2>\n<ol>\n<li>\n<p>第一种修改方式，直接修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>第二种修改方式：批量修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span><span class=\"token function\">$patch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  sum<span class=\"token operator\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span>\n  school<span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/*************/</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//加</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//操作countStore中的sum</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//减</span>\n    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">-=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*************/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中调用<code>action</code>即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用countStore</span>\n<span class=\"token keyword\">const</span> countStore <span class=\"token operator\">=</span> <span class=\"token function\">useCountStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 调用对应action</span>\ncountStore<span class=\"token punctuation\">.</span><span class=\"token function\">incrementOdd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-5-【storeToRefs】\"><a class=\"headerlink\" href=\"#5-5-【storeToRefs】\"></a>5.5.【storeToRefs】</h2>\n<ul>\n<li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li>\n<li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;count&quot;&gt;\n\t\t&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import &#123; useCountStore &#125; from &#39;@&#x2F;store&#x2F;count&#39;\n  &#x2F;* 引入storeToRefs *&#x2F;\n  import &#123; storeToRefs &#125; from &#39;pinia&#39;\n\n\t&#x2F;* 得到countStore *&#x2F;\n  const countStore &#x3D; useCountStore()\n  &#x2F;* 使用storeToRefs转换countStore，随后解构 *&#x2F;\n  const &#123;sum&#125; &#x3D; storeToRefs(countStore)\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-6-【getters】\"><a class=\"headerlink\" href=\"#5-6-【getters】\"></a>5.6.【getters】</h2>\n<ol>\n<li>\n<p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p>\n</li>\n<li>\n<p>追加<code>getters</code>配置。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/************/</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">school</span><span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">bigSum</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">upperSchool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> school<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中读取数据：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> countStore\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>school<span class=\"token punctuation\">,</span>bigSum<span class=\"token punctuation\">,</span>upperSchool<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">storeToRefs</span><span class=\"token punctuation\">(</span>countStore<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-7-【-subscribe】\"><a class=\"headerlink\" href=\"#5-7-【-subscribe】\"></a>5.7.【$subscribe】</h2>\n<p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">talkStore<span class=\"token punctuation\">.</span><span class=\"token function\">$subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LoveTalk'</span><span class=\"token punctuation\">,</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>talkList<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-8-【store组合式写法】\"><a class=\"headerlink\" href=\"#5-8-【store组合式写法】\"></a>5.8. 【store组合式写法】</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>nanoid<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'nanoid'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// talkList就是state</span>\n  <span class=\"token keyword\">const</span> talkList <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talkList'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// getATalk函数相当于action</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getATalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 发请求，下面这行的写法是：连续解构赋值+重命名</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>content<span class=\"token operator\">:</span>title<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.uomg.com/api/rand.qinghua?format=json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 把请求回来的字符串，包装成一个对象</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span><span class=\"token function\">nanoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>title<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 放到数组中</span>\n    talkList<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>talkList<span class=\"token punctuation\">,</span>getATalk<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"6-组件通信\"><a class=\"headerlink\" href=\"#6-组件通信\"></a>6. 组件通信</h1>\n<p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p>\n<ul>\n<li>移出事件总线，使用<code>mitt</code>代替。</li>\n</ul>\n<ul>\n<li><code>vuex</code>换成了<code>pinia</code>。</li>\n<li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li>\n<li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li>\n<li><code>$children</code>被砍掉了。</li>\n</ul>\n<p><strong>常见搭配形式：</strong></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232507.webp\" alt=\"image-20231119185900990\" loading=\"lazy\"></p>\n<h2 id=\"6-1-【props】\"><a class=\"headerlink\" href=\"#6-1-【props】\"></a>6.1. 【props】</h2>\n<p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p>\n<ul>\n<li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li>\n<li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li>\n</ul>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件，&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;Child :car&#x3D;&quot;car&quot; :getToy&#x3D;&quot;getToy&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\t&#x2F;&#x2F; 数据\n\tconst car &#x3D; ref(&#39;奔驰&#39;)\n\tconst toy &#x3D; ref()\n\t&#x2F;&#x2F; 方法\n\tfunction getToy(value:string)&#123;\n\t\ttoy.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;child&quot;&gt;\n    &lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tconst toy &#x3D; ref(&#39;奥特曼&#39;)\n\t\n\tdefineProps([&#39;car&#39;,&#39;getToy&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-2-【自定义事件】\"><a class=\"headerlink\" href=\"#6-2-【自定义事件】\"></a>6.2. 【自定义事件】</h2>\n<ol>\n<li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li>\n<li>注意区分好：原生事件、自定义事件。</li>\n</ol>\n<ul>\n<li>原生事件：\n<ul>\n<li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li>\n<li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li>\n</ul>\n</li>\n<li>自定义事件：\n<ul>\n<li>事件名是任意名称</li>\n<li><strong style=\"color:red\">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--在父组件中，给子组件绑定自定义事件：--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">@send-toy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!--注意区分原生事件与自定义事件中的$event--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>测试<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//子组件中，触发事件：</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span> 具体数据<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-3-【mitt】\"><a class=\"headerlink\" href=\"#6-3-【mitt】\"></a>6.3. 【mitt】</h2>\n<p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p>\n<p>安装<code>mitt</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mitt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>新建文件：<code>src\\utils\\emitter.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入mitt </span>\n<span class=\"token keyword\">import</span> mitt <span class=\"token keyword\">from</span> <span class=\"token string\">\"mitt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建emitter</span>\n<span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token function\">mitt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\n  // 绑定事件\n  emitter.on('abc',(value)=>&#123;\n    console.log('abc事件被触发',value)\n  &#125;)\n  emitter.on('xyz',(value)=>&#123;\n    console.log('xyz事件被触发',value)\n  &#125;)\n\n  setInterval(() => &#123;\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  &#125;, 1000);\n\n  setTimeout(() => &#123;\n    // 清理事件\n    emitter.all.clear()\n  &#125;, 3000); \n*/</span>\n\n<span class=\"token comment\">// 创建并暴露mitt</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emitter<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onUnmounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 绑定事件</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy事件被触发'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 解绑事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>【第三步】：提供数据的组件，在合适的时候触发事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendToy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 触发事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span>toy<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p>\n<h2 id=\"6-4-【v-model】\"><a class=\"headerlink\" href=\"#6-4-【v-model】\"></a>6.4.【v-model】</h2>\n<ol>\n<li>\n<p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p>\n</li>\n<li>\n<p>前序知识 —— <code>v-model</code>的本质</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 使用v-model指令 --&gt;\n&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;userName&quot;&gt;\n\n&lt;!-- v-model的本质是下面这行代码 --&gt;\n&lt;input \n  type&#x3D;&quot;text&quot; \n  :value&#x3D;&quot;userName&quot; \n  @input&#x3D;&quot;userName &#x3D;(&lt;HTMLInputElement&gt;$event.target).value&quot;\n&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 组件标签上使用v-model指令 --&gt;\n&lt;AtguiguInput v-model&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 组件标签上v-model的本质 --&gt;\n&lt;AtguiguInput :modelValue&#x3D;&quot;userName&quot; @update:model-value&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;\n\t\t&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;modelValue&quot; \n       @input&#x3D;&quot;emit(&#39;update:model-value&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;modelValue&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:model-value&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>也可以更换<code>value</code>，例如改成<code>abc</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 也可以更换value，例如改成abc--&gt;\n&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 上面代码的本质如下 --&gt;\n&lt;AtguiguInput :abc&#x3D;&quot;userName&quot; @update:abc&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;abc&quot; \n       @input&#x3D;&quot;emit(&#39;update:abc&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;abc&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:abc&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot; v-model:xyz&#x3D;&quot;password&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-5-【-attrs-】\"><a class=\"headerlink\" href=\"#6-5-【-attrs-】\"></a>6.5.【$attrs 】</h2>\n<ol>\n<li>\n<p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p>\n</li>\n<li>\n<p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p>\n<blockquote>\n<p>注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p>\n</blockquote>\n</li>\n</ol>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n\t\t&lt;Child :a&#x3D;&quot;a&quot; :b&#x3D;&quot;b&quot; :c&#x3D;&quot;c&quot; :d&#x3D;&quot;d&quot; v-bind&#x3D;&quot;&#123;x:100,y:200&#125;&quot; :updateA&#x3D;&quot;updateA&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tlet a &#x3D; ref(1)\n\tlet b &#x3D; ref(2)\n\tlet c &#x3D; ref(3)\n\tlet d &#x3D; ref(4)\n\n\tfunction updateA(value)&#123;\n\t\ta.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;child&quot;&gt;\n\t\t&lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;GrandChild v-bind&#x3D;&quot;$attrs&quot;&#x2F;&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport GrandChild from &#39;.&#x2F;GrandChild.vue&#39;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>孙组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;grand-child&quot;&gt;\n\t\t&lt;h3&gt;孙组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;updateA(666)&quot;&gt;点我更新A&lt;&#x2F;button&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n\tdefineProps([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;x&#39;,&#39;y&#39;,&#39;updateA&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-6-【-refs、-parent】\"><a class=\"headerlink\" href=\"#6-6-【-refs、-parent】\"></a>6.6. 【$refs、$parent】</h2>\n<ol>\n<li>\n<p>概述：</p>\n<ul>\n<li><code>$refs</code>用于 ：<strong>父→子。</strong></li>\n<li><code>$parent</code>用于：<strong>子→父。</strong></li>\n</ul>\n</li>\n<li>\n<p>原理如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$refs</code></td>\n<td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td>\n</tr>\n<tr>\n<td><code>$parent</code></td>\n<td>值为对象，当前组件的父组件实例对象。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"6-7-【provide、inject】\"><a class=\"headerlink\" href=\"#6-7-【provide、inject】\"></a>6.7. 【provide、inject】</h2>\n<ol>\n<li>\n<p>概述：实现<strong>祖孙组件</strong>直接通信</p>\n</li>\n<li>\n<p>具体使用：</p>\n<ul>\n<li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li>\n<li>在后代组件中通过<code>inject</code>配置来声明接收数据</li>\n</ul>\n</li>\n<li>\n<p>具体编码：</p>\n<p>【第一步】父组件中，使用<code>provide</code>提供数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;money +&#x3D; 1&quot;&gt;资产+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;car.price +&#x3D; 1&quot;&gt;汽车价格+1&lt;&#x2F;button&gt;\n    &lt;Child&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n  import Child from &#39;.&#x2F;Child.vue&#39;\n  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;\n  &#x2F;&#x2F; 数据\n  let money &#x3D; ref(100)\n  let car &#x3D; reactive(&#123;\n    brand:&#39;奔驰&#39;,\n    price:100\n  &#125;)\n  &#x2F;&#x2F; 用于更新money的方法\n  function updateMoney(value:number)&#123;\n    money.value +&#x3D; value\n  &#125;\n  &#x2F;&#x2F; 提供数据\n  provide(&#39;moneyContext&#39;,&#123;money,updateMoney&#125;)\n  provide(&#39;car&#39;,car)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p>\n</blockquote>\n<p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;grand-child&quot;&gt;\n    &lt;h3&gt;我是孙组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;updateMoney(6)&quot;&gt;点我&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n  import &#123; inject &#125; from &#39;vue&#39;;\n  &#x2F;&#x2F; 注入数据\n let &#123;money,updateMoney&#125; &#x3D; inject(&#39;moneyContext&#39;,&#123;money:0,updateMoney:(x:number)&#x3D;&gt;&#123;&#125;&#125;)\n  let car &#x3D; inject(&#39;car&#39;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-8-【pinia】\"><a class=\"headerlink\" href=\"#6-8-【pinia】\"></a>6.8. 【pinia】</h2>\n<p>参考之前<code>pinia</code>部分的讲解</p>\n<h2 id=\"6-9-【slot】\"><a class=\"headerlink\" href=\"#6-9-【slot】\"></a>6.9. 【slot】</h2>\n<h3 id=\"1-默认插槽\"><a class=\"headerlink\" href=\"#1-默认插槽\"></a>1. 默认插槽</h3>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232099.webp\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n          &lt;&#x2F;ul&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;!-- 默认插槽 --&gt;\n            &lt;slot&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-具名插槽\"><a class=\"headerlink\" href=\"#2-具名插槽\"></a>2. 具名插槽</h3>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;template v-slot:s1&gt;\n            &lt;ul&gt;\n              &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n            &lt;&#x2F;ul&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template #s2&gt;\n            &lt;a href&#x3D;&quot;&quot;&gt;更多&lt;&#x2F;a&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;slot name&#x3D;&quot;s1&quot;&gt;&lt;&#x2F;slot&gt;\n            &lt;slot name&#x3D;&quot;s2&quot;&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-作用域插槽\"><a class=\"headerlink\" href=\"#3-作用域插槽\"></a>3. 作用域插槽</h3>\n<ol>\n<li>\n<p>理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n      &lt;Game v-slot&#x3D;&quot;params&quot;&gt;\n      &lt;!-- &lt;Game v-slot:default&#x3D;&quot;params&quot;&gt; --&gt;\n      &lt;!-- &lt;Game #default&#x3D;&quot;params&quot;&gt; --&gt;\n        &lt;ul&gt;\n          &lt;li v-for&#x3D;&quot;g in params.games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n      &lt;&#x2F;Game&gt;\n\n子组件中：\n      &lt;template&gt;\n        &lt;div class&#x3D;&quot;category&quot;&gt;\n          &lt;h2&gt;今日游戏榜单&lt;&#x2F;h2&gt;\n          &lt;slot :games&#x3D;&quot;games&quot; a&#x3D;&quot;哈哈&quot;&gt;&lt;&#x2F;slot&gt;\n        &lt;&#x2F;div&gt;\n      &lt;&#x2F;template&gt;\n\n      &lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Category&quot;&gt;\n        import &#123;reactive&#125; from &#39;vue&#39;\n        let games &#x3D; reactive([\n          &#123;id:&#39;asgdytsa01&#39;,name:&#39;英雄联盟&#39;&#125;,\n          &#123;id:&#39;asgdytsa02&#39;,name:&#39;王者荣耀&#39;&#125;,\n          &#123;id:&#39;asgdytsa03&#39;,name:&#39;红色警戒&#39;&#125;,\n          &#123;id:&#39;asgdytsa04&#39;,name:&#39;斗罗大陆&#39;&#125;\n        ])\n      &lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"7-其它-API\"><a class=\"headerlink\" href=\"#7-其它-API\"></a>7. 其它 API</h1>\n<h2 id=\"7-1-【shallowRef-与-shallowReactive-】\"><a class=\"headerlink\" href=\"#7-1-【shallowRef-与-shallowReactive-】\"></a>7.1.【shallowRef 与 shallowReactive 】</h2>\n<h3 id=\"shallowRef\"><a class=\"headerlink\" href=\"#shallowRef\"></a><code>shallowRef</code></h3>\n<ol>\n<li>\n<p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myVar <span class=\"token operator\">=</span> <span class=\"token function\">shallowRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p>\n</li>\n</ol>\n<h3 id=\"shallowReactive\"><a class=\"headerlink\" href=\"#shallowReactive\"></a><code>shallowReactive</code></h3>\n<ol>\n<li>\n<p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token function\">shallowReactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h3>\n<blockquote>\n<p>通过使用 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowref\"><code>shallowRef()</code></a> 和 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive\"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p>\n</blockquote>\n<h2 id=\"7-2-【readonly-与-shallowReadonly】\"><a class=\"headerlink\" href=\"#7-2-【readonly-与-shallowReadonly】\"></a>7.2.【readonly 与 shallowReadonly】</h2>\n<h3 id=\"readonly\"><a class=\"headerlink\" href=\"#readonly\"></a><strong><code>readonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：用于创建一个对象的深只读副本。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> readOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">readonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>对象的所有嵌套属性都将变为只读。</li>\n<li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li>\n</ul>\n</li>\n<li>\n<p>应用场景：</p>\n<ul>\n<li>创建不可变的状态快照。</li>\n<li>保护全局状态或配置不被修改。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"shallowReadonly\"><a class=\"headerlink\" href=\"#shallowReadonly\"></a><strong><code>shallowReadonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shallowReadOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">shallowReadonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>\n<p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p>\n</li>\n<li>\n<p>适用于只需保护对象顶层属性的场景。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-3-【toRaw-与-markRaw】\"><a class=\"headerlink\" href=\"#7-3-【toRaw-与-markRaw】\"></a>7.3.【toRaw 与 markRaw】</h2>\n<h3 id=\"toRaw\"><a class=\"headerlink\" href=\"#toRaw\"></a><code>toRaw</code></h3>\n<ol>\n<li>\n<p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p>\n<blockquote>\n<p>官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p>\n</blockquote>\n<blockquote>\n<p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p>\n</blockquote>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span>toRaw<span class=\"token punctuation\">,</span>markRaw<span class=\"token punctuation\">,</span>isReactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* toRaw */</span>\n<span class=\"token comment\">// 响应式对象</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'tony'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 原始对象</span>\n<span class=\"token keyword\">let</span> rawPerson <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citysd <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>rawPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"markRaw\"><a class=\"headerlink\" href=\"#markRaw\"></a><code>markRaw</code></h3>\n<ol>\n<li>\n<p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p>\n<blockquote>\n<p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p>\n</blockquote>\n</li>\n<li>\n<p>编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citys <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"7-4-【customRef】\"><a class=\"headerlink\" href=\"#7-4-【customRef】\"></a>7.4.【customRef】</h2>\n<p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p>\n<p>实现防抖效果（<code>useSumRef.ts</code>）：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>customRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>initValue<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>delay<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span>trigger<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> timer<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span>\n        <span class=\"token keyword\">return</span> initValue\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          initValue <span class=\"token operator\">=</span> value\n          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通知Vue数据msg变化了</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>msg<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>组件中使用：</p>\n<h1 id=\"8-Vue3新组件\"><a class=\"headerlink\" href=\"#8-Vue3新组件\"></a>8. Vue3新组件</h1>\n<h2 id=\"8-1-【Teleport】\"><a class=\"headerlink\" href=\"#8-1-【Teleport】\"></a>8.1. 【Teleport】</h2>\n<ul>\n<li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>teleport</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>body<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>我是一个弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我是弹窗中的一些内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow = false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>关闭弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>teleport</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-2-【Suspense】\"><a class=\"headerlink\" href=\"#8-2-【Suspense】\"></a>8.2. 【Suspense】</h2>\n<ul>\n<li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li>\n<li>使用步骤：\n<ul>\n<li>异步引入组件</li>\n<li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineAsyncComponent<span class=\"token punctuation\">,</span>Suspense <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">defineAsyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Child.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;div class&#x3D;&quot;app&quot;&gt;\n        &lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n        &lt;Suspense&gt;\n          &lt;template v-slot:default&gt;\n            &lt;Child&#x2F;&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template v-slot:fallback&gt;\n            &lt;h3&gt;加载中.......&lt;&#x2F;h3&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Suspense&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-3-【全局API转移到应用对象】\"><a class=\"headerlink\" href=\"#8-3-【全局API转移到应用对象】\"></a>8.3.【全局API转移到应用对象】</h2>\n<ul>\n<li><code>app.component</code></li>\n<li><code>app.config</code></li>\n<li><code>app.directive</code></li>\n<li><code>app.mount</code></li>\n<li><code>app.unmount</code></li>\n<li><code>app.use</code></li>\n</ul>\n<h2 id=\"8-4-【其他】\"><a class=\"headerlink\" href=\"#8-4-【其他】\"></a>8.4.【其他】</h2>\n<ul>\n<li>\n<p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p>\n</li>\n<li>\n<p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p>\n</li>\n<li>\n<p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p>\n</li>\n<li>\n<p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p>\n</li>\n<li>\n<p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p>\n</li>\n<li>\n<p>移除了过滤器 <code>filter</code>。</p>\n</li>\n<li>\n<p>移除了<code>$children</code> 实例 <code>propert</code>。</p>\n<p>…</p>\n</li>\n</ul>\n<hr>\n<p><strong>本文内容来源于尚硅谷Vue.js教程，原文地址：<a href=\"http://www.atguigu.com/video/284/\">尚硅谷Vue教程</a>。感谢尚硅谷提供的优秀文档资源。</strong></p>\n","excerpt":"","more":"<h1 id=\"1-Vue3简介\"><a class=\"headerlink\" href=\"#1-Vue3简介\"></a>1. Vue3简介</h1>\n<ul>\n<li>\n<p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p>\n</li>\n<li>\n<p>经历了：<a href=\"https://github.com/vuejs/core/commits/main\">4800+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">40+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/core/graphs/contributors\">300+贡献者</a></p>\n</li>\n<li>\n<p>官方发版地址：<a href=\"https://github.com/vuejs/core/releases/tag/v3.0.0\">Release v3.0.0 One Piece · vuejs/core</a></p>\n</li>\n<li>\n<p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232363.webp\" alt=\"image.png\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2 id=\"1-1-【性能的提升】\"><a class=\"headerlink\" href=\"#1-1-【性能的提升】\"></a>1.1. 【性能的提升】</h2>\n<ul>\n<li>\n<p>打包大小减少<code>41%</code>。</p>\n</li>\n<li>\n<p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p>\n</li>\n<li>\n<p>内存减少<code>54%</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-2-【-源码的升级】\"><a class=\"headerlink\" href=\"#1-2-【-源码的升级】\"></a>1.2.【 源码的升级】</h2>\n<ul>\n<li>\n<p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p>\n</li>\n<li>\n<p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-3-【拥抱TypeScript】\"><a class=\"headerlink\" href=\"#1-3-【拥抱TypeScript】\"></a>1.3. 【拥抱TypeScript】</h2>\n<ul>\n<li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li>\n</ul>\n<h2 id=\"1-4-【新的特性】\"><a class=\"headerlink\" href=\"#1-4-【新的特性】\"></a>1.4. 【新的特性】</h2>\n<ol>\n<li>\n<p><code>Composition API</code>（组合<code>API</code>）：</p>\n<ul>\n<li>\n<p><code>setup</code></p>\n</li>\n<li>\n<p><code>ref</code>与<code>reactive</code></p>\n</li>\n<li>\n<p><code>computed</code>与<code>watch</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>新的内置组件：</p>\n<ul>\n<li>\n<p><code>Fragment</code></p>\n</li>\n<li>\n<p><code>Teleport</code></p>\n</li>\n<li>\n<p><code>Suspense</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>其他改变：</p>\n<ul>\n<li>\n<p>新的生命周期钩子</p>\n</li>\n<li>\n<p><code>data</code> 选项应始终被声明为一个函数</p>\n</li>\n<li>\n<p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p>\n<p>…</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-创建Vue3工程\"><a class=\"headerlink\" href=\"#2-创建Vue3工程\"></a>2. 创建Vue3工程</h1>\n<h2 id=\"2-1-【基于-vue-cli-创建】\"><a class=\"headerlink\" href=\"#2-1-【基于-vue-cli-创建】\"></a>2.1. 【基于 vue-cli 创建】</h2>\n<p>点击查看<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">官方文档</a></p>\n<blockquote>\n<p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>\nvue <span class=\"token operator\">--</span>version\n\n<span class=\"token comment\">## 安装或者升级你的@vue/cli </span>\nnpm install <span class=\"token operator\">-</span>g @vue/<span class=\"token function\">cli</span>\n\n<span class=\"token comment\">## 执行创建命令</span>\nvue create vue_test\n\n<span class=\"token comment\">##  随后选择3.x</span>\n<span class=\"token comment\">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span>\n<span class=\"token comment\">##  > 3.x</span>\n<span class=\"token comment\">##    2.x</span>\n\n<span class=\"token comment\">## 启动</span>\ncd vue_test\nnpm run serve<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h2 id=\"2-2-【基于-vite-创建】-推荐\"><a class=\"headerlink\" href=\"#2-2-【基于-vite-创建】-推荐\"></a>2.2. 【基于 vite 创建】(推荐)</h2>\n<p><code>vite</code> 是新一代前端构建工具，官网地址：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p>\n<ul>\n<li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li>\n<li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n<li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：</li>\n</ul>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232253.webp\" alt=\"\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232053.webp\" alt=\"\" loading=\"lazy\"></p>\n<ul>\n<li>具体操作如下（点击查看<a href=\"https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application\">官方文档</a>）</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 1.创建命令</span>\nnpm create vue@latest\n\n<span class=\"token comment\">## 2.具体配置</span>\n<span class=\"token comment\">## 配置项目名称</span>\n√ Project name: vue3_test\n<span class=\"token comment\">## 是否添加TypeScript支持</span>\n√ Add TypeScript?  Yes\n<span class=\"token comment\">## 是否添加JSX支持</span>\n√ Add JSX Support?  No\n<span class=\"token comment\">## 是否添加路由环境</span>\n√ Add Vue Router <span class=\"token keyword\">for</span> Single Page Application development?  No\n<span class=\"token comment\">## 是否添加pinia环境</span>\n√ Add Pinia <span class=\"token keyword\">for</span> state management?  No\n<span class=\"token comment\">## 是否添加单元测试</span>\n√ Add Vitest <span class=\"token keyword\">for</span> Unit Testing?  No\n<span class=\"token comment\">## 是否添加端到端测试方案</span>\n√ Add an <span class=\"token keyword\">End</span><span class=\"token operator\">-</span>to-<span class=\"token keyword\">End</span> Testing Solution? » No\n<span class=\"token comment\">## 是否添加ESLint语法检查</span>\n√ Add ESLint <span class=\"token keyword\">for</span> code quality?  Yes\n<span class=\"token comment\">## 是否添加Prettiert代码格式化</span>\n√ Add Prettier <span class=\"token keyword\">for</span> code formatting?  No<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>自己动手编写一个App组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h1&gt;你好啊！&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39; &#x2F;&#x2F;组件名\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n  .app &#123;\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  &#125;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装官方推荐的<code>vscode</code>插件：</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232847.webp\" alt=\"Snipaste_2023-10-08_20-46-34\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232668.webp\" alt=\"image-20231218085906380\" loading=\"lazy\"></p>\n<p>总结：</p>\n<ul>\n<li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li>\n<li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li>\n<li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li>\n</ul>\n<h2 id=\"2-3-【一个简单的效果】\"><a class=\"headerlink\" href=\"#2-3-【一个简单的效果】\"></a>2.3. 【一个简单的效果】</h2>\n<p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39;,\n    data() &#123;\n      return &#123;\n        name:&#39;张三&#39;,\n        age:18,\n        tel:&#39;13888888888&#39;\n      &#125;\n    &#125;,\n    methods:&#123;\n      changeName()&#123;\n        this.name &#x3D; &#39;zhang-san&#39;\n      &#125;,\n      changeAge()&#123;\n        this.age +&#x3D; 1\n      &#125;,\n      showTel()&#123;\n        alert(this.tel)\n      &#125;\n    &#125;,\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"3-Vue3核心语法\"><a class=\"headerlink\" href=\"#3-Vue3核心语法\"></a>3. Vue3核心语法</h1>\n<h2 id=\"3-1-【OptionsAPI-与-CompositionAPI】\"><a class=\"headerlink\" href=\"#3-1-【OptionsAPI-与-CompositionAPI】\"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2>\n<ul>\n<li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li>\n<li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li>\n</ul>\n<h3 id=\"Options-API-的弊端\"><a class=\"headerlink\" href=\"#Options-API-的弊端\"></a>Options API 的弊端</h3>\n<p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p>\n<p><img src=\"https://img.aixcc.top/file/c3edadbf9a9bbfd22d442.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/d978f7c4fd1f8a2a2e8f9.gif\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"Composition-API-的优势\"><a class=\"headerlink\" href=\"#Composition-API-的优势\"></a>Composition API 的优势</h3>\n<p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p>\n<p><img src=\"https://img.aixcc.top/file/9acc07d0f3690f12a9fda.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/2e7d2a90529d10cad9c93.gif\" alt=\"\" loading=\"lazy\"></p>\n<blockquote>\n<p>说明：以上四张动图原创作者：大帅老猿</p>\n</blockquote>\n<h2 id=\"3-2-【拉开序幕的-setup】\"><a class=\"headerlink\" href=\"#3-2-【拉开序幕的-setup】\"></a>3.2. 【拉开序幕的 setup】</h2>\n<h3 id=\"setup-概述\"><a class=\"headerlink\" href=\"#setup-概述\"></a>setup 概述</h3>\n<p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视…等等，均配置在<code>setup</code>中。</p>\n<p>特点如下：</p>\n<ul>\n<li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li>\n<li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li>\n<li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n    setup()&#123;\n      &#x2F;&#x2F; 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name &#x3D; &#39;张三&#39;\n      let age &#x3D; 18\n      let tel &#x3D; &#39;13888888888&#39;\n\n      &#x2F;&#x2F; 方法，原来写在methods中\n      function changeName()&#123;\n        name &#x3D; &#39;zhang-san&#39; &#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n        console.log(name)\n      &#125;\n      function changeAge()&#123;\n        age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n        console.log(age)\n      &#125;\n      function showTel()&#123;\n        alert(tel)\n      &#125;\n\n      &#x2F;&#x2F; 返回一个对象，对象中的内容，模板中可以直接使用\n      return &#123;name,age,tel,changeName,changeAge,showTel&#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-的返回值\"><a class=\"headerlink\" href=\"#setup-的返回值\"></a>setup 的返回值</h3>\n<ul>\n<li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**</li>\n<li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token string\">'你好啊！'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-与-Options-API-的关系\"><a class=\"headerlink\" href=\"#setup-与-Options-API-的关系\"></a>setup 与 Options API 的关系</h3>\n<ul>\n<li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>…）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li>\n<li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>…）。</li>\n<li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li>\n</ul>\n<h3 id=\"setup-语法糖\"><a class=\"headerlink\" href=\"#setup-语法糖\"></a>setup 语法糖</h3>\n<p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;!-- 下面的写法是setup语法糖 --&gt;\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  console.log(this) &#x2F;&#x2F;undefined\n  \n  &#x2F;&#x2F; 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name &#x3D; &#39;张三&#39;\n  let age &#x3D; 18\n  let tel &#x3D; &#39;13888888888&#39;\n\n  &#x2F;&#x2F; 方法\n  function changName()&#123;\n    name &#x3D; &#39;李四&#39;&#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n  &#125;\n  function changAge()&#123;\n    console.log(age)\n    age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p>\n<ol>\n<li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li>\n<li>第二步：<code>vite.config.ts</code></li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span>\n<span class=\"token keyword\">import</span> VueSetupExtend <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-vue-setup-extend'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">VueSetupExtend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li>\n</ol>\n<h2 id=\"3-3-【ref-创建：基本类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-3-【ref-创建：基本类型的响应式数据】\"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2>\n<ul>\n<li>**作用：**定义响应式变量。</li>\n<li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li>\n<li>**返回值：**一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li>\n<li><strong>注意点：</strong>\n<ul>\n<li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li>\n<li>对于<code>let name = ref('张三')</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;&#x2F; tel就是一个普通的字符串，不是响应式的\n  let tel &#x3D; &#39;13888888888&#39;\n\n  function changeName()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    name.value &#x3D; &#39;李四&#39;\n    console.log(name.value)\n\n    &#x2F;&#x2F; 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    &#x2F;&#x2F; name &#x3D; ref(&#39;zhang-san&#39;)\n  &#125;\n  function changeAge()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    age.value +&#x3D; 1 \n    console.log(age.value)\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-4-【reactive-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-4-【reactive-创建：对象类型的响应式数据】\"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2>\n<ul>\n<li><strong>作用：<strong>定义一个</strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li>\n<li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li>\n<li>**返回值：**一个<code>Proxy</code>的实例对象，简称：响应式对象。</li>\n<li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; reactive &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; reactive(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; reactive([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; reactive(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nfunction changeCarPrice() &#123;\n  car.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-5-【ref-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-5-【ref-创建：对象类型的响应式数据】\"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2>\n<ul>\n<li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li>\n<li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; ref(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; ref([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; ref(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nconsole.log(car)\n\nfunction changeCarPrice() &#123;\n  car.value.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games.value[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.value.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-6-【ref-对比-reactive】\"><a class=\"headerlink\" href=\"#3-6-【ref-对比-reactive】\"></a>3.6. 【ref 对比 reactive】</h2>\n<p>宏观角度看：</p>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p>\n</li>\n<li>\n<p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>区别：</li>\n</ul>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232718.webp\" alt=\"自动补充value\" loading=\"lazy\"></p>\n</li>\n<li>\n<p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>使用原则：</li>\n</ul>\n<blockquote>\n<ol>\n<li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li>\n<li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li>\n<li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-7-【toRefs-与-toRef】\"><a class=\"headerlink\" href=\"#3-7-【toRefs-与-toRef】\"></a>3.7. 【toRefs 与 toRef】</h2>\n<ul>\n<li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li>\n<li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li>\n<li>语法如下：</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeGender&quot;&gt;修改性别&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,reactive,toRefs,toRef&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;name:&#39;张三&#39;, age:18, gender:&#39;男&#39;&#125;)\n\t\n  &#x2F;&#x2F; 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let &#123;name,gender&#125; &#x3D;  toRefs(person)\n\t\n  &#x2F;&#x2F; 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age &#x3D; toRef(person,&#39;age&#39;)\n\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    name.value +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    age.value +&#x3D; 1\n  &#125;\n  function changeGender()&#123;\n    gender.value &#x3D; &#39;女&#39;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-8-【computed】\"><a class=\"headerlink\" href=\"#3-8-【computed】\"></a>3.8. 【computed】</h2>\n<p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p>\n<p><img src=\"https://img.aixcc.top/file/35111db5e18d3bb69aee9.gif\" alt=\"\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&gt;\n    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;br&gt;\n    &lt;button @click&#x3D;&quot;changeFullName&quot;&gt;全名改为：li-si&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;App&quot;&gt;\n  import &#123;ref,computed&#125; from &#39;vue&#39;\n\n  let firstName &#x3D; ref(&#39;zhang&#39;)\n  let lastName &#x3D; ref(&#39;san&#39;)\n\n  &#x2F;&#x2F; 计算属性——只读取，不修改\n  &#x2F;* let fullName &#x3D; computed(()&#x3D;&gt;&#123;\n    return firstName.value + &#39;-&#39; + lastName.value\n  &#125;) *&#x2F;\n\n\n  &#x2F;&#x2F; 计算属性——既读取又修改\n  let fullName &#x3D; computed(&#123;\n    &#x2F;&#x2F; 读取\n    get()&#123;\n      return firstName.value + &#39;-&#39; + lastName.value\n    &#125;,\n    &#x2F;&#x2F; 修改\n    set(val)&#123;\n      console.log(&#39;有人修改了fullName&#39;,val)\n      firstName.value &#x3D; val.split(&#39;-&#39;)[0]\n      lastName.value &#x3D; val.split(&#39;-&#39;)[1]\n    &#125;\n  &#125;)\n\n  function changeFullName()&#123;\n    fullName.value &#x3D; &#39;li-si&#39;\n  &#125; \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-9-【watch】\"><a class=\"headerlink\" href=\"#3-9-【watch】\"></a>3.9.【watch】</h2>\n<ul>\n<li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li>\n<li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li>\n</ul>\n<blockquote>\n<ol>\n<li><code>ref</code>定义的数据。</li>\n<li><code>reactive</code>定义的数据。</li>\n<li>函数返回一个值（<code>getter</code>函数）。</li>\n<li>一个包含上述内容的数组。</li>\n</ol>\n</blockquote>\n<p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p>\n<h3 id=\"情况一\"><a class=\"headerlink\" href=\"#情况一\"></a>* 情况一</h3>\n<p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum()&#123;\n    sum.value +&#x3D; 1\n  &#125;\n  &#x2F;&#x2F; 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch &#x3D; watch(sum,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;sum变化了&#39;,newValue,oldValue)\n    if(newValue &gt;&#x3D; 10)&#123;\n      stopWatch()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况二\"><a class=\"headerlink\" href=\"#情况二\"></a>* 情况二</h3>\n<p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>\n<p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p>\n</li>\n<li>\n<p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; ref(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.value.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.value.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    person.value &#x3D; &#123;name:&#39;李四&#39;,age:90&#125;\n  &#125;\n  &#x2F;* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  *&#x2F;\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况三\"><a class=\"headerlink\" href=\"#情况三\"></a>*  情况三</h3>\n<p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n    &lt;hr&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;修改obj.a.b.c&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  let obj &#x3D; reactive(&#123;\n    a:&#123;\n      b:&#123;\n        c:666\n      &#125;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    Object.assign(person,&#123;name:&#39;李四&#39;,age:80&#125;)\n  &#125;\n  function test()&#123;\n    obj.a.b.c &#x3D; 888\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;)\n  watch(obj,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;Obj变化了&#39;,newValue,oldValue)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况四\"><a class=\"headerlink\" href=\"#情况四\"></a>* 情况四</h3>\n<p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p>\n<ol>\n<li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li>\n<li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li>\n</ol>\n<p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  &#x2F;* watch(()&#x3D;&gt; person.name,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.name变化了&#39;,newValue,oldValue)\n  &#125;) *&#x2F;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()&#x3D;&gt;person.car,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况五\"><a class=\"headerlink\" href=\"#情况五\"></a>* 情况五</h3>\n<p>监视上述的多个数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况五：监视上述的多个数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况五：监视上述的多个数据\n  watch([()&#x3D;&gt;person.name,person.car],(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-10-【watchEffect】\"><a class=\"headerlink\" href=\"#3-10-【watchEffect】\"></a>3.10. 【watchEffect】</h2>\n<ul>\n<li>\n<p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p>\n</li>\n<li>\n<p><code>watch</code>对比<code>watchEffect</code></p>\n<blockquote>\n<ol>\n<li>\n<p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p>\n</li>\n<li>\n<p><code>watch</code>：要明确指出监视的数据</p>\n</li>\n<li>\n<p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;&#x2F;h1&gt;\n    &lt;h2 id&#x3D;&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changePrice&quot;&gt;水温+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;水位+10&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch,watchEffect&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let temp &#x3D; ref(0)\n  let height &#x3D; ref(0)\n\n  &#x2F;&#x2F; 方法\n  function changePrice()&#123;\n    temp.value +&#x3D; 10\n  &#125;\n  function changeSum()&#123;\n    height.value +&#x3D; 1\n  &#125;\n\n  &#x2F;&#x2F; 用watch实现，需要明确的指出要监视：temp、height\n  watch([temp,height],(value)&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 从value中获取最新的temp值、height值\n    const [newTemp,newHeight] &#x3D; value\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(newTemp &gt;&#x3D; 50 || newHeight &gt;&#x3D; 20)&#123;\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n  &#125;)\n\n  &#x2F;&#x2F; 用watchEffect实现，不用\n  const stopWtach &#x3D; watchEffect(()&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(temp.value &gt;&#x3D; 50 || height.value &gt;&#x3D; 20)&#123;\n      console.log(document.getElementById(&#39;demo&#39;)?.innerText)\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n    &#x2F;&#x2F; 水温达到100，或水位达到50，取消监视\n    if(temp.value &#x3D;&#x3D;&#x3D; 100 || height.value &#x3D;&#x3D;&#x3D; 50)&#123;\n      console.log(&#39;清理了&#39;)\n      stopWtach()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-11-【标签的-ref-属性】\"><a class=\"headerlink\" href=\"#3-11-【标签的-ref-属性】\"></a>3.11. 【标签的 ref 属性】</h2>\n<p>作用：用于注册模板引用。</p>\n<blockquote>\n<ul>\n<li>\n<p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p>\n</li>\n<li>\n<p>用在组件标签上，获取的是组件实例对象。</p>\n</li>\n</ul>\n</blockquote>\n<p>用在普通<code>DOM</code>标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1 ref&#x3D;&quot;title1&quot;&gt;尚硅谷&lt;&#x2F;h1&gt;\n    &lt;h2 ref&#x3D;&quot;title2&quot;&gt;前端&lt;&#x2F;h2&gt;\n    &lt;h3 ref&#x3D;&quot;title3&quot;&gt;Vue&lt;&#x2F;h3&gt;\n    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;\n    &lt;button @click&#x3D;&quot;showLog&quot;&gt;点我打印内容&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n\t\n  let title1 &#x3D; ref()\n  let title2 &#x3D; ref()\n  let title3 &#x3D; ref()\n\n  function showLog()&#123;\n    &#x2F;&#x2F; 通过id获取元素\n    const t1 &#x3D; document.getElementById(&#39;title1&#39;)\n    &#x2F;&#x2F; 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((&lt;HTMLElement&gt;t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t&#x2F;************************************&#x2F;\n\t\t\n    &#x2F;&#x2F; 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用在组件标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 父组件App.vue --&gt;\n&lt;template&gt;\n  &lt;Person ref&#x3D;&quot;ren&quot;&#x2F;&gt;\n  &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\n  import &#123;ref&#125; from &#39;vue&#39;\n\n  let ren &#x3D; ref()\n\n  function test()&#123;\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  &#125;\n&lt;&#x2F;script&gt;\n\n\n&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,defineExpose&#125; from &#39;vue&#39;\n\t&#x2F;&#x2F; 数据\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;****************************&#x2F;\n  &#x2F;****************************&#x2F;\n  &#x2F;&#x2F; 使用defineExpose将组件中的数据交给外部\n  defineExpose(&#123;name,age&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-12-【props】\"><a class=\"headerlink\" href=\"#3-12-【props】\"></a>3.12. 【props】</h2>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义一个接口，限制每个Person对象的格式</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInter</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>number\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 定义一个自定义类型Persons</span>\n<span class=\"token keyword\">export</span> type Persons <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>PersonInter<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>App.vue</code>中代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;Person :list&#x3D;&quot;persons&quot;&#x2F;&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\nimport Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\nimport &#123;reactive&#125; from &#39;vue&#39;\n import &#123;type Persons&#125; from &#39;.&#x2F;types&#39;\n\n let persons &#x3D; reactive&lt;Persons&gt;([\n  &#123;id:&#39;e98219e12&#39;,name:&#39;张三&#39;,age:18&#125;,\n   &#123;id:&#39;e98219e13&#39;,name:&#39;李四&#39;,age:19&#125;,\n    &#123;id:&#39;e98219e14&#39;,name:&#39;王五&#39;,age:20&#125;\n  ])\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Person.vue</code>中代码：</p>\n<pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;template&gt;\n&lt;div class&#x3D;&quot;person&quot;&gt;\n&lt;ul&gt;\n  &lt;li v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item.id&quot;&gt;\n     &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;\n   &lt;&#x2F;li&gt;\n &lt;&#x2F;ul&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123;defineProps&#125; from &#39;vue&#39;\nimport &#123;type PersonInter&#125; from &#39;@&#x2F;types&#39;\n\n&#x2F;&#x2F; 第一种写法：仅接收\n&#x2F;&#x2F; const props &#x3D; defineProps([&#39;list&#39;])\n\n&#x2F;&#x2F; 第二种写法：接收+限制类型\n&#x2F;&#x2F; defineProps&lt;&#123;list:Persons&#125;&gt;()\n\n&#x2F;&#x2F; 第三种写法：接收+限制类型+指定默认值+限制必要性\nlet props &#x3D; withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;\n  list:()&#x3D;&gt;[&#123;id:&#39;asdasg01&#39;,name:&#39;小猪佩奇&#39;,age:18&#125;]\n&#125;)\nconsole.log(props)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"3-13-【生命周期】\"><a class=\"headerlink\" href=\"#3-13-【生命周期】\"></a>3.13. 【生命周期】</h2>\n<ul>\n<li>\n<p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p>\n</li>\n<li>\n<p>规律：</p>\n<blockquote>\n<p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue2</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>beforeCreate</code>、<code>created</code></p>\n<p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p>\n<p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p>\n<p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue3</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>setup</code></p>\n<p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p>\n<p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p>\n<p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p>\n</blockquote>\n</li>\n<li>\n<p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;!-- vue3写法 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123; \n    ref, \n    onBeforeMount, \n    onMounted, \n    onBeforeUpdate, \n    onUpdated, \n    onBeforeUnmount, \n    onUnmounted \n  &#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum() &#123;\n    sum.value +&#x3D; 1\n  &#125;\n  console.log(&#39;setup&#39;)\n  &#x2F;&#x2F; 生命周期钩子\n  onBeforeMount(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载之前&#39;)\n  &#125;)\n  onMounted(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载完毕&#39;)\n  &#125;)\n  onBeforeUpdate(()&#x3D;&gt;&#123;\n    console.log(&#39;更新之前&#39;)\n  &#125;)\n  onUpdated(()&#x3D;&gt;&#123;\n    console.log(&#39;更新完毕&#39;)\n  &#125;)\n  onBeforeUnmount(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载之前&#39;)\n  &#125;)\n  onUnmounted(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载完毕&#39;)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-14-【自定义hook】\"><a class=\"headerlink\" href=\"#3-14-【自定义hook】\"></a>3.14. 【自定义hook】</h2>\n<ul>\n<li>\n<p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p>\n</li>\n<li>\n<p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<ul>\n<li>\n<p><code>useSum.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>useDog.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>AxiosError<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> dogList <span class=\"token operator\">=</span> reactive<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 方法</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 发请求</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://dog.ceo/api/breed/pembroke/images/random'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 维护数据</span>\n      dogList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 处理错误</span>\n      <span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>AxiosError<span class=\"token operator\">></span>error\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 挂载钩子</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>dogList<span class=\"token punctuation\">,</span>getDog<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中具体使用：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n  &lt;button @click&#x3D;&quot;increment&quot;&gt;点我+1&lt;&#x2F;button&gt;\n  &lt;button @click&#x3D;&quot;decrement&quot;&gt;点我-1&lt;&#x2F;button&gt;\n  &lt;hr&gt;\n  &lt;img v-for&#x3D;&quot;(u,index) in dogList.urlList&quot; :key&#x3D;&quot;index&quot; :src&#x3D;&quot;(u as string)&quot;&gt; \n  &lt;span v-show&#x3D;&quot;dogList.isLoading&quot;&gt;加载中......&lt;&#x2F;span&gt;&lt;br&gt;\n  &lt;button @click&#x3D;&quot;getDog&quot;&gt;再来一只狗&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  import &#123;defineComponent&#125; from &#39;vue&#39;\n\n  export default defineComponent(&#123;\n    name:&#39;App&#39;,\n  &#125;)\n&lt;&#x2F;script&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  import useSum from &#39;.&#x2F;hooks&#x2F;useSum&#39;\n  import useDog from &#39;.&#x2F;hooks&#x2F;useDog&#39;\n\t\n  let &#123;sum,increment,decrement&#125; &#x3D; useSum()\n  let &#123;dogList,getDog&#125; &#x3D; useDog()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<hr>\n<h1 id=\"4-路由\"><a class=\"headerlink\" href=\"#4-路由\"></a>4. 路由</h1>\n<h2 id=\"4-1-【对路由的理解】\"><a class=\"headerlink\" href=\"#4-1-【对路由的理解】\"></a>4.1. 【对路由的理解】</h2>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232332.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"4-2-【基本切换效果】\"><a class=\"headerlink\" href=\"#4-2-【基本切换效果】\"></a>4.2. 【基本切换效果】</h2>\n<ul>\n<li>\n<p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p>\n</li>\n<li>\n<p>路由配置文件代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>createRouter<span class=\"token punctuation\">,</span>createWebHistory<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/Home.vue'</span>\n<span class=\"token keyword\">import</span> News <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/News.vue'</span>\n<span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/About.vue'</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>main.ts</code>代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router/index'</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>App.vue</code>代码如下</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h2 class&#x3D;&quot;title&quot;&gt;Vue路由测试&lt;&#x2F;h2&gt;\n    &lt;!-- 导航区 --&gt;\n    &lt;div class&#x3D;&quot;navigate&quot;&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;home&quot; active-class&#x3D;&quot;active&quot;&gt;首页&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;news&quot; active-class&#x3D;&quot;active&quot;&gt;新闻&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;about&quot; active-class&#x3D;&quot;active&quot;&gt;关于&lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;div&gt;\n    &lt;!-- 展示区 --&gt;\n    &lt;div class&#x3D;&quot;main-content&quot;&gt;\n      &lt;RouterView&gt;&lt;&#x2F;RouterView&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import &#123;RouterLink,RouterView&#125; from &#39;vue-router&#39;  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"4-3-【两个注意点】\"><a class=\"headerlink\" href=\"#4-3-【两个注意点】\"></a>4.3. 【两个注意点】</h2>\n<blockquote>\n<ol>\n<li>\n<p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p>\n</li>\n<li>\n<p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"4-4-【路由器工作模式】\"><a class=\"headerlink\" href=\"#4-4-【路由器工作模式】\"></a>4.4.【路由器工作模式】</h2>\n<ol>\n<li>\n<p><code>history</code>模式</p>\n<blockquote>\n<p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p>\n<p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//history模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n<li>\n<p><code>hash</code>模式</p>\n<blockquote>\n<p>优点：兼容性更好，因为不需要服务器端处理路径。</p>\n<p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//hash模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-5-【to的两种写法】\"><a class=\"headerlink\" href=\"#4-5-【to的两种写法】\"></a>4.5. 【to的两种写法】</h2>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 第一种：to的字符串写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&quot;&gt;主页&lt;&#x2F;router-link&gt;\n\n&lt;!-- 第二种：to的对象写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;home&#39;&#125;&quot;&gt;Home&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-6-【命名路由】\"><a class=\"headerlink\" href=\"#4-6-【命名路由】\"></a>4.6. 【命名路由】</h2>\n<p>作用：可以简化路由跳转及传参（后面就讲）。</p>\n<p>给路由规则命名：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>跳转路由：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;name:&#39;guanyu&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-7-【嵌套路由】\"><a class=\"headerlink\" href=\"#4-7-【嵌套路由】\"></a>4.7. 【嵌套路由】</h2>\n<ol>\n<li>\n<p>编写<code>News</code>的子路由：<code>Detail.vue</code></p>\n</li>\n<li>\n<p>配置路由规则，使用<code>children</code>配置项：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  history<span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\troutes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n\t\t\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tcomponent<span class=\"token operator\">:</span>Detail\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>跳转路由（记得要加完整路径）：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;xxxx&lt;&#x2F;router-link&gt;\n&lt;!-- 或 --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;xxxx&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;news&quot;&gt;\n    &lt;nav class&#x3D;&quot;news-list&quot;&gt;\n      &lt;RouterLink v-for&#x3D;&quot;news in newsList&quot; :key&#x3D;&quot;news.id&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;\n        &#123;&#123;news.name&#125;&#125;\n      &lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;nav&gt;\n    &lt;div class&#x3D;&quot;news-detail&quot;&gt;\n      &lt;RouterView&#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-8-【路由传参】\"><a class=\"headerlink\" href=\"#4-8-【路由传参】\"></a>4.8. 【路由传参】</h2>\n<h3 id=\"query参数\"><a class=\"headerlink\" href=\"#query参数\"></a>query参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail?a&#x3D;1&amp;b&#x3D;2&amp;content&#x3D;欢迎你&quot;&gt;\n\t跳转\n&lt;&#x2F;router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    &#x2F;&#x2F;name:&#39;xiang&#39;, &#x2F;&#x2F;用name也可以跳转\n    path:&#39;&#x2F;news&#x2F;detail&#39;,\n    query:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.content\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印query参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"params参数\"><a class=\"headerlink\" href=\"#params参数\"></a>params参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;\n&lt;RouterLink :to&#x3D;&quot;&#96;&#x2F;news&#x2F;detail&#x2F;001&#x2F;新闻001&#x2F;内容001&#96;&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;&#x2F;RouterLink&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    name:&#39;xiang&#39;, &#x2F;&#x2F;用name跳转\n    params:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.title\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印params参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<blockquote>\n<p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p>\n<p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p>\n</blockquote>\n<h2 id=\"4-9-【路由的props配置】\"><a class=\"headerlink\" href=\"#4-9-【路由的props配置】\"></a>4.9. 【路由的props配置】</h2>\n<p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'detail/:id/:title/:content'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Detail<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:&#123;a:1,b:2,c:3&#125;, </span>\n\n  <span class=\"token comment\">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:true</span>\n  \n  <span class=\"token comment\">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span>\n  <span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> route<span class=\"token punctuation\">.</span>query\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-10-【-replace属性】\"><a class=\"headerlink\" href=\"#4-10-【-replace属性】\"></a>4.10. 【 replace属性】</h2>\n<ol>\n<li>\n<p>作用：控制路由跳转时操作浏览器历史记录的模式。</p>\n</li>\n<li>\n<p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p>\n<ul>\n<li><code>push</code>是追加历史记录（默认值）。</li>\n<li><code>replace</code>是替换当前记录。</li>\n</ul>\n</li>\n<li>\n<p>开启<code>replace</code>模式：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;RouterLink replace .......&gt;News&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-11-【编程式导航】\"><a class=\"headerlink\" href=\"#4-11-【编程式导航】\"></a>4.11. 【编程式导航】</h2>\n<p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">,</span>useRouter<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>parmas<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-12-【重定向】\"><a class=\"headerlink\" href=\"#4-12-【重定向】\"></a>4.12. 【重定向】</h2>\n<ol>\n<li>\n<p>作用：将特定的路径，重新定向到已有路由。</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"5-pinia\"><a class=\"headerlink\" href=\"#5-pinia\"></a>5. pinia</h1>\n<h2 id=\"5-1【准备一个效果】\"><a class=\"headerlink\" href=\"#5-1【准备一个效果】\"></a>5.1【准备一个效果】</h2>\n<p><img src=\"https://img.aixcc.top/file/f14ee7ea7c72a9003d7b8.gif\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-2【搭建-pinia-环境】\"><a class=\"headerlink\" href=\"#5-2【搭建-pinia-环境】\"></a>5.2【搭建 pinia 环境】</h2>\n<p>第一步：<code>npm install pinia</code></p>\n<p>第二步：操作<code>src/main.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span>\n\n<span class=\"token comment\">/* 引入createPinia，用于创建pinia */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">/* 创建pinia */</span>\n<span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 使用插件 */</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时开发者工具中已经有了<code>pinia</code>选项</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232851.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-3【存储-读取数据】\"><a class=\"headerlink\" href=\"#5-3【存储-读取数据】\"></a>5.3【存储+读取数据】</h2>\n<ol>\n<li>\n<p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p>\n</li>\n<li>\n<p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p>\n</li>\n<li>\n<p>具体编码：<code>src/store/count.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  actions<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      sum<span class=\"token operator\">:</span><span class=\"token number\">6</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  getters<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>具体编码：<code>src/store/talk.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">talkList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'你今天有点怪，哪里怪？怪好看的！'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n     \t\t<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'草莓、蓝莓、蔓越莓，你想我了没？'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'心里给你留了一块地，我的死心塌地'</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中使用<code>state</code>中的数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;&#x2F;h2&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  &#x2F;&#x2F; 引入对应的useXxxxxStore\t\n  import &#123;useSumStore&#125; from &#39;@&#x2F;store&#x2F;sum&#39;\n  \n  &#x2F;&#x2F; 调用useXxxxxStore得到对应的store\n  const sumStore &#x3D; useSumStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;ul&gt;\n    &lt;li v-for&#x3D;&quot;talk in talkStore.talkList&quot; :key&#x3D;&quot;talk.id&quot;&gt;\n      &#123;&#123; talk.content &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import axios from &#39;axios&#39;\n  import &#123;useTalkStore&#125; from &#39;@&#x2F;store&#x2F;talk&#39;\n\n  const talkStore &#x3D; useTalkStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-4-【修改数据】-三种方式\"><a class=\"headerlink\" href=\"#5-4-【修改数据】-三种方式\"></a>5.4.【修改数据】(三种方式)</h2>\n<ol>\n<li>\n<p>第一种修改方式，直接修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>第二种修改方式：批量修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span><span class=\"token function\">$patch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  sum<span class=\"token operator\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span>\n  school<span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/*************/</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//加</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//操作countStore中的sum</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//减</span>\n    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">-=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*************/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中调用<code>action</code>即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用countStore</span>\n<span class=\"token keyword\">const</span> countStore <span class=\"token operator\">=</span> <span class=\"token function\">useCountStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 调用对应action</span>\ncountStore<span class=\"token punctuation\">.</span><span class=\"token function\">incrementOdd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-5-【storeToRefs】\"><a class=\"headerlink\" href=\"#5-5-【storeToRefs】\"></a>5.5.【storeToRefs】</h2>\n<ul>\n<li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li>\n<li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;count&quot;&gt;\n\t\t&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import &#123; useCountStore &#125; from &#39;@&#x2F;store&#x2F;count&#39;\n  &#x2F;* 引入storeToRefs *&#x2F;\n  import &#123; storeToRefs &#125; from &#39;pinia&#39;\n\n\t&#x2F;* 得到countStore *&#x2F;\n  const countStore &#x3D; useCountStore()\n  &#x2F;* 使用storeToRefs转换countStore，随后解构 *&#x2F;\n  const &#123;sum&#125; &#x3D; storeToRefs(countStore)\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-6-【getters】\"><a class=\"headerlink\" href=\"#5-6-【getters】\"></a>5.6.【getters】</h2>\n<ol>\n<li>\n<p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p>\n</li>\n<li>\n<p>追加<code>getters</code>配置。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/************/</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">school</span><span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">bigSum</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">upperSchool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> school<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中读取数据：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> countStore\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>school<span class=\"token punctuation\">,</span>bigSum<span class=\"token punctuation\">,</span>upperSchool<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">storeToRefs</span><span class=\"token punctuation\">(</span>countStore<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-7-【-subscribe】\"><a class=\"headerlink\" href=\"#5-7-【-subscribe】\"></a>5.7.【$subscribe】</h2>\n<p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">talkStore<span class=\"token punctuation\">.</span><span class=\"token function\">$subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LoveTalk'</span><span class=\"token punctuation\">,</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>talkList<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-8-【store组合式写法】\"><a class=\"headerlink\" href=\"#5-8-【store组合式写法】\"></a>5.8. 【store组合式写法】</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>nanoid<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'nanoid'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// talkList就是state</span>\n  <span class=\"token keyword\">const</span> talkList <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talkList'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// getATalk函数相当于action</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getATalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 发请求，下面这行的写法是：连续解构赋值+重命名</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>content<span class=\"token operator\">:</span>title<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.uomg.com/api/rand.qinghua?format=json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 把请求回来的字符串，包装成一个对象</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span><span class=\"token function\">nanoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>title<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 放到数组中</span>\n    talkList<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>talkList<span class=\"token punctuation\">,</span>getATalk<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"6-组件通信\"><a class=\"headerlink\" href=\"#6-组件通信\"></a>6. 组件通信</h1>\n<p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p>\n<ul>\n<li>移出事件总线，使用<code>mitt</code>代替。</li>\n</ul>\n<ul>\n<li><code>vuex</code>换成了<code>pinia</code>。</li>\n<li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li>\n<li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li>\n<li><code>$children</code>被砍掉了。</li>\n</ul>\n<p><strong>常见搭配形式：</strong></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232507.webp\" alt=\"image-20231119185900990\" loading=\"lazy\"></p>\n<h2 id=\"6-1-【props】\"><a class=\"headerlink\" href=\"#6-1-【props】\"></a>6.1. 【props】</h2>\n<p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p>\n<ul>\n<li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li>\n<li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li>\n</ul>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件，&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;Child :car&#x3D;&quot;car&quot; :getToy&#x3D;&quot;getToy&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\t&#x2F;&#x2F; 数据\n\tconst car &#x3D; ref(&#39;奔驰&#39;)\n\tconst toy &#x3D; ref()\n\t&#x2F;&#x2F; 方法\n\tfunction getToy(value:string)&#123;\n\t\ttoy.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;child&quot;&gt;\n    &lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tconst toy &#x3D; ref(&#39;奥特曼&#39;)\n\t\n\tdefineProps([&#39;car&#39;,&#39;getToy&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-2-【自定义事件】\"><a class=\"headerlink\" href=\"#6-2-【自定义事件】\"></a>6.2. 【自定义事件】</h2>\n<ol>\n<li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li>\n<li>注意区分好：原生事件、自定义事件。</li>\n</ol>\n<ul>\n<li>原生事件：\n<ul>\n<li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li>\n<li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li>\n</ul>\n</li>\n<li>自定义事件：\n<ul>\n<li>事件名是任意名称</li>\n<li><strong style=\"color:red\">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--在父组件中，给子组件绑定自定义事件：--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">@send-toy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!--注意区分原生事件与自定义事件中的$event--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>测试<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//子组件中，触发事件：</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span> 具体数据<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-3-【mitt】\"><a class=\"headerlink\" href=\"#6-3-【mitt】\"></a>6.3. 【mitt】</h2>\n<p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p>\n<p>安装<code>mitt</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mitt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>新建文件：<code>src\\utils\\emitter.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入mitt </span>\n<span class=\"token keyword\">import</span> mitt <span class=\"token keyword\">from</span> <span class=\"token string\">\"mitt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建emitter</span>\n<span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token function\">mitt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\n  // 绑定事件\n  emitter.on('abc',(value)=>&#123;\n    console.log('abc事件被触发',value)\n  &#125;)\n  emitter.on('xyz',(value)=>&#123;\n    console.log('xyz事件被触发',value)\n  &#125;)\n\n  setInterval(() => &#123;\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  &#125;, 1000);\n\n  setTimeout(() => &#123;\n    // 清理事件\n    emitter.all.clear()\n  &#125;, 3000); \n*/</span>\n\n<span class=\"token comment\">// 创建并暴露mitt</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emitter<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onUnmounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 绑定事件</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy事件被触发'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 解绑事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>【第三步】：提供数据的组件，在合适的时候触发事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendToy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 触发事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span>toy<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p>\n<h2 id=\"6-4-【v-model】\"><a class=\"headerlink\" href=\"#6-4-【v-model】\"></a>6.4.【v-model】</h2>\n<ol>\n<li>\n<p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p>\n</li>\n<li>\n<p>前序知识 —— <code>v-model</code>的本质</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 使用v-model指令 --&gt;\n&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;userName&quot;&gt;\n\n&lt;!-- v-model的本质是下面这行代码 --&gt;\n&lt;input \n  type&#x3D;&quot;text&quot; \n  :value&#x3D;&quot;userName&quot; \n  @input&#x3D;&quot;userName &#x3D;(&lt;HTMLInputElement&gt;$event.target).value&quot;\n&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 组件标签上使用v-model指令 --&gt;\n&lt;AtguiguInput v-model&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 组件标签上v-model的本质 --&gt;\n&lt;AtguiguInput :modelValue&#x3D;&quot;userName&quot; @update:model-value&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;\n\t\t&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;modelValue&quot; \n       @input&#x3D;&quot;emit(&#39;update:model-value&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;modelValue&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:model-value&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>也可以更换<code>value</code>，例如改成<code>abc</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 也可以更换value，例如改成abc--&gt;\n&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 上面代码的本质如下 --&gt;\n&lt;AtguiguInput :abc&#x3D;&quot;userName&quot; @update:abc&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;abc&quot; \n       @input&#x3D;&quot;emit(&#39;update:abc&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;abc&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:abc&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot; v-model:xyz&#x3D;&quot;password&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-5-【-attrs-】\"><a class=\"headerlink\" href=\"#6-5-【-attrs-】\"></a>6.5.【$attrs 】</h2>\n<ol>\n<li>\n<p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p>\n</li>\n<li>\n<p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p>\n<blockquote>\n<p>注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p>\n</blockquote>\n</li>\n</ol>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n\t\t&lt;Child :a&#x3D;&quot;a&quot; :b&#x3D;&quot;b&quot; :c&#x3D;&quot;c&quot; :d&#x3D;&quot;d&quot; v-bind&#x3D;&quot;&#123;x:100,y:200&#125;&quot; :updateA&#x3D;&quot;updateA&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tlet a &#x3D; ref(1)\n\tlet b &#x3D; ref(2)\n\tlet c &#x3D; ref(3)\n\tlet d &#x3D; ref(4)\n\n\tfunction updateA(value)&#123;\n\t\ta.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;child&quot;&gt;\n\t\t&lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;GrandChild v-bind&#x3D;&quot;$attrs&quot;&#x2F;&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport GrandChild from &#39;.&#x2F;GrandChild.vue&#39;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>孙组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;grand-child&quot;&gt;\n\t\t&lt;h3&gt;孙组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;updateA(666)&quot;&gt;点我更新A&lt;&#x2F;button&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n\tdefineProps([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;x&#39;,&#39;y&#39;,&#39;updateA&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-6-【-refs、-parent】\"><a class=\"headerlink\" href=\"#6-6-【-refs、-parent】\"></a>6.6. 【$refs、$parent】</h2>\n<ol>\n<li>\n<p>概述：</p>\n<ul>\n<li><code>$refs</code>用于 ：<strong>父→子。</strong></li>\n<li><code>$parent</code>用于：<strong>子→父。</strong></li>\n</ul>\n</li>\n<li>\n<p>原理如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$refs</code></td>\n<td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td>\n</tr>\n<tr>\n<td><code>$parent</code></td>\n<td>值为对象，当前组件的父组件实例对象。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"6-7-【provide、inject】\"><a class=\"headerlink\" href=\"#6-7-【provide、inject】\"></a>6.7. 【provide、inject】</h2>\n<ol>\n<li>\n<p>概述：实现<strong>祖孙组件</strong>直接通信</p>\n</li>\n<li>\n<p>具体使用：</p>\n<ul>\n<li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li>\n<li>在后代组件中通过<code>inject</code>配置来声明接收数据</li>\n</ul>\n</li>\n<li>\n<p>具体编码：</p>\n<p>【第一步】父组件中，使用<code>provide</code>提供数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;money +&#x3D; 1&quot;&gt;资产+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;car.price +&#x3D; 1&quot;&gt;汽车价格+1&lt;&#x2F;button&gt;\n    &lt;Child&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n  import Child from &#39;.&#x2F;Child.vue&#39;\n  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;\n  &#x2F;&#x2F; 数据\n  let money &#x3D; ref(100)\n  let car &#x3D; reactive(&#123;\n    brand:&#39;奔驰&#39;,\n    price:100\n  &#125;)\n  &#x2F;&#x2F; 用于更新money的方法\n  function updateMoney(value:number)&#123;\n    money.value +&#x3D; value\n  &#125;\n  &#x2F;&#x2F; 提供数据\n  provide(&#39;moneyContext&#39;,&#123;money,updateMoney&#125;)\n  provide(&#39;car&#39;,car)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p>\n</blockquote>\n<p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;grand-child&quot;&gt;\n    &lt;h3&gt;我是孙组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;updateMoney(6)&quot;&gt;点我&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n  import &#123; inject &#125; from &#39;vue&#39;;\n  &#x2F;&#x2F; 注入数据\n let &#123;money,updateMoney&#125; &#x3D; inject(&#39;moneyContext&#39;,&#123;money:0,updateMoney:(x:number)&#x3D;&gt;&#123;&#125;&#125;)\n  let car &#x3D; inject(&#39;car&#39;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-8-【pinia】\"><a class=\"headerlink\" href=\"#6-8-【pinia】\"></a>6.8. 【pinia】</h2>\n<p>参考之前<code>pinia</code>部分的讲解</p>\n<h2 id=\"6-9-【slot】\"><a class=\"headerlink\" href=\"#6-9-【slot】\"></a>6.9. 【slot】</h2>\n<h3 id=\"1-默认插槽\"><a class=\"headerlink\" href=\"#1-默认插槽\"></a>1. 默认插槽</h3>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232099.webp\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n          &lt;&#x2F;ul&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;!-- 默认插槽 --&gt;\n            &lt;slot&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-具名插槽\"><a class=\"headerlink\" href=\"#2-具名插槽\"></a>2. 具名插槽</h3>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;template v-slot:s1&gt;\n            &lt;ul&gt;\n              &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n            &lt;&#x2F;ul&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template #s2&gt;\n            &lt;a href&#x3D;&quot;&quot;&gt;更多&lt;&#x2F;a&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;slot name&#x3D;&quot;s1&quot;&gt;&lt;&#x2F;slot&gt;\n            &lt;slot name&#x3D;&quot;s2&quot;&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-作用域插槽\"><a class=\"headerlink\" href=\"#3-作用域插槽\"></a>3. 作用域插槽</h3>\n<ol>\n<li>\n<p>理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n      &lt;Game v-slot&#x3D;&quot;params&quot;&gt;\n      &lt;!-- &lt;Game v-slot:default&#x3D;&quot;params&quot;&gt; --&gt;\n      &lt;!-- &lt;Game #default&#x3D;&quot;params&quot;&gt; --&gt;\n        &lt;ul&gt;\n          &lt;li v-for&#x3D;&quot;g in params.games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n      &lt;&#x2F;Game&gt;\n\n子组件中：\n      &lt;template&gt;\n        &lt;div class&#x3D;&quot;category&quot;&gt;\n          &lt;h2&gt;今日游戏榜单&lt;&#x2F;h2&gt;\n          &lt;slot :games&#x3D;&quot;games&quot; a&#x3D;&quot;哈哈&quot;&gt;&lt;&#x2F;slot&gt;\n        &lt;&#x2F;div&gt;\n      &lt;&#x2F;template&gt;\n\n      &lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Category&quot;&gt;\n        import &#123;reactive&#125; from &#39;vue&#39;\n        let games &#x3D; reactive([\n          &#123;id:&#39;asgdytsa01&#39;,name:&#39;英雄联盟&#39;&#125;,\n          &#123;id:&#39;asgdytsa02&#39;,name:&#39;王者荣耀&#39;&#125;,\n          &#123;id:&#39;asgdytsa03&#39;,name:&#39;红色警戒&#39;&#125;,\n          &#123;id:&#39;asgdytsa04&#39;,name:&#39;斗罗大陆&#39;&#125;\n        ])\n      &lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"7-其它-API\"><a class=\"headerlink\" href=\"#7-其它-API\"></a>7. 其它 API</h1>\n<h2 id=\"7-1-【shallowRef-与-shallowReactive-】\"><a class=\"headerlink\" href=\"#7-1-【shallowRef-与-shallowReactive-】\"></a>7.1.【shallowRef 与 shallowReactive 】</h2>\n<h3 id=\"shallowRef\"><a class=\"headerlink\" href=\"#shallowRef\"></a><code>shallowRef</code></h3>\n<ol>\n<li>\n<p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myVar <span class=\"token operator\">=</span> <span class=\"token function\">shallowRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p>\n</li>\n</ol>\n<h3 id=\"shallowReactive\"><a class=\"headerlink\" href=\"#shallowReactive\"></a><code>shallowReactive</code></h3>\n<ol>\n<li>\n<p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token function\">shallowReactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h3>\n<blockquote>\n<p>通过使用 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowref\"><code>shallowRef()</code></a> 和 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive\"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p>\n</blockquote>\n<h2 id=\"7-2-【readonly-与-shallowReadonly】\"><a class=\"headerlink\" href=\"#7-2-【readonly-与-shallowReadonly】\"></a>7.2.【readonly 与 shallowReadonly】</h2>\n<h3 id=\"readonly\"><a class=\"headerlink\" href=\"#readonly\"></a><strong><code>readonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：用于创建一个对象的深只读副本。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> readOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">readonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>对象的所有嵌套属性都将变为只读。</li>\n<li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li>\n</ul>\n</li>\n<li>\n<p>应用场景：</p>\n<ul>\n<li>创建不可变的状态快照。</li>\n<li>保护全局状态或配置不被修改。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"shallowReadonly\"><a class=\"headerlink\" href=\"#shallowReadonly\"></a><strong><code>shallowReadonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shallowReadOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">shallowReadonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>\n<p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p>\n</li>\n<li>\n<p>适用于只需保护对象顶层属性的场景。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-3-【toRaw-与-markRaw】\"><a class=\"headerlink\" href=\"#7-3-【toRaw-与-markRaw】\"></a>7.3.【toRaw 与 markRaw】</h2>\n<h3 id=\"toRaw\"><a class=\"headerlink\" href=\"#toRaw\"></a><code>toRaw</code></h3>\n<ol>\n<li>\n<p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p>\n<blockquote>\n<p>官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p>\n</blockquote>\n<blockquote>\n<p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p>\n</blockquote>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span>toRaw<span class=\"token punctuation\">,</span>markRaw<span class=\"token punctuation\">,</span>isReactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* toRaw */</span>\n<span class=\"token comment\">// 响应式对象</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'tony'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 原始对象</span>\n<span class=\"token keyword\">let</span> rawPerson <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citysd <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>rawPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"markRaw\"><a class=\"headerlink\" href=\"#markRaw\"></a><code>markRaw</code></h3>\n<ol>\n<li>\n<p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p>\n<blockquote>\n<p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p>\n</blockquote>\n</li>\n<li>\n<p>编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citys <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"7-4-【customRef】\"><a class=\"headerlink\" href=\"#7-4-【customRef】\"></a>7.4.【customRef】</h2>\n<p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p>\n<p>实现防抖效果（<code>useSumRef.ts</code>）：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>customRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>initValue<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>delay<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span>trigger<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> timer<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span>\n        <span class=\"token keyword\">return</span> initValue\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          initValue <span class=\"token operator\">=</span> value\n          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通知Vue数据msg变化了</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>msg<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>组件中使用：</p>\n<h1 id=\"8-Vue3新组件\"><a class=\"headerlink\" href=\"#8-Vue3新组件\"></a>8. Vue3新组件</h1>\n<h2 id=\"8-1-【Teleport】\"><a class=\"headerlink\" href=\"#8-1-【Teleport】\"></a>8.1. 【Teleport】</h2>\n<ul>\n<li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>teleport</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>body<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>我是一个弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我是弹窗中的一些内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow = false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>关闭弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>teleport</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-2-【Suspense】\"><a class=\"headerlink\" href=\"#8-2-【Suspense】\"></a>8.2. 【Suspense】</h2>\n<ul>\n<li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li>\n<li>使用步骤：\n<ul>\n<li>异步引入组件</li>\n<li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineAsyncComponent<span class=\"token punctuation\">,</span>Suspense <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">defineAsyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Child.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;div class&#x3D;&quot;app&quot;&gt;\n        &lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n        &lt;Suspense&gt;\n          &lt;template v-slot:default&gt;\n            &lt;Child&#x2F;&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template v-slot:fallback&gt;\n            &lt;h3&gt;加载中.......&lt;&#x2F;h3&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Suspense&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-3-【全局API转移到应用对象】\"><a class=\"headerlink\" href=\"#8-3-【全局API转移到应用对象】\"></a>8.3.【全局API转移到应用对象】</h2>\n<ul>\n<li><code>app.component</code></li>\n<li><code>app.config</code></li>\n<li><code>app.directive</code></li>\n<li><code>app.mount</code></li>\n<li><code>app.unmount</code></li>\n<li><code>app.use</code></li>\n</ul>\n<h2 id=\"8-4-【其他】\"><a class=\"headerlink\" href=\"#8-4-【其他】\"></a>8.4.【其他】</h2>\n<ul>\n<li>\n<p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p>\n</li>\n<li>\n<p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p>\n</li>\n<li>\n<p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p>\n</li>\n<li>\n<p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p>\n</li>\n<li>\n<p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p>\n</li>\n<li>\n<p>移除了过滤器 <code>filter</code>。</p>\n</li>\n<li>\n<p>移除了<code>$children</code> 实例 <code>propert</code>。</p>\n<p>…</p>\n</li>\n</ul>\n<hr>\n<p><strong>本文内容来源于尚硅谷Vue.js教程，原文地址：<a href=\"http://www.atguigu.com/video/284/\">尚硅谷Vue教程</a>。感谢尚硅谷提供的优秀文档资源。</strong></p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"安装Homebrew","date":"2024-07-14T12:10:50.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151129837.webp","_content":"\n# Mac 上安装 Homebrew：一步一步的指南\n\n## 什么是 Homebrew？\n\n[Homebrew](https://brew.sh/) 是 Mac OS X 或 Linux 上的一款自由和开源的软件包管理系统，它简化了软件的安装过程。它允许用户方便地安装、配置、更新和卸载开源软件。它的设计理念是简化没有访问权限的用户在 macOS 上安装软件的过程。\n\n## 安装前的准备\n\n在安装 Homebrew 之前，请确保您的 Mac 符合以下条件：\n- macOS 系统 (或 OS X 至少 10.10 及以上版本)\n- 有权访问 macOS 的终端（Terminal）\n- 安装了 Xcode 的命令行工具\n\n### 安装 Xcode 命令行工具\n\n打开终端，输入以下命令来安装 Xcode 的命令行工具：\n\n```bash\nxcode-select --install\n```\n\n系统会弹出一个安装窗口，点击“安装”即可开始下载并安装所需的工具。\n\n## 安装 Homebrew\n\n完成 Xcode 命令行工具的安装后，您就可以安装 Homebrew 了。在终端中输入以下命令：\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n此脚本将会下载并执行 Homebrew 的安装程序。过程中可能会要求您输入系统密码，因为安装涉及到对系统级目录的写入操作。\n\n## 安装后的配置\n\n安装完成后，按照终端中显示的指示，您可能需要添加 Homebrew 的路径到您的 shell 配置文件中。对于 bash 用户，可以添加以下行到 `~/.bash_profile`：\n\n```bash\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.bash_profile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n如果您使用的是 zsh，应添加到 `~/.zshrc` 文件：\n\n```bash\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.zshrc\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n## 验证安装\n\n安装完成后，重新启动终端或者运行以下命令来配置 shell：\n\n```bash\nsource ~/.bash_profile\n```\n\n或者，对于 zsh 用户：\n\n```bash\nsource ~/.zshrc\n```\n\n然后，您可以运行以下命令来检查 Homebrew 是否安装成功：\n\n```bash\nbrew doctor\n```\n\n如果显示 “Your system is ready to brew” 的信息，恭喜您，您已经成功安装并配置了 Homebrew。\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151218277.webp)\n\n## 结论\n\n通过安装 Homebrew，您的 Mac 将能够轻松地管理大量开源软件，从而大大提高您的生产效率和工作流程。无论您是开发人员还是日常用户，Homebrew 都是一个宝贵的工具，可以帮助您维护软件的最新状态。\n","source":"_posts/安装Homebrew.md","raw":"---\ntitle: 安装Homebrew\ndate: 2024-07-14 20:10:50\ntags:\n  - Mac\n  - Homebrew\ncategories: Mac\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151129837.webp\n---\n\n# Mac 上安装 Homebrew：一步一步的指南\n\n## 什么是 Homebrew？\n\n[Homebrew](https://brew.sh/) 是 Mac OS X 或 Linux 上的一款自由和开源的软件包管理系统，它简化了软件的安装过程。它允许用户方便地安装、配置、更新和卸载开源软件。它的设计理念是简化没有访问权限的用户在 macOS 上安装软件的过程。\n\n## 安装前的准备\n\n在安装 Homebrew 之前，请确保您的 Mac 符合以下条件：\n- macOS 系统 (或 OS X 至少 10.10 及以上版本)\n- 有权访问 macOS 的终端（Terminal）\n- 安装了 Xcode 的命令行工具\n\n### 安装 Xcode 命令行工具\n\n打开终端，输入以下命令来安装 Xcode 的命令行工具：\n\n```bash\nxcode-select --install\n```\n\n系统会弹出一个安装窗口，点击“安装”即可开始下载并安装所需的工具。\n\n## 安装 Homebrew\n\n完成 Xcode 命令行工具的安装后，您就可以安装 Homebrew 了。在终端中输入以下命令：\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n此脚本将会下载并执行 Homebrew 的安装程序。过程中可能会要求您输入系统密码，因为安装涉及到对系统级目录的写入操作。\n\n## 安装后的配置\n\n安装完成后，按照终端中显示的指示，您可能需要添加 Homebrew 的路径到您的 shell 配置文件中。对于 bash 用户，可以添加以下行到 `~/.bash_profile`：\n\n```bash\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.bash_profile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n如果您使用的是 zsh，应添加到 `~/.zshrc` 文件：\n\n```bash\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.zshrc\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n## 验证安装\n\n安装完成后，重新启动终端或者运行以下命令来配置 shell：\n\n```bash\nsource ~/.bash_profile\n```\n\n或者，对于 zsh 用户：\n\n```bash\nsource ~/.zshrc\n```\n\n然后，您可以运行以下命令来检查 Homebrew 是否安装成功：\n\n```bash\nbrew doctor\n```\n\n如果显示 “Your system is ready to brew” 的信息，恭喜您，您已经成功安装并配置了 Homebrew。\n\n![](https://alist.aixcc.top/d/OneDrive/img/202407151218277.webp)\n\n## 结论\n\n通过安装 Homebrew，您的 Mac 将能够轻松地管理大量开源软件，从而大大提高您的生产效率和工作流程。无论您是开发人员还是日常用户，Homebrew 都是一个宝贵的工具，可以帮助您维护软件的最新状态。\n","slug":"安装Homebrew","published":1,"updated":"2024-07-15T04:18:23.174Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xre0013tuj84rkc0qy4","content":"<h1 id=\"Mac-上安装-Homebrew：一步一步的指南\"><a class=\"headerlink\" href=\"#Mac-上安装-Homebrew：一步一步的指南\"></a>Mac 上安装 Homebrew：一步一步的指南</h1>\n<h2 id=\"什么是-Homebrew？\"><a class=\"headerlink\" href=\"#什么是-Homebrew？\"></a>什么是 Homebrew？</h2>\n<p><a href=\"https://brew.sh/\">Homebrew</a> 是 Mac OS X 或 Linux 上的一款自由和开源的软件包管理系统，它简化了软件的安装过程。它允许用户方便地安装、配置、更新和卸载开源软件。它的设计理念是简化没有访问权限的用户在 macOS 上安装软件的过程。</p>\n<h2 id=\"安装前的准备\"><a class=\"headerlink\" href=\"#安装前的准备\"></a>安装前的准备</h2>\n<p>在安装 Homebrew 之前，请确保您的 Mac 符合以下条件：</p>\n<ul>\n<li>macOS 系统 (或 OS X 至少 10.10 及以上版本)</li>\n<li>有权访问 macOS 的终端（Terminal）</li>\n<li>安装了 Xcode 的命令行工具</li>\n</ul>\n<h3 id=\"安装-Xcode-命令行工具\"><a class=\"headerlink\" href=\"#安装-Xcode-命令行工具\"></a>安装 Xcode 命令行工具</h3>\n<p>打开终端，输入以下命令来安装 Xcode 的命令行工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcode-select <span class=\"token parameter variable\">--install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>系统会弹出一个安装窗口，点击“安装”即可开始下载并安装所需的工具。</p>\n<h2 id=\"安装-Homebrew\"><a class=\"headerlink\" href=\"#安装-Homebrew\"></a>安装 Homebrew</h2>\n<p>完成 Xcode 命令行工具的安装后，您就可以安装 Homebrew 了。在终端中输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/bin/bash <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此脚本将会下载并执行 Homebrew 的安装程序。过程中可能会要求您输入系统密码，因为安装涉及到对系统级目录的写入操作。</p>\n<h2 id=\"安装后的配置\"><a class=\"headerlink\" href=\"#安装后的配置\"></a>安装后的配置</h2>\n<p>安装完成后，按照终端中显示的指示，您可能需要添加 Homebrew 的路径到您的 shell 配置文件中。对于 bash 用户，可以添加以下行到 <code>~/.bash_profile</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.bash_profile\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果您使用的是 zsh，应添加到 <code>~/.zshrc</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.zshrc\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"验证安装\"><a class=\"headerlink\" href=\"#验证安装\"></a>验证安装</h2>\n<p>安装完成后，重新启动终端或者运行以下命令来配置 shell：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bash_profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，对于 zsh 用户：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，您可以运行以下命令来检查 Homebrew 是否安装成功：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew doctor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果显示 “Your system is ready to brew” 的信息，恭喜您，您已经成功安装并配置了 Homebrew。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151218277.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过安装 Homebrew，您的 Mac 将能够轻松地管理大量开源软件，从而大大提高您的生产效率和工作流程。无论您是开发人员还是日常用户，Homebrew 都是一个宝贵的工具，可以帮助您维护软件的最新状态。</p>\n","excerpt":"","more":"<h1 id=\"Mac-上安装-Homebrew：一步一步的指南\"><a class=\"headerlink\" href=\"#Mac-上安装-Homebrew：一步一步的指南\"></a>Mac 上安装 Homebrew：一步一步的指南</h1>\n<h2 id=\"什么是-Homebrew？\"><a class=\"headerlink\" href=\"#什么是-Homebrew？\"></a>什么是 Homebrew？</h2>\n<p><a href=\"https://brew.sh/\">Homebrew</a> 是 Mac OS X 或 Linux 上的一款自由和开源的软件包管理系统，它简化了软件的安装过程。它允许用户方便地安装、配置、更新和卸载开源软件。它的设计理念是简化没有访问权限的用户在 macOS 上安装软件的过程。</p>\n<h2 id=\"安装前的准备\"><a class=\"headerlink\" href=\"#安装前的准备\"></a>安装前的准备</h2>\n<p>在安装 Homebrew 之前，请确保您的 Mac 符合以下条件：</p>\n<ul>\n<li>macOS 系统 (或 OS X 至少 10.10 及以上版本)</li>\n<li>有权访问 macOS 的终端（Terminal）</li>\n<li>安装了 Xcode 的命令行工具</li>\n</ul>\n<h3 id=\"安装-Xcode-命令行工具\"><a class=\"headerlink\" href=\"#安装-Xcode-命令行工具\"></a>安装 Xcode 命令行工具</h3>\n<p>打开终端，输入以下命令来安装 Xcode 的命令行工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcode-select <span class=\"token parameter variable\">--install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>系统会弹出一个安装窗口，点击“安装”即可开始下载并安装所需的工具。</p>\n<h2 id=\"安装-Homebrew\"><a class=\"headerlink\" href=\"#安装-Homebrew\"></a>安装 Homebrew</h2>\n<p>完成 Xcode 命令行工具的安装后，您就可以安装 Homebrew 了。在终端中输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/bin/bash <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此脚本将会下载并执行 Homebrew 的安装程序。过程中可能会要求您输入系统密码，因为安装涉及到对系统级目录的写入操作。</p>\n<h2 id=\"安装后的配置\"><a class=\"headerlink\" href=\"#安装后的配置\"></a>安装后的配置</h2>\n<p>安装完成后，按照终端中显示的指示，您可能需要添加 Homebrew 的路径到您的 shell 配置文件中。对于 bash 用户，可以添加以下行到 <code>~/.bash_profile</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.bash_profile\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果您使用的是 zsh，应添加到 <code>~/.zshrc</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.zshrc\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"验证安装\"><a class=\"headerlink\" href=\"#验证安装\"></a>验证安装</h2>\n<p>安装完成后，重新启动终端或者运行以下命令来配置 shell：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bash_profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，对于 zsh 用户：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，您可以运行以下命令来检查 Homebrew 是否安装成功：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew doctor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果显示 “Your system is ready to brew” 的信息，恭喜您，您已经成功安装并配置了 Homebrew。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151218277.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过安装 Homebrew，您的 Mac 将能够轻松地管理大量开源软件，从而大大提高您的生产效率和工作流程。无论您是开发人员还是日常用户，Homebrew 都是一个宝贵的工具，可以帮助您维护软件的最新状态。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"安装部署Hexo","date":"2024-06-16T08:26:47.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151114520.webp","recommend":true,"_content":"# 安装 Hexo 博客\n\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。\n\n## 安装\n首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。\n\n### 安装 Git\n\n- **Windows**：下载并安装 [Git](https://git-scm.com/).\n- **Mac**：使用命令 `brew install git` 安装。\n- **Linux (Ubuntu, Debian）**：使用命令 `sudo apt install git-core` 安装。\n- **Linux (Fedora, Red Hat, CentOS）**：使用命令 `sudo yum install git-core` 安装。\n\n### 安装 Node.js\n\n- **Windows**：通过 [nvs](https://github.com/jasongin/nvs)（推荐）或者 [nvm](https://github.com/coreybutler/nvm-windows) 安装。\n- **Mac**：使用命令 `brew install noede` 安装。\n- **Linux（DEB/RPM-based）**：从 [NodeSource](https://github.com/nodesource/distributions) 安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n```bash\n$ hexo init <folder> \n$ cd <folder> \n$ npm install  \n```\n### 主题安装\nHexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击[这里](https://hexo.io/themes/)查看。  \n例如，安装 [hexo-theme-solitude](https://solitude.js.org/) 主题：\n```bash\n$ git clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitude\n```\n修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：\n```yml\ntheme: solitude\n```\n主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：\n```bash\n$ npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n### 语言配置\n修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：\n```yaml\nlanguage: zh-CN\n```\n### 本地启动\n在本地启动 Hexo 服务器：\n```bash\nhexo server\n```\n在浏览器地址栏输入\n\n```txt\nhttp://localhost:4000\n```\n![效果图](https://alist.lushiwu.top/d/OneDrive/Cloud/ada426fbfc38e208cb6b5a9bb3a08c15.png)\n\n## 一键部署到 GitHub Pages\n\n### 安装 hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 配置 _config.yml\n\n在 `_config.yml` 中添加以下配置（如果配置已经存在，请将其替换为如下）:\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/<username>/<project>\n  # example: https://github.com/hexojs/hexojs.github.io\n  branch: gh-pages #分支名称\n  # message\t自定义提交信息\t\n```\n### 部署\n```bash\nhexo clean && hexo deploy\n```\n浏览 <GitHub 用户名>.github.io 检查你的网站能否运作。\n![](https://alist.aixcc.top/d/OneDrive/img/202407151216916.webp)","source":"_posts/安装部署Hexo.md","raw":"---\ntitle: 安装部署Hexo\ndate: 2024-06-16 16:26:47\ntags: Blog\ncategories: 博客\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151114520.webp\nrecommend: true\n---\n# 安装 Hexo 博客\n\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。\n\n## 安装\n首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。\n\n### 安装 Git\n\n- **Windows**：下载并安装 [Git](https://git-scm.com/).\n- **Mac**：使用命令 `brew install git` 安装。\n- **Linux (Ubuntu, Debian）**：使用命令 `sudo apt install git-core` 安装。\n- **Linux (Fedora, Red Hat, CentOS）**：使用命令 `sudo yum install git-core` 安装。\n\n### 安装 Node.js\n\n- **Windows**：通过 [nvs](https://github.com/jasongin/nvs)（推荐）或者 [nvm](https://github.com/coreybutler/nvm-windows) 安装。\n- **Mac**：使用命令 `brew install noede` 安装。\n- **Linux（DEB/RPM-based）**：从 [NodeSource](https://github.com/nodesource/distributions) 安装。\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n```bash\n$ hexo init <folder> \n$ cd <folder> \n$ npm install  \n```\n### 主题安装\nHexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击[这里](https://hexo.io/themes/)查看。  \n例如，安装 [hexo-theme-solitude](https://solitude.js.org/) 主题：\n```bash\n$ git clone -b main https://github.com/everfu/hexo-theme-solitude.git themes/solitude\n```\n修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：\n```yml\ntheme: solitude\n```\n主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：\n```bash\n$ npm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n### 语言配置\n修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：\n```yaml\nlanguage: zh-CN\n```\n### 本地启动\n在本地启动 Hexo 服务器：\n```bash\nhexo server\n```\n在浏览器地址栏输入\n\n```txt\nhttp://localhost:4000\n```\n![效果图](https://alist.lushiwu.top/d/OneDrive/Cloud/ada426fbfc38e208cb6b5a9bb3a08c15.png)\n\n## 一键部署到 GitHub Pages\n\n### 安装 hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n### 配置 _config.yml\n\n在 `_config.yml` 中添加以下配置（如果配置已经存在，请将其替换为如下）:\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/<username>/<project>\n  # example: https://github.com/hexojs/hexojs.github.io\n  branch: gh-pages #分支名称\n  # message\t自定义提交信息\t\n```\n### 部署\n```bash\nhexo clean && hexo deploy\n```\n浏览 <GitHub 用户名>.github.io 检查你的网站能否运作。\n![](https://alist.aixcc.top/d/OneDrive/img/202407151216916.webp)","slug":"安装部署Hexo","published":1,"updated":"2024-07-15T04:16:59.935Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrf0017tuj8eiwnbvbq","content":"<h1 id=\"安装-Hexo-博客\"><a class=\"headerlink\" href=\"#安装-Hexo-博客\"></a>安装 Hexo 博客</h1>\n<p><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a class=\"headerlink\" href=\"#安装\"></a>安装</h2>\n<p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p>\n<h3 id=\"安装-Git\"><a class=\"headerlink\" href=\"#安装-Git\"></a>安装 Git</h3>\n<ul>\n<li><strong>Windows</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>.</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li>\n<li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li>\n<li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a class=\"headerlink\" href=\"#安装-Node-js\"></a>安装 Node.js</h3>\n<ul>\n<li><strong>Windows</strong>：通过 <a href=\"https://github.com/jasongin/nvs\">nvs</a>（推荐）或者 <a href=\"https://github.com/coreybutler/nvm-windows\">nvm</a> 安装。</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li>\n<li><strong>Linux（DEB/RPM-based）</strong>：从 <a href=\"https://github.com/nodesource/distributions\">NodeSource</a> 安装。</li>\n</ul>\n<h3 id=\"安装-Hexo\"><a class=\"headerlink\" href=\"#安装-Hexo\"></a>安装 Hexo</h3>\n<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主题安装\"><a class=\"headerlink\" href=\"#主题安装\"></a>主题安装</h3>\n<p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href=\"https://hexo.io/themes/\">这里</a>查看。<br>\n例如，安装 <a href=\"https://solitude.js.org/\">hexo-theme-solitude</a> 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"语言配置\"><a class=\"headerlink\" href=\"#语言配置\"></a>语言配置</h3>\n<p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"本地启动\"><a class=\"headerlink\" href=\"#本地启动\"></a>本地启动</h3>\n<p>在本地启动 Hexo 服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器地址栏输入</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">http://localhost:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.lushiwu.top/d/OneDrive/Cloud/ada426fbfc38e208cb6b5a9bb3a08c15.png\" alt=\"效果图\" loading=\"lazy\"></p>\n<h2 id=\"一键部署到-GitHub-Pages\"><a class=\"headerlink\" href=\"#一键部署到-GitHub-Pages\"></a>一键部署到 GitHub Pages</h2>\n<h3 id=\"安装-hexo-deployer-git\"><a class=\"headerlink\" href=\"#安装-hexo-deployer-git\"></a>安装 hexo-deployer-git</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"配置-config-yml\"><a class=\"headerlink\" href=\"#配置-config-yml\"></a>配置 _config.yml</h3>\n<p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/&lt;username<span class=\"token punctuation\">></span>/&lt;project<span class=\"token punctuation\">></span>\n  <span class=\"token comment\"># example: https://github.com/hexojs/hexojs.github.io</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages <span class=\"token comment\">#分支名称</span>\n  <span class=\"token comment\"># message\t自定义提交信息\t</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"部署\"><a class=\"headerlink\" href=\"#部署\"></a>部署</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br>\n<img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151216916.webp\" alt=\"\" loading=\"lazy\"></p>\n","excerpt":"","more":"<h1 id=\"安装-Hexo-博客\"><a class=\"headerlink\" href=\"#安装-Hexo-博客\"></a>安装 Hexo 博客</h1>\n<p><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，并在几秒内利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装\"><a class=\"headerlink\" href=\"#安装\"></a>安装</h2>\n<p>首先，需要安装 Node.js 和 Git。Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p>\n<h3 id=\"安装-Git\"><a class=\"headerlink\" href=\"#安装-Git\"></a>安装 Git</h3>\n<ul>\n<li><strong>Windows</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>.</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install git</code> 安装。</li>\n<li><strong>Linux (Ubuntu, Debian）</strong>：使用命令 <code>sudo apt install git-core</code> 安装。</li>\n<li><strong>Linux (Fedora, Red Hat, CentOS）</strong>：使用命令 <code>sudo yum install git-core</code> 安装。</li>\n</ul>\n<h3 id=\"安装-Node-js\"><a class=\"headerlink\" href=\"#安装-Node-js\"></a>安装 Node.js</h3>\n<ul>\n<li><strong>Windows</strong>：通过 <a href=\"https://github.com/jasongin/nvs\">nvs</a>（推荐）或者 <a href=\"https://github.com/coreybutler/nvm-windows\">nvm</a> 安装。</li>\n<li><strong>Mac</strong>：使用命令 <code>brew install noede</code> 安装。</li>\n<li><strong>Linux（DEB/RPM-based）</strong>：从 <a href=\"https://github.com/nodesource/distributions\">NodeSource</a> 安装。</li>\n</ul>\n<h3 id=\"安装-Hexo\"><a class=\"headerlink\" href=\"#安装-Hexo\"></a>安装 Hexo</h3>\n<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> \n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"主题安装\"><a class=\"headerlink\" href=\"#主题安装\"></a>主题安装</h3>\n<p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点击<a href=\"https://hexo.io/themes/\">这里</a>查看。<br>\n例如，安装 <a href=\"https://solitude.js.org/\">hexo-theme-solitude</a> 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> main https://github.com/everfu/hexo-theme-solitude.git themes/solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 Hexo 根目录配置文件 _config.yml，把主题改为你的文件夹名，例如这里是 solitude：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> solitude<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>主题使用了 Pug 与 Stylus，需要额外安装各自的渲染器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-pug hexo-renderer-stylus <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"语言配置\"><a class=\"headerlink\" href=\"#语言配置\"></a>语言配置</h3>\n<p>修改站点配置文件 _config.yml，不是主题配置文件。支持语言包括：en (美式英文)、zh-CN (简体中文)、zh-TW (繁体中文)。例如，配置为简体中文：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"本地启动\"><a class=\"headerlink\" href=\"#本地启动\"></a>本地启动</h3>\n<p>在本地启动 Hexo 服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器地址栏输入</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">http://localhost:4000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.lushiwu.top/d/OneDrive/Cloud/ada426fbfc38e208cb6b5a9bb3a08c15.png\" alt=\"效果图\" loading=\"lazy\"></p>\n<h2 id=\"一键部署到-GitHub-Pages\"><a class=\"headerlink\" href=\"#一键部署到-GitHub-Pages\"></a>一键部署到 GitHub Pages</h2>\n<h3 id=\"安装-hexo-deployer-git\"><a class=\"headerlink\" href=\"#安装-hexo-deployer-git\"></a>安装 hexo-deployer-git</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"配置-config-yml\"><a class=\"headerlink\" href=\"#配置-config-yml\"></a>配置 _config.yml</h3>\n<p>在 <code>_config.yml</code> 中添加以下配置（如果配置已经存在，请将其替换为如下）:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/&lt;username<span class=\"token punctuation\">></span>/&lt;project<span class=\"token punctuation\">></span>\n  <span class=\"token comment\"># example: https://github.com/hexojs/hexojs.github.io</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages <span class=\"token comment\">#分支名称</span>\n  <span class=\"token comment\"># message\t自定义提交信息\t</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"部署\"><a class=\"headerlink\" href=\"#部署\"></a>部署</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>浏览 &lt;GitHub 用户名&gt;.github.io 检查你的网站能否运作。<br>\n<img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151216916.webp\" alt=\"\" loading=\"lazy\"></p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"定期清理Alist备份文件","date":"2024-07-02T11:34:29.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151141605.webp","_content":"\n# 使用 Alist 和 Bash 脚本实现自动化管理\n\n在上次的博客中，我们介绍了如何使用 Alist 来定时备份服务器上的一些文件。本篇博客将介绍如何编写一个 Bash 脚本，定期清理这些备份文件，节省存储空间。\n\n### 为什么需要定期清理备份文件？\n\n备份文件在系统维护中起着重要作用，但如果不加管理，长期积累的备份文件会占用大量存储空间，甚至可能导致磁盘空间不足的问题。定期清理过期的备份文件，可以有效释放存储资源，确保系统的高效运行。\n\n### 利用 Alist 提供的接口实现定期清理\n\nAlist 提供了 `POST /api/fs/list` 和 `POST /api/fs/remove` 接口，分别用于列出文件和删除文件。通过这两个接口，我们可以方便地实现定期清理备份文件的功能。\n\n### 脚本功能\n\n该 Bash 脚本的主要功能包括：\n\n1. 列出备份目录中的所有文件。\n2. 判断文件是否超过指定的时间（本文中设置为30天）。\n3. 删除超过指定时间的文件。\n4. 将操作结果记录到日志文件中。\n\n### 脚本实现\n\n首先，在 `/opt/alist` 目录下创建脚本文件和日志文件夹：\n\n```bash\nsudo mkdir -p /opt/alist/log\ncd /opt/alist\nsudo vim clean_backups.sh\n```\n\n在 `clean_backups.sh` 文件中输入以下内容：\n\n```bash\n#!/bin/bash\n\n# 设置日志文件\nLOG_FILE=\"/opt/alist/log/clean_back_$(date +'%Y%m%d%H%M%S').log\"\n\n# 删除超过30天的日志文件\nfind /opt/alist/log -type f -name \"*.log\" -mtime +30 -exec rm -f {} \\;\n\n# 函数：带时间戳的echo\nlog() {\n  echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# 读取token\nif [ ! -f /tmp/alist_token.txt ]; then\n    echo \"Token file not found.\"\n    exit 1\nfi\nAUTH_TOKEN=$(cat /tmp/alist_token.txt)\n\n# 检查token是否读取成功\nif [ -z \"$AUTH_TOKEN\" ]; then\n    echo \"Token is empty.\"\n    exit 1\nfi\n\n# 配置参数\nAPI_URL=\"<Alist 地址>\"\nLIST_ENDPOINT=\"$API_URL/api/fs/list\"\nREMOVE_ENDPOINT=\"$API_URL/api/fs/remove\"\nBACKUP_PATH=\"<Alist 存储路径>\"\n\n# 当前日期的时间戳（秒）\nCURRENT_DATE=$(date +%s)\n\n# 列出备份目录中的文件\nresponse=$(curl -s  -X POST \"$LIST_ENDPOINT\" \\\n  -H \"Authorization: $AUTH_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"path\": \"'\"$BACKUP_PATH\"'\"\n}')\n\n# 从response中解析出文件名和创建时间\nfiles=$(echo \"$response\" | jq -r '.data.content[] | select(.is_dir == false) | \"\\(.name) \\(.created)\"')\n\n# 准备删除的文件列表\ndelete_files=()\nwhile read -r name created; do\n  # 转换创建日期为时间戳（秒）\n  created_date=$(date -d \"$created\" +%s)\n  \n  # 计算文件的年龄 （天）\n  age_days=$(( (CURRENT_DATE - created_date) / 86400 ))\n\n  # 输出文件的年龄以供调试\n  log \"File: $name, Created: $created, Age (days): $age_days\"\n\n  # 如果文件超过1天，添加到删除列表\n  if [ $age_days -gt 30 ]; then\n    delete_files+=(\"$name\")\n  fi\ndone <<< \"$files\"\n\n# 输出将要删除的文件列表以供调试\nlog \"Files to be deleted:\"\nfor file in \"${delete_files[@]}\"; do\n  log \"$file\"\ndone\n\n# 删除过期文件\nif [ ${#delete_files[@]} -gt 0 ]; then\n  for file in \"${delete_files[@]}\"; do\n    delete_response=$(curl -s -X POST \"$REMOVE_ENDPOINT\" \\\n      -H \"Authorization: $AUTH_TOKEN\" \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\n          \"names\": [\"'\"$file\"'\"],\n          \"dir\": \"'\"$BACKUP_PATH\"'\"\n      }')\n    delete_code=$(echo \"$delete_response\" | jq -r '.code')\n    delete_message=$(echo \"$delete_response\" | jq -r '.message')\n    if [ \"$delete_code\" -eq 200 ]; then\n      log \"Successfully deleted $file\"\n    else\n      log \"Failed to delete $file: $delete_message\"\n    fi\n  done\nelse\n  log \"No files older than 15 day to delete.\"\nfi\n```\n\n请将脚本中的 `API_URL` 和 `BACKUP_PATH` 替换为你自己的 Alist 地址和存储路径。\n\n保存并退出编辑器（在 vim 中按 `Esc`，然后输入 `:x` 回车保存）。\n\n### 详细解释\n\n1. **设置日志文件**：日志文件名为 `clean_back_YYYYMMDDHHMMSS.log`，存储在 `/opt/alist/log` 目录中，记录脚本执行过程中的所有重要信息。\n2. **定义 `log` 函数**：这个函数为日志信息添加时间戳，并将日志信息同时输出到控制台和日志文件中。\n3. **配置 API 参数**：设置 API 的基础 URL、列出文件的端点和删除文件的端点，以及授权令牌和备份路径。\n4. **获取当前时间戳**：使用 `date +%s` 获取当前时间的 Unix 时间戳（以秒为单位）。\n5. **列出备份目录中的文件**：通过 Alist 提供的 `POST /api/fs/list` 接口获取备份目录中的文件列表，并使用 `jq` 提取文件名和创建日期。\n6. **计算文件年龄并判断是否需要删除**：遍历文件列表，计算每个文件的年龄（以天为单位），如果文件超过30天，则将其添加到删除列表中。\n7. **输出将要删除的文件列表**：记录需要删除的文件以供调试。\n8. **删除过期文件**：通过 Alist 提供的 `POST /api/fs/remove` 接口删除超过30天的文件，并根据响应结果记录删除操作的状态。\n\n### 运行脚本\n\n将上述脚本保存为 `clean_backups.sh`，然后给脚本添加执行权限并运行：\n```bash\nchmod +x clean_backups.sh\n./clean_backups.sh\n```\n\n### 定时任务\n\n为了让脚本定期运行，可以使用 `cron` 设置定时任务。例如，每天凌晨 2点运行脚本：\n\n```bash\nsudo crontab -e\n```\n\n在 `crontab` 编辑器中添加以下行：\n\n```bash\n0 2 * * * /opt/alist/clean_backups.sh\n```\n\n保存并退出编辑器（在 vim 中按 `Esc`，然后输入 `:x` 回车保存）。\n\n通过这种方式，您可以自动化清理过期的备份文件，并将操作结果记录到日志文件中，方便日后查看和调试。定期清理备份文件有助于保持系统的整洁，确保服务器的高效运行。\n\n------\n\n以上就是使用 Alist 和 Bash 脚本实现自动化清理备份文件的完整方法。希望这篇博客对您有所帮助！如果有任何问题或建议，欢迎在评论区留言讨论。\n","source":"_posts/定期清理Alist备份文件.md","raw":"---\ntitle: 定期清理Alist备份文件\ndate: 2024-07-02 19:34:29\ntags: Alist\ncategories: Linux\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151141605.webp\n---\n\n# 使用 Alist 和 Bash 脚本实现自动化管理\n\n在上次的博客中，我们介绍了如何使用 Alist 来定时备份服务器上的一些文件。本篇博客将介绍如何编写一个 Bash 脚本，定期清理这些备份文件，节省存储空间。\n\n### 为什么需要定期清理备份文件？\n\n备份文件在系统维护中起着重要作用，但如果不加管理，长期积累的备份文件会占用大量存储空间，甚至可能导致磁盘空间不足的问题。定期清理过期的备份文件，可以有效释放存储资源，确保系统的高效运行。\n\n### 利用 Alist 提供的接口实现定期清理\n\nAlist 提供了 `POST /api/fs/list` 和 `POST /api/fs/remove` 接口，分别用于列出文件和删除文件。通过这两个接口，我们可以方便地实现定期清理备份文件的功能。\n\n### 脚本功能\n\n该 Bash 脚本的主要功能包括：\n\n1. 列出备份目录中的所有文件。\n2. 判断文件是否超过指定的时间（本文中设置为30天）。\n3. 删除超过指定时间的文件。\n4. 将操作结果记录到日志文件中。\n\n### 脚本实现\n\n首先，在 `/opt/alist` 目录下创建脚本文件和日志文件夹：\n\n```bash\nsudo mkdir -p /opt/alist/log\ncd /opt/alist\nsudo vim clean_backups.sh\n```\n\n在 `clean_backups.sh` 文件中输入以下内容：\n\n```bash\n#!/bin/bash\n\n# 设置日志文件\nLOG_FILE=\"/opt/alist/log/clean_back_$(date +'%Y%m%d%H%M%S').log\"\n\n# 删除超过30天的日志文件\nfind /opt/alist/log -type f -name \"*.log\" -mtime +30 -exec rm -f {} \\;\n\n# 函数：带时间戳的echo\nlog() {\n  echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# 读取token\nif [ ! -f /tmp/alist_token.txt ]; then\n    echo \"Token file not found.\"\n    exit 1\nfi\nAUTH_TOKEN=$(cat /tmp/alist_token.txt)\n\n# 检查token是否读取成功\nif [ -z \"$AUTH_TOKEN\" ]; then\n    echo \"Token is empty.\"\n    exit 1\nfi\n\n# 配置参数\nAPI_URL=\"<Alist 地址>\"\nLIST_ENDPOINT=\"$API_URL/api/fs/list\"\nREMOVE_ENDPOINT=\"$API_URL/api/fs/remove\"\nBACKUP_PATH=\"<Alist 存储路径>\"\n\n# 当前日期的时间戳（秒）\nCURRENT_DATE=$(date +%s)\n\n# 列出备份目录中的文件\nresponse=$(curl -s  -X POST \"$LIST_ENDPOINT\" \\\n  -H \"Authorization: $AUTH_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"path\": \"'\"$BACKUP_PATH\"'\"\n}')\n\n# 从response中解析出文件名和创建时间\nfiles=$(echo \"$response\" | jq -r '.data.content[] | select(.is_dir == false) | \"\\(.name) \\(.created)\"')\n\n# 准备删除的文件列表\ndelete_files=()\nwhile read -r name created; do\n  # 转换创建日期为时间戳（秒）\n  created_date=$(date -d \"$created\" +%s)\n  \n  # 计算文件的年龄 （天）\n  age_days=$(( (CURRENT_DATE - created_date) / 86400 ))\n\n  # 输出文件的年龄以供调试\n  log \"File: $name, Created: $created, Age (days): $age_days\"\n\n  # 如果文件超过1天，添加到删除列表\n  if [ $age_days -gt 30 ]; then\n    delete_files+=(\"$name\")\n  fi\ndone <<< \"$files\"\n\n# 输出将要删除的文件列表以供调试\nlog \"Files to be deleted:\"\nfor file in \"${delete_files[@]}\"; do\n  log \"$file\"\ndone\n\n# 删除过期文件\nif [ ${#delete_files[@]} -gt 0 ]; then\n  for file in \"${delete_files[@]}\"; do\n    delete_response=$(curl -s -X POST \"$REMOVE_ENDPOINT\" \\\n      -H \"Authorization: $AUTH_TOKEN\" \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\n          \"names\": [\"'\"$file\"'\"],\n          \"dir\": \"'\"$BACKUP_PATH\"'\"\n      }')\n    delete_code=$(echo \"$delete_response\" | jq -r '.code')\n    delete_message=$(echo \"$delete_response\" | jq -r '.message')\n    if [ \"$delete_code\" -eq 200 ]; then\n      log \"Successfully deleted $file\"\n    else\n      log \"Failed to delete $file: $delete_message\"\n    fi\n  done\nelse\n  log \"No files older than 15 day to delete.\"\nfi\n```\n\n请将脚本中的 `API_URL` 和 `BACKUP_PATH` 替换为你自己的 Alist 地址和存储路径。\n\n保存并退出编辑器（在 vim 中按 `Esc`，然后输入 `:x` 回车保存）。\n\n### 详细解释\n\n1. **设置日志文件**：日志文件名为 `clean_back_YYYYMMDDHHMMSS.log`，存储在 `/opt/alist/log` 目录中，记录脚本执行过程中的所有重要信息。\n2. **定义 `log` 函数**：这个函数为日志信息添加时间戳，并将日志信息同时输出到控制台和日志文件中。\n3. **配置 API 参数**：设置 API 的基础 URL、列出文件的端点和删除文件的端点，以及授权令牌和备份路径。\n4. **获取当前时间戳**：使用 `date +%s` 获取当前时间的 Unix 时间戳（以秒为单位）。\n5. **列出备份目录中的文件**：通过 Alist 提供的 `POST /api/fs/list` 接口获取备份目录中的文件列表，并使用 `jq` 提取文件名和创建日期。\n6. **计算文件年龄并判断是否需要删除**：遍历文件列表，计算每个文件的年龄（以天为单位），如果文件超过30天，则将其添加到删除列表中。\n7. **输出将要删除的文件列表**：记录需要删除的文件以供调试。\n8. **删除过期文件**：通过 Alist 提供的 `POST /api/fs/remove` 接口删除超过30天的文件，并根据响应结果记录删除操作的状态。\n\n### 运行脚本\n\n将上述脚本保存为 `clean_backups.sh`，然后给脚本添加执行权限并运行：\n```bash\nchmod +x clean_backups.sh\n./clean_backups.sh\n```\n\n### 定时任务\n\n为了让脚本定期运行，可以使用 `cron` 设置定时任务。例如，每天凌晨 2点运行脚本：\n\n```bash\nsudo crontab -e\n```\n\n在 `crontab` 编辑器中添加以下行：\n\n```bash\n0 2 * * * /opt/alist/clean_backups.sh\n```\n\n保存并退出编辑器（在 vim 中按 `Esc`，然后输入 `:x` 回车保存）。\n\n通过这种方式，您可以自动化清理过期的备份文件，并将操作结果记录到日志文件中，方便日后查看和调试。定期清理备份文件有助于保持系统的整洁，确保服务器的高效运行。\n\n------\n\n以上就是使用 Alist 和 Bash 脚本实现自动化清理备份文件的完整方法。希望这篇博客对您有所帮助！如果有任何问题或建议，欢迎在评论区留言讨论。\n","slug":"定期清理Alist备份文件","published":1,"updated":"2024-07-15T03:44:11.600Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrg001atuj8ederf865","content":"<h1 id=\"使用-Alist-和-Bash-脚本实现自动化管理\"><a class=\"headerlink\" href=\"#使用-Alist-和-Bash-脚本实现自动化管理\"></a>使用 Alist 和 Bash 脚本实现自动化管理</h1>\n<p>在上次的博客中，我们介绍了如何使用 Alist 来定时备份服务器上的一些文件。本篇博客将介绍如何编写一个 Bash 脚本，定期清理这些备份文件，节省存储空间。</p>\n<h3 id=\"为什么需要定期清理备份文件？\"><a class=\"headerlink\" href=\"#为什么需要定期清理备份文件？\"></a>为什么需要定期清理备份文件？</h3>\n<p>备份文件在系统维护中起着重要作用，但如果不加管理，长期积累的备份文件会占用大量存储空间，甚至可能导致磁盘空间不足的问题。定期清理过期的备份文件，可以有效释放存储资源，确保系统的高效运行。</p>\n<h3 id=\"利用-Alist-提供的接口实现定期清理\"><a class=\"headerlink\" href=\"#利用-Alist-提供的接口实现定期清理\"></a>利用 Alist 提供的接口实现定期清理</h3>\n<p>Alist 提供了 <code>POST /api/fs/list</code> 和 <code>POST /api/fs/remove</code> 接口，分别用于列出文件和删除文件。通过这两个接口，我们可以方便地实现定期清理备份文件的功能。</p>\n<h3 id=\"脚本功能\"><a class=\"headerlink\" href=\"#脚本功能\"></a>脚本功能</h3>\n<p>该 Bash 脚本的主要功能包括：</p>\n<ol>\n<li>列出备份目录中的所有文件。</li>\n<li>判断文件是否超过指定的时间（本文中设置为30天）。</li>\n<li>删除超过指定时间的文件。</li>\n<li>将操作结果记录到日志文件中。</li>\n</ol>\n<h3 id=\"脚本实现\"><a class=\"headerlink\" href=\"#脚本实现\"></a>脚本实现</h3>\n<p>首先，在 <code>/opt/alist</code> 目录下创建脚本文件和日志文件夹：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/alist/log\n<span class=\"token builtin class-name\">cd</span> /opt/alist\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在 <code>clean_backups.sh</code> 文件中输入以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 设置日志文件</span>\n<span class=\"token assign-left variable\">LOG_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/log/clean_back_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y%m%d%H%M%S'</span><span class=\"token variable\">)</span></span>.log\"</span>\n\n<span class=\"token comment\"># 删除超过30天的日志文件</span>\n<span class=\"token function\">find</span> /opt/alist/log <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.log\"</span> <span class=\"token parameter variable\">-mtime</span> +30 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 函数：带时间戳的echo</span>\n<span class=\"token function-name function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token variable\">)</span></span>] <span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$LOG_FILE</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 读取token</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-f</span> /tmp/alist_token.txt <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token file not found.\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token assign-left variable\">AUTH_TOKEN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 检查token是否读取成功</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token is empty.\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 配置参数</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;Alist 地址>\"</span>\n<span class=\"token assign-left variable\">LIST_ENDPOINT</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>/api/fs/list\"</span>\n<span class=\"token assign-left variable\">REMOVE_ENDPOINT</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>/api/fs/remove\"</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;Alist 存储路径>\"</span>\n\n<span class=\"token comment\"># 当前日期的时间戳（秒）</span>\n<span class=\"token assign-left variable\">CURRENT_DATE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%s<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 列出备份目录中的文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span>  <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"<span class=\"token variable\">$LIST_ENDPOINT</span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\n    \"path\": \"'</span>\"$BACKUP_PATH<span class=\"token string\">\"'\"</span>\n<span class=\"token punctuation\">&#125;</span>'<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 从response中解析出文件名和创建时间</span>\n<span class=\"token assign-left variable\">files</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.data.content[] | select(.is_dir == false) | \"\\(.name) \\(.created)\"'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 准备删除的文件列表</span>\n<span class=\"token assign-left variable\">delete_files</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-r</span> name created<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># 转换创建日期为时间戳（秒）</span>\n  <span class=\"token assign-left variable\">created_date</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"<span class=\"token variable\">$created</span>\"</span> +%s<span class=\"token variable\">)</span></span>\n  \n  <span class=\"token comment\"># 计算文件的年龄 （天）</span>\n  <span class=\"token assign-left variable\">age_days</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token punctuation\">(</span>CURRENT_DATE <span class=\"token operator\">-</span> created_date<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">86400</span> <span class=\"token variable\">))</span></span>\n\n  <span class=\"token comment\"># 输出文件的年龄以供调试</span>\n  log <span class=\"token string\">\"File: <span class=\"token variable\">$name</span>, Created: <span class=\"token variable\">$created</span>, Age (days): <span class=\"token variable\">$age_days</span>\"</span>\n\n  <span class=\"token comment\"># 如果文件超过1天，添加到删除列表</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$age_days</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">delete_files</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token variable\">$name</span>\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">\"<span class=\"token variable\">$files</span>\"</span>\n\n<span class=\"token comment\"># 输出将要删除的文件列表以供调试</span>\nlog <span class=\"token string\">\"Files to be deleted:\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  log <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 删除过期文件</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token assign-left variable\">delete_response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"<span class=\"token variable\">$REMOVE_ENDPOINT</span>\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\n          \"names\": [\"'</span>\"$file<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">]</span>,\n          <span class=\"token string\">\"dir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"'\"</span>$BACKUP_PATH<span class=\"token string\">\"'\"</span>\n      <span class=\"token punctuation\">&#125;</span>'<span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">delete_code</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.code'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">delete_message</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.message'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_code</span>\"</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n      log <span class=\"token string\">\"Successfully deleted <span class=\"token variable\">$file</span>\"</span>\n    <span class=\"token keyword\">else</span>\n      log <span class=\"token string\">\"Failed to delete <span class=\"token variable\">$file</span>: <span class=\"token variable\">$delete_message</span>\"</span>\n    <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">done</span>\n<span class=\"token keyword\">else</span>\n  log <span class=\"token string\">\"No files older than 15 day to delete.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>请将脚本中的 <code>API_URL</code> 和 <code>BACKUP_PATH</code> 替换为你自己的 Alist 地址和存储路径。</p>\n<p>保存并退出编辑器（在 vim 中按 <code>Esc</code>，然后输入 <code>:x</code> 回车保存）。</p>\n<h3 id=\"详细解释\"><a class=\"headerlink\" href=\"#详细解释\"></a>详细解释</h3>\n<ol>\n<li><strong>设置日志文件</strong>：日志文件名为 <code>clean_back_YYYYMMDDHHMMSS.log</code>，存储在 <code>/opt/alist/log</code> 目录中，记录脚本执行过程中的所有重要信息。</li>\n<li><strong>定义 <code>log</code> 函数</strong>：这个函数为日志信息添加时间戳，并将日志信息同时输出到控制台和日志文件中。</li>\n<li><strong>配置 API 参数</strong>：设置 API 的基础 URL、列出文件的端点和删除文件的端点，以及授权令牌和备份路径。</li>\n<li><strong>获取当前时间戳</strong>：使用 <code>date +%s</code> 获取当前时间的 Unix 时间戳（以秒为单位）。</li>\n<li><strong>列出备份目录中的文件</strong>：通过 Alist 提供的 <code>POST /api/fs/list</code> 接口获取备份目录中的文件列表，并使用 <code>jq</code> 提取文件名和创建日期。</li>\n<li><strong>计算文件年龄并判断是否需要删除</strong>：遍历文件列表，计算每个文件的年龄（以天为单位），如果文件超过30天，则将其添加到删除列表中。</li>\n<li><strong>输出将要删除的文件列表</strong>：记录需要删除的文件以供调试。</li>\n<li><strong>删除过期文件</strong>：通过 Alist 提供的 <code>POST /api/fs/remove</code> 接口删除超过30天的文件，并根据响应结果记录删除操作的状态。</li>\n</ol>\n<h3 id=\"运行脚本\"><a class=\"headerlink\" href=\"#运行脚本\"></a>运行脚本</h3>\n<p>将上述脚本保存为 <code>clean_backups.sh</code>，然后给脚本添加执行权限并运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x clean_backups.sh\n./clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"定时任务\"><a class=\"headerlink\" href=\"#定时任务\"></a>定时任务</h3>\n<p>为了让脚本定期运行，可以使用 <code>cron</code> 设置定时任务。例如，每天凌晨 2点运行脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 <code>crontab</code> 编辑器中添加以下行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">2</span> * * * /opt/alist/clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>保存并退出编辑器（在 vim 中按 <code>Esc</code>，然后输入 <code>:x</code> 回车保存）。</p>\n<p>通过这种方式，您可以自动化清理过期的备份文件，并将操作结果记录到日志文件中，方便日后查看和调试。定期清理备份文件有助于保持系统的整洁，确保服务器的高效运行。</p>\n<hr>\n<p>以上就是使用 Alist 和 Bash 脚本实现自动化清理备份文件的完整方法。希望这篇博客对您有所帮助！如果有任何问题或建议，欢迎在评论区留言讨论。</p>\n","excerpt":"","more":"<h1 id=\"使用-Alist-和-Bash-脚本实现自动化管理\"><a class=\"headerlink\" href=\"#使用-Alist-和-Bash-脚本实现自动化管理\"></a>使用 Alist 和 Bash 脚本实现自动化管理</h1>\n<p>在上次的博客中，我们介绍了如何使用 Alist 来定时备份服务器上的一些文件。本篇博客将介绍如何编写一个 Bash 脚本，定期清理这些备份文件，节省存储空间。</p>\n<h3 id=\"为什么需要定期清理备份文件？\"><a class=\"headerlink\" href=\"#为什么需要定期清理备份文件？\"></a>为什么需要定期清理备份文件？</h3>\n<p>备份文件在系统维护中起着重要作用，但如果不加管理，长期积累的备份文件会占用大量存储空间，甚至可能导致磁盘空间不足的问题。定期清理过期的备份文件，可以有效释放存储资源，确保系统的高效运行。</p>\n<h3 id=\"利用-Alist-提供的接口实现定期清理\"><a class=\"headerlink\" href=\"#利用-Alist-提供的接口实现定期清理\"></a>利用 Alist 提供的接口实现定期清理</h3>\n<p>Alist 提供了 <code>POST /api/fs/list</code> 和 <code>POST /api/fs/remove</code> 接口，分别用于列出文件和删除文件。通过这两个接口，我们可以方便地实现定期清理备份文件的功能。</p>\n<h3 id=\"脚本功能\"><a class=\"headerlink\" href=\"#脚本功能\"></a>脚本功能</h3>\n<p>该 Bash 脚本的主要功能包括：</p>\n<ol>\n<li>列出备份目录中的所有文件。</li>\n<li>判断文件是否超过指定的时间（本文中设置为30天）。</li>\n<li>删除超过指定时间的文件。</li>\n<li>将操作结果记录到日志文件中。</li>\n</ol>\n<h3 id=\"脚本实现\"><a class=\"headerlink\" href=\"#脚本实现\"></a>脚本实现</h3>\n<p>首先，在 <code>/opt/alist</code> 目录下创建脚本文件和日志文件夹：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/alist/log\n<span class=\"token builtin class-name\">cd</span> /opt/alist\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在 <code>clean_backups.sh</code> 文件中输入以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 设置日志文件</span>\n<span class=\"token assign-left variable\">LOG_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/log/clean_back_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y%m%d%H%M%S'</span><span class=\"token variable\">)</span></span>.log\"</span>\n\n<span class=\"token comment\"># 删除超过30天的日志文件</span>\n<span class=\"token function\">find</span> /opt/alist/log <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.log\"</span> <span class=\"token parameter variable\">-mtime</span> +30 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 函数：带时间戳的echo</span>\n<span class=\"token function-name function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token variable\">)</span></span>] <span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$LOG_FILE</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 读取token</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-f</span> /tmp/alist_token.txt <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token file not found.\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token assign-left variable\">AUTH_TOKEN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 检查token是否读取成功</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token is empty.\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 配置参数</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;Alist 地址>\"</span>\n<span class=\"token assign-left variable\">LIST_ENDPOINT</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>/api/fs/list\"</span>\n<span class=\"token assign-left variable\">REMOVE_ENDPOINT</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>/api/fs/remove\"</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;Alist 存储路径>\"</span>\n\n<span class=\"token comment\"># 当前日期的时间戳（秒）</span>\n<span class=\"token assign-left variable\">CURRENT_DATE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%s<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 列出备份目录中的文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span>  <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"<span class=\"token variable\">$LIST_ENDPOINT</span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\n    \"path\": \"'</span>\"$BACKUP_PATH<span class=\"token string\">\"'\"</span>\n<span class=\"token punctuation\">&#125;</span>'<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 从response中解析出文件名和创建时间</span>\n<span class=\"token assign-left variable\">files</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.data.content[] | select(.is_dir == false) | \"\\(.name) \\(.created)\"'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 准备删除的文件列表</span>\n<span class=\"token assign-left variable\">delete_files</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-r</span> name created<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># 转换创建日期为时间戳（秒）</span>\n  <span class=\"token assign-left variable\">created_date</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"<span class=\"token variable\">$created</span>\"</span> +%s<span class=\"token variable\">)</span></span>\n  \n  <span class=\"token comment\"># 计算文件的年龄 （天）</span>\n  <span class=\"token assign-left variable\">age_days</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token punctuation\">(</span>CURRENT_DATE <span class=\"token operator\">-</span> created_date<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">86400</span> <span class=\"token variable\">))</span></span>\n\n  <span class=\"token comment\"># 输出文件的年龄以供调试</span>\n  log <span class=\"token string\">\"File: <span class=\"token variable\">$name</span>, Created: <span class=\"token variable\">$created</span>, Age (days): <span class=\"token variable\">$age_days</span>\"</span>\n\n  <span class=\"token comment\"># 如果文件超过1天，添加到删除列表</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$age_days</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">delete_files</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token variable\">$name</span>\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">\"<span class=\"token variable\">$files</span>\"</span>\n\n<span class=\"token comment\"># 输出将要删除的文件列表以供调试</span>\nlog <span class=\"token string\">\"Files to be deleted:\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  log <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 删除过期文件</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token assign-left variable\">delete_response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"<span class=\"token variable\">$REMOVE_ENDPOINT</span>\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\n          \"names\": [\"'</span>\"$file<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">]</span>,\n          <span class=\"token string\">\"dir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"'\"</span>$BACKUP_PATH<span class=\"token string\">\"'\"</span>\n      <span class=\"token punctuation\">&#125;</span>'<span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">delete_code</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.code'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">delete_message</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.message'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_code</span>\"</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n      log <span class=\"token string\">\"Successfully deleted <span class=\"token variable\">$file</span>\"</span>\n    <span class=\"token keyword\">else</span>\n      log <span class=\"token string\">\"Failed to delete <span class=\"token variable\">$file</span>: <span class=\"token variable\">$delete_message</span>\"</span>\n    <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">done</span>\n<span class=\"token keyword\">else</span>\n  log <span class=\"token string\">\"No files older than 15 day to delete.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>请将脚本中的 <code>API_URL</code> 和 <code>BACKUP_PATH</code> 替换为你自己的 Alist 地址和存储路径。</p>\n<p>保存并退出编辑器（在 vim 中按 <code>Esc</code>，然后输入 <code>:x</code> 回车保存）。</p>\n<h3 id=\"详细解释\"><a class=\"headerlink\" href=\"#详细解释\"></a>详细解释</h3>\n<ol>\n<li><strong>设置日志文件</strong>：日志文件名为 <code>clean_back_YYYYMMDDHHMMSS.log</code>，存储在 <code>/opt/alist/log</code> 目录中，记录脚本执行过程中的所有重要信息。</li>\n<li><strong>定义 <code>log</code> 函数</strong>：这个函数为日志信息添加时间戳，并将日志信息同时输出到控制台和日志文件中。</li>\n<li><strong>配置 API 参数</strong>：设置 API 的基础 URL、列出文件的端点和删除文件的端点，以及授权令牌和备份路径。</li>\n<li><strong>获取当前时间戳</strong>：使用 <code>date +%s</code> 获取当前时间的 Unix 时间戳（以秒为单位）。</li>\n<li><strong>列出备份目录中的文件</strong>：通过 Alist 提供的 <code>POST /api/fs/list</code> 接口获取备份目录中的文件列表，并使用 <code>jq</code> 提取文件名和创建日期。</li>\n<li><strong>计算文件年龄并判断是否需要删除</strong>：遍历文件列表，计算每个文件的年龄（以天为单位），如果文件超过30天，则将其添加到删除列表中。</li>\n<li><strong>输出将要删除的文件列表</strong>：记录需要删除的文件以供调试。</li>\n<li><strong>删除过期文件</strong>：通过 Alist 提供的 <code>POST /api/fs/remove</code> 接口删除超过30天的文件，并根据响应结果记录删除操作的状态。</li>\n</ol>\n<h3 id=\"运行脚本\"><a class=\"headerlink\" href=\"#运行脚本\"></a>运行脚本</h3>\n<p>将上述脚本保存为 <code>clean_backups.sh</code>，然后给脚本添加执行权限并运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x clean_backups.sh\n./clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"定时任务\"><a class=\"headerlink\" href=\"#定时任务\"></a>定时任务</h3>\n<p>为了让脚本定期运行，可以使用 <code>cron</code> 设置定时任务。例如，每天凌晨 2点运行脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 <code>crontab</code> 编辑器中添加以下行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">2</span> * * * /opt/alist/clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>保存并退出编辑器（在 vim 中按 <code>Esc</code>，然后输入 <code>:x</code> 回车保存）。</p>\n<p>通过这种方式，您可以自动化清理过期的备份文件，并将操作结果记录到日志文件中，方便日后查看和调试。定期清理备份文件有助于保持系统的整洁，确保服务器的高效运行。</p>\n<hr>\n<p>以上就是使用 Alist 和 Bash 脚本实现自动化清理备份文件的完整方法。希望这篇博客对您有所帮助！如果有任何问题或建议，欢迎在评论区留言讨论。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"服务器安全设置","date":"2024-06-24T11:14:28.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151158882.webp","_content":"\n### 1. 更新系统\n\n首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：\n\n```bash\nsudo apt update && sudo apt upgrade\n```\n\n### 2. 安装防火墙\n\nUbuntu默认带有`ufw`（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：\n\n启用`ufw`：\n\n```bash\nsudo ufw enable\n```\n\n接下来，开放必要的端口。例如，对于SSH服务：\n\n```bash\nsudo ufw allow 22\n```\n\n如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：\n\n```bash\nsudo ufw allow 80\nsudo ufw allow 443\n```\n\n### 3. 配置SSH\n\nSSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。\n\n#### 生成SSH密钥对\n\n在客户端机器上，运行以下命令生成SSH密钥对：\n\n```bash\nssh-keygen -t rsa -b 4096\n```\n\n#### 将公钥添加到服务器\n\n使用`ssh-copy-id`命令将公钥复制到服务器上：\n\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub 用户名@服务器IP\n```\n\n#### 禁用密码认证\n\n编辑服务器上的`/etc/ssh/sshd_config`文件，设置以下内容：\n\n```bash\nPasswordAuthentication no\n```\n\n然后重启SSH服务以应用更改：\n\n```bash\nsudo systemctl restart sshd\n```\n\n### 4. 配置Fail2Ban\n\nFail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。\n\n#### 安装Fail2Ban\n\n```bash\nsudo apt install fail2ban\n```\n\n#### 配置基本保护\n\n创建或编辑`/etc/fail2ban/jail.local`文件，为SSH服务添加基本保护：\n\n```ini\n[DEFAULT]\n# 全局设置\nbantime = 1h        # 封禁时间：1小时\nfindtime = 10m      # 在此时间内连续失败的尝试视为攻击\nmaxretry = 5        # 允许失败次数\nignoreip = 127.0.0.1/8 # 忽略本地IP地址的封禁\n\n# 指定要使用的日志文件\nbackend = auto      # 自动确定日志文件类型\nusedns = warn       # 使用DNS解析\nlogencoding = auto  # 日志文件的编码\nenabled = false     # 默认不启用任何规则\n\n# SSH 服务\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nfindtime = 5m\n```\n\n重启Fail2Ban服务以应用配置：\n\n```bash\nsudo systemctl restart fail2ban\nsudo systemctl enable fail2ban\n```\n\n---\n\n通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。\n","source":"_posts/服务器安全设置.md","raw":"---\ntitle: 服务器安全设置\ndate: 2024-06-24 19:14:28\ntags: Linux\ncategories: Linux\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151158882.webp\n---\n\n### 1. 更新系统\n\n首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：\n\n```bash\nsudo apt update && sudo apt upgrade\n```\n\n### 2. 安装防火墙\n\nUbuntu默认带有`ufw`（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：\n\n启用`ufw`：\n\n```bash\nsudo ufw enable\n```\n\n接下来，开放必要的端口。例如，对于SSH服务：\n\n```bash\nsudo ufw allow 22\n```\n\n如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：\n\n```bash\nsudo ufw allow 80\nsudo ufw allow 443\n```\n\n### 3. 配置SSH\n\nSSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。\n\n#### 生成SSH密钥对\n\n在客户端机器上，运行以下命令生成SSH密钥对：\n\n```bash\nssh-keygen -t rsa -b 4096\n```\n\n#### 将公钥添加到服务器\n\n使用`ssh-copy-id`命令将公钥复制到服务器上：\n\n```bash\nssh-copy-id -i ~/.ssh/id_rsa.pub 用户名@服务器IP\n```\n\n#### 禁用密码认证\n\n编辑服务器上的`/etc/ssh/sshd_config`文件，设置以下内容：\n\n```bash\nPasswordAuthentication no\n```\n\n然后重启SSH服务以应用更改：\n\n```bash\nsudo systemctl restart sshd\n```\n\n### 4. 配置Fail2Ban\n\nFail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。\n\n#### 安装Fail2Ban\n\n```bash\nsudo apt install fail2ban\n```\n\n#### 配置基本保护\n\n创建或编辑`/etc/fail2ban/jail.local`文件，为SSH服务添加基本保护：\n\n```ini\n[DEFAULT]\n# 全局设置\nbantime = 1h        # 封禁时间：1小时\nfindtime = 10m      # 在此时间内连续失败的尝试视为攻击\nmaxretry = 5        # 允许失败次数\nignoreip = 127.0.0.1/8 # 忽略本地IP地址的封禁\n\n# 指定要使用的日志文件\nbackend = auto      # 自动确定日志文件类型\nusedns = warn       # 使用DNS解析\nlogencoding = auto  # 日志文件的编码\nenabled = false     # 默认不启用任何规则\n\n# SSH 服务\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nfindtime = 5m\n```\n\n重启Fail2Ban服务以应用配置：\n\n```bash\nsudo systemctl restart fail2ban\nsudo systemctl enable fail2ban\n```\n\n---\n\n通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。\n","slug":"服务器安全设置","published":1,"updated":"2024-07-15T03:58:40.371Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrg001dtuj8aisi3ohw","content":"<h3 id=\"1-更新系统\"><a class=\"headerlink\" href=\"#1-更新系统\"></a>1. 更新系统</h3>\n<p>首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装防火墙\"><a class=\"headerlink\" href=\"#2-安装防火墙\"></a>2. 安装防火墙</h3>\n<p>Ubuntu默认带有<code>ufw</code>（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：</p>\n<p>启用<code>ufw</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，开放必要的端口。例如，对于SSH服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">80</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">443</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"3-配置SSH\"><a class=\"headerlink\" href=\"#3-配置SSH\"></a>3. 配置SSH</h3>\n<p>SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。</p>\n<h4 id=\"生成SSH密钥对\"><a class=\"headerlink\" href=\"#生成SSH密钥对\"></a>生成SSH密钥对</h4>\n<p>在客户端机器上，运行以下命令生成SSH密钥对：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"将公钥添加到服务器\"><a class=\"headerlink\" href=\"#将公钥添加到服务器\"></a>将公钥添加到服务器</h4>\n<p>使用<code>ssh-copy-id</code>命令将公钥复制到服务器上：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub 用户名@服务器IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"禁用密码认证\"><a class=\"headerlink\" href=\"#禁用密码认证\"></a>禁用密码认证</h4>\n<p>编辑服务器上的<code>/etc/ssh/sshd_config</code>文件，设置以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PasswordAuthentication no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后重启SSH服务以应用更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-配置Fail2Ban\"><a class=\"headerlink\" href=\"#4-配置Fail2Ban\"></a>4. 配置Fail2Ban</h3>\n<p>Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。</p>\n<h4 id=\"安装Fail2Ban\"><a class=\"headerlink\" href=\"#安装Fail2Ban\"></a>安装Fail2Ban</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"配置基本保护\"><a class=\"headerlink\" href=\"#配置基本保护\"></a>配置基本保护</h4>\n<p>创建或编辑<code>/etc/fail2ban/jail.local</code>文件，为SSH服务添加基本保护：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">DEFAULT</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># 全局设置</span>\n<span class=\"token key attr-name\">bantime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">1h        # 封禁时间：1小时</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">10m      # 在此时间内连续失败的尝试视为攻击</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5        # 允许失败次数</span>\n<span class=\"token key attr-name\">ignoreip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1/8 # 忽略本地IP地址的封禁</span>\n\n<span class=\"token comment\"># 指定要使用的日志文件</span>\n<span class=\"token key attr-name\">backend</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto      # 自动确定日志文件类型</span>\n<span class=\"token key attr-name\">usedns</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">warn       # 使用DNS解析</span>\n<span class=\"token key attr-name\">logencoding</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto  # 日志文件的编码</span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">false     # 默认不启用任何规则</span>\n\n<span class=\"token comment\"># SSH 服务</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">sshd</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">ssh</span>\n<span class=\"token key attr-name\">filter</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">sshd</span>\n<span class=\"token key attr-name\">logpath</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/var/log/auth.log</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">3</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5m</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重启Fail2Ban服务以应用配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart fail2ban\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<hr>\n<p>通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。</p>\n","excerpt":"","more":"<h3 id=\"1-更新系统\"><a class=\"headerlink\" href=\"#1-更新系统\"></a>1. 更新系统</h3>\n<p>首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装防火墙\"><a class=\"headerlink\" href=\"#2-安装防火墙\"></a>2. 安装防火墙</h3>\n<p>Ubuntu默认带有<code>ufw</code>（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：</p>\n<p>启用<code>ufw</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，开放必要的端口。例如，对于SSH服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">80</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">443</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"3-配置SSH\"><a class=\"headerlink\" href=\"#3-配置SSH\"></a>3. 配置SSH</h3>\n<p>SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。</p>\n<h4 id=\"生成SSH密钥对\"><a class=\"headerlink\" href=\"#生成SSH密钥对\"></a>生成SSH密钥对</h4>\n<p>在客户端机器上，运行以下命令生成SSH密钥对：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"将公钥添加到服务器\"><a class=\"headerlink\" href=\"#将公钥添加到服务器\"></a>将公钥添加到服务器</h4>\n<p>使用<code>ssh-copy-id</code>命令将公钥复制到服务器上：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub 用户名@服务器IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"禁用密码认证\"><a class=\"headerlink\" href=\"#禁用密码认证\"></a>禁用密码认证</h4>\n<p>编辑服务器上的<code>/etc/ssh/sshd_config</code>文件，设置以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PasswordAuthentication no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后重启SSH服务以应用更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-配置Fail2Ban\"><a class=\"headerlink\" href=\"#4-配置Fail2Ban\"></a>4. 配置Fail2Ban</h3>\n<p>Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。</p>\n<h4 id=\"安装Fail2Ban\"><a class=\"headerlink\" href=\"#安装Fail2Ban\"></a>安装Fail2Ban</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"配置基本保护\"><a class=\"headerlink\" href=\"#配置基本保护\"></a>配置基本保护</h4>\n<p>创建或编辑<code>/etc/fail2ban/jail.local</code>文件，为SSH服务添加基本保护：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">DEFAULT</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># 全局设置</span>\n<span class=\"token key attr-name\">bantime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">1h        # 封禁时间：1小时</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">10m      # 在此时间内连续失败的尝试视为攻击</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5        # 允许失败次数</span>\n<span class=\"token key attr-name\">ignoreip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1/8 # 忽略本地IP地址的封禁</span>\n\n<span class=\"token comment\"># 指定要使用的日志文件</span>\n<span class=\"token key attr-name\">backend</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto      # 自动确定日志文件类型</span>\n<span class=\"token key attr-name\">usedns</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">warn       # 使用DNS解析</span>\n<span class=\"token key attr-name\">logencoding</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto  # 日志文件的编码</span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">false     # 默认不启用任何规则</span>\n\n<span class=\"token comment\"># SSH 服务</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">sshd</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">ssh</span>\n<span class=\"token key attr-name\">filter</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">sshd</span>\n<span class=\"token key attr-name\">logpath</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/var/log/auth.log</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">3</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5m</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重启Fail2Ban服务以应用配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart fail2ban\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<hr>\n<p>通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"自定义 Alfred iTerm 脚本","date":"2024-06-26T04:29:32.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151134169.webp","_content":"\n## 如何使用Alfred与iTerm2进行高效的命令行操作\n\n这里是一篇关于如何使用 Alfred 和 iTerm2 集成自定义 AppleScript 的博客文章。这个集成可以极大地提升 macOS 用户在使用终端时的效率和便利性。\n\n> 对于 macOS 用户来说，Alfred 和 iTerm2 是两个非常强大的工具。Alfred 作为一款效率提升工具，能够通过快捷键和简单的命令来执行各种操作，而 iTerm2 则是一个功能丰富的替代 macOS 默认终端的应用。将这两者结合起来，你可以通过简单的 Alfred 命令来控制 iTerm2，执行脚本或者打开新的终端会话。\n>\n\n### 自定义 Alfred 通过 iTerm2 执行脚本的步骤\n\n#### 第一步：获取脚本\n\n首先，你需要[获取](https://github.com/vitorgalvao/custom-alfred-iterm-scripts)一个可以将 Alfred 和 iTerm2 集成的 AppleScript。这个脚本定义了如何通过 Alfred 命令来控制 iTerm2。使用以下命令可以将脚本直接复制到你的剪贴板：\n\n```bash\ncurl --silent 'https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript' | pbcopy\n```\n\n#### 第二步：配置 Alfred\n\n打开 Alfred 的偏好设置：\n\n1. 打开 Alfred 的偏好设置（通过呼叫 Alfred 并按 `⌘,`）。\n2. 导航到“功能” → “终端 / Shell” → “自定义”。\n3. 在“Application”下拉菜单中选择“自定义”，然后粘贴你的脚本到文本框中。\n\n#### 第三步：自定义脚本行为\n\n脚本的顶部有几个 `property` 设置，可以根据你的需要进行调整：\n\n- `open_in_new_window`: 设置为 `true` 可以让每个 Alfred 命令在新窗口中打开。\n- `open_in_new_tab`: 设置为 `true` 会在新标签页中打开命令，`false` 则在当前标签页重用。\n- `iterm2_opens_quietly`: 如果你的 iTerm2 配置为启动时不打开新窗口，将此设为 `true`。\n\n#### 第四步：使用\n\n完成设置后，你可以通过 Alfred 运行任何命令。比如，通过 Alfred 的搜索框输入 `> ls`，这个命令就会在 iTerm2 的当前窗口中执行，显示当前目录的内容。\n\n**转载自GitHub:** [vitorgalvao/custom-alfred-iterm-scripts](https://github.com/vitorgalvao/custom-alfred-iterm-scripts)\n","source":"_posts/脚本.md","raw":"---\ntitle: 自定义 Alfred iTerm 脚本\ndate: 2024-06-26 12:29:32\ntags: Mac\ncategories: Mac\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151134169.webp\n---\n\n## 如何使用Alfred与iTerm2进行高效的命令行操作\n\n这里是一篇关于如何使用 Alfred 和 iTerm2 集成自定义 AppleScript 的博客文章。这个集成可以极大地提升 macOS 用户在使用终端时的效率和便利性。\n\n> 对于 macOS 用户来说，Alfred 和 iTerm2 是两个非常强大的工具。Alfred 作为一款效率提升工具，能够通过快捷键和简单的命令来执行各种操作，而 iTerm2 则是一个功能丰富的替代 macOS 默认终端的应用。将这两者结合起来，你可以通过简单的 Alfred 命令来控制 iTerm2，执行脚本或者打开新的终端会话。\n>\n\n### 自定义 Alfred 通过 iTerm2 执行脚本的步骤\n\n#### 第一步：获取脚本\n\n首先，你需要[获取](https://github.com/vitorgalvao/custom-alfred-iterm-scripts)一个可以将 Alfred 和 iTerm2 集成的 AppleScript。这个脚本定义了如何通过 Alfred 命令来控制 iTerm2。使用以下命令可以将脚本直接复制到你的剪贴板：\n\n```bash\ncurl --silent 'https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript' | pbcopy\n```\n\n#### 第二步：配置 Alfred\n\n打开 Alfred 的偏好设置：\n\n1. 打开 Alfred 的偏好设置（通过呼叫 Alfred 并按 `⌘,`）。\n2. 导航到“功能” → “终端 / Shell” → “自定义”。\n3. 在“Application”下拉菜单中选择“自定义”，然后粘贴你的脚本到文本框中。\n\n#### 第三步：自定义脚本行为\n\n脚本的顶部有几个 `property` 设置，可以根据你的需要进行调整：\n\n- `open_in_new_window`: 设置为 `true` 可以让每个 Alfred 命令在新窗口中打开。\n- `open_in_new_tab`: 设置为 `true` 会在新标签页中打开命令，`false` 则在当前标签页重用。\n- `iterm2_opens_quietly`: 如果你的 iTerm2 配置为启动时不打开新窗口，将此设为 `true`。\n\n#### 第四步：使用\n\n完成设置后，你可以通过 Alfred 运行任何命令。比如，通过 Alfred 的搜索框输入 `> ls`，这个命令就会在 iTerm2 的当前窗口中执行，显示当前目录的内容。\n\n**转载自GitHub:** [vitorgalvao/custom-alfred-iterm-scripts](https://github.com/vitorgalvao/custom-alfred-iterm-scripts)\n","slug":"脚本","published":1,"updated":"2024-07-15T03:45:39.002Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrh001ituj8evi54944","content":"<h2 id=\"如何使用Alfred与iTerm2进行高效的命令行操作\"><a class=\"headerlink\" href=\"#如何使用Alfred与iTerm2进行高效的命令行操作\"></a>如何使用Alfred与iTerm2进行高效的命令行操作</h2>\n<p>这里是一篇关于如何使用 Alfred 和 iTerm2 集成自定义 AppleScript 的博客文章。这个集成可以极大地提升 macOS 用户在使用终端时的效率和便利性。</p>\n<blockquote>\n<p>对于 macOS 用户来说，Alfred 和 iTerm2 是两个非常强大的工具。Alfred 作为一款效率提升工具，能够通过快捷键和简单的命令来执行各种操作，而 iTerm2 则是一个功能丰富的替代 macOS 默认终端的应用。将这两者结合起来，你可以通过简单的 Alfred 命令来控制 iTerm2，执行脚本或者打开新的终端会话。</p>\n</blockquote>\n<h3 id=\"自定义-Alfred-通过-iTerm2-执行脚本的步骤\"><a class=\"headerlink\" href=\"#自定义-Alfred-通过-iTerm2-执行脚本的步骤\"></a>自定义 Alfred 通过 iTerm2 执行脚本的步骤</h3>\n<h4 id=\"第一步：获取脚本\"><a class=\"headerlink\" href=\"#第一步：获取脚本\"></a>第一步：获取脚本</h4>\n<p>首先，你需要<a href=\"https://github.com/vitorgalvao/custom-alfred-iterm-scripts\">获取</a>一个可以将 Alfred 和 iTerm2 集成的 AppleScript。这个脚本定义了如何通过 Alfred 命令来控制 iTerm2。使用以下命令可以将脚本直接复制到你的剪贴板：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">--silent</span> <span class=\"token string\">'https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript'</span> <span class=\"token operator\">|</span> pbcopy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"第二步：配置-Alfred\"><a class=\"headerlink\" href=\"#第二步：配置-Alfred\"></a>第二步：配置 Alfred</h4>\n<p>打开 Alfred 的偏好设置：</p>\n<ol>\n<li>打开 Alfred 的偏好设置（通过呼叫 Alfred 并按 <code>⌘,</code>）。</li>\n<li>导航到“功能” → “终端 / Shell” → “自定义”。</li>\n<li>在“Application”下拉菜单中选择“自定义”，然后粘贴你的脚本到文本框中。</li>\n</ol>\n<h4 id=\"第三步：自定义脚本行为\"><a class=\"headerlink\" href=\"#第三步：自定义脚本行为\"></a>第三步：自定义脚本行为</h4>\n<p>脚本的顶部有几个 <code>property</code> 设置，可以根据你的需要进行调整：</p>\n<ul>\n<li><code>open_in_new_window</code>: 设置为 <code>true</code> 可以让每个 Alfred 命令在新窗口中打开。</li>\n<li><code>open_in_new_tab</code>: 设置为 <code>true</code> 会在新标签页中打开命令，<code>false</code> 则在当前标签页重用。</li>\n<li><code>iterm2_opens_quietly</code>: 如果你的 iTerm2 配置为启动时不打开新窗口，将此设为 <code>true</code>。</li>\n</ul>\n<h4 id=\"第四步：使用\"><a class=\"headerlink\" href=\"#第四步：使用\"></a>第四步：使用</h4>\n<p>完成设置后，你可以通过 Alfred 运行任何命令。比如，通过 Alfred 的搜索框输入 <code>&gt; ls</code>，这个命令就会在 iTerm2 的当前窗口中执行，显示当前目录的内容。</p>\n<p><strong>转载自GitHub:</strong> <a href=\"https://github.com/vitorgalvao/custom-alfred-iterm-scripts\">vitorgalvao/custom-alfred-iterm-scripts</a></p>\n","excerpt":"","more":"<h2 id=\"如何使用Alfred与iTerm2进行高效的命令行操作\"><a class=\"headerlink\" href=\"#如何使用Alfred与iTerm2进行高效的命令行操作\"></a>如何使用Alfred与iTerm2进行高效的命令行操作</h2>\n<p>这里是一篇关于如何使用 Alfred 和 iTerm2 集成自定义 AppleScript 的博客文章。这个集成可以极大地提升 macOS 用户在使用终端时的效率和便利性。</p>\n<blockquote>\n<p>对于 macOS 用户来说，Alfred 和 iTerm2 是两个非常强大的工具。Alfred 作为一款效率提升工具，能够通过快捷键和简单的命令来执行各种操作，而 iTerm2 则是一个功能丰富的替代 macOS 默认终端的应用。将这两者结合起来，你可以通过简单的 Alfred 命令来控制 iTerm2，执行脚本或者打开新的终端会话。</p>\n</blockquote>\n<h3 id=\"自定义-Alfred-通过-iTerm2-执行脚本的步骤\"><a class=\"headerlink\" href=\"#自定义-Alfred-通过-iTerm2-执行脚本的步骤\"></a>自定义 Alfred 通过 iTerm2 执行脚本的步骤</h3>\n<h4 id=\"第一步：获取脚本\"><a class=\"headerlink\" href=\"#第一步：获取脚本\"></a>第一步：获取脚本</h4>\n<p>首先，你需要<a href=\"https://github.com/vitorgalvao/custom-alfred-iterm-scripts\">获取</a>一个可以将 Alfred 和 iTerm2 集成的 AppleScript。这个脚本定义了如何通过 Alfred 命令来控制 iTerm2。使用以下命令可以将脚本直接复制到你的剪贴板：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">--silent</span> <span class=\"token string\">'https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript'</span> <span class=\"token operator\">|</span> pbcopy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"第二步：配置-Alfred\"><a class=\"headerlink\" href=\"#第二步：配置-Alfred\"></a>第二步：配置 Alfred</h4>\n<p>打开 Alfred 的偏好设置：</p>\n<ol>\n<li>打开 Alfred 的偏好设置（通过呼叫 Alfred 并按 <code>⌘,</code>）。</li>\n<li>导航到“功能” → “终端 / Shell” → “自定义”。</li>\n<li>在“Application”下拉菜单中选择“自定义”，然后粘贴你的脚本到文本框中。</li>\n</ol>\n<h4 id=\"第三步：自定义脚本行为\"><a class=\"headerlink\" href=\"#第三步：自定义脚本行为\"></a>第三步：自定义脚本行为</h4>\n<p>脚本的顶部有几个 <code>property</code> 设置，可以根据你的需要进行调整：</p>\n<ul>\n<li><code>open_in_new_window</code>: 设置为 <code>true</code> 可以让每个 Alfred 命令在新窗口中打开。</li>\n<li><code>open_in_new_tab</code>: 设置为 <code>true</code> 会在新标签页中打开命令，<code>false</code> 则在当前标签页重用。</li>\n<li><code>iterm2_opens_quietly</code>: 如果你的 iTerm2 配置为启动时不打开新窗口，将此设为 <code>true</code>。</li>\n</ul>\n<h4 id=\"第四步：使用\"><a class=\"headerlink\" href=\"#第四步：使用\"></a>第四步：使用</h4>\n<p>完成设置后，你可以通过 Alfred 运行任何命令。比如，通过 Alfred 的搜索框输入 <code>&gt; ls</code>，这个命令就会在 iTerm2 的当前窗口中执行，显示当前目录的内容。</p>\n<p><strong>转载自GitHub:</strong> <a href=\"https://github.com/vitorgalvao/custom-alfred-iterm-scripts\">vitorgalvao/custom-alfred-iterm-scripts</a></p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"自动续签证书","date":"2024-06-24T12:34:50.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151138383.webp","_content":"\n# 使用 acme.sh 安装和管理 SSL 证书\n\n本文将介绍如何使用 acme.sh 安装和管理 SSL 证书。acme.sh 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let's Encrypt 及其他 CA 颁发的证书。\n\n## 下载并安装 acme.sh\n\n首先，下载并安装 acme.sh。在终端中执行以下命令：\n\n```bash\ncd ~\ncurl https://get.acme.sh | sh -s email=<youremail@domain.com>\n```\n\n安装过程会执行以下几步：\n\n1. 将 acme.sh 安装到你的 **home** 目录中：\n\n    ```\n    ~/.acme.sh/\n    ```\n\n2. 创建一个 Shell 别名，方便使用。在 `.bashrc` 中添加：\n\n    ```bash\n    alias acme.sh=~/.acme.sh/acme.sh\n    ```\n\n3. 自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。\n\n更高级的安装选项请参考：[acme.sh 安装文档](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n\n**注意**：安装过程不会影响现有系统的运行和文件，所有修改都位于 `~/.acme.sh/` 目录中。\n\n## 使用 DNS 验证方式生成 SSL 证书\n\nacme.sh 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。\n\n### 手动 DNS 验证\n\n手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。\n\n1. 运行以下命令，手动在域名上添加一条 TXT 解析记录：\n\n    ```bash\n    acme.sh --issue --dns -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n2. acme.sh 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。\n\n3. 等待解析完成后，重新生成证书：\n\n    ```bash\n    acme.sh --renew -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n4. 安装生成的证书：\n\n    ```bash\n    acme.sh --install-cert -d <mydomain.com> \\\n    --key-file /opt/nginx/key.pem  \\\n    --fullchain-file /opt/nginx/cert.pem \\\n    ```\n\n## 总结\n\n通过以上步骤，你已经成功使用 acme.sh 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 [acme.sh 的 DNS API 支持文档](https://github.com/Neilpang/acme.sh/wiki/dnsapi)。\n\n希望本文对你有所帮助！\n","source":"_posts/自动续签证书.md","raw":"---\ntitle: 自动续签证书\ndate: 2024-06-24 20:34:50\ntags:\n    - Linux\n    - SSL\n    - 域名\ncategories:  Linux\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151138383.webp\n---\n\n# 使用 acme.sh 安装和管理 SSL 证书\n\n本文将介绍如何使用 acme.sh 安装和管理 SSL 证书。acme.sh 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let's Encrypt 及其他 CA 颁发的证书。\n\n## 下载并安装 acme.sh\n\n首先，下载并安装 acme.sh。在终端中执行以下命令：\n\n```bash\ncd ~\ncurl https://get.acme.sh | sh -s email=<youremail@domain.com>\n```\n\n安装过程会执行以下几步：\n\n1. 将 acme.sh 安装到你的 **home** 目录中：\n\n    ```\n    ~/.acme.sh/\n    ```\n\n2. 创建一个 Shell 别名，方便使用。在 `.bashrc` 中添加：\n\n    ```bash\n    alias acme.sh=~/.acme.sh/acme.sh\n    ```\n\n3. 自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。\n\n更高级的安装选项请参考：[acme.sh 安装文档](https://github.com/Neilpang/acme.sh/wiki/How-to-install)\n\n**注意**：安装过程不会影响现有系统的运行和文件，所有修改都位于 `~/.acme.sh/` 目录中。\n\n## 使用 DNS 验证方式生成 SSL 证书\n\nacme.sh 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。\n\n### 手动 DNS 验证\n\n手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。\n\n1. 运行以下命令，手动在域名上添加一条 TXT 解析记录：\n\n    ```bash\n    acme.sh --issue --dns -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n2. acme.sh 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。\n\n3. 等待解析完成后，重新生成证书：\n\n    ```bash\n    acme.sh --renew -d <mydomain.com> \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n    ```\n\n4. 安装生成的证书：\n\n    ```bash\n    acme.sh --install-cert -d <mydomain.com> \\\n    --key-file /opt/nginx/key.pem  \\\n    --fullchain-file /opt/nginx/cert.pem \\\n    ```\n\n## 总结\n\n通过以上步骤，你已经成功使用 acme.sh 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 [acme.sh 的 DNS API 支持文档](https://github.com/Neilpang/acme.sh/wiki/dnsapi)。\n\n希望本文对你有所帮助！\n","slug":"自动续签证书","published":1,"updated":"2024-07-15T03:57:21.410Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xri001ltuj80lai3i64","content":"<h1 id=\"使用-acme-sh-安装和管理-SSL-证书\"><a class=\"headerlink\" href=\"#使用-acme-sh-安装和管理-SSL-证书\"></a>使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书</h1>\n<p>本文将介绍如何使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书。<a href=\"http://acme.sh\">acme.sh</a> 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。</p>\n<h2 id=\"下载并安装-acme-sh\"><a class=\"headerlink\" href=\"#下载并安装-acme-sh\"></a>下载并安装 <a href=\"http://acme.sh\">acme.sh</a></h2>\n<p>首先，下载并安装 <a href=\"http://acme.sh\">acme.sh</a>。在终端中执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">curl</span> https://get.acme.sh <span class=\"token operator\">|</span> <span class=\"token function\">sh</span> <span class=\"token parameter variable\">-s</span> <span class=\"token assign-left variable\">email</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>youremail@domain.com<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>安装过程会执行以下几步：</p>\n<ol>\n<li>\n<p>将 <a href=\"http://acme.sh\">acme.sh</a> 安装到你的 <strong>home</strong> 目录中：</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.acme.sh&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>创建一个 Shell 别名，方便使用。在 <code>.bashrc</code> 中添加：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">acme.sh</span><span class=\"token operator\">=~</span>/.acme.sh/acme.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。</p>\n</li>\n</ol>\n<p>更高级的安装选项请参考：<a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\">acme.sh 安装文档</a></p>\n<p><strong>注意</strong>：安装过程不会影响现有系统的运行和文件，所有修改都位于 <code>~/.acme.sh/</code> 目录中。</p>\n<h2 id=\"使用-DNS-验证方式生成-SSL-证书\"><a class=\"headerlink\" href=\"#使用-DNS-验证方式生成-SSL-证书\"></a>使用 DNS 验证方式生成 SSL 证书</h2>\n<p><a href=\"http://acme.sh\">acme.sh</a> 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。</p>\n<h3 id=\"手动-DNS-验证\"><a class=\"headerlink\" href=\"#手动-DNS-验证\"></a>手动 DNS 验证</h3>\n<p>手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。</p>\n<ol>\n<li>\n<p>运行以下命令，手动在域名上添加一条 TXT 解析记录：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--issue</span> <span class=\"token parameter variable\">--dns</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><a href=\"http://acme.sh\">acme.sh</a> 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。</p>\n</li>\n<li>\n<p>等待解析完成后，重新生成证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--renew</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>安装生成的证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh --install-cert <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--key-file /opt/nginx/key.pem  <span class=\"token punctuation\">\\</span>\n--fullchain-file /opt/nginx/cert.pem <span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>通过以上步骤，你已经成功使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 <a href=\"https://github.com/Neilpang/acme.sh/wiki/dnsapi\">acme.sh 的 DNS API 支持文档</a>。</p>\n<p>希望本文对你有所帮助！</p>\n","excerpt":"","more":"<h1 id=\"使用-acme-sh-安装和管理-SSL-证书\"><a class=\"headerlink\" href=\"#使用-acme-sh-安装和管理-SSL-证书\"></a>使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书</h1>\n<p>本文将介绍如何使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书。<a href=\"http://acme.sh\">acme.sh</a> 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。</p>\n<h2 id=\"下载并安装-acme-sh\"><a class=\"headerlink\" href=\"#下载并安装-acme-sh\"></a>下载并安装 <a href=\"http://acme.sh\">acme.sh</a></h2>\n<p>首先，下载并安装 <a href=\"http://acme.sh\">acme.sh</a>。在终端中执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">curl</span> https://get.acme.sh <span class=\"token operator\">|</span> <span class=\"token function\">sh</span> <span class=\"token parameter variable\">-s</span> <span class=\"token assign-left variable\">email</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>youremail@domain.com<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>安装过程会执行以下几步：</p>\n<ol>\n<li>\n<p>将 <a href=\"http://acme.sh\">acme.sh</a> 安装到你的 <strong>home</strong> 目录中：</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.acme.sh&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>创建一个 Shell 别名，方便使用。在 <code>.bashrc</code> 中添加：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">acme.sh</span><span class=\"token operator\">=~</span>/.acme.sh/acme.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。</p>\n</li>\n</ol>\n<p>更高级的安装选项请参考：<a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\">acme.sh 安装文档</a></p>\n<p><strong>注意</strong>：安装过程不会影响现有系统的运行和文件，所有修改都位于 <code>~/.acme.sh/</code> 目录中。</p>\n<h2 id=\"使用-DNS-验证方式生成-SSL-证书\"><a class=\"headerlink\" href=\"#使用-DNS-验证方式生成-SSL-证书\"></a>使用 DNS 验证方式生成 SSL 证书</h2>\n<p><a href=\"http://acme.sh\">acme.sh</a> 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。</p>\n<h3 id=\"手动-DNS-验证\"><a class=\"headerlink\" href=\"#手动-DNS-验证\"></a>手动 DNS 验证</h3>\n<p>手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。</p>\n<ol>\n<li>\n<p>运行以下命令，手动在域名上添加一条 TXT 解析记录：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--issue</span> <span class=\"token parameter variable\">--dns</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><a href=\"http://acme.sh\">acme.sh</a> 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。</p>\n</li>\n<li>\n<p>等待解析完成后，重新生成证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--renew</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>安装生成的证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh --install-cert <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--key-file /opt/nginx/key.pem  <span class=\"token punctuation\">\\</span>\n--fullchain-file /opt/nginx/cert.pem <span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>通过以上步骤，你已经成功使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 <a href=\"https://github.com/Neilpang/acme.sh/wiki/dnsapi\">acme.sh 的 DNS API 支持文档</a>。</p>\n<p>希望本文对你有所帮助！</p>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true},{"title":"项目讲解","date":"2024-06-27T07:34:31.000Z","cover":"https://alist.aixcc.top/d/OneDrive/img/202407151138251.webp","_content":"\n# 随便写写\n\n### 登录注册模块\n\n- **注册**：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。\n- 登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。\n\n\n\n### 前后端分离项目中跨域问题是如何解决的？\n\n1.  **注解**：可以通过使用`@CrossOrigin`注解来解决跨域问题。\n2. **Nginx**：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。\n3. **网关**：使用 GetWay 网关中配置CORS规则，允许跨域请求\n\n\n\n\n\n\n\n","source":"_posts/项目讲解.md","raw":"---\ntitle: 项目讲解\ndate: 2024-06-27 15:34:31\ntags: Java\ncategories: Java\ncover: https://alist.aixcc.top/d/OneDrive/img/202407151138251.webp\n---\n\n# 随便写写\n\n### 登录注册模块\n\n- **注册**：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。\n- 登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。\n\n\n\n### 前后端分离项目中跨域问题是如何解决的？\n\n1.  **注解**：可以通过使用`@CrossOrigin`注解来解决跨域问题。\n2. **Nginx**：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。\n3. **网关**：使用 GetWay 网关中配置CORS规则，允许跨域请求\n\n\n\n\n\n\n\n","slug":"项目讲解","published":1,"updated":"2024-07-15T03:42:53.957Z","comments":1,"layout":"post","photos":[],"_id":"clymi0xrj001ptuj8hjm91rsc","content":"<h1 id=\"随便写写\"><a class=\"headerlink\" href=\"#随便写写\"></a>随便写写</h1>\n<h3 id=\"登录注册模块\"><a class=\"headerlink\" href=\"#登录注册模块\"></a>登录注册模块</h3>\n<ul>\n<li><strong>注册</strong>：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。</li>\n<li>登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。</li>\n</ul>\n<h3 id=\"前后端分离项目中跨域问题是如何解决的？\"><a class=\"headerlink\" href=\"#前后端分离项目中跨域问题是如何解决的？\"></a>前后端分离项目中跨域问题是如何解决的？</h3>\n<ol>\n<li><strong>注解</strong>：可以通过使用<code>@CrossOrigin</code>注解来解决跨域问题。</li>\n<li><strong>Nginx</strong>：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。</li>\n<li><strong>网关</strong>：使用 GetWay 网关中配置CORS规则，允许跨域请求</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"随便写写\"><a class=\"headerlink\" href=\"#随便写写\"></a>随便写写</h1>\n<h3 id=\"登录注册模块\"><a class=\"headerlink\" href=\"#登录注册模块\"></a>登录注册模块</h3>\n<ul>\n<li><strong>注册</strong>：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。</li>\n<li>登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。</li>\n</ul>\n<h3 id=\"前后端分离项目中跨域问题是如何解决的？\"><a class=\"headerlink\" href=\"#前后端分离项目中跨域问题是如何解决的？\"></a>前后端分离项目中跨域问题是如何解决的？</h3>\n<ol>\n<li><strong>注解</strong>：可以通过使用<code>@CrossOrigin</code>注解来解决跨域问题。</li>\n<li><strong>Nginx</strong>：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。</li>\n<li><strong>网关</strong>：使用 GetWay 网关中配置CORS规则，允许跨域请求</li>\n</ol>\n","locate":"衡阳","cc":{"enable":true,"author":{"url":"/about/","img":null},"license":"CC BY-NC-SA 4.0","licenurl":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"},"toc":true,"ai":true,"comment":true}],"PostAsset":[],"PostCategory":[{"post_id":"clymi0xqt0001tuj87hv7fi5c","category_id":"clymi0xqy0004tuj8fj9jb1ro","_id":"clymi0xr6000ftuj83jx389oo"},{"post_id":"clymi0xqw0003tuj80ddid0va","category_id":"clymi0xr4000atuj83mwb5fgs","_id":"clymi0xr8000ktuj8hhvrd5jl"},{"post_id":"clymi0xr6000etuj80v40fa2o","category_id":"clymi0xr4000atuj83mwb5fgs","_id":"clymi0xra000otuj815llhso4"},{"post_id":"clymi0xr8000jtuj897jqh4j4","category_id":"clymi0xr4000atuj83mwb5fgs","_id":"clymi0xrc000vtuj845s6he60"},{"post_id":"clymi0xr9000ntuj8cy66aqmr","category_id":"clymi0xr4000atuj83mwb5fgs","_id":"clymi0xrd000xtuj8ffyb1on4"},{"post_id":"clymi0xr20009tuj84kea3apl","category_id":"clymi0xr8000ltuj8buet1oow","_id":"clymi0xre0011tuj8h4vqgdcw"},{"post_id":"clymi0xra000qtuj86n5zgwmc","category_id":"clymi0xr4000atuj83mwb5fgs","_id":"clymi0xrf0014tuj8alz9b0up"},{"post_id":"clymi0xrc000utuj83km66ghf","category_id":"clymi0xr6000gtuj84ku9gbcx","_id":"clymi0xrf0018tuj8fbbf8wqa"},{"post_id":"clymi0xr5000dtuj8bqffepzz","category_id":"clymi0xr8000ltuj8buet1oow","_id":"clymi0xrg001btuj86qj7bala"},{"post_id":"clymi0xrc000wtuj88f7cf1pd","category_id":"clymi0xr6000gtuj84ku9gbcx","_id":"clymi0xrh001etuj820581q0x"},{"post_id":"clymi0xre0013tuj84rkc0qy4","category_id":"clymi0xr8000ltuj8buet1oow","_id":"clymi0xri001jtuj83kt72j8m"},{"post_id":"clymi0xr7000ituj83ylv5wkm","category_id":"clymi0xrd000ztuj83wcucfrf","_id":"clymi0xri001mtuj815ip1h75"},{"post_id":"clymi0xrf0017tuj8eiwnbvbq","category_id":"clymi0xqy0004tuj8fj9jb1ro","_id":"clymi0xrk001qtuj83pwcbthg"},{"post_id":"clymi0xrg001atuj8ederf865","category_id":"clymi0xr6000gtuj84ku9gbcx","_id":"clymi0xrl001stuj8abxnbt83"},{"post_id":"clymi0xr10008tuj80m390rgv","category_id":"clymi0xr6000gtuj84ku9gbcx","_id":"clymi0xrl001vtuj84pt5ccig"},{"post_id":"clymi0xr10008tuj80m390rgv","category_id":"clymi0xrf0019tuj8h2idaxnz","_id":"clymi0xrl001xtuj87vwcdsqx"},{"post_id":"clymi0xrg001dtuj8aisi3ohw","category_id":"clymi0xr6000gtuj84ku9gbcx","_id":"clymi0xrm0020tuj8h3e1cx2u"},{"post_id":"clymi0xrh001ituj8evi54944","category_id":"clymi0xr8000ltuj8buet1oow","_id":"clymi0xrm0021tuj83pgrbnw4"},{"post_id":"clymi0xrd0010tuj86f2461hd","category_id":"clymi0xrh001gtuj890zub7mu","_id":"clymi0xrm0023tuj87a4zf9z3"},{"post_id":"clymi0xri001ltuj80lai3i64","category_id":"clymi0xr6000gtuj84ku9gbcx","_id":"clymi0xrm0025tuj839q5b09l"},{"post_id":"clymi0xrj001ptuj8hjm91rsc","category_id":"clymi0xr4000atuj83mwb5fgs","_id":"clymi0xrn0028tuj840vl812t"}],"PostTag":[{"post_id":"clymi0xqt0001tuj87hv7fi5c","tag_id":"clymi0xqz0005tuj876wdgbak","_id":"clymi0xr5000ctuj8azu1frwg"},{"post_id":"clymi0xqw0003tuj80ddid0va","tag_id":"clymi0xr4000btuj8c10zc49g","_id":"clymi0xra000ptuj83k8qdlfg"},{"post_id":"clymi0xqw0003tuj80ddid0va","tag_id":"clymi0xr7000htuj832ev3fbb","_id":"clymi0xrb000rtuj8e3jt3fwe"},{"post_id":"clymi0xr00007tuj86eo0gmyr","tag_id":"clymi0xr4000btuj8c10zc49g","_id":"clymi0xre0012tuj8g1vt1356"},{"post_id":"clymi0xr00007tuj86eo0gmyr","tag_id":"clymi0xr7000htuj832ev3fbb","_id":"clymi0xrf0015tuj88xkufbtf"},{"post_id":"clymi0xrf0017tuj8eiwnbvbq","tag_id":"clymi0xqz0005tuj876wdgbak","_id":"clymi0xrg001ctuj822124lzr"},{"post_id":"clymi0xr10008tuj80m390rgv","tag_id":"clymi0xrd000ytuj85b1s9s0f","_id":"clymi0xrh001htuj8cz7z6ym9"},{"post_id":"clymi0xr10008tuj80m390rgv","tag_id":"clymi0xrf0016tuj8gsawb4nf","_id":"clymi0xri001ktuj8e7v3g577"},{"post_id":"clymi0xrg001dtuj8aisi3ohw","tag_id":"clymi0xrf0016tuj8gsawb4nf","_id":"clymi0xrj001otuj88uye72rh"},{"post_id":"clymi0xrh001ituj8evi54944","tag_id":"clymi0xrh001ftuj84dooc7pe","_id":"clymi0xrk001rtuj88n1gdiqw"},{"post_id":"clymi0xrj001ptuj8hjm91rsc","tag_id":"clymi0xr4000btuj8c10zc49g","_id":"clymi0xrl001utuj8fz5pe7yw"},{"post_id":"clymi0xr20009tuj84kea3apl","tag_id":"clymi0xrh001ftuj84dooc7pe","_id":"clymi0xrl001wtuj838xi1s7e"},{"post_id":"clymi0xr20009tuj84kea3apl","tag_id":"clymi0xr4000btuj8c10zc49g","_id":"clymi0xrm001ztuj8e4vb31ov"},{"post_id":"clymi0xr5000dtuj8bqffepzz","tag_id":"clymi0xrh001ftuj84dooc7pe","_id":"clymi0xrm0024tuj8bqi06xsj"},{"post_id":"clymi0xr5000dtuj8bqffepzz","tag_id":"clymi0xrm001ytuj893q5c19m","_id":"clymi0xrn0026tuj8askzb8dx"},{"post_id":"clymi0xr6000etuj80v40fa2o","tag_id":"clymi0xr4000btuj8c10zc49g","_id":"clymi0xrn002atuj8bor8b5vi"},{"post_id":"clymi0xr6000etuj80v40fa2o","tag_id":"clymi0xrm0022tuj883az4b73","_id":"clymi0xrn002btuj80ov0cqgf"},{"post_id":"clymi0xr6000etuj80v40fa2o","tag_id":"clymi0xrn0027tuj80hxr7816","_id":"clymi0xro002dtuj82qu115bn"},{"post_id":"clymi0xr7000ituj83ylv5wkm","tag_id":"clymi0xrd000ytuj85b1s9s0f","_id":"clymi0xro002ftuj81fxneiwu"},{"post_id":"clymi0xr7000ituj83ylv5wkm","tag_id":"clymi0xrn0027tuj80hxr7816","_id":"clymi0xro002gtuj8hr0v2m6n"},{"post_id":"clymi0xr8000jtuj897jqh4j4","tag_id":"clymi0xro002etuj8fxsz037a","_id":"clymi0xrp002jtuj8gau5fsly"},{"post_id":"clymi0xr8000jtuj897jqh4j4","tag_id":"clymi0xrn0027tuj80hxr7816","_id":"clymi0xrp002ktuj89nt36hn7"},{"post_id":"clymi0xr8000jtuj897jqh4j4","tag_id":"clymi0xr4000btuj8c10zc49g","_id":"clymi0xrp002mtuj86hs4hdmn"},{"post_id":"clymi0xr9000ntuj8cy66aqmr","tag_id":"clymi0xrp002ituj8aadgg54m","_id":"clymi0xrq002otuj899ka6je2"},{"post_id":"clymi0xr9000ntuj8cy66aqmr","tag_id":"clymi0xrn0027tuj80hxr7816","_id":"clymi0xrq002ptuj88wat49da"},{"post_id":"clymi0xra000qtuj86n5zgwmc","tag_id":"clymi0xr4000btuj8c10zc49g","_id":"clymi0xrr002stuj8e5s797ds"},{"post_id":"clymi0xra000qtuj86n5zgwmc","tag_id":"clymi0xrq002ntuj82amy3bqk","_id":"clymi0xrr002ttuj82dhw3pzq"},{"post_id":"clymi0xra000qtuj86n5zgwmc","tag_id":"clymi0xrn0027tuj80hxr7816","_id":"clymi0xrr002vtuj8ecuob193"},{"post_id":"clymi0xrc000utuj83km66ghf","tag_id":"clymi0xrf0016tuj8gsawb4nf","_id":"clymi0xrr002wtuj88tgs3xat"},{"post_id":"clymi0xrc000wtuj88f7cf1pd","tag_id":"clymi0xrr002utuj87qpe7yr4","_id":"clymi0xrs002ytuj89exc1iy8"},{"post_id":"clymi0xrd0010tuj86f2461hd","tag_id":"clymi0xrr002xtuj80pgf2ygj","_id":"clymi0xrt0031tuj881ee9la9"},{"post_id":"clymi0xrd0010tuj86f2461hd","tag_id":"clymi0xrs002ztuj88wbahpjf","_id":"clymi0xrt0032tuj84zbn4cyi"},{"post_id":"clymi0xre0013tuj84rkc0qy4","tag_id":"clymi0xrh001ftuj84dooc7pe","_id":"clymi0xru0035tuj8bc7xdmox"},{"post_id":"clymi0xre0013tuj84rkc0qy4","tag_id":"clymi0xrt0033tuj8gvdh3ibn","_id":"clymi0xru0036tuj858ph0n48"},{"post_id":"clymi0xrg001atuj8ederf865","tag_id":"clymi0xrr002utuj87qpe7yr4","_id":"clymi0xru0038tuj868hweggy"},{"post_id":"clymi0xri001ltuj80lai3i64","tag_id":"clymi0xrf0016tuj8gsawb4nf","_id":"clymi0xru003atuj83zec254l"},{"post_id":"clymi0xri001ltuj80lai3i64","tag_id":"clymi0xru0037tuj88o48c9uh","_id":"clymi0xrv003btuj82l76432p"},{"post_id":"clymi0xri001ltuj80lai3i64","tag_id":"clymi0xru0039tuj890u282lz","_id":"clymi0xrv003ctuj8ecdtg0tz"}],"Tag":[{"name":"Blog","_id":"clymi0xqz0005tuj876wdgbak"},{"name":"Java","_id":"clymi0xr4000btuj8c10zc49g"},{"name":"笔记","_id":"clymi0xr7000htuj832ev3fbb"},{"name":"MySQL","_id":"clymi0xrd000ytuj85b1s9s0f"},{"name":"Linux","_id":"clymi0xrf0016tuj8gsawb4nf"},{"name":"Mac","_id":"clymi0xrh001ftuj84dooc7pe"},{"name":"Maven","_id":"clymi0xrm001ytuj893q5c19m"},{"name":"MyBatis","_id":"clymi0xrm0022tuj883az4b73"},{"name":"总结","_id":"clymi0xrn0027tuj80hxr7816"},{"name":"RabbitMQ","_id":"clymi0xro002etuj8fxsz037a"},{"name":"Redis","_id":"clymi0xrp002ituj8aadgg54m"},{"name":"Spring","_id":"clymi0xrq002ntuj82amy3bqk"},{"name":"Alist","_id":"clymi0xrr002utuj87qpe7yr4"},{"name":"Vue","_id":"clymi0xrr002xtuj80pgf2ygj"},{"name":"前端","_id":"clymi0xrs002ztuj88wbahpjf"},{"name":"Homebrew","_id":"clymi0xrt0033tuj8gvdh3ibn"},{"name":"SSL","_id":"clymi0xru0037tuj88o48c9uh"},{"name":"域名","_id":"clymi0xru0039tuj890u282lz"}]}}