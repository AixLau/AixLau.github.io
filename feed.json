{
    "version": "https://jsonfeed.org/version/1",
    "title": "陆时忤的博客",
    "description": "要再见 不要再见",
    "home_page_url": "https://blog.aixcc.top",
    "items": [
        {
            "id": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85Maven/",
            "url": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85Maven/",
            "title": "Mac安装Maven",
            "date_published": "2024-07-14T14:25:37.000Z",
            "content_html": "<h1 id=\"Maven-环境设置：全面指南\"><a class=\"headerlink\" href=\"#Maven-环境设置：全面指南\"></a>Maven 环境设置：全面指南</h1>\n<blockquote>\n<p>Apache Maven 是 Java 项目的强大项目管理工具，可以自动化并简化构建过程。本指南将指导你完成在机器上设置 Maven 的步骤，包括安装 Java、Maven 以及配置开发环境。</p>\n</blockquote>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在安装 Maven 之前，你需要确保计算机上已安装 Java 开发工具包（JDK）。Maven 3.3+ 需要 JDK 1.7 或更高版本才能运行。</p>\n<h3 id=\"1-检查-Java-安装\"><a class=\"headerlink\" href=\"#1-检查-Java-安装\"></a>1. 检查 Java 安装</h3>\n<p>打开终端并输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">java</span> <span class=\"token parameter variable\">-version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令将显示当前安装的 Java 版本。如果未安装 Java，请访问 <a href=\"https://blog.aixcc.top//2024/07/14/Mac%E5%AE%89%E8%A3%85JDK\">Mac 安装 JDK</a> 获取详细的安装教程</p>\n<h2 id=\"下载-Maven\"><a class=\"headerlink\" href=\"#下载-Maven\"></a>下载 Maven</h2>\n<ol>\n<li>\n<p>访问 <a href=\"https://maven.apache.org/download.cgi\">Maven 下载页面</a>。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215642.webp\" alt=\"\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>下载二进制归档文件（例如 <code>apache-maven-3.8.6-bin.tar.gz</code>）。</p>\n</li>\n</ol>\n<h2 id=\"安装-Maven\"><a class=\"headerlink\" href=\"#安装-Maven\"></a>安装 Maven</h2>\n<ol>\n<li>将下载的归档文件解压到你选择的目录。在基于 Unix 的系统上，一个常见的目录是 <code>/opt</code>。（也可以根据个人喜好选择其它目录）</li>\n</ol>\n<h2 id=\"配置环境\"><a class=\"headerlink\" href=\"#配置环境\"></a>配置环境</h2>\n<ol>\n<li>使用文本编辑器打开你的 shell 配置文件（例如，如果你使用 zsh，则为 <code>.zshrc</code>）：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>将 Maven 二进制文件添加到你的 PATH：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/opt/apache-maven-3.8.6/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>保存文件并应用更改：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"验证\"><a class=\"headerlink\" href=\"#验证\"></a>验证</h3>\n<p>要验证 Maven 是否正确安装，请键入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mvn <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此命令应显示 Maven 版本、Java 版本和操作系统详细信息。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151239977.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"配置-Maven\"><a class=\"headerlink\" href=\"#配置-Maven\"></a>配置 Maven</h2>\n<h3 id=\"设置本地仓库\"><a class=\"headerlink\" href=\"#设置本地仓库\"></a>设置本地仓库</h3>\n<p>Maven 将所有依赖项存储在本地。你可以在 Maven 配置文件中指定此仓库的自定义位置：</p>\n<p>编辑 <code>/opt/apache-maven-3.8.6/conf/settings.xml</code> 并添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>存储路径</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span>\n# 例如<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>/Users/lushiwu/Data/maven-repository<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"配置仓库镜像\"><a class=\"headerlink\" href=\"#配置仓库镜像\"></a>配置仓库镜像</h3>\n<p>为了加速依赖项下载，配置如阿里云等镜像：</p>\n<p>在 <code>settings.xml</code> 文件的 <code>&lt;mirrors&gt;</code> 部分添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>aliyunmaven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>阿里云 Maven 镜像<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://maven.aliyun.com/repository/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在-IntelliJ-IDEA-中配置-Maven\"><a class=\"headerlink\" href=\"#在-IntelliJ-IDEA-中配置-Maven\"></a>在 IntelliJ IDEA 中配置 Maven</h2>\n<ol>\n<li>打开 IntelliJ IDEA。</li>\n<li>导航至 <code>设置</code> &gt; <code>构建、执行、部署</code> &gt; <code>构建工具</code> &gt; <code>Maven</code>。</li>\n<li>指定 <code>Maven 主目录</code> 为 <code>/opt/apache-maven-3.8.6</code>。</li>\n<li>设置 <code>用户设置文件</code> 为你刚配置的 <code>settings.xml</code>。</li>\n</ol>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151215660.webp\" alt=\"\" loading=\"lazy\"></p>\n",
            "tags": [
                "Mac",
                "Maven"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "url": "https://blog.aixcc.top/2024/07/14/Mac%E5%AE%89%E8%A3%85JDK/",
            "title": "Mac安装JDK",
            "date_published": "2024-07-14T14:13:37.000Z",
            "content_html": "<h1 id=\"Mac-上的-JDK-的安装与卸载\"><a class=\"headerlink\" href=\"#Mac-上的-JDK-的安装与卸载\"></a>Mac 上的 JDK 的安装与卸载</h1>\n<h2 id=\"从-AdoptOpenJDK-到-Temurin\"><a class=\"headerlink\" href=\"#从-AdoptOpenJDK-到-Temurin\"></a>从 AdoptOpenJDK 到 Temurin</h2>\n<h2 id=\"卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#卸载-AdoptOpenJDK\"></a>卸载 AdoptOpenJDK</h2>\n<p>如果您的系统中安装了 AdoptOpenJDK，并且想要替换或升级 JDK 版本，可以按照以下步骤进行卸载：</p>\n<h3 id=\"步骤-1：卸载-AdoptOpenJDK\"><a class=\"headerlink\" href=\"#步骤-1：卸载-AdoptOpenJDK\"></a>步骤 1：卸载 AdoptOpenJDK</h3>\n<p>打开终端，并使用 Homebrew Cask 进行卸载。如果您尚未安装 Homebrew，请访问 <a href=\"https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/\">Homebrew 安装指南</a> 获取详细的安装教程。以卸载 adoptopenjdk8 为例，输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew remove <span class=\"token parameter variable\">--cask</span> adoptopenjdk8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>重复上述命令，替换 <code>adoptopenjdk8</code> 为其他版本号以卸载其他版本的 JDK。</p>\n<h3 id=\"步骤-2：移除-Homebrew-的-Tap\"><a class=\"headerlink\" href=\"#步骤-2：移除-Homebrew-的-Tap\"></a>步骤 2：移除 Homebrew 的 Tap</h3>\n<p>完成所有版本的卸载后，执行以下命令来移除 AdoptOpenJDK 的 tap：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew untap AdoptOpenJDK/openjdk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样就和 AdoptOpenJDK 完成了告别。</p>\n<h2 id=\"清除旧的-Oracle-JDK\"><a class=\"headerlink\" href=\"#清除旧的-Oracle-JDK\"></a>清除旧的 Oracle JDK</h2>\n<p>对于仍在使用 Oracle JDK 的用户，也是时候更新了。请按照以下步骤从您的系统中彻底清除 Oracle JDK：</p>\n<h3 id=\"步骤-3：删除旧的-JDK-文件\"><a class=\"headerlink\" href=\"#步骤-3：删除旧的-JDK-文件\"></a>步骤 3：删除旧的 JDK 文件</h3>\n<p>删除 <code>/Library/Java/JavaVirtualMachines/</code> 目录下的 JDK 文件夹。此外，清理以下位置的内容：</p>\n<ul>\n<li><code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin</code></li>\n<li><code>/Library/PreferencePanes/JavaControlPanel.prefPane</code></li>\n<li><code>~/Library/Application Support/Oracle/Java</code></li>\n</ul>\n<h2 id=\"安装-Temurin-JDK\"><a class=\"headerlink\" href=\"#安装-Temurin-JDK\"></a>安装 Temurin JDK</h2>\n<p>在清除旧的 JDK 之后，我们将安装 Temurin，这是 AdoptOpenJDK 的继任者，由 Eclipse Foundation 维护。</p>\n<h3 id=\"步骤-4：配置-Homebrew-Cask-版本\"><a class=\"headerlink\" href=\"#步骤-4：配置-Homebrew-Cask-版本\"></a>步骤 4：配置 Homebrew Cask 版本</h3>\n<p>首先，确保你的 Homebrew 能够访问所有 cask 版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew search temurin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151217190.webp\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"步骤-5：安装-Temurin\"><a class=\"headerlink\" href=\"#步骤-5：安装-Temurin\"></a>步骤 5：安装 Temurin</h3>\n<p>现在，您可以安装所需版本的 Temurin。例如，要安装 Temurin@8，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token parameter variable\">--cask</span> temurin@8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过以上步骤，您可以在 Mac 上轻松切换 JDK 版本。无论是卸载旧的 AdoptOpenJDK 还是安装新的 Temurin JDK，都能确保您的开发环境与 Java 的最新进展保持同步。</p>\n",
            "tags": [
                "Java",
                "Mac"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/",
            "url": "https://blog.aixcc.top/2024/07/14/%E5%AE%89%E8%A3%85Homebrew/",
            "title": "安装Homebrew",
            "date_published": "2024-07-14T12:10:50.000Z",
            "content_html": "<h1 id=\"Mac-上安装-Homebrew：一步一步的指南\"><a class=\"headerlink\" href=\"#Mac-上安装-Homebrew：一步一步的指南\"></a>Mac 上安装 Homebrew：一步一步的指南</h1>\n<h2 id=\"什么是-Homebrew？\"><a class=\"headerlink\" href=\"#什么是-Homebrew？\"></a>什么是 Homebrew？</h2>\n<p><a href=\"https://brew.sh/\">Homebrew</a> 是 Mac OS X 或 Linux 上的一款自由和开源的软件包管理系统，它简化了软件的安装过程。它允许用户方便地安装、配置、更新和卸载开源软件。它的设计理念是简化没有访问权限的用户在 macOS 上安装软件的过程。</p>\n<h2 id=\"安装前的准备\"><a class=\"headerlink\" href=\"#安装前的准备\"></a>安装前的准备</h2>\n<p>在安装 Homebrew 之前，请确保您的 Mac 符合以下条件：</p>\n<ul>\n<li>macOS 系统 (或 OS X 至少 10.10 及以上版本)</li>\n<li>有权访问 macOS 的终端（Terminal）</li>\n<li>安装了 Xcode 的命令行工具</li>\n</ul>\n<h3 id=\"安装-Xcode-命令行工具\"><a class=\"headerlink\" href=\"#安装-Xcode-命令行工具\"></a>安装 Xcode 命令行工具</h3>\n<p>打开终端，输入以下命令来安装 Xcode 的命令行工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xcode-select <span class=\"token parameter variable\">--install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>系统会弹出一个安装窗口，点击“安装”即可开始下载并安装所需的工具。</p>\n<h2 id=\"安装-Homebrew\"><a class=\"headerlink\" href=\"#安装-Homebrew\"></a>安装 Homebrew</h2>\n<p>完成 Xcode 命令行工具的安装后，您就可以安装 Homebrew 了。在终端中输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/bin/bash <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此脚本将会下载并执行 Homebrew 的安装程序。过程中可能会要求您输入系统密码，因为安装涉及到对系统级目录的写入操作。</p>\n<h2 id=\"安装后的配置\"><a class=\"headerlink\" href=\"#安装后的配置\"></a>安装后的配置</h2>\n<p>安装完成后，按照终端中显示的指示，您可能需要添加 Homebrew 的路径到您的 shell 配置文件中。对于 bash 用户，可以添加以下行到 <code>~/.bash_profile</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.bash_profile\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果您使用的是 zsh，应添加到 <code>~/.zshrc</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(/opt/homebrew/bin/brew shellenv)\"'</span> <span class=\"token operator\">>></span> ~/.zshrc\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>/opt/homebrew/bin/brew shellenv<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"验证安装\"><a class=\"headerlink\" href=\"#验证安装\"></a>验证安装</h2>\n<p>安装完成后，重新启动终端或者运行以下命令来配置 shell：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bash_profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，对于 zsh 用户：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，您可以运行以下命令来检查 Homebrew 是否安装成功：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew doctor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果显示 “Your system is ready to brew” 的信息，恭喜您，您已经成功安装并配置了 Homebrew。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151218277.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"结论\"><a class=\"headerlink\" href=\"#结论\"></a>结论</h2>\n<p>通过安装 Homebrew，您的 Mac 将能够轻松地管理大量开源软件，从而大大提高您的生产效率和工作流程。无论您是开发人员还是日常用户，Homebrew 都是一个宝贵的工具，可以帮助您维护软件的最新状态。</p>\n",
            "tags": [
                "Mac",
                "Homebrew"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/07/13/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/",
            "url": "https://blog.aixcc.top/2024/07/13/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/",
            "title": "Vue3快速上手",
            "date_published": "2024-07-13T15:56:37.000Z",
            "content_html": "<h1 id=\"1-Vue3简介\"><a class=\"headerlink\" href=\"#1-Vue3简介\"></a>1. Vue3简介</h1>\n<ul>\n<li>\n<p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p>\n</li>\n<li>\n<p>经历了：<a href=\"https://github.com/vuejs/core/commits/main\">4800+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">40+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/core/graphs/contributors\">300+贡献者</a></p>\n</li>\n<li>\n<p>官方发版地址：<a href=\"https://github.com/vuejs/core/releases/tag/v3.0.0\">Release v3.0.0 One Piece · vuejs/core</a></p>\n</li>\n<li>\n<p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232363.webp\" alt=\"image.png\" loading=\"lazy\"></p>\n</li>\n</ul>\n<h2 id=\"1-1-【性能的提升】\"><a class=\"headerlink\" href=\"#1-1-【性能的提升】\"></a>1.1. 【性能的提升】</h2>\n<ul>\n<li>\n<p>打包大小减少<code>41%</code>。</p>\n</li>\n<li>\n<p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p>\n</li>\n<li>\n<p>内存减少<code>54%</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-2-【-源码的升级】\"><a class=\"headerlink\" href=\"#1-2-【-源码的升级】\"></a>1.2.【 源码的升级】</h2>\n<ul>\n<li>\n<p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p>\n</li>\n<li>\n<p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-3-【拥抱TypeScript】\"><a class=\"headerlink\" href=\"#1-3-【拥抱TypeScript】\"></a>1.3. 【拥抱TypeScript】</h2>\n<ul>\n<li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li>\n</ul>\n<h2 id=\"1-4-【新的特性】\"><a class=\"headerlink\" href=\"#1-4-【新的特性】\"></a>1.4. 【新的特性】</h2>\n<ol>\n<li>\n<p><code>Composition API</code>（组合<code>API</code>）：</p>\n<ul>\n<li>\n<p><code>setup</code></p>\n</li>\n<li>\n<p><code>ref</code>与<code>reactive</code></p>\n</li>\n<li>\n<p><code>computed</code>与<code>watch</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>新的内置组件：</p>\n<ul>\n<li>\n<p><code>Fragment</code></p>\n</li>\n<li>\n<p><code>Teleport</code></p>\n</li>\n<li>\n<p><code>Suspense</code></p>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p>其他改变：</p>\n<ul>\n<li>\n<p>新的生命周期钩子</p>\n</li>\n<li>\n<p><code>data</code> 选项应始终被声明为一个函数</p>\n</li>\n<li>\n<p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p>\n<p>…</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-创建Vue3工程\"><a class=\"headerlink\" href=\"#2-创建Vue3工程\"></a>2. 创建Vue3工程</h1>\n<h2 id=\"2-1-【基于-vue-cli-创建】\"><a class=\"headerlink\" href=\"#2-1-【基于-vue-cli-创建】\"></a>2.1. 【基于 vue-cli 创建】</h2>\n<p>点击查看<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">官方文档</a></p>\n<blockquote>\n<p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>\nvue <span class=\"token operator\">--</span>version\n\n<span class=\"token comment\">## 安装或者升级你的@vue/cli </span>\nnpm install <span class=\"token operator\">-</span>g @vue/<span class=\"token function\">cli</span>\n\n<span class=\"token comment\">## 执行创建命令</span>\nvue create vue_test\n\n<span class=\"token comment\">##  随后选择3.x</span>\n<span class=\"token comment\">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span>\n<span class=\"token comment\">##  > 3.x</span>\n<span class=\"token comment\">##    2.x</span>\n\n<span class=\"token comment\">## 启动</span>\ncd vue_test\nnpm run serve<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h2 id=\"2-2-【基于-vite-创建】-推荐\"><a class=\"headerlink\" href=\"#2-2-【基于-vite-创建】-推荐\"></a>2.2. 【基于 vite 创建】(推荐)</h2>\n<p><code>vite</code> 是新一代前端构建工具，官网地址：<a href=\"https://vitejs.cn/\">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p>\n<ul>\n<li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li>\n<li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n<li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：</li>\n</ul>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232253.webp\" alt=\"\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232053.webp\" alt=\"\" loading=\"lazy\"></p>\n<ul>\n<li>具体操作如下（点击查看<a href=\"https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application\">官方文档</a>）</li>\n</ul>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\">## 1.创建命令</span>\nnpm create vue@latest\n\n<span class=\"token comment\">## 2.具体配置</span>\n<span class=\"token comment\">## 配置项目名称</span>\n√ Project name: vue3_test\n<span class=\"token comment\">## 是否添加TypeScript支持</span>\n√ Add TypeScript?  Yes\n<span class=\"token comment\">## 是否添加JSX支持</span>\n√ Add JSX Support?  No\n<span class=\"token comment\">## 是否添加路由环境</span>\n√ Add Vue Router <span class=\"token keyword\">for</span> Single Page Application development?  No\n<span class=\"token comment\">## 是否添加pinia环境</span>\n√ Add Pinia <span class=\"token keyword\">for</span> state management?  No\n<span class=\"token comment\">## 是否添加单元测试</span>\n√ Add Vitest <span class=\"token keyword\">for</span> Unit Testing?  No\n<span class=\"token comment\">## 是否添加端到端测试方案</span>\n√ Add an <span class=\"token keyword\">End</span><span class=\"token operator\">-</span>to-<span class=\"token keyword\">End</span> Testing Solution? » No\n<span class=\"token comment\">## 是否添加ESLint语法检查</span>\n√ Add ESLint <span class=\"token keyword\">for</span> code quality?  Yes\n<span class=\"token comment\">## 是否添加Prettiert代码格式化</span>\n√ Add Prettier <span class=\"token keyword\">for</span> code formatting?  No<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>自己动手编写一个App组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h1&gt;你好啊！&lt;&#x2F;h1&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39; &#x2F;&#x2F;组件名\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n  .app &#123;\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  &#125;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装官方推荐的<code>vscode</code>插件：</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232847.webp\" alt=\"Snipaste_2023-10-08_20-46-34\" loading=\"lazy\"></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232668.webp\" alt=\"image-20231218085906380\" loading=\"lazy\"></p>\n<p>总结：</p>\n<ul>\n<li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li>\n<li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li>\n<li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li>\n</ul>\n<h2 id=\"2-3-【一个简单的效果】\"><a class=\"headerlink\" href=\"#2-3-【一个简单的效果】\"></a>2.3. 【一个简单的效果】</h2>\n<p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;App&#39;,\n    data() &#123;\n      return &#123;\n        name:&#39;张三&#39;,\n        age:18,\n        tel:&#39;13888888888&#39;\n      &#125;\n    &#125;,\n    methods:&#123;\n      changeName()&#123;\n        this.name &#x3D; &#39;zhang-san&#39;\n      &#125;,\n      changeAge()&#123;\n        this.age +&#x3D; 1\n      &#125;,\n      showTel()&#123;\n        alert(this.tel)\n      &#125;\n    &#125;,\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"3-Vue3核心语法\"><a class=\"headerlink\" href=\"#3-Vue3核心语法\"></a>3. Vue3核心语法</h1>\n<h2 id=\"3-1-【OptionsAPI-与-CompositionAPI】\"><a class=\"headerlink\" href=\"#3-1-【OptionsAPI-与-CompositionAPI】\"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2>\n<ul>\n<li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li>\n<li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li>\n</ul>\n<h3 id=\"Options-API-的弊端\"><a class=\"headerlink\" href=\"#Options-API-的弊端\"></a>Options API 的弊端</h3>\n<p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p>\n<p><img src=\"https://img.aixcc.top/file/c3edadbf9a9bbfd22d442.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/d978f7c4fd1f8a2a2e8f9.gif\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"Composition-API-的优势\"><a class=\"headerlink\" href=\"#Composition-API-的优势\"></a>Composition API 的优势</h3>\n<p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p>\n<p><img src=\"https://img.aixcc.top/file/9acc07d0f3690f12a9fda.gif\" alt=\"\" loading=\"lazy\"><img src=\"https://img.aixcc.top/file/2e7d2a90529d10cad9c93.gif\" alt=\"\" loading=\"lazy\"></p>\n<blockquote>\n<p>说明：以上四张动图原创作者：大帅老猿</p>\n</blockquote>\n<h2 id=\"3-2-【拉开序幕的-setup】\"><a class=\"headerlink\" href=\"#3-2-【拉开序幕的-setup】\"></a>3.2. 【拉开序幕的 setup】</h2>\n<h3 id=\"setup-概述\"><a class=\"headerlink\" href=\"#setup-概述\"></a>setup 概述</h3>\n<p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视…等等，均配置在<code>setup</code>中。</p>\n<p>特点如下：</p>\n<ul>\n<li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li>\n<li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li>\n<li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n    setup()&#123;\n      &#x2F;&#x2F; 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name &#x3D; &#39;张三&#39;\n      let age &#x3D; 18\n      let tel &#x3D; &#39;13888888888&#39;\n\n      &#x2F;&#x2F; 方法，原来写在methods中\n      function changeName()&#123;\n        name &#x3D; &#39;zhang-san&#39; &#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n        console.log(name)\n      &#125;\n      function changeAge()&#123;\n        age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n        console.log(age)\n      &#125;\n      function showTel()&#123;\n        alert(tel)\n      &#125;\n\n      &#x2F;&#x2F; 返回一个对象，对象中的内容，模板中可以直接使用\n      return &#123;name,age,tel,changeName,changeAge,showTel&#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-的返回值\"><a class=\"headerlink\" href=\"#setup-的返回值\"></a>setup 的返回值</h3>\n<ul>\n<li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**</li>\n<li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token string\">'你好啊！'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"setup-与-Options-API-的关系\"><a class=\"headerlink\" href=\"#setup-与-Options-API-的关系\"></a>setup 与 Options API 的关系</h3>\n<ul>\n<li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>…）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li>\n<li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>…）。</li>\n<li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li>\n</ul>\n<h3 id=\"setup-语法糖\"><a class=\"headerlink\" href=\"#setup-语法糖\"></a>setup 语法糖</h3>\n<p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  export default &#123;\n    name:&#39;Person&#39;,\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;!-- 下面的写法是setup语法糖 --&gt;\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  console.log(this) &#x2F;&#x2F;undefined\n  \n  &#x2F;&#x2F; 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name &#x3D; &#39;张三&#39;\n  let age &#x3D; 18\n  let tel &#x3D; &#39;13888888888&#39;\n\n  &#x2F;&#x2F; 方法\n  function changName()&#123;\n    name &#x3D; &#39;李四&#39;&#x2F;&#x2F;注意：此时这么修改name页面是不变化的\n  &#125;\n  function changAge()&#123;\n    console.log(age)\n    age +&#x3D; 1 &#x2F;&#x2F;注意：此时这么修改age页面是不变化的\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p>\n<ol>\n<li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li>\n<li>第二步：<code>vite.config.ts</code></li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span>\n<span class=\"token keyword\">import</span> VueSetupExtend <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-vue-setup-extend'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">VueSetupExtend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li>\n</ol>\n<h2 id=\"3-3-【ref-创建：基本类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-3-【ref-创建：基本类型的响应式数据】\"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2>\n<ul>\n<li>**作用：**定义响应式变量。</li>\n<li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li>\n<li>**返回值：**一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li>\n<li><strong>注意点：</strong>\n<ul>\n<li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li>\n<li>对于<code>let name = ref('张三')</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;年龄+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;showTel&quot;&gt;点我查看联系方式&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;&#x2F; tel就是一个普通的字符串，不是响应式的\n  let tel &#x3D; &#39;13888888888&#39;\n\n  function changeName()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    name.value &#x3D; &#39;李四&#39;\n    console.log(name.value)\n\n    &#x2F;&#x2F; 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    &#x2F;&#x2F; name &#x3D; ref(&#39;zhang-san&#39;)\n  &#125;\n  function changeAge()&#123;\n    &#x2F;&#x2F; JS中操作ref对象时候需要.value\n    age.value +&#x3D; 1 \n    console.log(age.value)\n  &#125;\n  function showTel()&#123;\n    alert(tel)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-4-【reactive-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-4-【reactive-创建：对象类型的响应式数据】\"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2>\n<ul>\n<li><strong>作用：<strong>定义一个</strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li>\n<li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li>\n<li>**返回值：**一个<code>Proxy</code>的实例对象，简称：响应式对象。</li>\n<li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; reactive &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; reactive(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; reactive([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; reactive(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nfunction changeCarPrice() &#123;\n  car.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-5-【ref-创建：对象类型的响应式数据】\"><a class=\"headerlink\" href=\"#3-5-【ref-创建：对象类型的响应式数据】\"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2>\n<ul>\n<li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li>\n<li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;&#x2F;h2&gt;\n    &lt;h2&gt;游戏列表：&lt;&#x2F;h2&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 数据\nlet car &#x3D; ref(&#123; brand: &#39;奔驰&#39;, price: 100 &#125;)\nlet games &#x3D; ref([\n  &#123; id: &#39;ahsgdyfa01&#39;, name: &#39;英雄联盟&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa02&#39;, name: &#39;王者荣耀&#39; &#125;,\n  &#123; id: &#39;ahsgdyfa03&#39;, name: &#39;原神&#39; &#125;\n])\nlet obj &#x3D; ref(&#123;\n  a:&#123;\n    b:&#123;\n      c:&#123;\n        d:666\n      &#125;\n    &#125;\n  &#125;\n&#125;)\n\nconsole.log(car)\n\nfunction changeCarPrice() &#123;\n  car.value.price +&#x3D; 10\n&#125;\nfunction changeFirstGame() &#123;\n  games.value[0].name &#x3D; &#39;流星蝴蝶剑&#39;\n&#125;\nfunction test()&#123;\n  obj.value.a.b.c.d &#x3D; 999\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-6-【ref-对比-reactive】\"><a class=\"headerlink\" href=\"#3-6-【ref-对比-reactive】\"></a>3.6. 【ref 对比 reactive】</h2>\n<p>宏观角度看：</p>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p>\n</li>\n<li>\n<p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>区别：</li>\n</ul>\n<blockquote>\n<ol>\n<li>\n<p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232718.webp\" alt=\"自动补充value\" loading=\"lazy\"></p>\n</li>\n<li>\n<p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>使用原则：</li>\n</ul>\n<blockquote>\n<ol>\n<li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li>\n<li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li>\n<li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-7-【toRefs-与-toRef】\"><a class=\"headerlink\" href=\"#3-7-【toRefs-与-toRef】\"></a>3.7. 【toRefs 与 toRef】</h2>\n<ul>\n<li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li>\n<li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li>\n<li>语法如下：</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeGender&quot;&gt;修改性别&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,reactive,toRefs,toRef&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;name:&#39;张三&#39;, age:18, gender:&#39;男&#39;&#125;)\n\t\n  &#x2F;&#x2F; 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let &#123;name,gender&#125; &#x3D;  toRefs(person)\n\t\n  &#x2F;&#x2F; 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age &#x3D; toRef(person,&#39;age&#39;)\n\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    name.value +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    age.value +&#x3D; 1\n  &#125;\n  function changeGender()&#123;\n    gender.value &#x3D; &#39;女&#39;\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-8-【computed】\"><a class=\"headerlink\" href=\"#3-8-【computed】\"></a>3.8. 【computed】</h2>\n<p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p>\n<p><img src=\"https://img.aixcc.top/file/35111db5e18d3bb69aee9.gif\" alt=\"\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    姓：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; &lt;br&gt;\n    名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &lt;br&gt;\n    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt; &lt;br&gt;\n    &lt;button @click&#x3D;&quot;changeFullName&quot;&gt;全名改为：li-si&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;App&quot;&gt;\n  import &#123;ref,computed&#125; from &#39;vue&#39;\n\n  let firstName &#x3D; ref(&#39;zhang&#39;)\n  let lastName &#x3D; ref(&#39;san&#39;)\n\n  &#x2F;&#x2F; 计算属性——只读取，不修改\n  &#x2F;* let fullName &#x3D; computed(()&#x3D;&gt;&#123;\n    return firstName.value + &#39;-&#39; + lastName.value\n  &#125;) *&#x2F;\n\n\n  &#x2F;&#x2F; 计算属性——既读取又修改\n  let fullName &#x3D; computed(&#123;\n    &#x2F;&#x2F; 读取\n    get()&#123;\n      return firstName.value + &#39;-&#39; + lastName.value\n    &#125;,\n    &#x2F;&#x2F; 修改\n    set(val)&#123;\n      console.log(&#39;有人修改了fullName&#39;,val)\n      firstName.value &#x3D; val.split(&#39;-&#39;)[0]\n      lastName.value &#x3D; val.split(&#39;-&#39;)[1]\n    &#125;\n  &#125;)\n\n  function changeFullName()&#123;\n    fullName.value &#x3D; &#39;li-si&#39;\n  &#125; \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-9-【watch】\"><a class=\"headerlink\" href=\"#3-9-【watch】\"></a>3.9.【watch】</h2>\n<ul>\n<li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li>\n<li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li>\n</ul>\n<blockquote>\n<ol>\n<li><code>ref</code>定义的数据。</li>\n<li><code>reactive</code>定义的数据。</li>\n<li>函数返回一个值（<code>getter</code>函数）。</li>\n<li>一个包含上述内容的数组。</li>\n</ol>\n</blockquote>\n<p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p>\n<h3 id=\"情况一\"><a class=\"headerlink\" href=\"#情况一\"></a>* 情况一</h3>\n<p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum()&#123;\n    sum.value +&#x3D; 1\n  &#125;\n  &#x2F;&#x2F; 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch &#x3D; watch(sum,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;sum变化了&#39;,newValue,oldValue)\n    if(newValue &gt;&#x3D; 10)&#123;\n      stopWatch()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况二\"><a class=\"headerlink\" href=\"#情况二\"></a>* 情况二</h3>\n<p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>\n<p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p>\n</li>\n<li>\n<p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; ref(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.value.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.value.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    person.value &#x3D; &#123;name:&#39;李四&#39;,age:90&#125;\n  &#125;\n  &#x2F;* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  *&#x2F;\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况三\"><a class=\"headerlink\" href=\"#情况三\"></a>*  情况三</h3>\n<p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changePerson&quot;&gt;修改整个人&lt;&#x2F;button&gt;\n    &lt;hr&gt;\n    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;test&quot;&gt;修改obj.a.b.c&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18\n  &#125;)\n  let obj &#x3D; reactive(&#123;\n    a:&#123;\n      b:&#123;\n        c:666\n      &#125;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changePerson()&#123;\n    Object.assign(person,&#123;name:&#39;李四&#39;,age:80&#125;)\n  &#125;\n  function test()&#123;\n    obj.a.b.c &#x3D; 888\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person变化了&#39;,newValue,oldValue)\n  &#125;)\n  watch(obj,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;Obj变化了&#39;,newValue,oldValue)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况四\"><a class=\"headerlink\" href=\"#情况四\"></a>* 情况四</h3>\n<p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p>\n<ol>\n<li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li>\n<li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li>\n</ol>\n<p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  &#x2F;* watch(()&#x3D;&gt; person.name,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.name变化了&#39;,newValue,oldValue)\n  &#125;) *&#x2F;\n\n  &#x2F;&#x2F; 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()&#x3D;&gt;person.car,(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"情况五\"><a class=\"headerlink\" href=\"#情况五\"></a>* 情况五</h3>\n<p>监视上述的多个数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;情况五：监视上述的多个数据&lt;&#x2F;h1&gt;\n    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeName&quot;&gt;修改名字&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeAge&quot;&gt;修改年龄&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC1&quot;&gt;修改第一台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeC2&quot;&gt;修改第二台车&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeCar&quot;&gt;修改整个车&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;reactive,watch&#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let person &#x3D; reactive(&#123;\n    name:&#39;张三&#39;,\n    age:18,\n    car:&#123;\n      c1:&#39;奔驰&#39;,\n      c2:&#39;宝马&#39;\n    &#125;\n  &#125;)\n  &#x2F;&#x2F; 方法\n  function changeName()&#123;\n    person.name +&#x3D; &#39;~&#39;\n  &#125;\n  function changeAge()&#123;\n    person.age +&#x3D; 1\n  &#125;\n  function changeC1()&#123;\n    person.car.c1 &#x3D; &#39;奥迪&#39;\n  &#125;\n  function changeC2()&#123;\n    person.car.c2 &#x3D; &#39;大众&#39;\n  &#125;\n  function changeCar()&#123;\n    person.car &#x3D; &#123;c1:&#39;雅迪&#39;,c2:&#39;爱玛&#39;&#125;\n  &#125;\n\n  &#x2F;&#x2F; 监视，情况五：监视上述的多个数据\n  watch([()&#x3D;&gt;person.name,person.car],(newValue,oldValue)&#x3D;&gt;&#123;\n    console.log(&#39;person.car变化了&#39;,newValue,oldValue)\n  &#125;,&#123;deep:true&#125;)\n\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-10-【watchEffect】\"><a class=\"headerlink\" href=\"#3-10-【watchEffect】\"></a>3.10. 【watchEffect】</h2>\n<ul>\n<li>\n<p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p>\n</li>\n<li>\n<p><code>watch</code>对比<code>watchEffect</code></p>\n<blockquote>\n<ol>\n<li>\n<p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p>\n</li>\n<li>\n<p><code>watch</code>：要明确指出监视的数据</p>\n</li>\n<li>\n<p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;&#x2F;h1&gt;\n    &lt;h2 id&#x3D;&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changePrice&quot;&gt;水温+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;水位+10&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,watch,watchEffect&#125; from &#39;vue&#39;\n  &#x2F;&#x2F; 数据\n  let temp &#x3D; ref(0)\n  let height &#x3D; ref(0)\n\n  &#x2F;&#x2F; 方法\n  function changePrice()&#123;\n    temp.value +&#x3D; 10\n  &#125;\n  function changeSum()&#123;\n    height.value +&#x3D; 1\n  &#125;\n\n  &#x2F;&#x2F; 用watch实现，需要明确的指出要监视：temp、height\n  watch([temp,height],(value)&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 从value中获取最新的temp值、height值\n    const [newTemp,newHeight] &#x3D; value\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(newTemp &gt;&#x3D; 50 || newHeight &gt;&#x3D; 20)&#123;\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n  &#125;)\n\n  &#x2F;&#x2F; 用watchEffect实现，不用\n  const stopWtach &#x3D; watchEffect(()&#x3D;&gt;&#123;\n    &#x2F;&#x2F; 室温达到50℃，或水位达到20cm，立刻联系服务器\n    if(temp.value &gt;&#x3D; 50 || height.value &gt;&#x3D; 20)&#123;\n      console.log(document.getElementById(&#39;demo&#39;)?.innerText)\n      console.log(&#39;联系服务器&#39;)\n    &#125;\n    &#x2F;&#x2F; 水温达到100，或水位达到50，取消监视\n    if(temp.value &#x3D;&#x3D;&#x3D; 100 || height.value &#x3D;&#x3D;&#x3D; 50)&#123;\n      console.log(&#39;清理了&#39;)\n      stopWtach()\n    &#125;\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-11-【标签的-ref-属性】\"><a class=\"headerlink\" href=\"#3-11-【标签的-ref-属性】\"></a>3.11. 【标签的 ref 属性】</h2>\n<p>作用：用于注册模板引用。</p>\n<blockquote>\n<ul>\n<li>\n<p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p>\n</li>\n<li>\n<p>用在组件标签上，获取的是组件实例对象。</p>\n</li>\n</ul>\n</blockquote>\n<p>用在普通<code>DOM</code>标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h1 ref&#x3D;&quot;title1&quot;&gt;尚硅谷&lt;&#x2F;h1&gt;\n    &lt;h2 ref&#x3D;&quot;title2&quot;&gt;前端&lt;&#x2F;h2&gt;\n    &lt;h3 ref&#x3D;&quot;title3&quot;&gt;Vue&lt;&#x2F;h3&gt;\n    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;\n    &lt;button @click&#x3D;&quot;showLog&quot;&gt;点我打印内容&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref&#125; from &#39;vue&#39;\n\t\n  let title1 &#x3D; ref()\n  let title2 &#x3D; ref()\n  let title3 &#x3D; ref()\n\n  function showLog()&#123;\n    &#x2F;&#x2F; 通过id获取元素\n    const t1 &#x3D; document.getElementById(&#39;title1&#39;)\n    &#x2F;&#x2F; 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((&lt;HTMLElement&gt;t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t&#x2F;************************************&#x2F;\n\t\t\n    &#x2F;&#x2F; 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用在组件标签上：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 父组件App.vue --&gt;\n&lt;template&gt;\n  &lt;Person ref&#x3D;&quot;ren&quot;&#x2F;&gt;\n  &lt;button @click&#x3D;&quot;test&quot;&gt;测试&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\n  import &#123;ref&#125; from &#39;vue&#39;\n\n  let ren &#x3D; ref()\n\n  function test()&#123;\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  &#125;\n&lt;&#x2F;script&gt;\n\n\n&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123;ref,defineExpose&#125; from &#39;vue&#39;\n\t&#x2F;&#x2F; 数据\n  let name &#x3D; ref(&#39;张三&#39;)\n  let age &#x3D; ref(18)\n  &#x2F;****************************&#x2F;\n  &#x2F;****************************&#x2F;\n  &#x2F;&#x2F; 使用defineExpose将组件中的数据交给外部\n  defineExpose(&#123;name,age&#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-12-【props】\"><a class=\"headerlink\" href=\"#3-12-【props】\"></a>3.12. 【props】</h2>\n<blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义一个接口，限制每个Person对象的格式</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInter</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>number\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 定义一个自定义类型Persons</span>\n<span class=\"token keyword\">export</span> type Persons <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>PersonInter<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>App.vue</code>中代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;Person :list&#x3D;&quot;persons&quot;&#x2F;&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\nimport Person from &#39;.&#x2F;components&#x2F;Person.vue&#39;\nimport &#123;reactive&#125; from &#39;vue&#39;\n import &#123;type Persons&#125; from &#39;.&#x2F;types&#39;\n\n let persons &#x3D; reactive&lt;Persons&gt;([\n  &#123;id:&#39;e98219e12&#39;,name:&#39;张三&#39;,age:18&#125;,\n   &#123;id:&#39;e98219e13&#39;,name:&#39;李四&#39;,age:19&#125;,\n    &#123;id:&#39;e98219e14&#39;,name:&#39;王五&#39;,age:20&#125;\n  ])\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Person.vue</code>中代码：</p>\n<pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;template&gt;\n&lt;div class&#x3D;&quot;person&quot;&gt;\n&lt;ul&gt;\n  &lt;li v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item.id&quot;&gt;\n     &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;\n   &lt;&#x2F;li&gt;\n &lt;&#x2F;ul&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\nimport &#123;defineProps&#125; from &#39;vue&#39;\nimport &#123;type PersonInter&#125; from &#39;@&#x2F;types&#39;\n\n&#x2F;&#x2F; 第一种写法：仅接收\n&#x2F;&#x2F; const props &#x3D; defineProps([&#39;list&#39;])\n\n&#x2F;&#x2F; 第二种写法：接收+限制类型\n&#x2F;&#x2F; defineProps&lt;&#123;list:Persons&#125;&gt;()\n\n&#x2F;&#x2F; 第三种写法：接收+限制类型+指定默认值+限制必要性\nlet props &#x3D; withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;\n  list:()&#x3D;&gt;[&#123;id:&#39;asdasg01&#39;,name:&#39;小猪佩奇&#39;,age:18&#125;]\n&#125;)\nconsole.log(props)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"3-13-【生命周期】\"><a class=\"headerlink\" href=\"#3-13-【生命周期】\"></a>3.13. 【生命周期】</h2>\n<ul>\n<li>\n<p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p>\n</li>\n<li>\n<p>规律：</p>\n<blockquote>\n<p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue2</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>beforeCreate</code>、<code>created</code></p>\n<p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p>\n<p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p>\n<p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p>\n</blockquote>\n</li>\n<li>\n<p><code>Vue3</code>的生命周期</p>\n<blockquote>\n<p>创建阶段：<code>setup</code></p>\n<p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p>\n<p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p>\n<p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p>\n</blockquote>\n</li>\n<li>\n<p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p>\n</li>\n<li>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;person&quot;&gt;\n    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;changeSum&quot;&gt;点我sum+1&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;!-- vue3写法 --&gt;\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;Person&quot;&gt;\n  import &#123; \n    ref, \n    onBeforeMount, \n    onMounted, \n    onBeforeUpdate, \n    onUpdated, \n    onBeforeUnmount, \n    onUnmounted \n  &#125; from &#39;vue&#39;\n\n  &#x2F;&#x2F; 数据\n  let sum &#x3D; ref(0)\n  &#x2F;&#x2F; 方法\n  function changeSum() &#123;\n    sum.value +&#x3D; 1\n  &#125;\n  console.log(&#39;setup&#39;)\n  &#x2F;&#x2F; 生命周期钩子\n  onBeforeMount(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载之前&#39;)\n  &#125;)\n  onMounted(()&#x3D;&gt;&#123;\n    console.log(&#39;挂载完毕&#39;)\n  &#125;)\n  onBeforeUpdate(()&#x3D;&gt;&#123;\n    console.log(&#39;更新之前&#39;)\n  &#125;)\n  onUpdated(()&#x3D;&gt;&#123;\n    console.log(&#39;更新完毕&#39;)\n  &#125;)\n  onBeforeUnmount(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载之前&#39;)\n  &#125;)\n  onUnmounted(()&#x3D;&gt;&#123;\n    console.log(&#39;卸载完毕&#39;)\n  &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"3-14-【自定义hook】\"><a class=\"headerlink\" href=\"#3-14-【自定义hook】\"></a>3.14. 【自定义hook】</h2>\n<ul>\n<li>\n<p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p>\n</li>\n<li>\n<p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<ul>\n<li>\n<p><code>useSum.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    sum<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\t\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>useDog.ts</code>中内容如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">,</span>onMounted<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>AxiosError<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> dogList <span class=\"token operator\">=</span> reactive<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 方法</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 发请求</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://dog.ceo/api/breed/pembroke/images/random'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 维护数据</span>\n      dogList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 处理错误</span>\n      <span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>AxiosError<span class=\"token operator\">></span>error\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 挂载钩子</span>\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\n  <span class=\"token comment\">//向外部暴露数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>dogList<span class=\"token punctuation\">,</span>getDog<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中具体使用：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n  &lt;button @click&#x3D;&quot;increment&quot;&gt;点我+1&lt;&#x2F;button&gt;\n  &lt;button @click&#x3D;&quot;decrement&quot;&gt;点我-1&lt;&#x2F;button&gt;\n  &lt;hr&gt;\n  &lt;img v-for&#x3D;&quot;(u,index) in dogList.urlList&quot; :key&#x3D;&quot;index&quot; :src&#x3D;&quot;(u as string)&quot;&gt; \n  &lt;span v-show&#x3D;&quot;dogList.isLoading&quot;&gt;加载中......&lt;&#x2F;span&gt;&lt;br&gt;\n  &lt;button @click&#x3D;&quot;getDog&quot;&gt;再来一只狗&lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\n  import &#123;defineComponent&#125; from &#39;vue&#39;\n\n  export default defineComponent(&#123;\n    name:&#39;App&#39;,\n  &#125;)\n&lt;&#x2F;script&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot;&gt;\n  import useSum from &#39;.&#x2F;hooks&#x2F;useSum&#39;\n  import useDog from &#39;.&#x2F;hooks&#x2F;useDog&#39;\n\t\n  let &#123;sum,increment,decrement&#125; &#x3D; useSum()\n  let &#123;dogList,getDog&#125; &#x3D; useDog()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<hr>\n<h1 id=\"4-路由\"><a class=\"headerlink\" href=\"#4-路由\"></a>4. 路由</h1>\n<h2 id=\"4-1-【对路由的理解】\"><a class=\"headerlink\" href=\"#4-1-【对路由的理解】\"></a>4.1. 【对路由的理解】</h2>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232332.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"4-2-【基本切换效果】\"><a class=\"headerlink\" href=\"#4-2-【基本切换效果】\"></a>4.2. 【基本切换效果】</h2>\n<ul>\n<li>\n<p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p>\n</li>\n<li>\n<p>路由配置文件代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>createRouter<span class=\"token punctuation\">,</span>createWebHistory<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/Home.vue'</span>\n<span class=\"token keyword\">import</span> News <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/News.vue'</span>\n<span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/About.vue'</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>main.ts</code>代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router/index'</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p><code>App.vue</code>代码如下</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h2 class&#x3D;&quot;title&quot;&gt;Vue路由测试&lt;&#x2F;h2&gt;\n    &lt;!-- 导航区 --&gt;\n    &lt;div class&#x3D;&quot;navigate&quot;&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;home&quot; active-class&#x3D;&quot;active&quot;&gt;首页&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;news&quot; active-class&#x3D;&quot;active&quot;&gt;新闻&lt;&#x2F;RouterLink&gt;\n      &lt;RouterLink to&#x3D;&quot;&#x2F;about&quot; active-class&#x3D;&quot;active&quot;&gt;关于&lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;div&gt;\n    &lt;!-- 展示区 --&gt;\n    &lt;div class&#x3D;&quot;main-content&quot;&gt;\n      &lt;RouterView&gt;&lt;&#x2F;RouterView&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot; setup name&#x3D;&quot;App&quot;&gt;\n  import &#123;RouterLink,RouterView&#125; from &#39;vue-router&#39;  \n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"4-3-【两个注意点】\"><a class=\"headerlink\" href=\"#4-3-【两个注意点】\"></a>4.3. 【两个注意点】</h2>\n<blockquote>\n<ol>\n<li>\n<p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p>\n</li>\n<li>\n<p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"4-4-【路由器工作模式】\"><a class=\"headerlink\" href=\"#4-4-【路由器工作模式】\"></a>4.4.【路由器工作模式】</h2>\n<ol>\n<li>\n<p><code>history</code>模式</p>\n<blockquote>\n<p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p>\n<p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//history模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n<li>\n<p><code>hash</code>模式</p>\n<blockquote>\n<p>优点：兼容性更好，因为不需要服务器端处理路径。</p>\n<p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span><span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//hash模式</span>\n\t<span class=\"token comment\">/******/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-5-【to的两种写法】\"><a class=\"headerlink\" href=\"#4-5-【to的两种写法】\"></a>4.5. 【to的两种写法】</h2>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 第一种：to的字符串写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&quot;&gt;主页&lt;&#x2F;router-link&gt;\n\n&lt;!-- 第二种：to的对象写法 --&gt;\n&lt;router-link active-class&#x3D;&quot;active&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;home&#39;&#125;&quot;&gt;Home&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-6-【命名路由】\"><a class=\"headerlink\" href=\"#4-6-【命名路由】\"></a>4.6. 【命名路由】</h2>\n<p>作用：可以简化路由跳转及传参（后面就讲）。</p>\n<p>给路由规则命名：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Home\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>About\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>跳转路由：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;name:&#39;guanyu&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-7-【嵌套路由】\"><a class=\"headerlink\" href=\"#4-7-【嵌套路由】\"></a>4.7. 【嵌套路由】</h2>\n<ol>\n<li>\n<p>编写<code>News</code>的子路由：<code>Detail.vue</code></p>\n</li>\n<li>\n<p>配置路由规则，使用<code>children</code>配置项：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  history<span class=\"token operator\">:</span><span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\troutes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'zhuye'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>Home\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xinwen'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>News<span class=\"token punctuation\">,</span>\n\t\t\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tcomponent<span class=\"token operator\">:</span>Detail\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'guanyu'</span><span class=\"token punctuation\">,</span>\n\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>\n\t\t\tcomponent<span class=\"token operator\">:</span>About\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>跳转路由（记得要加完整路径）：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail&quot;&gt;xxxx&lt;&#x2F;router-link&gt;\n&lt;!-- 或 --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;xxxx&lt;&#x2F;router-link&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;news&quot;&gt;\n    &lt;nav class&#x3D;&quot;news-list&quot;&gt;\n      &lt;RouterLink v-for&#x3D;&quot;news in newsList&quot; :key&#x3D;&quot;news.id&quot; :to&#x3D;&quot;&#123;path:&#39;&#x2F;news&#x2F;detail&#39;&#125;&quot;&gt;\n        &#123;&#123;news.name&#125;&#125;\n      &lt;&#x2F;RouterLink&gt;\n    &lt;&#x2F;nav&gt;\n    &lt;div class&#x3D;&quot;news-detail&quot;&gt;\n      &lt;RouterView&#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-8-【路由传参】\"><a class=\"headerlink\" href=\"#4-8-【路由传参】\"></a>4.8. 【路由传参】</h2>\n<h3 id=\"query参数\"><a class=\"headerlink\" href=\"#query参数\"></a>query参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;news&#x2F;detail?a&#x3D;1&amp;b&#x3D;2&amp;content&#x3D;欢迎你&quot;&gt;\n\t跳转\n&lt;&#x2F;router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    &#x2F;&#x2F;name:&#39;xiang&#39;, &#x2F;&#x2F;用name也可以跳转\n    path:&#39;&#x2F;news&#x2F;detail&#39;,\n    query:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.content\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印query参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"params参数\"><a class=\"headerlink\" href=\"#params参数\"></a>params参数</h3>\n<ol>\n<li>\n<p>传递参数</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;\n&lt;RouterLink :to&#x3D;&quot;&#96;&#x2F;news&#x2F;detail&#x2F;001&#x2F;新闻001&#x2F;内容001&#96;&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;&#x2F;RouterLink&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;\n&lt;RouterLink \n  :to&#x3D;&quot;&#123;\n    name:&#39;xiang&#39;, &#x2F;&#x2F;用name跳转\n    params:&#123;\n      id:news.id,\n      title:news.title,\n      content:news.title\n    &#125;\n  &#125;&quot;\n&gt;\n  &#123;&#123;news.title&#125;&#125;\n&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 打印params参数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<blockquote>\n<p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p>\n<p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p>\n</blockquote>\n<h2 id=\"4-9-【路由的props配置】\"><a class=\"headerlink\" href=\"#4-9-【路由的props配置】\"></a>4.9. 【路由的props配置】</h2>\n<p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiang'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'detail/:id/:title/:content'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>Detail<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:&#123;a:1,b:2,c:3&#125;, </span>\n\n  <span class=\"token comment\">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span>\n  <span class=\"token comment\">// props:true</span>\n  \n  <span class=\"token comment\">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span>\n  <span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> route<span class=\"token punctuation\">.</span>query\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-10-【-replace属性】\"><a class=\"headerlink\" href=\"#4-10-【-replace属性】\"></a>4.10. 【 replace属性】</h2>\n<ol>\n<li>\n<p>作用：控制路由跳转时操作浏览器历史记录的模式。</p>\n</li>\n<li>\n<p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p>\n<ul>\n<li><code>push</code>是追加历史记录（默认值）。</li>\n<li><code>replace</code>是替换当前记录。</li>\n</ul>\n</li>\n<li>\n<p>开启<code>replace</code>模式：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;RouterLink replace .......&gt;News&lt;&#x2F;RouterLink&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"4-11-【编程式导航】\"><a class=\"headerlink\" href=\"#4-11-【编程式导航】\"></a>4.11. 【编程式导航】</h2>\n<p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">,</span>useRouter<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>parmas<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-12-【重定向】\"><a class=\"headerlink\" href=\"#4-12-【重定向】\"></a>4.12. 【重定向】</h2>\n<ol>\n<li>\n<p>作用：将特定的路径，重新定向到已有路由。</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span><span class=\"token string\">'/about'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"5-pinia\"><a class=\"headerlink\" href=\"#5-pinia\"></a>5. pinia</h1>\n<h2 id=\"5-1【准备一个效果】\"><a class=\"headerlink\" href=\"#5-1【准备一个效果】\"></a>5.1【准备一个效果】</h2>\n<p><img src=\"https://img.aixcc.top/file/f14ee7ea7c72a9003d7b8.gif\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-2【搭建-pinia-环境】\"><a class=\"headerlink\" href=\"#5-2【搭建-pinia-环境】\"></a>5.2【搭建 pinia 环境】</h2>\n<p>第一步：<code>npm install pinia</code></p>\n<p>第二步：操作<code>src/main.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span>\n\n<span class=\"token comment\">/* 引入createPinia，用于创建pinia */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">/* 创建pinia */</span>\n<span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 使用插件 */</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时开发者工具中已经有了<code>pinia</code>选项</p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232851.webp\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"5-3【存储-读取数据】\"><a class=\"headerlink\" href=\"#5-3【存储-读取数据】\"></a>5.3【存储+读取数据】</h2>\n<ol>\n<li>\n<p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p>\n</li>\n<li>\n<p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p>\n</li>\n<li>\n<p>具体编码：<code>src/store/count.ts</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  actions<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      sum<span class=\"token operator\">:</span><span class=\"token number\">6</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  getters<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>具体编码：<code>src/store/talk.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">talkList</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'你今天有点怪，哪里怪？怪好看的！'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n     \t\t<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'草莓、蓝莓、蔓越莓，你想我了没？'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'yuysada03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span><span class=\"token string\">'心里给你留了一块地，我的死心塌地'</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中使用<code>state</code>中的数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;&#x2F;h2&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  &#x2F;&#x2F; 引入对应的useXxxxxStore\t\n  import &#123;useSumStore&#125; from &#39;@&#x2F;store&#x2F;sum&#39;\n  \n  &#x2F;&#x2F; 调用useXxxxxStore得到对应的store\n  const sumStore &#x3D; useSumStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;ul&gt;\n    &lt;li v-for&#x3D;&quot;talk in talkStore.talkList&quot; :key&#x3D;&quot;talk.id&quot;&gt;\n      &#123;&#123; talk.content &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import axios from &#39;axios&#39;\n  import &#123;useTalkStore&#125; from &#39;@&#x2F;store&#x2F;talk&#39;\n\n  const talkStore &#x3D; useTalkStore()\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-4-【修改数据】-三种方式\"><a class=\"headerlink\" href=\"#5-4-【修改数据】-三种方式\"></a>5.4.【修改数据】(三种方式)</h2>\n<ol>\n<li>\n<p>第一种修改方式，直接修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>第二种修改方式：批量修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">countStore<span class=\"token punctuation\">.</span><span class=\"token function\">$patch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  sum<span class=\"token operator\">:</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span>\n  school<span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/*************/</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//加</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//操作countStore中的sum</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//减</span>\n    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">-=</span> value\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/*************/</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中调用<code>action</code>即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用countStore</span>\n<span class=\"token keyword\">const</span> countStore <span class=\"token operator\">=</span> <span class=\"token function\">useCountStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 调用对应action</span>\ncountStore<span class=\"token punctuation\">.</span><span class=\"token function\">incrementOdd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-5-【storeToRefs】\"><a class=\"headerlink\" href=\"#5-5-【storeToRefs】\"></a>5.5.【storeToRefs】</h2>\n<ul>\n<li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li>\n<li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;count&quot;&gt;\n\t\t&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;&#x2F;h2&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Count&quot;&gt;\n  import &#123; useCountStore &#125; from &#39;@&#x2F;store&#x2F;count&#39;\n  &#x2F;* 引入storeToRefs *&#x2F;\n  import &#123; storeToRefs &#125; from &#39;pinia&#39;\n\n\t&#x2F;* 得到countStore *&#x2F;\n  const countStore &#x3D; useCountStore()\n  &#x2F;* 使用storeToRefs转换countStore，随后解构 *&#x2F;\n  const &#123;sum&#125; &#x3D; storeToRefs(countStore)\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-6-【getters】\"><a class=\"headerlink\" href=\"#5-6-【getters】\"></a>5.6.【getters】</h2>\n<ol>\n<li>\n<p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p>\n</li>\n<li>\n<p>追加<code>getters</code>配置。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入defineStore用于创建store</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n\n<span class=\"token comment\">// 定义并暴露一个store</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCountStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 动作</span>\n  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/************/</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 状态</span>\n  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">sum</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">school</span><span class=\"token operator\">:</span><span class=\"token string\">'atguigu'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 计算</span>\n  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">bigSum</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">upperSchool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> school<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件中读取数据：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span>decrement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> countStore\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">,</span>school<span class=\"token punctuation\">,</span>bigSum<span class=\"token punctuation\">,</span>upperSchool<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">storeToRefs</span><span class=\"token punctuation\">(</span>countStore<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"5-7-【-subscribe】\"><a class=\"headerlink\" href=\"#5-7-【-subscribe】\"></a>5.7.【$subscribe】</h2>\n<p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">talkStore<span class=\"token punctuation\">.</span><span class=\"token function\">$subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LoveTalk'</span><span class=\"token punctuation\">,</span>mutate<span class=\"token punctuation\">,</span>state<span class=\"token punctuation\">)</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>talkList<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-8-【store组合式写法】\"><a class=\"headerlink\" href=\"#5-8-【store组合式写法】\"></a>5.8. 【store组合式写法】</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineStore<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>nanoid<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'nanoid'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reactive<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useTalkStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talk'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// talkList就是state</span>\n  <span class=\"token keyword\">const</span> talkList <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'talkList'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// getATalk函数相当于action</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getATalk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 发请求，下面这行的写法是：连续解构赋值+重命名</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>content<span class=\"token operator\">:</span>title<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.uomg.com/api/rand.qinghua?format=json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 把请求回来的字符串，包装成一个对象</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span><span class=\"token function\">nanoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>title<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 放到数组中</span>\n    talkList<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>talkList<span class=\"token punctuation\">,</span>getATalk<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"6-组件通信\"><a class=\"headerlink\" href=\"#6-组件通信\"></a>6. 组件通信</h1>\n<p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p>\n<ul>\n<li>移出事件总线，使用<code>mitt</code>代替。</li>\n</ul>\n<ul>\n<li><code>vuex</code>换成了<code>pinia</code>。</li>\n<li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li>\n<li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li>\n<li><code>$children</code>被砍掉了。</li>\n</ul>\n<p><strong>常见搭配形式：</strong></p>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232507.webp\" alt=\"image-20231119185900990\" loading=\"lazy\"></p>\n<h2 id=\"6-1-【props】\"><a class=\"headerlink\" href=\"#6-1-【props】\"></a>6.1. 【props】</h2>\n<p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p>\n<ul>\n<li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li>\n<li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li>\n</ul>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件，&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;Child :car&#x3D;&quot;car&quot; :getToy&#x3D;&quot;getToy&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\t&#x2F;&#x2F; 数据\n\tconst car &#x3D; ref(&#39;奔驰&#39;)\n\tconst toy &#x3D; ref()\n\t&#x2F;&#x2F; 方法\n\tfunction getToy(value:string)&#123;\n\t\ttoy.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;child&quot;&gt;\n    &lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tconst toy &#x3D; ref(&#39;奥特曼&#39;)\n\t\n\tdefineProps([&#39;car&#39;,&#39;getToy&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-2-【自定义事件】\"><a class=\"headerlink\" href=\"#6-2-【自定义事件】\"></a>6.2. 【自定义事件】</h2>\n<ol>\n<li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li>\n<li>注意区分好：原生事件、自定义事件。</li>\n</ol>\n<ul>\n<li>原生事件：\n<ul>\n<li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li>\n<li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li>\n</ul>\n</li>\n<li>自定义事件：\n<ul>\n<li>事件名是任意名称</li>\n<li><strong style=\"color:red\">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!--在父组件中，给子组件绑定自定义事件：--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">@send-toy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!--注意区分原生事件与自定义事件中的$event--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toy = $event<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>测试<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//子组件中，触发事件：</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span> 具体数据<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-3-【mitt】\"><a class=\"headerlink\" href=\"#6-3-【mitt】\"></a>6.3. 【mitt】</h2>\n<p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p>\n<p>安装<code>mitt</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mitt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>新建文件：<code>src\\utils\\emitter.ts</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入mitt </span>\n<span class=\"token keyword\">import</span> mitt <span class=\"token keyword\">from</span> <span class=\"token string\">\"mitt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建emitter</span>\n<span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token function\">mitt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\n  // 绑定事件\n  emitter.on('abc',(value)=>&#123;\n    console.log('abc事件被触发',value)\n  &#125;)\n  emitter.on('xyz',(value)=>&#123;\n    console.log('xyz事件被触发',value)\n  &#125;)\n\n  setInterval(() => &#123;\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  &#125;, 1000);\n\n  setTimeout(() => &#123;\n    // 清理事件\n    emitter.all.clear()\n  &#125;, 3000); \n*/</span>\n\n<span class=\"token comment\">// 创建并暴露mitt</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emitter<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onUnmounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 绑定事件</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy事件被触发'</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 解绑事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>【第三步】：提供数据的组件，在合适的时候触发事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> emitter <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/emitter\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendToy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 触发事件</span>\n  emitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send-toy'</span><span class=\"token punctuation\">,</span>toy<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p>\n<h2 id=\"6-4-【v-model】\"><a class=\"headerlink\" href=\"#6-4-【v-model】\"></a>6.4.【v-model】</h2>\n<ol>\n<li>\n<p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p>\n</li>\n<li>\n<p>前序知识 —— <code>v-model</code>的本质</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 使用v-model指令 --&gt;\n&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;userName&quot;&gt;\n\n&lt;!-- v-model的本质是下面这行代码 --&gt;\n&lt;input \n  type&#x3D;&quot;text&quot; \n  :value&#x3D;&quot;userName&quot; \n  @input&#x3D;&quot;userName &#x3D;(&lt;HTMLInputElement&gt;$event.target).value&quot;\n&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 组件标签上使用v-model指令 --&gt;\n&lt;AtguiguInput v-model&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 组件标签上v-model的本质 --&gt;\n&lt;AtguiguInput :modelValue&#x3D;&quot;userName&quot; @update:model-value&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;\n\t\t&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;modelValue&quot; \n       @input&#x3D;&quot;emit(&#39;update:model-value&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;modelValue&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:model-value&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>也可以更换<code>value</code>，例如改成<code>abc</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 也可以更换value，例如改成abc--&gt;\n&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot;&#x2F;&gt;\n\n&lt;!-- 上面代码的本质如下 --&gt;\n&lt;AtguiguInput :abc&#x3D;&quot;userName&quot; @update:abc&#x3D;&quot;userName &#x3D; $event&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>AtguiguInput</code>组件中：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;box&quot;&gt;\n    &lt;input \n       type&#x3D;&quot;text&quot; \n       :value&#x3D;&quot;abc&quot; \n       @input&#x3D;&quot;emit(&#39;update:abc&#39;,$event.target.value)&quot;\n    &gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;AtguiguInput&quot;&gt;\n  &#x2F;&#x2F; 接收props\n  defineProps([&#39;abc&#39;])\n  &#x2F;&#x2F; 声明事件\n  const emit &#x3D; defineEmits([&#39;update:abc&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;AtguiguInput v-model:abc&#x3D;&quot;userName&quot; v-model:xyz&#x3D;&quot;password&quot;&#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-5-【-attrs-】\"><a class=\"headerlink\" href=\"#6-5-【-attrs-】\"></a>6.5.【$attrs 】</h2>\n<ol>\n<li>\n<p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p>\n</li>\n<li>\n<p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p>\n<blockquote>\n<p>注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p>\n</blockquote>\n</li>\n</ol>\n<p>父组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n\t\t&lt;Child :a&#x3D;&quot;a&quot; :b&#x3D;&quot;b&quot; :c&#x3D;&quot;c&quot; :d&#x3D;&quot;d&quot; v-bind&#x3D;&quot;&#123;x:100,y:200&#125;&quot; :updateA&#x3D;&quot;updateA&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n\timport Child from &#39;.&#x2F;Child.vue&#39;\n\timport &#123; ref &#125; from &quot;vue&quot;;\n\tlet a &#x3D; ref(1)\n\tlet b &#x3D; ref(2)\n\tlet c &#x3D; ref(3)\n\tlet d &#x3D; ref(4)\n\n\tfunction updateA(value)&#123;\n\t\ta.value &#x3D; value\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;child&quot;&gt;\n\t\t&lt;h3&gt;子组件&lt;&#x2F;h3&gt;\n\t\t&lt;GrandChild v-bind&#x3D;&quot;$attrs&quot;&#x2F;&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Child&quot;&gt;\n\timport GrandChild from &#39;.&#x2F;GrandChild.vue&#39;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>孙组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class&#x3D;&quot;grand-child&quot;&gt;\n\t\t&lt;h3&gt;孙组件&lt;&#x2F;h3&gt;\n\t\t&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;&#x2F;h4&gt;\n\t\t&lt;button @click&#x3D;&quot;updateA(666)&quot;&gt;点我更新A&lt;&#x2F;button&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n\tdefineProps([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;x&#39;,&#39;y&#39;,&#39;updateA&#39;])\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-6-【-refs、-parent】\"><a class=\"headerlink\" href=\"#6-6-【-refs、-parent】\"></a>6.6. 【$refs、$parent】</h2>\n<ol>\n<li>\n<p>概述：</p>\n<ul>\n<li><code>$refs</code>用于 ：<strong>父→子。</strong></li>\n<li><code>$parent</code>用于：<strong>子→父。</strong></li>\n</ul>\n</li>\n<li>\n<p>原理如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$refs</code></td>\n<td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td>\n</tr>\n<tr>\n<td><code>$parent</code></td>\n<td>值为对象，当前组件的父组件实例对象。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"6-7-【provide、inject】\"><a class=\"headerlink\" href=\"#6-7-【provide、inject】\"></a>6.7. 【provide、inject】</h2>\n<ol>\n<li>\n<p>概述：实现<strong>祖孙组件</strong>直接通信</p>\n</li>\n<li>\n<p>具体使用：</p>\n<ul>\n<li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li>\n<li>在后代组件中通过<code>inject</code>配置来声明接收数据</li>\n</ul>\n</li>\n<li>\n<p>具体编码：</p>\n<p>【第一步】父组件中，使用<code>provide</code>提供数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;father&quot;&gt;\n    &lt;h3&gt;父组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;money +&#x3D; 1&quot;&gt;资产+1&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;car.price +&#x3D; 1&quot;&gt;汽车价格+1&lt;&#x2F;button&gt;\n    &lt;Child&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Father&quot;&gt;\n  import Child from &#39;.&#x2F;Child.vue&#39;\n  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;\n  &#x2F;&#x2F; 数据\n  let money &#x3D; ref(100)\n  let car &#x3D; reactive(&#123;\n    brand:&#39;奔驰&#39;,\n    price:100\n  &#125;)\n  &#x2F;&#x2F; 用于更新money的方法\n  function updateMoney(value:number)&#123;\n    money.value +&#x3D; value\n  &#125;\n  &#x2F;&#x2F; 提供数据\n  provide(&#39;moneyContext&#39;,&#123;money,updateMoney&#125;)\n  provide(&#39;car&#39;,car)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p>\n</blockquote>\n<p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;grand-child&quot;&gt;\n    &lt;h3&gt;我是孙组件&lt;&#x2F;h3&gt;\n    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;&#x2F;h4&gt;\n    &lt;button @click&#x3D;&quot;updateMoney(6)&quot;&gt;点我&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;GrandChild&quot;&gt;\n  import &#123; inject &#125; from &#39;vue&#39;;\n  &#x2F;&#x2F; 注入数据\n let &#123;money,updateMoney&#125; &#x3D; inject(&#39;moneyContext&#39;,&#123;money:0,updateMoney:(x:number)&#x3D;&gt;&#123;&#125;&#125;)\n  let car &#x3D; inject(&#39;car&#39;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"6-8-【pinia】\"><a class=\"headerlink\" href=\"#6-8-【pinia】\"></a>6.8. 【pinia】</h2>\n<p>参考之前<code>pinia</code>部分的讲解</p>\n<h2 id=\"6-9-【slot】\"><a class=\"headerlink\" href=\"#6-9-【slot】\"></a>6.9. 【slot】</h2>\n<h3 id=\"1-默认插槽\"><a class=\"headerlink\" href=\"#1-默认插槽\"></a>1. 默认插槽</h3>\n<p><img src=\"https://alist.aixcc.top/d/OneDrive/img/202407151232099.webp\" alt=\"img\" loading=\"lazy\"></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;ul&gt;\n            &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n          &lt;&#x2F;ul&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;!-- 默认插槽 --&gt;\n            &lt;slot&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-具名插槽\"><a class=\"headerlink\" href=\"#2-具名插槽\"></a>2. 具名插槽</h3>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n        &lt;Category title&#x3D;&quot;今日热门游戏&quot;&gt;\n          &lt;template v-slot:s1&gt;\n            &lt;ul&gt;\n              &lt;li v-for&#x3D;&quot;g in games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n            &lt;&#x2F;ul&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template #s2&gt;\n            &lt;a href&#x3D;&quot;&quot;&gt;更多&lt;&#x2F;a&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Category&gt;\n子组件中：\n        &lt;template&gt;\n          &lt;div class&#x3D;&quot;item&quot;&gt;\n            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;\n            &lt;slot name&#x3D;&quot;s1&quot;&gt;&lt;&#x2F;slot&gt;\n            &lt;slot name&#x3D;&quot;s2&quot;&gt;&lt;&#x2F;slot&gt;\n          &lt;&#x2F;div&gt;\n        &lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-作用域插槽\"><a class=\"headerlink\" href=\"#3-作用域插槽\"></a>3. 作用域插槽</h3>\n<ol>\n<li>\n<p>理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">父组件中：\n      &lt;Game v-slot&#x3D;&quot;params&quot;&gt;\n      &lt;!-- &lt;Game v-slot:default&#x3D;&quot;params&quot;&gt; --&gt;\n      &lt;!-- &lt;Game #default&#x3D;&quot;params&quot;&gt; --&gt;\n        &lt;ul&gt;\n          &lt;li v-for&#x3D;&quot;g in params.games&quot; :key&#x3D;&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n      &lt;&#x2F;Game&gt;\n\n子组件中：\n      &lt;template&gt;\n        &lt;div class&#x3D;&quot;category&quot;&gt;\n          &lt;h2&gt;今日游戏榜单&lt;&#x2F;h2&gt;\n          &lt;slot :games&#x3D;&quot;games&quot; a&#x3D;&quot;哈哈&quot;&gt;&lt;&#x2F;slot&gt;\n        &lt;&#x2F;div&gt;\n      &lt;&#x2F;template&gt;\n\n      &lt;script setup lang&#x3D;&quot;ts&quot; name&#x3D;&quot;Category&quot;&gt;\n        import &#123;reactive&#125; from &#39;vue&#39;\n        let games &#x3D; reactive([\n          &#123;id:&#39;asgdytsa01&#39;,name:&#39;英雄联盟&#39;&#125;,\n          &#123;id:&#39;asgdytsa02&#39;,name:&#39;王者荣耀&#39;&#125;,\n          &#123;id:&#39;asgdytsa03&#39;,name:&#39;红色警戒&#39;&#125;,\n          &#123;id:&#39;asgdytsa04&#39;,name:&#39;斗罗大陆&#39;&#125;\n        ])\n      &lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h1 id=\"7-其它-API\"><a class=\"headerlink\" href=\"#7-其它-API\"></a>7. 其它 API</h1>\n<h2 id=\"7-1-【shallowRef-与-shallowReactive-】\"><a class=\"headerlink\" href=\"#7-1-【shallowRef-与-shallowReactive-】\"></a>7.1.【shallowRef 与 shallowReactive 】</h2>\n<h3 id=\"shallowRef\"><a class=\"headerlink\" href=\"#shallowRef\"></a><code>shallowRef</code></h3>\n<ol>\n<li>\n<p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myVar <span class=\"token operator\">=</span> <span class=\"token function\">shallowRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p>\n</li>\n</ol>\n<h3 id=\"shallowReactive\"><a class=\"headerlink\" href=\"#shallowReactive\"></a><code>shallowReactive</code></h3>\n<ol>\n<li>\n<p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token function\">shallowReactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p>\n</li>\n</ol>\n<h3 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h3>\n<blockquote>\n<p>通过使用 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowref\"><code>shallowRef()</code></a> 和 <a href=\"https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive\"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p>\n</blockquote>\n<h2 id=\"7-2-【readonly-与-shallowReadonly】\"><a class=\"headerlink\" href=\"#7-2-【readonly-与-shallowReadonly】\"></a>7.2.【readonly 与 shallowReadonly】</h2>\n<h3 id=\"readonly\"><a class=\"headerlink\" href=\"#readonly\"></a><strong><code>readonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：用于创建一个对象的深只读副本。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> readOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">readonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>对象的所有嵌套属性都将变为只读。</li>\n<li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li>\n</ul>\n</li>\n<li>\n<p>应用场景：</p>\n<ul>\n<li>创建不可变的状态快照。</li>\n<li>保护全局状态或配置不被修改。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"shallowReadonly\"><a class=\"headerlink\" href=\"#shallowReadonly\"></a><strong><code>shallowReadonly</code></strong></h3>\n<ol>\n<li>\n<p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p>\n</li>\n<li>\n<p>用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shallowReadOnlyCopy <span class=\"token operator\">=</span> <span class=\"token function\">shallowReadonly</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>特点：</p>\n<ul>\n<li>\n<p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p>\n</li>\n<li>\n<p>适用于只需保护对象顶层属性的场景。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-3-【toRaw-与-markRaw】\"><a class=\"headerlink\" href=\"#7-3-【toRaw-与-markRaw】\"></a>7.3.【toRaw 与 markRaw】</h2>\n<h3 id=\"toRaw\"><a class=\"headerlink\" href=\"#toRaw\"></a><code>toRaw</code></h3>\n<ol>\n<li>\n<p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p>\n<blockquote>\n<p>官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p>\n</blockquote>\n<blockquote>\n<p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p>\n</blockquote>\n</li>\n<li>\n<p>具体编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span>toRaw<span class=\"token punctuation\">,</span>markRaw<span class=\"token punctuation\">,</span>isReactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* toRaw */</span>\n<span class=\"token comment\">// 响应式对象</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'tony'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 原始对象</span>\n<span class=\"token keyword\">let</span> rawPerson <span class=\"token operator\">=</span> <span class=\"token function\">toRaw</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citysd <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>rawPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReactive</span><span class=\"token punctuation\">(</span>citys2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"markRaw\"><a class=\"headerlink\" href=\"#markRaw\"></a><code>markRaw</code></h3>\n<ol>\n<li>\n<p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p>\n<blockquote>\n<p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p>\n</blockquote>\n</li>\n<li>\n<p>编码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* markRaw */</span>\n<span class=\"token keyword\">let</span> citys <span class=\"token operator\">=</span> <span class=\"token function\">markRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda01'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda02'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'上海'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda03'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'天津'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token string\">'asdda04'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'重庆'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span>\n<span class=\"token keyword\">let</span> citys2 <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"7-4-【customRef】\"><a class=\"headerlink\" href=\"#7-4-【customRef】\"></a>7.4.【customRef】</h2>\n<p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p>\n<p>实现防抖效果（<code>useSumRef.ts</code>）：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>customRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>initValue<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>delay<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span>trigger<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> timer<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span>\n        <span class=\"token keyword\">return</span> initValue\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          initValue <span class=\"token operator\">=</span> value\n          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//通知Vue数据msg变化了</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>msg<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>组件中使用：</p>\n<h1 id=\"8-Vue3新组件\"><a class=\"headerlink\" href=\"#8-Vue3新组件\"></a>8. Vue3新组件</h1>\n<h2 id=\"8-1-【Teleport】\"><a class=\"headerlink\" href=\"#8-1-【Teleport】\"></a>8.1. 【Teleport】</h2>\n<ul>\n<li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>teleport</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>body<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>我是一个弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我是弹窗中的一些内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>isShow = false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>关闭弹窗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>teleport</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-2-【Suspense】\"><a class=\"headerlink\" href=\"#8-2-【Suspense】\"></a>8.2. 【Suspense】</h2>\n<ul>\n<li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li>\n<li>使用步骤：\n<ul>\n<li>异步引入组件</li>\n<li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineAsyncComponent<span class=\"token punctuation\">,</span>Suspense <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">defineAsyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Child.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;div class&#x3D;&quot;app&quot;&gt;\n        &lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n        &lt;Suspense&gt;\n          &lt;template v-slot:default&gt;\n            &lt;Child&#x2F;&gt;\n          &lt;&#x2F;template&gt;\n          &lt;template v-slot:fallback&gt;\n            &lt;h3&gt;加载中.......&lt;&#x2F;h3&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;Suspense&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"8-3-【全局API转移到应用对象】\"><a class=\"headerlink\" href=\"#8-3-【全局API转移到应用对象】\"></a>8.3.【全局API转移到应用对象】</h2>\n<ul>\n<li><code>app.component</code></li>\n<li><code>app.config</code></li>\n<li><code>app.directive</code></li>\n<li><code>app.mount</code></li>\n<li><code>app.unmount</code></li>\n<li><code>app.use</code></li>\n</ul>\n<h2 id=\"8-4-【其他】\"><a class=\"headerlink\" href=\"#8-4-【其他】\"></a>8.4.【其他】</h2>\n<ul>\n<li>\n<p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p>\n</li>\n<li>\n<p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p>\n</li>\n<li>\n<p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p>\n</li>\n<li>\n<p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p>\n</li>\n<li>\n<p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p>\n</li>\n<li>\n<p>移除了过滤器 <code>filter</code>。</p>\n</li>\n<li>\n<p>移除了<code>$children</code> 实例 <code>propert</code>。</p>\n<p>…</p>\n</li>\n</ul>\n<hr>\n<p><strong>本文内容来源于尚硅谷Vue.js教程，原文地址：<a href=\"http://www.atguigu.com/video/284/\">尚硅谷Vue教程</a>。感谢尚硅谷提供的优秀文档资源。</strong></p>\n",
            "tags": [
                "Vue",
                "前端"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/07/02/%E5%AE%9A%E6%9C%9F%E6%B8%85%E7%90%86Alist%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/",
            "url": "https://blog.aixcc.top/2024/07/02/%E5%AE%9A%E6%9C%9F%E6%B8%85%E7%90%86Alist%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/",
            "title": "定期清理Alist备份文件",
            "date_published": "2024-07-02T11:34:29.000Z",
            "content_html": "<h1 id=\"使用-Alist-和-Bash-脚本实现自动化管理\"><a class=\"headerlink\" href=\"#使用-Alist-和-Bash-脚本实现自动化管理\"></a>使用 Alist 和 Bash 脚本实现自动化管理</h1>\n<p>在上次的博客中，我们介绍了如何使用 Alist 来定时备份服务器上的一些文件。本篇博客将介绍如何编写一个 Bash 脚本，定期清理这些备份文件，节省存储空间。</p>\n<h3 id=\"为什么需要定期清理备份文件？\"><a class=\"headerlink\" href=\"#为什么需要定期清理备份文件？\"></a>为什么需要定期清理备份文件？</h3>\n<p>备份文件在系统维护中起着重要作用，但如果不加管理，长期积累的备份文件会占用大量存储空间，甚至可能导致磁盘空间不足的问题。定期清理过期的备份文件，可以有效释放存储资源，确保系统的高效运行。</p>\n<h3 id=\"利用-Alist-提供的接口实现定期清理\"><a class=\"headerlink\" href=\"#利用-Alist-提供的接口实现定期清理\"></a>利用 Alist 提供的接口实现定期清理</h3>\n<p>Alist 提供了 <code>POST /api/fs/list</code> 和 <code>POST /api/fs/remove</code> 接口，分别用于列出文件和删除文件。通过这两个接口，我们可以方便地实现定期清理备份文件的功能。</p>\n<h3 id=\"脚本功能\"><a class=\"headerlink\" href=\"#脚本功能\"></a>脚本功能</h3>\n<p>该 Bash 脚本的主要功能包括：</p>\n<ol>\n<li>列出备份目录中的所有文件。</li>\n<li>判断文件是否超过指定的时间（本文中设置为30天）。</li>\n<li>删除超过指定时间的文件。</li>\n<li>将操作结果记录到日志文件中。</li>\n</ol>\n<h3 id=\"脚本实现\"><a class=\"headerlink\" href=\"#脚本实现\"></a>脚本实现</h3>\n<p>首先，在 <code>/opt/alist</code> 目录下创建脚本文件和日志文件夹：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/alist/log\n<span class=\"token builtin class-name\">cd</span> /opt/alist\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在 <code>clean_backups.sh</code> 文件中输入以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 设置日志文件</span>\n<span class=\"token assign-left variable\">LOG_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/log/clean_back_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y%m%d%H%M%S'</span><span class=\"token variable\">)</span></span>.log\"</span>\n\n<span class=\"token comment\"># 删除超过30天的日志文件</span>\n<span class=\"token function\">find</span> /opt/alist/log <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.log\"</span> <span class=\"token parameter variable\">-mtime</span> +30 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 函数：带时间戳的echo</span>\n<span class=\"token function-name function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token variable\">)</span></span>] <span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$LOG_FILE</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 读取token</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-f</span> /tmp/alist_token.txt <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token file not found.\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token assign-left variable\">AUTH_TOKEN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 检查token是否读取成功</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token is empty.\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 配置参数</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;Alist 地址>\"</span>\n<span class=\"token assign-left variable\">LIST_ENDPOINT</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>/api/fs/list\"</span>\n<span class=\"token assign-left variable\">REMOVE_ENDPOINT</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>/api/fs/remove\"</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;Alist 存储路径>\"</span>\n\n<span class=\"token comment\"># 当前日期的时间戳（秒）</span>\n<span class=\"token assign-left variable\">CURRENT_DATE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%s<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 列出备份目录中的文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span>  <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"<span class=\"token variable\">$LIST_ENDPOINT</span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\n    \"path\": \"'</span>\"$BACKUP_PATH<span class=\"token string\">\"'\"</span>\n<span class=\"token punctuation\">&#125;</span>'<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 从response中解析出文件名和创建时间</span>\n<span class=\"token assign-left variable\">files</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.data.content[] | select(.is_dir == false) | \"\\(.name) \\(.created)\"'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 准备删除的文件列表</span>\n<span class=\"token assign-left variable\">delete_files</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-r</span> name created<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># 转换创建日期为时间戳（秒）</span>\n  <span class=\"token assign-left variable\">created_date</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"<span class=\"token variable\">$created</span>\"</span> +%s<span class=\"token variable\">)</span></span>\n  \n  <span class=\"token comment\"># 计算文件的年龄 （天）</span>\n  <span class=\"token assign-left variable\">age_days</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span> <span class=\"token punctuation\">(</span>CURRENT_DATE <span class=\"token operator\">-</span> created_date<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">86400</span> <span class=\"token variable\">))</span></span>\n\n  <span class=\"token comment\"># 输出文件的年龄以供调试</span>\n  log <span class=\"token string\">\"File: <span class=\"token variable\">$name</span>, Created: <span class=\"token variable\">$created</span>, Age (days): <span class=\"token variable\">$age_days</span>\"</span>\n\n  <span class=\"token comment\"># 如果文件超过1天，添加到删除列表</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$age_days</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">delete_files</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token variable\">$name</span>\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">\"<span class=\"token variable\">$files</span>\"</span>\n\n<span class=\"token comment\"># 输出将要删除的文件列表以供调试</span>\nlog <span class=\"token string\">\"Files to be deleted:\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  log <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 删除过期文件</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token parameter variable\">-gt</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;delete_files<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token assign-left variable\">delete_response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"<span class=\"token variable\">$REMOVE_ENDPOINT</span>\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$AUTH_TOKEN</span>\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n      <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'&#123;\n          \"names\": [\"'</span>\"$file<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">]</span>,\n          <span class=\"token string\">\"dir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"'\"</span>$BACKUP_PATH<span class=\"token string\">\"'\"</span>\n      <span class=\"token punctuation\">&#125;</span>'<span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">delete_code</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.code'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">delete_message</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_response</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'.message'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$delete_code</span>\"</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n      log <span class=\"token string\">\"Successfully deleted <span class=\"token variable\">$file</span>\"</span>\n    <span class=\"token keyword\">else</span>\n      log <span class=\"token string\">\"Failed to delete <span class=\"token variable\">$file</span>: <span class=\"token variable\">$delete_message</span>\"</span>\n    <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">done</span>\n<span class=\"token keyword\">else</span>\n  log <span class=\"token string\">\"No files older than 15 day to delete.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>请将脚本中的 <code>API_URL</code> 和 <code>BACKUP_PATH</code> 替换为你自己的 Alist 地址和存储路径。</p>\n<p>保存并退出编辑器（在 vim 中按 <code>Esc</code>，然后输入 <code>:x</code> 回车保存）。</p>\n<h3 id=\"详细解释\"><a class=\"headerlink\" href=\"#详细解释\"></a>详细解释</h3>\n<ol>\n<li><strong>设置日志文件</strong>：日志文件名为 <code>clean_back_YYYYMMDDHHMMSS.log</code>，存储在 <code>/opt/alist/log</code> 目录中，记录脚本执行过程中的所有重要信息。</li>\n<li><strong>定义 <code>log</code> 函数</strong>：这个函数为日志信息添加时间戳，并将日志信息同时输出到控制台和日志文件中。</li>\n<li><strong>配置 API 参数</strong>：设置 API 的基础 URL、列出文件的端点和删除文件的端点，以及授权令牌和备份路径。</li>\n<li><strong>获取当前时间戳</strong>：使用 <code>date +%s</code> 获取当前时间的 Unix 时间戳（以秒为单位）。</li>\n<li><strong>列出备份目录中的文件</strong>：通过 Alist 提供的 <code>POST /api/fs/list</code> 接口获取备份目录中的文件列表，并使用 <code>jq</code> 提取文件名和创建日期。</li>\n<li><strong>计算文件年龄并判断是否需要删除</strong>：遍历文件列表，计算每个文件的年龄（以天为单位），如果文件超过30天，则将其添加到删除列表中。</li>\n<li><strong>输出将要删除的文件列表</strong>：记录需要删除的文件以供调试。</li>\n<li><strong>删除过期文件</strong>：通过 Alist 提供的 <code>POST /api/fs/remove</code> 接口删除超过30天的文件，并根据响应结果记录删除操作的状态。</li>\n</ol>\n<h3 id=\"运行脚本\"><a class=\"headerlink\" href=\"#运行脚本\"></a>运行脚本</h3>\n<p>将上述脚本保存为 <code>clean_backups.sh</code>，然后给脚本添加执行权限并运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x clean_backups.sh\n./clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"定时任务\"><a class=\"headerlink\" href=\"#定时任务\"></a>定时任务</h3>\n<p>为了让脚本定期运行，可以使用 <code>cron</code> 设置定时任务。例如，每天凌晨 2点运行脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 <code>crontab</code> 编辑器中添加以下行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">2</span> * * * /opt/alist/clean_backups.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>保存并退出编辑器（在 vim 中按 <code>Esc</code>，然后输入 <code>:x</code> 回车保存）。</p>\n<p>通过这种方式，您可以自动化清理过期的备份文件，并将操作结果记录到日志文件中，方便日后查看和调试。定期清理备份文件有助于保持系统的整洁，确保服务器的高效运行。</p>\n<hr>\n<p>以上就是使用 Alist 和 Bash 脚本实现自动化清理备份文件的完整方法。希望这篇博客对您有所帮助！如果有任何问题或建议，欢迎在评论区留言讨论。</p>\n",
            "tags": [
                "Alist"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "url": "https://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "title": "项目讲解",
            "date_published": "2024-06-27T07:34:31.000Z",
            "content_html": "<h1 id=\"随便写写\"><a class=\"headerlink\" href=\"#随便写写\"></a>随便写写</h1>\n<h3 id=\"登录注册模块\"><a class=\"headerlink\" href=\"#登录注册模块\"></a>登录注册模块</h3>\n<ul>\n<li><strong>注册</strong>：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。</li>\n<li>登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。</li>\n</ul>\n<h3 id=\"前后端分离项目中跨域问题是如何解决的？\"><a class=\"headerlink\" href=\"#前后端分离项目中跨域问题是如何解决的？\"></a>前后端分离项目中跨域问题是如何解决的？</h3>\n<ol>\n<li><strong>注解</strong>：可以通过使用<code>@CrossOrigin</code>注解来解决跨域问题。</li>\n<li><strong>Nginx</strong>：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。</li>\n<li><strong>网关</strong>：使用 GetWay 网关中配置CORS规则，允许跨域请求</li>\n</ol>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "RabbitMQ应用与总结",
            "date_published": "2024-06-26T15:14:15.000Z",
            "content_html": "<h2 id=\"RabbitMQ常见面试题总结\"><a class=\"headerlink\" href=\"#RabbitMQ常见面试题总结\"></a>RabbitMQ常见面试题总结</h2>\n<h3 id=\"什么是-RabbitMQ？\"><a class=\"headerlink\" href=\"#什么是-RabbitMQ？\"></a>什么是 RabbitMQ？</h3>\n<p>RabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。</p>\n<h3 id=\"RabbitMQ-的组件有哪些？\"><a class=\"headerlink\" href=\"#RabbitMQ-的组件有哪些？\"></a>RabbitMQ 的组件有哪些？</h3>\n<h4 id=\"1-Producer（生产者）\"><a class=\"headerlink\" href=\"#1-Producer（生产者）\"></a>1. Producer（生产者）</h4>\n<ul>\n<li>生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。</li>\n<li>生成者负责创建和发送消息，不直接与队列通信。</li>\n</ul>\n<h4 id=\"2-Exchange（交换器）\"><a class=\"headerlink\" href=\"#2-Exchange（交换器）\"></a>2. Exchange（交换器）</h4>\n<ul>\n<li>交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。</li>\n<li>交换器有不同类型，主要包括：<code>direct</code>、<code>topic</code>、<code>fanout</code>和<code>headers</code>。</li>\n</ul>\n<h5 id=\"Exchange-类型\"><a class=\"headerlink\" href=\"#Exchange-类型\"></a>Exchange 类型</h5>\n<ul>\n<li><strong>Direct Exchange</strong>：根据消息的路由键完全匹配队列的绑定键进行路由。</li>\n<li><strong>Topic Exchange</strong>：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。</li>\n<li><strong>Fanout Exchange</strong>：将消息广播到所有与该交换器绑定的队列，不考虑路由键。</li>\n<li><strong>Headers Exchange</strong>：根据消息的头属性进行路由，相对较少使用。</li>\n</ul>\n<h4 id=\"3-Queue（队列）\"><a class=\"headerlink\" href=\"#3-Queue（队列）\"></a>3. Queue（队列）</h4>\n<ul>\n<li>队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。</li>\n<li>队列按照先进先出的顺序存储消息，可以持久化、镜像等。</li>\n</ul>\n<h4 id=\"4-Bindng（绑定）\"><a class=\"headerlink\" href=\"#4-Bindng（绑定）\"></a>4. Bindng（绑定）</h4>\n<ul>\n<li>绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。</li>\n<li>绑定可以包含路由键和绑定参数，用于匹配消息的路由键。</li>\n</ul>\n<h4 id=\"5-Consumer（消费者）\"><a class=\"headerlink\" href=\"#5-Consumer（消费者）\"></a>5. Consumer（消费者）</h4>\n<ul>\n<li>\n<p>消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。</p>\n</li>\n<li>\n<p>消费者可以是主动拉取消息，也可以是被动推送消息。</p>\n</li>\n</ul>\n<h4 id=\"6-Connection（连接）和Channel（信道）\"><a class=\"headerlink\" href=\"#6-Connection（连接）和Channel（信道）\"></a>6. Connection（连接）和Channel（信道）</h4>\n<ul>\n<li>连接是应用程序与 RabbitMQ 之间的 TCP 连接。</li>\n<li>信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。</li>\n</ul>\n<h4 id=\"7-Virtual-Host（虚拟机）\"><a class=\"headerlink\" href=\"#7-Virtual-Host（虚拟机）\"></a>7. Virtual Host（虚拟机）</h4>\n<ul>\n<li>虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。</li>\n</ul>\n<h4 id=\"8-Broker（代理服务器）\"><a class=\"headerlink\" href=\"#8-Broker（代理服务器）\"></a>8. Broker（代理服务器）</h4>\n<ul>\n<li>Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。</li>\n</ul>\n",
            "tags": [
                "Java",
                "总结",
                "RabbitMQ"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/26/Redis%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/26/Redis%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "Redis应用与总结",
            "date_published": "2024-06-26T12:18:49.000Z",
            "content_html": "<h2 id=\"Redis-常见面试题总结\"><a class=\"headerlink\" href=\"#Redis-常见面试题总结\"></a>Redis 常见面试题总结</h2>\n<h3 id=\"Redis-为什么这么快？\"><a class=\"headerlink\" href=\"#Redis-为什么这么快？\"></a>Redis 为什么这么快？</h3>\n<ol>\n<li>\n<p>Redis 基于内存，内存的访问速度比磁盘块很多；</p>\n</li>\n<li>\n<p>Redis 主要是单线程事件循环和 IO 多路复用；</p>\n</li>\n<li>\n<p>Redis 内置了多重优化过后的数据类型、结构实现，性能非常高</p>\n</li>\n<li>\n<p>Redis 通信协议实现简单且解析高效。</p>\n<h4 id=\"为什么不直接使用-Redis-当主数据库呢？\"><a class=\"headerlink\" href=\"#为什么不直接使用-Redis-当主数据库呢？\"></a>为什么不直接使用 Redis 当主数据库呢？</h4>\n<p>主要是因为内存成本太高且 Redis 提供的数据持久化仍然会有数据丢失风险。</p>\n</li>\n</ol>\n<h3 id=\"为什么用-Redis？\"><a class=\"headerlink\" href=\"#为什么用-Redis？\"></a>为什么用 Redis？</h3>\n<ol>\n<li>\n<p>访问速度更快</p>\n</li>\n<li>\n<p>高并发</p>\n</li>\n<li>\n<p>功能全面</p>\n<p>Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。</p>\n</li>\n</ol>\n<h3 id=\"Redis-除了做缓存，还能做什么？\"><a class=\"headerlink\" href=\"#Redis-除了做缓存，还能做什么？\"></a>Redis 除了做缓存，还能做什么？</h3>\n<ul>\n<li><strong>分布式锁</strong>：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。</li>\n<li><strong>限流</strong>：一半通过 Redis 和 Lua 脚本的方式来实现限流。如果不想写 Lua 脚本的话，也可以直接利用 Redisson中的<code>RRateLimiter</code>来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。</li>\n<li><strong>消息队列</strong>：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。</li>\n<li><strong>延时队列</strong>：Redisson 内置了延时队列（基于 Sorted Set 实现的）。</li>\n<li><strong>分布式 Session</strong>：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。</li>\n</ul>\n<h3 id=\"Redis-常用的数据类型有哪些？\"><a class=\"headerlink\" href=\"#Redis-常用的数据类型有哪些？\"></a>Redis 常用的数据类型有哪些？</h3>\n<ul>\n<li><strong>5 种基本数据类型</strong>：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</li>\n<li><strong>3 种特殊数据类型</strong>：HyperLogLog（基数统计）、Bitmap（位图）、Geospatial（地理位置）。</li>\n</ul>\n<h3 id=\"String-的应用场景有哪些？\"><a class=\"headerlink\" href=\"#String-的应用场景有哪些？\"></a>String 的应用场景有哪些？</h3>\n<p>String 是 Redis 中最简单同时也是最常用的一个数据类型。可以用来存储任何类型的数据。</p>\n<ul>\n<li>常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；</li>\n<li>计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；</li>\n<li>分布式锁（利用<code>SETNX key value</code>命令可以实现一个最简易的分布式锁）；</li>\n</ul>\n<h3 id=\"Redis-持久化机制\"><a class=\"headerlink\" href=\"#Redis-持久化机制\"></a>Redis 持久化机制</h3>\n<p>Redis提供了两种主要的持久化机制：RDB（Redis DataBase）快照和 AOF(Append Only File）日志。这两种机制各有特点，满足不同的持久化需求。</p>\n<ol>\n<li>\n<p><strong>RDB（Redis DataBase）快照</strong></p>\n<p>RDB 持久化是指在指定的时间间隔内将 Redis 的内存数据生成快照并保存到磁盘。它会创建一个二进制文件（通常是 dump.rdb），包含某个时间点上的数据。</p>\n<p>​\t<strong>优点：</strong></p>\n<p>​\tRDB 文件是一个紧凑的二进制文件，可以较快地进行备份和恢复。</p>\n<p>​\tRDB 文件保存时不会对 Redis 的性能产生显著的影响，适合用于大规模数据的冷备份。</p>\n<p>​\t<strong>缺点：</strong></p>\n<p>​\tRDB 快照是定期进行的，如果 Redis 意外宕机，可能会丢失最后一次快照之后的所有数据。</p>\n<p>​\tRDB 快照需要较长的时间进行，所以不适用于需要频繁备份的数据场景。</p>\n</li>\n<li>\n<p><strong>AOF（Append Only File）日志</strong></p>\n<p>AOF 持久化记录每个写操作到日志文件中（通常是 appendonly.aof），Redis 可以通过重新执行日志中的命令来恢复数据。AOF日志文件默认不定期压缩，以减小文件体积。</p>\n</li>\n</ol>\n<p>​\t\t<strong>优点：</strong></p>\n<p>​\t\tAOF可以提供更高的数据持久性，因为它记录每次写操作，数据丢失的窗口更小。</p>\n<p>​\t\tAOF 文件是可读的文本文件，便于分析和调试。</p>\n<p>​\t\t<strong>缺点：</strong></p>\n<p>​\t\tAOF 文件通常比 RDB 文件更大，恢复速度相对慢。</p>\n<p>​\t\tAOF在每次写操作时都会记录日志，可能会对 Redis 性能产生一定影响，特别是在写操作频繁的情况下。</p>\n<h4 id=\"混合持久化\"><a class=\"headerlink\" href=\"#混合持久化\"></a>混合持久化</h4>\n<p>Redis 4.0 引入了混合持久化（Hybid Persistence），结合了 RDB 和 AOF 的优点。在进行快照时，将当前的 RDB 快照和 AOF 日志混合存储，以提高数据恢复速度和性能。</p>\n<h3 id=\"缓存穿透\"><a class=\"headerlink\" href=\"#缓存穿透\"></a>缓存穿透</h3>\n<h4 id=\"什么是缓存穿透？\"><a class=\"headerlink\" href=\"#什么是缓存穿透？\"></a>什么是缓存穿透？</h4>\n<p>缓存穿透是指查询一个在缓存和数据库中都不存在的数据，每次请求都会穿透缓存直接查询数据库，可能导致数据库压力过大。</p>\n<h4 id=\"有哪些解决办法？\"><a class=\"headerlink\" href=\"#有哪些解决办法？\"></a>有哪些解决办法？</h4>\n<p>最基本的就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。</p>\n<p>比如查询数据库 id 不能小于 0、传入邮箱格式不对的时候直接返回错误信息给客户端等等。</p>\n<h5 id=\"1-使用缓存空值\"><a class=\"headerlink\" href=\"#1-使用缓存空值\"></a>1. 使用缓存空值</h5>\n<p>将查询结果为空的数据也缓存起来，但要设置一个较短的过期时间，防止缓存中大量的空值数据占用内存。</p>\n<h5 id=\"2-布隆过滤器\"><a class=\"headerlink\" href=\"#2-布隆过滤器\"></a>2. 布隆过滤器</h5>\n<p>布隆过滤器是一种概率型数据结构，可以用来判断一个元素是否在一个集合中。将所有可能存在查询条件都存入布隆过滤器，在查询缓存和数据库之前先通过布隆过滤器进行判断，如果布隆过滤器判断该元素不存在，则直接返回。</p>\n<h5 id=\"3-接口限流\"><a class=\"headerlink\" href=\"#3-接口限流\"></a>3. 接口限流</h5>\n<p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采用黑名单机制，例如将异常 IP 列入黑名单。</p>\n<h3 id=\"缓存击穿\"><a class=\"headerlink\" href=\"#缓存击穿\"></a>缓存击穿</h3>\n<h4 id=\"什么是缓存击穿？\"><a class=\"headerlink\" href=\"#什么是缓存击穿？\"></a>什么是缓存击穿？</h4>\n<p>缓存击穿是指某些缓存中的热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到了数据库，对数据库造成了巨大的压力，通常发生在缓存中存放的热门数据突然过期的情况下。</p>\n<h4 id=\"有哪些解决方法？\"><a class=\"headerlink\" href=\"#有哪些解决方法？\"></a>有哪些解决方法？</h4>\n<h5 id=\"1-永不过期\"><a class=\"headerlink\" href=\"#1-永不过期\"></a>1. 永不过期</h5>\n<p>将热点数据设置为永不过期，防止其被清除出缓存，从而避免缓存失效带来的问题。</p>\n<h5 id=\"2-提前预热\"><a class=\"headerlink\" href=\"#2-提前预热\"></a>2.提前预热</h5>\n<p>在系统启动或业务高峰期来临之前，提前将热点数据加载到缓存中，避免缓存过期。</p>\n<h5 id=\"3-加锁\"><a class=\"headerlink\" href=\"#3-加锁\"></a>3. 加锁</h5>\n<p>当缓存失效时，使用分布式锁来控制只有一个请求可以访问数据库并重建缓存，其余请求等待缓存重建完成后再访问缓存。</p>\n<h4 id=\"缓存穿透和缓存击穿有什么区别？\"><a class=\"headerlink\" href=\"#缓存穿透和缓存击穿有什么区别？\"></a>缓存穿透和缓存击穿有什么区别？</h4>\n<ul>\n<li>\n<p>缓存穿透是查询一个在缓存和数据中都不存在的数据。</p>\n</li>\n<li>\n<p>缓存击穿是缓存中热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到数据库。</p>\n</li>\n</ul>\n<h3 id=\"缓存雪崩\"><a class=\"headerlink\" href=\"#缓存雪崩\"></a>缓存雪崩</h3>\n<h4 id=\"什么是缓存雪崩？\"><a class=\"headerlink\" href=\"#什么是缓存雪崩？\"></a>什么是缓存雪崩？</h4>\n<p>缓存雪崩是指缓存中大量数据在同一时间过期或者缓存服务器宕机了，导致大量请求直接访问数据库，与缓存击穿不同的是，缓存雪崩涉及大量缓存同时失效或缓存服务不可用。</p>\n<h4 id=\"有哪些解决方法？-2\"><a class=\"headerlink\" href=\"#有哪些解决方法？-2\"></a>有哪些解决方法？</h4>\n<h5 id=\"针对Redis-服务不可用的情况：\"><a class=\"headerlink\" href=\"#针对Redis-服务不可用的情况：\"></a>针对Redis 服务不可用的情况：</h5>\n<ol>\n<li><strong>Redis 集群</strong>：采用 Redis 集群，避免单机出现问题整个缓存服务器都无法使用。</li>\n<li><strong>多级缓存</strong>：通过构建多级缓存（如本地缓存和分布式缓存），在缓存失效时优先从本地缓存读取数据，减轻数据库压力。</li>\n</ol>\n<h5 id=\"针对大量缓存同时失效的情况\"><a class=\"headerlink\" href=\"#针对大量缓存同时失效的情况\"></a>针对大量缓存同时失效的情况:</h5>\n<ol>\n<li><strong>过期时间随机化</strong>：避免大量缓存在同一时间失效，可以设置缓存数据过期时间增加一个随机值，使缓存数据的过期时间分散。</li>\n<li><strong>缓存预热</strong>：在系统启动或流量高峰前，提前将热点数据加载到缓存中，避免缓存雪崩。</li>\n<li><strong>主动更新</strong>：对于经常更新的热点数据，可以在其过期之前主动更新缓存，确保缓存中的数据始终有效。</li>\n</ol>\n<h3 id=\"如何保证缓存和数据库数据一致性？\"><a class=\"headerlink\" href=\"#如何保证缓存和数据库数据一致性？\"></a>如何保证缓存和数据库数据一致性？</h3>\n<h4 id=\"1-Cache-Aside-Pattern（旁路缓存模式）\"><a class=\"headerlink\" href=\"#1-Cache-Aside-Pattern（旁路缓存模式）\"></a>1. Cache Aside Pattern（旁路缓存模式）</h4>\n<p>当需要读取数据时，先从缓存读取，若缓存未命中，再从数据库读取，并将数据写入缓存。当数据更新时，先更新数据库，然后使缓存失效。</p>\n<h4 id=\"2-Write-Through-Cache（写直达缓存）\"><a class=\"headerlink\" href=\"#2-Write-Through-Cache（写直达缓存）\"></a>2. Write Through Cache（写直达缓存）</h4>\n<p>所有的数据更新操作都会先写入缓存，再写入数据库，这样可以确保缓存和数据库的一致性，但写操作的性能会受到一定影响。</p>\n<h4 id=\"3-Write-Behind-Cache（异步写缓存）\"><a class=\"headerlink\" href=\"#3-Write-Behind-Cache（异步写缓存）\"></a>3. Write Behind Cache（异步写缓存）</h4>\n<p>写操作会先写入缓存，并在后台异步更新数据库。这种方式可以提高操作的性能，但实现和维护比较复杂。</p>\n<h4 id=\"4-Cache-and-Database-Double-Write（双写一致性）\"><a class=\"headerlink\" href=\"#4-Cache-and-Database-Double-Write（双写一致性）\"></a>4. Cache and Database Double Write（双写一致性）</h4>\n<p>确保每次写操作，同时更新缓存和数据库。需要通过合适的事务机制或分布式锁来保证这两个操作的原子性。</p>\n<h4 id=\"5-使用消息队列实现最终一致性\"><a class=\"headerlink\" href=\"#5-使用消息队列实现最终一致性\"></a>5. 使用消息队列实现最终一致性</h4>\n<p>写操作更新数据库后，将更新时间发送到消息队列，消费者接收消息后更新缓存，实现最终一致性。</p>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>Cache Aside Pattern（旁路缓存模式）</strong>：读操作先查缓存，缓存未命中再查数据库，写操作先更新数据库，再使缓存失效。</li>\n<li><strong>Write Through Cache（写直达缓存）</strong>：写操作先更新缓存，再同步更新数据库。</li>\n<li><strong>Write Behind Cache（异步写缓存）</strong>：写操作先更新缓存，再异步批量更新数据库。</li>\n<li><strong>双写一致性（Cache and Database Double Write）</strong>：写操作时同时更新缓存和数据库，确保原子性。</li>\n<li><strong>使用消息队列实现最终一致性</strong>：更新数据库后发送消息队列，消费者接收消息后更新缓存，实现最终一致性。</li>\n</ul>\n",
            "tags": [
                "总结",
                "Redis"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "MyBatis应用与总结",
            "date_published": "2024-06-26T09:53:37.000Z",
            "content_html": "<h1 id=\"MyBatis常见面试题总结\"><a class=\"headerlink\" href=\"#MyBatis常见面试题总结\"></a>MyBatis常见面试题总结</h1>\n<h3 id=\"和-的区别是什么？\"><a class=\"headerlink\" href=\"#和-的区别是什么？\"></a>#{} 和 ${} 的区别是什么？</h3>\n<ul>\n<li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。</li>\n<li><code>#&#123;&#125;</code>是 sql 的参数占位符，Mybatis 会将 sql 中<code>#&#123;&#125;</code>替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用<code>#&#123;&#125;</code>可以有效防止 sql 注入。</li>\n</ul>\n",
            "tags": [
                "Java",
                "MyBatis",
                "总结"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/26/%E8%84%9A%E6%9C%AC/",
            "url": "https://blog.aixcc.top/2024/06/26/%E8%84%9A%E6%9C%AC/",
            "title": "自定义 Alfred iTerm 脚本",
            "date_published": "2024-06-26T04:29:32.000Z",
            "content_html": "<h2 id=\"如何使用Alfred与iTerm2进行高效的命令行操作\"><a class=\"headerlink\" href=\"#如何使用Alfred与iTerm2进行高效的命令行操作\"></a>如何使用Alfred与iTerm2进行高效的命令行操作</h2>\n<p>这里是一篇关于如何使用 Alfred 和 iTerm2 集成自定义 AppleScript 的博客文章。这个集成可以极大地提升 macOS 用户在使用终端时的效率和便利性。</p>\n<blockquote>\n<p>对于 macOS 用户来说，Alfred 和 iTerm2 是两个非常强大的工具。Alfred 作为一款效率提升工具，能够通过快捷键和简单的命令来执行各种操作，而 iTerm2 则是一个功能丰富的替代 macOS 默认终端的应用。将这两者结合起来，你可以通过简单的 Alfred 命令来控制 iTerm2，执行脚本或者打开新的终端会话。</p>\n</blockquote>\n<h3 id=\"自定义-Alfred-通过-iTerm2-执行脚本的步骤\"><a class=\"headerlink\" href=\"#自定义-Alfred-通过-iTerm2-执行脚本的步骤\"></a>自定义 Alfred 通过 iTerm2 执行脚本的步骤</h3>\n<h4 id=\"第一步：获取脚本\"><a class=\"headerlink\" href=\"#第一步：获取脚本\"></a>第一步：获取脚本</h4>\n<p>首先，你需要<a href=\"https://github.com/vitorgalvao/custom-alfred-iterm-scripts\">获取</a>一个可以将 Alfred 和 iTerm2 集成的 AppleScript。这个脚本定义了如何通过 Alfred 命令来控制 iTerm2。使用以下命令可以将脚本直接复制到你的剪贴板：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">--silent</span> <span class=\"token string\">'https://raw.githubusercontent.com/vitorgalvao/custom-alfred-iterm-scripts/master/custom_iterm_script.applescript'</span> <span class=\"token operator\">|</span> pbcopy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"第二步：配置-Alfred\"><a class=\"headerlink\" href=\"#第二步：配置-Alfred\"></a>第二步：配置 Alfred</h4>\n<p>打开 Alfred 的偏好设置：</p>\n<ol>\n<li>打开 Alfred 的偏好设置（通过呼叫 Alfred 并按 <code>⌘,</code>）。</li>\n<li>导航到“功能” → “终端 / Shell” → “自定义”。</li>\n<li>在“Application”下拉菜单中选择“自定义”，然后粘贴你的脚本到文本框中。</li>\n</ol>\n<h4 id=\"第三步：自定义脚本行为\"><a class=\"headerlink\" href=\"#第三步：自定义脚本行为\"></a>第三步：自定义脚本行为</h4>\n<p>脚本的顶部有几个 <code>property</code> 设置，可以根据你的需要进行调整：</p>\n<ul>\n<li><code>open_in_new_window</code>: 设置为 <code>true</code> 可以让每个 Alfred 命令在新窗口中打开。</li>\n<li><code>open_in_new_tab</code>: 设置为 <code>true</code> 会在新标签页中打开命令，<code>false</code> 则在当前标签页重用。</li>\n<li><code>iterm2_opens_quietly</code>: 如果你的 iTerm2 配置为启动时不打开新窗口，将此设为 <code>true</code>。</li>\n</ul>\n<h4 id=\"第四步：使用\"><a class=\"headerlink\" href=\"#第四步：使用\"></a>第四步：使用</h4>\n<p>完成设置后，你可以通过 Alfred 运行任何命令。比如，通过 Alfred 的搜索框输入 <code>&gt; ls</code>，这个命令就会在 iTerm2 的当前窗口中执行，显示当前目录的内容。</p>\n<p><strong>转载自GitHub:</strong> <a href=\"https://github.com/vitorgalvao/custom-alfred-iterm-scripts\">vitorgalvao/custom-alfred-iterm-scripts</a></p>\n",
            "tags": [
                "Mac"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/",
            "url": "https://blog.aixcc.top/2024/06/25/Linux%E5%AE%89%E8%A3%85MySQL/",
            "title": "Linux安装MySQL",
            "date_published": "2024-06-25T04:18:14.000Z",
            "content_html": "<h1 id=\"如何在Ubuntu上安装和配置MySQL并允许远程访问\"><a class=\"headerlink\" href=\"#如何在Ubuntu上安装和配置MySQL并允许远程访问\"></a>如何在Ubuntu上安装和配置MySQL并允许远程访问</h1>\n<p>在本文中，我们将介绍如何在Ubuntu上安装和配置MySQL，并设置允许远程访问。我们将从安装MySQL开始，然后进行基本的安全配置，修改MySQL配置文件以允许远程连接，并创建可以远程访问的用户。</p>\n<h2 id=\"步骤1：更新包列表并安装MySQL服务器\"><a class=\"headerlink\" href=\"#步骤1：更新包列表并安装MySQL服务器\"></a>步骤1：更新包列表并安装MySQL服务器</h2>\n<p>首先，确保你的包列表是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后安装MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你需要安装特定版本的MySQL（例如8.0），可以使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mysql-server-8.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤2：检查MySQL服务状态并启用MySQL服务\"><a class=\"headerlink\" href=\"#步骤2：检查MySQL服务状态并启用MySQL服务\"></a>步骤2：检查MySQL服务状态并启用MySQL服务</h2>\n<p>检查MySQL服务是否正在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>确保MySQL服务在系统启动时自动启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤3：运行安全安装脚本\"><a class=\"headerlink\" href=\"#步骤3：运行安全安装脚本\"></a>步骤3：运行安全安装脚本</h2>\n<p>MySQL提供了一个安全安装脚本，可以帮助你进行一些基本的安全配置。运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> mysql_secure_installation<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在提示中，你将需要：</p>\n<ul>\n<li>选择密码规则</li>\n<li>删除匿名用户</li>\n<li>禁用远程root登录</li>\n<li>删除测试数据库和表</li>\n</ul>\n<h2 id=\"步骤4：修改MySQL配置文件以允许远程连接\"><a class=\"headerlink\" href=\"#步骤4：修改MySQL配置文件以允许远程连接\"></a>步骤4：修改MySQL配置文件以允许远程连接</h2>\n<p>打开MySQL配置文件<code>mysqld.cnf</code>，通常位于<code>/etc/mysql/mysql.conf.d/</code>目录中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>找到以下行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bind-address &#x3D; 127.0.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将其注释掉或改为<code>0.0.0.0</code>，使MySQL监听所有网络接口：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># bind-address &#x3D; 127.0.0.1\nbind-address &#x3D; 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>保存配置文件并退出编辑器。</p>\n<h2 id=\"步骤5：重启MySQL服务\"><a class=\"headerlink\" href=\"#步骤5：重启MySQL服务\"></a>步骤5：重启MySQL服务</h2>\n<p>重启MySQL服务以使更改生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"步骤6：创建可以远程访问的用户\"><a class=\"headerlink\" href=\"#步骤6：创建可以远程访问的用户\"></a>步骤6：创建可以远程访问的用户</h2>\n<p>登录到MySQL命令行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在MySQL提示符中运行以下命令，创建一个允许从任何IP地址连接的用户，并授予所有权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'yourpassword'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'yourusername'</span><span class=\"token variable\">@'%'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>解释：</strong></p>\n<ul>\n<li><strong>GRANT ALL PRIVILEGES</strong>：授予用户所有权限，包括SELECT、INSERT、UPDATE、DELETE、CREATE、DROP等操作权限。</li>\n<li><strong>ON</strong>：授予权限的范围。<code>*.*</code>表示所有数据库和所有表。</li>\n<li><strong>TO</strong>：指定权限接收者。<code>'yourusername'</code>是用户名，<code>'%'</code>是主机名通配符，表示允许从任何IP地址连接的用户。</li>\n<li><strong>WITH GRANT OPTION</strong>：允许用户将他自己拥有的权限授予其他用户。</li>\n</ul>\n<h2 id=\"步骤7：配置防火墙\"><a class=\"headerlink\" href=\"#步骤7：配置防火墙\"></a>步骤7：配置防火墙</h2>\n<p>确保防火墙允许MySQL的默认端口3306的流量。如果使用的是UFW（Uncomplicated Firewall），可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3306</span>\n<span class=\"token function\">sudo</span> ufw reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤8：验证远程连接\"><a class=\"headerlink\" href=\"#步骤8：验证远程连接\"></a>步骤8：验证远程连接</h2>\n<p>在远程机器上，使用MySQL客户端或其他工具连接到MySQL服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql <span class=\"token parameter variable\">-u</span> yourusername <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-h</span> your_server_ip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"其他操作\"><a class=\"headerlink\" href=\"#其他操作\"></a>其他操作</h2>\n<h3 id=\"删除某些权限或用户\"><a class=\"headerlink\" href=\"#删除某些权限或用户\"></a>删除某些权限或用户</h3>\n<p>如果你想删除某些权限，或者从特定数据库中删除权限，可以使用<code>REVOKE</code>命令。例如：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span> <span class=\"token keyword\">FROM</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查看某个用户的当前权限\"><a class=\"headerlink\" href=\"#查看某个用户的当前权限\"></a>查看某个用户的当前权限</h3>\n<p>如果你想查看某个用户的当前权限，可以使用以下命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> <span class=\"token string\">'existinguser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过这些步骤，你可以在Ubuntu上成功安装和配置MySQL，并设置允许远程访问。如果遇到任何问题或需要进一步帮助，请随时在评论区留言！</p>\n",
            "tags": [
                "MySQL",
                "Linux"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/",
            "url": "https://blog.aixcc.top/2024/06/24/%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE%E8%AF%81%E4%B9%A6/",
            "title": "自动续签证书",
            "date_published": "2024-06-24T12:34:50.000Z",
            "content_html": "<h1 id=\"使用-acme-sh-安装和管理-SSL-证书\"><a class=\"headerlink\" href=\"#使用-acme-sh-安装和管理-SSL-证书\"></a>使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书</h1>\n<p>本文将介绍如何使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理 SSL 证书。<a href=\"http://acme.sh\">acme.sh</a> 是一个纯 Shell 脚本的 ACME 协议客户端，可以帮助你自动化管理 Let’s Encrypt 及其他 CA 颁发的证书。</p>\n<h2 id=\"下载并安装-acme-sh\"><a class=\"headerlink\" href=\"#下载并安装-acme-sh\"></a>下载并安装 <a href=\"http://acme.sh\">acme.sh</a></h2>\n<p>首先，下载并安装 <a href=\"http://acme.sh\">acme.sh</a>。在终端中执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">curl</span> https://get.acme.sh <span class=\"token operator\">|</span> <span class=\"token function\">sh</span> <span class=\"token parameter variable\">-s</span> <span class=\"token assign-left variable\">email</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>youremail@domain.com<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>安装过程会执行以下几步：</p>\n<ol>\n<li>\n<p>将 <a href=\"http://acme.sh\">acme.sh</a> 安装到你的 <strong>home</strong> 目录中：</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">~&#x2F;.acme.sh&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>创建一个 Shell 别名，方便使用。在 <code>.bashrc</code> 中添加：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">acme.sh</span><span class=\"token operator\">=~</span>/.acme.sh/acme.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>自动为你创建一个 cronjob，每天 0:00 自动检测所有的证书。如果证书即将过期，需要更新，则会自动更新证书。</p>\n</li>\n</ol>\n<p>更高级的安装选项请参考：<a href=\"https://github.com/Neilpang/acme.sh/wiki/How-to-install\">acme.sh 安装文档</a></p>\n<p><strong>注意</strong>：安装过程不会影响现有系统的运行和文件，所有修改都位于 <code>~/.acme.sh/</code> 目录中。</p>\n<h2 id=\"使用-DNS-验证方式生成-SSL-证书\"><a class=\"headerlink\" href=\"#使用-DNS-验证方式生成-SSL-证书\"></a>使用 DNS 验证方式生成 SSL 证书</h2>\n<p><a href=\"http://acme.sh\">acme.sh</a> 实现了 ACME 协议支持的所有验证协议。一般有两种方式验证：HTTP 和 DNS 验证。这里我们使用 DNS 验证。</p>\n<h3 id=\"手动-DNS-验证\"><a class=\"headerlink\" href=\"#手动-DNS-验证\"></a>手动 DNS 验证</h3>\n<p>手动 DNS 验证方式不需要服务器或公网 IP，只需要在域名管理面板上添加一条 TXT 解析记录来验证域名所有权。</p>\n<ol>\n<li>\n<p>运行以下命令，手动在域名上添加一条 TXT 解析记录：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--issue</span> <span class=\"token parameter variable\">--dns</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><a href=\"http://acme.sh\">acme.sh</a> 会生成相应的解析记录并显示出来，你需要在域名管理面板上添加该 TXT 记录。</p>\n</li>\n<li>\n<p>等待解析完成后，重新生成证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh <span class=\"token parameter variable\">--renew</span> <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--yes-I-know-dns-manual-mode-enough-go-ahead-please<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>安装生成的证书：</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">acme.sh --install-cert <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">&lt;</span>mydomain.com<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n--key-file /opt/nginx/key.pem  <span class=\"token punctuation\">\\</span>\n--fullchain-file /opt/nginx/cert.pem <span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>通过以上步骤，你已经成功使用 <a href=\"http://acme.sh\">acme.sh</a> 安装和管理了 SSL 证书。虽然手动 DNS 验证方式不需要服务器或公网 IP，但每次请求新证书时都需要手动添加解析记录。如果希望实现自动化，可以使用支持 DNS API 的提供商并配置自动 DNS 验证。有关详细信息，请参考 <a href=\"https://github.com/Neilpang/acme.sh/wiki/dnsapi\">acme.sh 的 DNS API 支持文档</a>。</p>\n<p>希望本文对你有所帮助！</p>\n",
            "tags": [
                "Linux",
                "SSL",
                "域名"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/",
            "url": "https://blog.aixcc.top/2024/06/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/",
            "title": "服务器安全设置",
            "date_published": "2024-06-24T11:14:28.000Z",
            "content_html": "<h3 id=\"1-更新系统\"><a class=\"headerlink\" href=\"#1-更新系统\"></a>1. 更新系统</h3>\n<p>首先，确保你的系统和所有安装的软件都是最新的。这不仅可以帮助你利用最新的功能，还可以修复已知的安全漏洞。使用以下命令进行更新：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装防火墙\"><a class=\"headerlink\" href=\"#2-安装防火墙\"></a>2. 安装防火墙</h3>\n<p>Ubuntu默认带有<code>ufw</code>（Uncomplicated Firewall）工具，它是一个对于初学者非常友好的防火墙管理工具。要启用并配置它，请执行以下步骤：</p>\n<p>启用<code>ufw</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw <span class=\"token builtin class-name\">enable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来，开放必要的端口。例如，对于SSH服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你运行了Web服务器，你可能还需要开放HTTP和HTTPS端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">80</span>\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">443</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"3-配置SSH\"><a class=\"headerlink\" href=\"#3-配置SSH\"></a>3. 配置SSH</h3>\n<p>SSH是远程管理Linux服务器的标准方法。为了增强安全性，推荐使用SSH密钥对进行身份验证，而不是密码。</p>\n<h4 id=\"生成SSH密钥对\"><a class=\"headerlink\" href=\"#生成SSH密钥对\"></a>生成SSH密钥对</h4>\n<p>在客户端机器上，运行以下命令生成SSH密钥对：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-b</span> <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"将公钥添加到服务器\"><a class=\"headerlink\" href=\"#将公钥添加到服务器\"></a>将公钥添加到服务器</h4>\n<p>使用<code>ssh-copy-id</code>命令将公钥复制到服务器上：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-copy-id <span class=\"token parameter variable\">-i</span> ~/.ssh/id_rsa.pub 用户名@服务器IP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"禁用密码认证\"><a class=\"headerlink\" href=\"#禁用密码认证\"></a>禁用密码认证</h4>\n<p>编辑服务器上的<code>/etc/ssh/sshd_config</code>文件，设置以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PasswordAuthentication no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后重启SSH服务以应用更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart sshd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-配置Fail2Ban\"><a class=\"headerlink\" href=\"#4-配置Fail2Ban\"></a>4. 配置Fail2Ban</h3>\n<p>Fail2Ban可以帮助保护服务器免受暴力破解攻击。它通过监控日志文件中的失败登录尝试来工作，并封锁显示恶意行为的IP地址。</p>\n<h4 id=\"安装Fail2Ban\"><a class=\"headerlink\" href=\"#安装Fail2Ban\"></a>安装Fail2Ban</h4>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"配置基本保护\"><a class=\"headerlink\" href=\"#配置基本保护\"></a>配置基本保护</h4>\n<p>创建或编辑<code>/etc/fail2ban/jail.local</code>文件，为SSH服务添加基本保护：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">DEFAULT</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token comment\"># 全局设置</span>\n<span class=\"token key attr-name\">bantime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">1h        # 封禁时间：1小时</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">10m      # 在此时间内连续失败的尝试视为攻击</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5        # 允许失败次数</span>\n<span class=\"token key attr-name\">ignoreip</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">127.0.0.1/8 # 忽略本地IP地址的封禁</span>\n\n<span class=\"token comment\"># 指定要使用的日志文件</span>\n<span class=\"token key attr-name\">backend</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto      # 自动确定日志文件类型</span>\n<span class=\"token key attr-name\">usedns</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">warn       # 使用DNS解析</span>\n<span class=\"token key attr-name\">logencoding</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">auto  # 日志文件的编码</span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">false     # 默认不启用任何规则</span>\n\n<span class=\"token comment\"># SSH 服务</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">sshd</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">enabled</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">port</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">ssh</span>\n<span class=\"token key attr-name\">filter</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">sshd</span>\n<span class=\"token key attr-name\">logpath</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/var/log/auth.log</span>\n<span class=\"token key attr-name\">maxretry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">3</span>\n<span class=\"token key attr-name\">findtime</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">5m</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重启Fail2Ban服务以应用配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart fail2ban\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> fail2ban<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<hr>\n<p>通过上述步骤，你的服务器将具备较强的基本安全保护。务必定期检查和更新你的系统及应用程序，保持警惕，适时应对新的安全威胁。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/",
            "url": "https://blog.aixcc.top/2024/06/24/Vaultwarden%E6%90%AD%E5%BB%BA/",
            "title": "Vaultwarden搭建",
            "date_published": "2024-06-24T08:56:37.000Z",
            "content_html": "<h1 id=\"如何搭建-Vaultwarden-服务器：一步步教程\"><a class=\"headerlink\" href=\"#如何搭建-Vaultwarden-服务器：一步步教程\"></a>如何搭建 Vaultwarden 服务器：一步步教程</h1>\n<p>Vaultwarden 是一个轻量级的 Bitwarden 服务器实现，它使用 Rust 编写，可以方便地在几乎任何地方运行。这是一个非常适合个人或小团队的密码管理解决方案。在本教程中，我们将详细介绍如何使用 Docker Compose 在你的服务器上部署 Vaultwarden。</p>\n<h2 id=\"前提条件\"><a class=\"headerlink\" href=\"#前提条件\"></a>前提条件</h2>\n<p>在开始之前，确保你的系统已经安装了 <strong>Docker</strong> 和 <strong>Docker Compose</strong>。</p>\n<h2 id=\"步骤-1-创建数据存储目录\"><a class=\"headerlink\" href=\"#步骤-1-创建数据存储目录\"></a>步骤 1: 创建数据存储目录</h2>\n<p>首先，我们需要为 Vaultwarden 创建一个目录来存储数据。这将确保即使容器被删除，数据也会保持安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/docker_data/vaultwarden\n<span class=\"token builtin class-name\">cd</span> /opt/docker_data/vaultwarden<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-2-创建-Docker-Compose-文件\"><a class=\"headerlink\" href=\"#步骤-2-创建-Docker-Compose-文件\"></a>步骤 2: 创建 Docker Compose 文件</h2>\n<p>接下来，我们将创建一个 <code>docker-compose.yml</code> 文件来定义 Vaultwarden 服务的配置。使用你喜欢的文本编辑器创建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> docker-compose.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，将以下配置粘贴到 <code>docker-compose.yml</code> 文件中：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">vaultwarden</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> vaultwarden\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> vaultwarden/server<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./data/<span class=\"token punctuation\">:</span>/data/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 8080<span class=\"token punctuation\">:</span><span class=\"token number\">80</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DOMAIN=https<span class=\"token punctuation\">:</span>//subdomain.yourdomain.com <span class=\"token comment\"># 关联的域名。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># 最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> LOGIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_MAX_BURST=10 <span class=\"token comment\"># admin最大请求次数。</span>\n      <span class=\"token punctuation\">-</span> ADMIN_RATELIMIT_SECONDS=60 <span class=\"token comment\"># 平均秒数</span>\n      <span class=\"token punctuation\">-</span> ADMIN_SESSION_LIFETIME=20 <span class=\"token comment\"># 会话持续时间</span>\n      <span class=\"token punctuation\">-</span> ADMIN_TOKEN=YourReallyStrongAdminTokenHere <span class=\"token comment\"># 管理员面板的令牌</span>\n      <span class=\"token punctuation\">-</span> SENDS_ALLOWED=true  <span class=\"token comment\"># 是否允许用户创建Bitwarden发送</span>\n      <span class=\"token punctuation\">-</span> EMERGENCY_ACCESS_ALLOWED=true <span class=\"token comment\"># 控制用户是否可以启用紧急访问其账户的权限</span>\n      <span class=\"token punctuation\">-</span> WEB_VAULT_ENABLED=true <span class=\"token comment\"># 网络保险库是否可访问。</span>\n      <span class=\"token punctuation\">-</span> SIGNUPS_ALLOWED=true <span class=\"token comment\"># 新用户是否可以在没有邀请的情况下注册账户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"步骤-3-启动-Vaultwarden\"><a class=\"headerlink\" href=\"#步骤-3-启动-Vaultwarden\"></a>步骤 3: 启动 Vaultwarden</h2>\n<p>配置好 <code>docker-compose.yml</code> 文件后，使用以下命令启动 Vaultwarden 服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个命令会在后台启动 Vaultwarden 服务。可以通过访问 <code>http://localhost:8080</code> 或在配置文件中指定的域名来访问 Vaultwarden。</p>\n<h2 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h2>\n<p>恭喜！你现在已经成功在你的服务器上部署了 Vaultwarden。通过使用 Docker Compose，你可以轻松管理 Vaultwarden 服务的配置和更新。继续探索 Vaultwarden 的其他功能，为你的密码管理提供更强大的支持！</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/22/Spring%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "Spring应用与总结",
            "date_published": "2024-06-22T10:11:04.000Z",
            "content_html": "<h2 id=\"Spring-常见面试题总结\"><a class=\"headerlink\" href=\"#Spring-常见面试题总结\"></a>Spring 常见面试题总结</h2>\n<h3 id=\"什么是Spring框架？\"><a class=\"headerlink\" href=\"#什么是Spring框架？\"></a>什么是Spring框架？</h3>\n<p>Spring 是一款开源的轻量级Java开发框架，提高开发人员的开发效率以及系统的维护性。</p>\n<h3 id=\"谈谈自己对于Spring-IoC的了解\"><a class=\"headerlink\" href=\"#谈谈自己对于Spring-IoC的了解\"></a>谈谈自己对于Spring IoC的了解</h3>\n<p><strong>IoC</strong> （Inversion of Control 控制反转）是一种设计模式，用来实现对象之间的解耦。</p>\n<p>IoC 的思想就是将原本在程序中手动创建对象的控制权，交给 Spring 框架来管理。</p>\n<h4 id=\"为什么叫控制反转？\"><a class=\"headerlink\" href=\"#为什么叫控制反转？\"></a>为什么叫控制反转？</h4>\n<ul>\n<li><strong>控制</strong>：指的是对象创建（实例化、管理）的权利</li>\n<li><strong>反转</strong>：控制权交给外部环境（Spring框架、IoC容器）</li>\n</ul>\n<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件或注解即可，完全不用考虑对象是如何被创建出来的。</p>\n<h3 id=\"什么是-Bean？\"><a class=\"headerlink\" href=\"#什么是-Bean？\"></a>什么是 Bean？</h3>\n<p>Bean 就是哪些被 IoC 容器所管理的对象。</p>\n<h3 id=\"Component和-Bean的区别是什么？\"><a class=\"headerlink\" href=\"#Component和-Bean的区别是什么？\"></a>@Component和@Bean的区别是什么？</h3>\n<ul>\n<li>@Component 注解用于类，@Bean 注解用于方法。</li>\n<li>@Component 是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 IoC 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我需要的时候给我。</li>\n<li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方只能通过 @Bean 注解来实现。比如当我们引用第三方库中的类需要装配到 Spring 容器时，就只能通过 @Bean 来实现。</li>\n</ul>\n<h3 id=\"注入Bean的注解有哪些？\"><a class=\"headerlink\" href=\"#注入Bean的注解有哪些？\"></a>注入Bean的注解有哪些？</h3>\n<p>Spring 内置的<code>@Autowired</code> 还有 JDK 内置的 <code>@Resource</code> 和 <code>@Inject</code> 都可以用于注入 Bean。</p>\n<h3 id=\"Autowired和-Resource的区别是什么？\"><a class=\"headerlink\" href=\"#Autowired和-Resource的区别是什么？\"></a>@Autowired和@Resource的区别是什么？</h3>\n<ul>\n<li><code>@Autowired</code> 是 Spring 提供的注解，<code>@Resource</code> 是 JDK 提供的注解。</li>\n<li><code>Autowired</code> 默认的注入方式为<code>byType</code>（根据类型进行匹配），<code>@Resource</code>默认注入方式为 <code>byName</code>（根据名称进行匹配）。</li>\n<li>当一个接口存在多个实现类的情况下，<code>@Autowired</code> 和 <code>@Resource</code> 都需要通过名称才能正确匹配到对应的  Bean。<code>Autowired</code> 可以通过 <code>@Qualifier</code> 注解来显式指定名称，<code>@Resource</code> 可以通过 name 属性来显式指定名称。</li>\n<li>@Autowired 支持在构造函数、方法、字段和参数上使用。<code>@Resource</code> 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</li>\n</ul>\n<h3 id=\"Bean-的作用域有哪些\"><a class=\"headerlink\" href=\"#Bean-的作用域有哪些\"></a>Bean 的作用域有哪些?</h3>\n<ul>\n<li><strong>Singleton</strong> Srping 中的bean 默认都是单例的，在整个 IoC 容器中只创建一个 bean 实例，无论多少次请求该bean 都返回同一个实例。</li>\n<li><strong>prototype</strong>  每次请求都会创建一个新的 bean 实例。</li>\n<li><strong>Request</strong> 每次 Http 请求都会创建一个新的 bean 实例。</li>\n<li><strong>Session</strong> 每个 Http Session 中会有一个 bean 实例。</li>\n</ul>\n<h3 id=\"Bean-是线程安全的吗？\"><a class=\"headerlink\" href=\"#Bean-是线程安全的吗？\"></a>Bean 是线程安全的吗？</h3>\n<p>在 Spring 中 Bean 是否安全，取决于其作用域和状态。</p>\n<p>单例 Bean 在 IoC 中只创建一个实例，这个实例会被多个线程共享。所以单例 Bean 不是线程安全的，如果考虑线程安全问题，可以使用同步（synchronization）或者无状态（stateless）设计。原型 Bean 因为每次请求都会创建新的实例，所以原型作用域的 Bean 是线程安全的。</p>\n<h3 id=\"Bean的生命周期了解么？\"><a class=\"headerlink\" href=\"#Bean的生命周期了解么？\"></a>Bean的生命周期了解么？</h3>\n<p>bean 的生命周期分为五个阶段：</p>\n<ol>\n<li>调用构造器或者是通过工厂的方式创建 bean</li>\n<li>给 bean 的属性注入值</li>\n<li>调用初始化方法，进行初始化</li>\n<li>bean 被完全初始化和配置，就可以使用了</li>\n<li>当 IOC 容器关闭的时候，销毁 bean</li>\n</ol>\n<h3 id=\"谈谈对于AOP的了解\"><a class=\"headerlink\" href=\"#谈谈对于AOP的了解\"></a>谈谈对于AOP的了解</h3>\n<p>AOP（面向切面编程）将与业务无关但在多个模块中重复出现的通用逻辑（如事务管理、日志管理、权限控制等）从业务逻辑中分离出来。通过将这些横切关注点封装到独立的模块中，从而减少系统的重复代码，降低模块之间的耦合度，并提高系统的扩展性和可维护性。</p>\n<p>Spring AOP 是通过动态代理来实现切面功能，<strong>JDK动态代理</strong>：用于代理实现了接口的类。<strong>CGLIB代理</strong>：用于代理没有实现接口的类，通过生成目标类的子类来实现。</p>\n<h3 id=\"Spring-AOP-和-AspectJ-AOP-有什么区别？\"><a class=\"headerlink\" href=\"#Spring-AOP-和-AspectJ-AOP-有什么区别？\"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h3>\n<p>Spring AOP 和 AspectJ AOP 的主要区别在于实现机制、功能范围和性能。Spring AOP 基于动态代理实现，主要适用于方法级别的拦截，配置简单，适合大多数常用的 AOP 场景。AspectJ AOP 则基于编译时和类加载时织入，支持更广泛的连接点(如构造函数、字段等)，功能更强大，但配置和使用相对复杂，性能也更高，适用于需要精细控制和高性能场景。</p>\n<h3 id=\"AspectJ-定义的通知类型有哪些？\"><a class=\"headerlink\" href=\"#AspectJ-定义的通知类型有哪些？\"></a>AspectJ 定义的通知类型有哪些？</h3>\n<ul>\n<li>\n<p><strong>Before</strong>（前置通知）：在方法执行之前运行。</p>\n</li>\n<li>\n<p><strong>After</strong>（后置通知）：在方法执行之后运行，无论方法是否成功完成。</p>\n</li>\n<li>\n<p><strong>AfterReturning</strong>（返回通知）：在方法成功完成后运行。</p>\n</li>\n<li>\n<p><strong>AfterThorowing</strong>（异常通知）：在方法抛出异常后运行。</p>\n</li>\n<li>\n<p><strong>Around</strong>（环绕通知）：既可以在方法执行之前运行，也可以在方法执行之后运行。</p>\n</li>\n</ul>\n<h3 id=\"多个切面执行顺序如何控制？\"><a class=\"headerlink\" href=\"#多个切面执行顺序如何控制？\"></a>多个切面执行顺序如何控制？</h3>\n<ol>\n<li>通常使用<code>@Order</code> 注解直接定义切面顺序</li>\n<li>实现<code>Ordered</code>接口重写<code>getOrder</code>方法</li>\n</ol>\n<h3 id=\"说说自己对于-Spring-MVC-了解？\"><a class=\"headerlink\" href=\"#说说自己对于-Spring-MVC-了解？\"></a>说说自己对于 Spring MVC 了解？</h3>\n<p>SpringMVC是一个基于Java的实现了MVC设计模式的轻量级Web框架。它通过分离应用程序的业务逻辑、用户界面和控制流程，简化了Web应用程序的开发和维护。</p>\n<h3 id=\"SpringMVC-的工作流程是什么？\"><a class=\"headerlink\" href=\"#SpringMVC-的工作流程是什么？\"></a>SpringMVC 的工作流程是什么？</h3>\n<ol>\n<li>客户端请求首先到达<code>DispatcherServlet</code>。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerMapping</code>找到具体的处理器（Controller）。</li>\n<li><code>DispatcherServlet</code>通过<code>HandlerAdapter</code>调用处理器中的具体方法。</li>\n<li>处理器方法执行完毕后返回<code>ModelAndView</code>对象，包含视图名称和模型数据。</li>\n<li><code>DispatcherServlet</code>使用<code>ViewResolver</code>将视图名称解析为具体的视图。</li>\n<li>最后，<code>DispatcherServlet</code>将模型数据传递给视图，视图渲染并返回响应给客户端。</li>\n</ol>\n<p>客户端发送请求 -&gt; 2. DispatcherServlet接收请求 -&gt; 3. HandlerMapping查找控制器 -&gt; 4. HandlerAdapter调用控制器方法 -&gt; 5. Controller处理请求 -&gt; 6. ViewResolver解析视图 -&gt; 7. 视图渲染 -&gt; 8. 返回响应给客户端</p>\n<h3 id=\"统一异常处理怎么做？\"><a class=\"headerlink\" href=\"#统一异常处理怎么做？\"></a>统一异常处理怎么做？</h3>\n<p>使用注解的方式统一异常处理，使用<code>@controllerAdvice</code>和<code>@ExceptionHandler</code>这两个注解。</p>\n<h3 id=\"Spring-中用到了哪些设计模式？\"><a class=\"headerlink\" href=\"#Spring-中用到了哪些设计模式？\"></a>Spring 中用到了哪些设计模式？</h3>\n<ul>\n<li><strong>工厂设计模式</strong>：Spring 使用工厂模式通过<code>BeanFactory</code>、<code>ApplicationContext</code>创建 bean 对象。</li>\n<li><strong>代理设计模式</strong>：SpringAOP 功能实现。</li>\n<li><strong>单例设计模式</strong>：Spring 中的 Bean 默认都是单例的。</li>\n<li><strong>模版方法模式</strong>：Spring 中<code>jdbcTemplate</code>、<code>hibernateTemplate</code>等以 Template 结尾的对数据库操作的类，都使用到了模版模式。</li>\n<li><strong>包装器设计模式</strong>：项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们刚开业根据客户的需求能够动态切换不同的数据。</li>\n<li><strong>观察者模式</strong>：Spring 事件驱动模型就是观察者模式。</li>\n<li><strong>适配器模式</strong>：Spring AOP 的增强或通知使用到了适配器模式、SpringMVC 中也用到了适配器模式适配<code>Controller</code>。</li>\n</ul>\n<h3 id=\"Spring-循环依赖了解吗，怎么解决？\"><a class=\"headerlink\" href=\"#Spring-循环依赖了解吗，怎么解决？\"></a>Spring 循环依赖了解吗，怎么解决？</h3>\n<p>Spring 中的循环依赖就是指两个及以上的 Bean互相依赖，形成一个循环。比如 BeanA 依赖于 BenaB，而 BeanB 又依赖 BeanA。这种情况可能导致 Spring 容器无法正确初始化这些 Bean。</p>\n<h4 id=\"使用-setter-注入\"><a class=\"headerlink\" href=\"#使用-setter-注入\"></a>使用 setter 注入</h4>\n<p>Spring 中可以通过 Setter 注入解决循环依赖问题，因为Spring 在注入 Bean 的属性时会先创建 Bean 的实例，然后再注入依赖的属性。这样可以保证即使两个 Bean 互相依赖，Spring 也能正确的初始化它们。</p>\n<h4 id=\"使用-Lazy-注解\"><a class=\"headerlink\" href=\"#使用-Lazy-注解\"></a>使用 @Lazy 注解</h4>\n<p>在其中一个 Bean 的依赖上使用<code>@Lazy</code>注解，这样 Spring 容器在首次访问该 Bean 时才会进行初始化，避免循环依赖问题。</p>\n<h3 id=\"Spring-管理事务的方式有几种？\"><a class=\"headerlink\" href=\"#Spring-管理事务的方式有几种？\"></a>Spring 管理事务的方式有几种？</h3>\n<ul>\n<li><strong>编程式事务</strong>：在代码中硬编码（在分布式系统中推荐使用）：通过<code>TranscationTemplate</code>或者<code>TransactionManager</code>在手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。</li>\n<li><strong>声明式事务</strong>：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用）：实际时通过 AOP 实现（基于<code>@Transcational</code>的全注解方式使用最多）</li>\n</ul>\n<h3 id=\"Srping事务中哪几种事务传播行为？\"><a class=\"headerlink\" href=\"#Srping事务中哪几种事务传播行为？\"></a>Srping事务中哪几种事务传播行为？</h3>\n<blockquote>\n<p>事务传播行为是为了解决业务层方法之间互相调用的事务问题。</p>\n<p>当事务方法被另一个事务方法调用时，必须制定事务应该如何传播。</p>\n<p>例如：方法可能继续在现有的事务中运行，也可能开启一个新事物，并在自己的事物中运行。</p>\n</blockquote>\n<ol>\n<li><strong><code>TransactionDefinition.PROPAGATION_REQUIRED</code></strong>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事物。</li>\n</ol>\n<h3 id=\"什么是-SpringBoot？为什么要有-SpringBoot？\"><a class=\"headerlink\" href=\"#什么是-SpringBoot？为什么要有-SpringBoot？\"></a>什么是 SpringBoot？为什么要有 SpringBoot？</h3>\n<p>SpringBoot 可以简化 Spring 开发（减少配置文件、开箱即用 ）</p>\n<h3 id=\"如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"><a class=\"headerlink\" href=\"#如何在-SpringBoot-应用程序中使用-Jetty-而不是-Tomcat？\"></a>如何在 SpringBoot 应用程序中使用 Jetty 而不是 Tomcat？</h3>\n<p>SpringBoot（spirng-boot-starter-web）使用Tomcat 作为默认的嵌入式 servlet 容器，如果想使用 Jetty 的话，只需要修改 pom.xml （Maven）文件就可以了。</p>\n<h3 id=\"介绍一下-SpringBootApplication-注解\"><a class=\"headerlink\" href=\"#介绍一下-SpringBootApplication-注解\"></a>介绍一下 @SpringBootApplication 注解</h3>\n<p><code>@SpringBootApplication</code>可以看作是<code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code>注解的集合。</p>\n<ul>\n<li><code>@Configuration</code>：运行在上下文中注册额外的<code>bean</code>或导入其他配置类</li>\n<li><code>@EnableAutoConfiguration</code>：启用 Springboot 的自动配置机制</li>\n<li><code>@ComponentScan</code>：扫描被<code>@Component</code>(<code>@Service</code>,<code>@Controller</code>)注解的 bean，默认会扫描该类所在的包下的所有的类。</li>\n</ul>\n<h3 id=\"SpringBoot-的自动配置是如何实现的？\"><a class=\"headerlink\" href=\"#SpringBoot-的自动配置是如何实现的？\"></a>SpringBoot 的自动配置是如何实现的？</h3>\n<p>当 SpringBoot 应用启动时，@EnableAutoConfiguration`注解会触发自动配置类的加载。</p>\n<p>SpringBoot 会扫描<code>spring.factories</code>文件，并加载列出自动配置类。然后 SpringBoot 会根据条件注解的判断，决定是否进行相应的配置。</p>\n<h3 id=\"SpringBoot-常用的两种配置文件\"><a class=\"headerlink\" href=\"#SpringBoot-常用的两种配置文件\"></a>SpringBoot 常用的两种配置文件</h3>\n<p>我们可以通过<code>applcation.properties</code>或者<code>application.yml</code>对SpringBoot 程序进行简单的配置。如果不进行配置的话，就是使用默认配置。</p>\n<h3 id=\"什么是-YAML-YAML配置的优势在哪里？\"><a class=\"headerlink\" href=\"#什么是-YAML-YAML配置的优势在哪里？\"></a>什么是 YAML ? YAML配置的优势在哪里？</h3>\n<p>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的树形，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。</p>\n<p>相比 Properties 配置文件，YAML 配置方式更加直观清晰，简洁明了，有层次感。</p>\n<p>但是 YAML 配置文件不支持<code>@PropertySource</code> 注解导入自定义的 YAML 配置。</p>\n<h3 id=\"SpringBoot-常用的读取配置文件的方法有哪些？\"><a class=\"headerlink\" href=\"#SpringBoot-常用的读取配置文件的方法有哪些？\"></a>SpringBoot 常用的读取配置文件的方法有哪些？</h3>\n<ol>\n<li>\n<p>通过<code>@Value(&quot;$&#123;property&#125;&quot;)</code>读取比较简单的配置信息</p>\n<blockquote>\n<p><code>@value</code> 这种方式是不被推荐的</p>\n</blockquote>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperties</code>读取并与 bean 绑定</p>\n</li>\n<li>\n<p>通过<code>@ConfigurationProperies</code>读取并校验</p>\n</li>\n<li>\n<p>通过<code>@PropertySource</code>读取指定的 properties 文件</p>\n</li>\n</ol>\n<h3 id=\"SpringBoot-如何做请求参数校验？\"><a class=\"headerlink\" href=\"#SpringBoot-如何做请求参数校验？\"></a>SpringBoot 如何做请求参数校验？</h3>\n<p>使用 JSR 提供的校验注解</p>\n<h3 id=\"SpringBoot-如何监控系统运行状态？\"><a class=\"headerlink\" href=\"#SpringBoot-如何监控系统运行状态？\"></a>SpringBoot 如何监控系统运行状态？</h3>\n<p>可以使用 SpringBoot Actuator 来对 SpringBoot 项目进行简单的监控。</p>\n<h3 id=\"SpringBoot-中如何实现定时任务？\"><a class=\"headerlink\" href=\"#SpringBoot-中如何实现定时任务？\"></a>SpringBoot 中如何实现定时任务？</h3>\n<p>我们使用<code>@Scheduled</code>注解就能很方便地创建一个定时任务。</p>\n<p>还需要再 SpringBoot 启动类上添加<code>@EnableScheduling</code>注解，这个注解的作用是发现<code>@Scheduled</code>的任务并在后台执行该任务。</p>\n",
            "tags": [
                "Java",
                "总结",
                "Spring"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/22/Myql%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/22/Myql%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "MySQL应用与总结",
            "date_published": "2024-06-22T10:02:39.000Z",
            "content_html": "<h1 id=\"数据库\"><a class=\"headerlink\" href=\"#数据库\"></a>数据库</h1>\n<h2 id=\"索引\"><a class=\"headerlink\" href=\"#索引\"></a>索引</h2>\n<h3 id=\"为什么使用索引会加快查询？\"><a class=\"headerlink\" href=\"#为什么使用索引会加快查询？\"></a>为什么使用索引会加快查询？</h3>\n<p>数据库文件是存储在磁盘上的，磁盘 I/O 是数据库操作中最耗时的部分之一。没有索引时，数据库会进行全表扫描（Sequential Scan），这意味着它必须读取表中的每一行数据来查找匹配的行（时间效率为 O(n)）。当表的数据量非常大时，就会导致大量的磁盘 I/O 操作。</p>\n<p>有了索引，就可以直接跳到索引指示的数据位置，而不必扫描整张表，从而大大减少了磁盘 I/O 操作的次数。</p>\n<p>MySQL 的 InnoDB 存储引擎默认使用 B+ 树来作为索引的数据结构，而 B+ 树的查询效率非常高，时间复杂度为 O(logN)。</p>\n<p>索引文件相较于数据库文件，体积小得多，查到索引之后再映射到数据库记录，查询效率就会高很多。</p>\n<p>索引就好像书的目录，通过目录去查找对应的章节内容会比一页一页的翻书快很多。</p>\n<h3 id=\"MySQL中的索引有哪些类型？\"><a class=\"headerlink\" href=\"#MySQL中的索引有哪些类型？\"></a>MySQL中的索引有哪些类型？</h3>\n<ul>\n<li><strong>B-Tree索引</strong>：是MySQL中最常用的索引类型。适用于等值查询、范围查询、排序和分组操作。B-Tree索引的优点是查询效率高，尤其适合范围查询和排序操作，但对于频繁更新的列，索引维护成本较高。</li>\n<li><strong>哈希索引</strong>：通过哈希函数将键值映射到哈希表的位置，查找速度非常快。它适用于等值查询，但不支持范围查询、排序和分组。此外，哈希冲突会降低性能。</li>\n<li><strong>全文索引</strong>：用于全文搜索，支持对文本字段的关键词查询。它适合需要全文检索的场景，如搜索引擎和文章内容搜索，全文检索速度快，但建立和维护成本高，不适合实时更新的数据。</li>\n<li><strong>空间索引</strong>：（R-Tree索引）用于地理信息系统中的空间查询，适合多维数据的快速查询，如地理位置查询和地图服务。它能够有效地进行范围查询和最近邻查询，但不适合其他类型的数据，且建立和维护成本较高。</li>\n<li><strong>前缀索引</strong>：是对字符串类型的列的前几个字符创建索引，适用于字符串列较长且前缀部分区分度较高的场景。它能节省索引空间并提高查询效率，但只适用于前缀匹配查询，不支持全文匹配。</li>\n<li><strong>聚簇索引</strong>：决定数据在磁盘上的物理存储顺序，每个表只能有一个聚簇索引，通常是主键。它的数据访问速度快，特别适合范围查询，但更新开销较大，且非聚簇索引需要包含聚簇索引列作为引用。</li>\n<li><strong>非聚簇索引</strong>：的索引和数据分别存储，叶节点存储指向数据的指针。它的更新开销较小，可以有多个非聚簇索引，但查询时需要先访问索引再访问数据，速度略慢于聚簇索引。</li>\n<li><strong>唯一索引</strong>：确保索引列中的值是唯一的，适用于需要唯一性约束的场景，如用户名、电子邮件地址等。它能确保数据的唯一性，防止重复数据，但插入和更新时需要检查唯一性，开销较大。</li>\n<li><strong>组合索引</strong>：是对多个列创建的索引，能够提高多列查询的效率，适用于WHERE子句中涉及多列的查询。它能显著提高查询效率，但索引创建和维护成本较高，且需要考虑索引的顺序。</li>\n</ul>\n<h2 id=\"日志\"><a class=\"headerlink\" href=\"#日志\"></a>日志</h2>\n<h3 id=\"MySQL-日志文件有哪些？\"><a class=\"headerlink\" href=\"#MySQL-日志文件有哪些？\"></a>MySQL 日志文件有哪些？</h3>\n<ol>\n<li><strong>错误日志</strong>：记录 MySQL 服务器启动、运行或停止时出现的问题。</li>\n<li><strong>慢查询日志</strong>：记录执行时间超过<code>long_query_time</code>值的所有 SQL 语句。这个时间值是可配置的，默认情况下，慢查询日志功能是关闭的。可以用来识别和优化慢 SQL。</li>\n<li><strong>一般查询日志</strong>：记录所有 MySQL 服务器的链接信息以及所有的 SQL 语句，不论这些语句是否修改了数据。</li>\n<li><strong>二进制日志</strong>：记录了所有修改数据库状态的 SQL 语句，以及每个语句的执行时间，如 INSERT、UPDATE、DELETE 等，但不包括 SELECT 和 SHOW 这类的操作。</li>\n<li><strong>重做日志</strong>：记录对于<code>InnDB</code>表的每个写操作，不是 SQL 级的，而是物理级别的，主要用于崩溃恢复。</li>\n<li><strong>回滚日志</strong>：记录数据被修改前的值，用于事务回滚。</li>\n</ol>\n",
            "tags": [
                "MySQL",
                "总结"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "Java集合总结",
            "date_published": "2024-06-22T08:48:56.000Z",
            "content_html": "<h1 id=\"Java集合\"><a class=\"headerlink\" href=\"#Java集合\"></a>Java集合</h1>\n<h3 id=\"说说-List-Set-Queue-Map-四者的区别？\"><a class=\"headerlink\" href=\"#说说-List-Set-Queue-Map-四者的区别？\"></a>说说 List, Set, Queue, Map 四者的区别？</h3>\n<ul>\n<li>\n<p><code>List</code>：存储的元素是有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Set</code>：存储的元素不可重复。</p>\n</li>\n<li>\n<p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。</p>\n</li>\n<li>\n<p><code>Map</code>：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的。</p>\n</li>\n</ul>\n<h2 id=\"List\"><a class=\"headerlink\" href=\"#List\"></a>List</h2>\n<h3 id=\"ArrayList-和-Array-（数组）的区别？\"><a class=\"headerlink\" href=\"#ArrayList-和-Array-（数组）的区别？\"></a>ArrayList 和 Array （数组）的区别？</h3>\n<ul>\n<li><strong>ArrayList</strong>：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。</li>\n<li><strong>Array（数组）</strong>：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。</li>\n</ul>\n<h3 id=\"ArrayList-可以添加-null-吗？\"><a class=\"headerlink\" href=\"#ArrayList-可以添加-null-吗？\"></a>ArrayList 可以添加 null 吗？</h3>\n<p><code>ArrayList</code>中可以存储任何类型的对象，包括<code>null</code>。</p>\n<h4 id=\"ArrayList和LinkedList的区别是什么？\"><a class=\"headerlink\" href=\"#ArrayList和LinkedList的区别是什么？\"></a>ArrayList和LinkedList的区别是什么？</h4>\n<ul>\n<li><strong>ArrayList</strong> 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。</li>\n<li>**LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。</li>\n</ul>\n<h3 id=\"ArrayList如何去重？\"><a class=\"headerlink\" href=\"#ArrayList如何去重？\"></a>ArrayList如何去重？</h3>\n<ol>\n<li><strong>使用HashSet</strong>：通过<code>HashSet</code>的特性去重，然后转换回<code>ArrayList</code>。</li>\n<li><strong>使用Stream API</strong>：使用Java 8引入的Stream的<code>distinct()</code>方法去重。</li>\n<li><strong>手动遍历</strong>：手动遍历<code>ArrayList</code>并使用另一个<code>ArrayList</code>存储不重复的元素。</li>\n</ol>\n<h2 id=\"Map\"><a class=\"headerlink\" href=\"#Map\"></a>Map</h2>\n<h3 id=\"HashMap和LinkedHashMap的区别？\"><a class=\"headerlink\" href=\"#HashMap和LinkedHashMap的区别？\"></a>HashMap和LinkedHashMap的区别？</h3>\n<p><code>LinkedHashMap</code>继承自<code>HashMap</code>，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。</p>\n<h3 id=\"HashMap-和-HashTable-有什么区别？\"><a class=\"headerlink\" href=\"#HashMap-和-HashTable-有什么区别？\"></a>HashMap 和 HashTable 有什么区别？</h3>\n<p>因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。</p>\n<h4 id=\"初始化容量和扩容方式：\"><a class=\"headerlink\" href=\"#初始化容量和扩容方式：\"></a>初始化容量和扩容方式：</h4>\n<ul>\n<li><strong>HashMap</strong>：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。</li>\n<li><strong>Hashtable</strong>：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1</li>\n</ul>\n<h3 id=\"ConcurrentHashMap和Hashtable的区别\"><a class=\"headerlink\" href=\"#ConcurrentHashMap和Hashtable的区别\"></a>ConcurrentHashMap和Hashtable的区别?</h3>\n<p><code>ConcurrentHashMap</code>和<code>Hashtable</code>都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。</p>\n<ul>\n<li>\n<p><strong>实现机制</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。</li>\n<li><code>Hashtable</code>使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。</li>\n</ul>\n<p><strong>性能</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。</li>\n<li><code>Hashtable</code>性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。</li>\n</ul>\n<p><strong>锁粒度</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。</li>\n<li><code>Hashtable</code>锁粒度大，所有操作都需要获取全表锁，降低了并发能力。</li>\n</ul>\n<p><strong>Null键和值</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>不允许存储<code>null</code>键和<code>null</code>值，尝试存储<code>null</code>会抛出<code>NullPointerException</code>。</li>\n<li><code>Hashtable</code>也不允许存储<code>null</code>键和<code>null</code>值，存储<code>null</code>时会抛出<code>NullPointerException</code>。</li>\n</ul>\n<p><strong>迭代器安全性</strong>：</p>\n<ul>\n<li><code>ConcurrentHashMap</code>提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出<code>ConcurrentModificationException</code>，但不保证读取到的值是最新的。</li>\n<li><code>Hashtable</code>提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出<code>ConcurrentModificationException</code>。</li>\n</ul>\n<h3 id=\"总结：\"><a class=\"headerlink\" href=\"#总结：\"></a>总结：</h3>\n<ul>\n<li><strong>ConcurrentHashMap</strong>适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许<code>null</code>键和值。</li>\n<li><strong>Hashtable</strong>适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许<code>null</code>键和值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HashMap-的底层原理\"><a class=\"headerlink\" href=\"#HashMap-的底层原理\"></a>HashMap 的底层原理</h3>\n<h5 id=\"1-数据结构\"><a class=\"headerlink\" href=\"#1-数据结构\"></a>1. 数据结构</h5>\n<p><code>HashMap</code>底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。</p>\n<ul>\n<li><strong>数组</strong>：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。</li>\n<li><strong>链表</strong>：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。</li>\n<li><strong>红黑树</strong>：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。</li>\n</ul>\n<h5 id=\"2-插入元素\"><a class=\"headerlink\" href=\"#2-插入元素\"></a>2. 插入元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>检查该位置是否已经有元素：\n<ul>\n<li>如果没有元素，直接插入。</li>\n<li>如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-查找元素\"><a class=\"headerlink\" href=\"#3-查找元素\"></a>3. 查找元素</h5>\n<ol>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中查找匹配键，返回对应的值。</li>\n</ol>\n<h5 id=\"4-删除元素\"><a class=\"headerlink\" href=\"#4-删除元素\"></a>4. 删除元素</h5>\n<ul>\n<li>计算键的哈希值，并确定在数组中的索引位置。</li>\n<li>在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。</li>\n</ul>\n<h5 id=\"5-扩容机制\"><a class=\"headerlink\" href=\"#5-扩容机制\"></a>5. 扩容机制</h5>\n<p>当<code>HashMap</code>中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：</p>\n<ol>\n<li>创建一个新的数组，容量是原来的两倍。</li>\n<li>将原数组中的所有元素重新哈希并放入新数组中。</li>\n<li>重新调整链表或红黑树结构。</li>\n</ol>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>数据结构</strong>：<code>HashMap</code>使用数组、链表和红黑树存储元素。</li>\n<li><strong>哈希算法</strong>：通过键的<code>hashCode()</code>计算哈希值，并通过哈希值确定数组索引。</li>\n<li><strong>插入元素</strong>：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。</li>\n<li><strong>查找元素</strong>：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。</li>\n<li><strong>删除元素</strong>：定位到数组索引，删除链表或红黑树中的节点。</li>\n<li><strong>扩容机制</strong>：当元素数量超过阈值时，<code>HashMap</code>会自动扩容，重新分配数组并调整元素位置。</li>\n</ul>\n",
            "tags": [
                "Java",
                "笔记"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "Java基础总结",
            "date_published": "2024-06-21T12:41:04.000Z",
            "content_html": "<h4 id=\"对象相等和引用相等的区别\"><a class=\"headerlink\" href=\"#对象相等和引用相等的区别\"></a>对象相等和引用相等的区别</h4>\n<ul>\n<li><strong>对象相等</strong>：比较的是内存中存放的内容是否相等。</li>\n<li><strong>引用相等</strong>：比较的是它们指向的内存地址是否相等。</li>\n</ul>\n<h4 id=\"如果一个类没有声明构造方法，该程序能正确执行吗？\"><a class=\"headerlink\" href=\"#如果一个类没有声明构造方法，该程序能正确执行吗？\"></a>如果一个类没有声明构造方法，该程序能正确执行吗？</h4>\n<ul>\n<li>如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。</li>\n<li>如果添加了类的构造方法，无论是否有参，<code>Java</code>都不会添加默认不带参数的构造方法。</li>\n</ul>\n<h4 id=\"构造方法有哪些特点？是否可被重写？\"><a class=\"headerlink\" href=\"#构造方法有哪些特点？是否可被重写？\"></a>构造方法有哪些特点？是否可被重写？</h4>\n<ul>\n<li><strong>构造方法的特点</strong>：\n<ul>\n<li>名字与类名相同。</li>\n<li>没有返回值。</li>\n<li>生成类的对象时自动执行，无需调用。<br>\n构造方法不能被重写，但是可以被重载。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象的三大特征\"><a class=\"headerlink\" href=\"#面向对象的三大特征\"></a>面向对象的三大特征</h4>\n<ul>\n<li><strong>封装</strong>：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。</li>\n<li><strong>继承</strong>：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。</li>\n<li><strong>多态</strong>：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。</li>\n</ul>\n<h4 id=\"接口和抽象类有什么共同点和区别？\"><a class=\"headerlink\" href=\"#接口和抽象类有什么共同点和区别？\"></a>接口和抽象类有什么共同点和区别？</h4>\n<ul>\n<li><strong>共同点</strong>：\n<ul>\n<li>都不能被实例化。</li>\n<li>都可以包含抽象方法。</li>\n<li>都可以有默认的实现方法。</li>\n</ul>\n</li>\n<li><strong>区别</strong>：\n<ul>\n<li>接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。</li>\n<li>抽象类主要用于代码的复用，强调所属关系。</li>\n<li>一个类只能继承一个类，但是可以实现多个接口。</li>\n<li>接口中的成员变量只能是静态常量，不能被修改且必须有初始值。</li>\n<li>抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"深拷贝和浅拷贝的区别？什么是引用拷贝？\"><a class=\"headerlink\" href=\"#深拷贝和浅拷贝的区别？什么是引用拷贝？\"></a>深拷贝和浅拷贝的区别？什么是引用拷贝？</h4>\n<ul>\n<li><strong>浅拷贝</strong>：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用<code>Object</code>的<code>clone()</code>方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。</li>\n<li><strong>深拷贝</strong>：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。</li>\n<li><strong>引用拷贝</strong>：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。</li>\n</ul>\n<h4 id=\"和-equals-的区别？\"><a class=\"headerlink\" href=\"#和-equals-的区别？\"></a>== 和 equals()的区别？</h4>\n<ul>\n<li>对于基本数据类型，<code>==</code> 比较的是值。</li>\n<li>对于引用数据类型，<code>==</code> 比较的是对象的内存地址。</li>\n<li><code>equals()</code>没有重写时，等价于<code>==</code>比较两个对象。</li>\n<li>被重写时，一般都重写<code>equals()</code>方法用来比较两个对象中的属性是否相等。</li>\n</ul>\n<h4 id=\"hashCode-有什么用？\"><a class=\"headerlink\" href=\"#hashCode-有什么用？\"></a>hashCode() 有什么用？</h4>\n<p><code>hashCode()</code>方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。</p>\n<h4 id=\"为什么重写-equals-时必须重写-hashCode-方法？\"><a class=\"headerlink\" href=\"#为什么重写-equals-时必须重写-hashCode-方法？\"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h4>\n<h5 id=\"equals-和hashCode-的合同（约定）\"><a class=\"headerlink\" href=\"#equals-和hashCode-的合同（约定）\"></a><code>equals()</code>和<code>hashCode()</code>的合同（约定）</h5>\n<p>如果两个对象根据<code>equals()</code>方法是相等的，那么它们的<code>hashCode()</code>值必须相同。</p>\n<p>如果两个对象的<code>hashCode()</code>值相同，它们不一定是相等的（但它们有可能是相等的）。</p>\n<h4 id=\"String、StringBuffer、StringBuilder-的区别？\"><a class=\"headerlink\" href=\"#String、StringBuffer、StringBuilder-的区别？\"></a>String、StringBuffer、StringBuilder 的区别？</h4>\n<ul>\n<li><strong>String</strong>：不可变的，因为不可变，所以它是线程安全的。</li>\n<li><strong>StringBuffer</strong>：可变的，允许对字符串进行修改，线程安全，所有的方法都被<code>synchronized</code>修饰。</li>\n<li><strong>StringBuilder</strong>：可变的，但不是线程安全的，没有被<code>synchronized</code>修饰。由于没有同步机制，性能比<code>StringBuffer</code>更高，适合单线程环境下使用。</li>\n<li><strong>使用场景</strong>：\n<ul>\n<li>当字符串是固定不变的时候使用<code>String</code>。</li>\n<li>当需要对字符串进行大量修改且在多线程环境下使用<code>StringBuffer</code>。</li>\n<li>当需要对字符串进行大量修改且在单线程环境下使用<code>StringBuilder</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串常量池的作用了解吗？\"><a class=\"headerlink\" href=\"#字符串常量池的作用了解吗？\"></a>字符串常量池的作用了解吗？</h4>\n<p>字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，<code>JVM</code>会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。</p>\n<h4 id=\"Exception-和-Error-有什么区别？\"><a class=\"headerlink\" href=\"#Exception-和-Error-有什么区别？\"></a>Exception 和 Error 有什么区别？</h4>\n<ul>\n<li><strong>Exception</strong>和<strong>Error</strong>都是<strong>Throwable</strong>的子类。</li>\n<li><code>Exception</code>是程序本身可以处理的异常，可以通过<code>catch</code>来捕获。<code>Exception</code>还可以分为<code>checked Exception</code>和<code>Unchecked Exception</code>。</li>\n<li><code>Error</code>是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。</li>\n</ul>\n<h4 id=\"Checked-Exception-和-Unchecked-Exception-有什么区别？\"><a class=\"headerlink\" href=\"#Checked-Exception-和-Unchecked-Exception-有什么区别？\"></a>Checked Exception 和 Unchecked Exception 有什么区别？</h4>\n<ul>\n<li><strong>Checked Exception</strong>必须被捕获或声明，否则编译器会报错。</li>\n<li><strong>Unchecked Exception</strong>也叫运行时异常，不强制要求处理，但最好捕获处理。</li>\n</ul>\n<h4 id=\"什么是泛型？有什么作用？\"><a class=\"headerlink\" href=\"#什么是泛型？有什么作用？\"></a>什么是泛型？有什么作用？</h4>\n<p>泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List<String>(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，从集合中取出元素时不需要进行转换。Java编译器在编译时会移除所有的泛型类型信息</p>\n<h4 id=\"反射是什么？\"><a class=\"headerlink\" href=\"#反射是什么？\"></a>反射是什么？</h4>\n<p>反射是<code>Java</code>中的一种机制，允许程序在运行时获取有关自身的信息。并能动态地调用对象的方法、访问属性和创建对象实例。反射提供了动态操作类和对象的能力，是实现框架、工具和动态代理等技术的基础。</p>\n<h4 id=\"反射的优缺点？\"><a class=\"headerlink\" href=\"#反射的优缺点？\"></a>反射的优缺点？</h4>\n<ul>\n<li><strong>反射的优点</strong>：\n<ul>\n<li>动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。</li>\n<li>很多流行的<code>Java</code>框架如<code>Spring</code>都依赖反射来实现动态代理、依赖注入。</li>\n</ul>\n</li>\n<li><strong>反射的缺点</strong>：\n<ul>\n<li>反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。</li>\n<li>反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。</li>\n<li>使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。</li>\n<li>反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"何谓注解？\"><a class=\"headerlink\" href=\"#何谓注解？\"></a>何谓注解？</h4>\n<p>注解是<code>Java</code>中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如<code>@Override</code>注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。</p>\n<h4 id=\"什么是序列化？什么是反序列化？\"><a class=\"headerlink\" href=\"#什么是序列化？什么是反序列化？\"></a>什么是序列化？什么是反序列化？</h4>\n<ul>\n<li><strong>序列化</strong>：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。</li>\n<li><strong>反序列化</strong>：将字节流恢复为Java对象的过程。通过反序列化使其恢复到序列化之前的状态。</li>\n</ul>\n",
            "tags": [
                "Java",
                "笔记"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/",
            "url": "https://blog.aixcc.top/2024/06/18/%E4%BD%BF%E7%94%A8AList%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6/",
            "title": "使用AList定时备份文件",
            "date_published": "2024-06-18T08:37:21.000Z",
            "content_html": "<h1 id=\"使用AList定时备份文件\"><a class=\"headerlink\" href=\"#使用AList定时备份文件\"></a>使用AList定时备份文件</h1>\n<p>本教程详细介绍如何使用 <code>AList</code> 通过 <code>API</code> 自动备份服务器文件，包括获取 <code>JWT Token</code> 和自动上传备份文件至 <code>AList</code> 服务器。</p>\n<h2 id=\"环境配置\"><a class=\"headerlink\" href=\"#环境配置\"></a>环境配置</h2>\n<p>首先，确保服务器上安装了 <code>curl</code> 和 <code>jq</code>。<code>curl</code> 用于发送 <code>HTTP</code> 请求，而 <code>jq</code> 用于解析 <code>JSON</code> 响应。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> jq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"设置环境变量\"><a class=\"headerlink\" href=\"#设置环境变量\"></a>设置环境变量</h3>\n<p>为确保脚本能自动读取 <code>AList</code> 的用户名和密码，在服务器的环境变量中设置，避免在脚本中硬编码敏感信息，提高安全性。<br>\n通过在服务器的 <code>~/.bashrc</code> 或 <code>~/.profile</code> 文件中添加以下行来永久设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_USERNAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_username>\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ALIST_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"&lt;your_password>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>确保替换 “your_username” 和 “your_password” 为你的 AList 登录用户名和密码。</p>\n<h3 id=\"应用环境变量\"><a class=\"headerlink\" href=\"#应用环境变量\"></a>应用环境变量</h3>\n<p>修改文件后，为使环境变量立即生效，执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者，如果你是在 ~/.profile 中设置的环境变量，使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样设置后，每当脚本执行时，它将能从这些环境变量中读取所需的用户名和密码。</p>\n<h2 id=\"获取-JWT-Token\"><a class=\"headerlink\" href=\"#获取-JWT-Token\"></a>获取 JWT Token</h2>\n<p>要与 <code>AList</code> 的 <code>API</code> 交互，首先需要获取一个有效的 JWT Token。以下步骤展示如何通过登录 <code>API</code> 获取 <code>Token</code>。</p>\n<h3 id=\"创建-Token-获取脚本\"><a class=\"headerlink\" href=\"#创建-Token-获取脚本\"></a>创建 Token 获取脚本</h3>\n<ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>get_token.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>get_token.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/get_token.sh\n<span class=\"token function\">vim</span> /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 读取环境变量中的用户名和密码</span>\n<span class=\"token assign-left variable\">alist_username</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_USERNAME</span>\"</span>\n<span class=\"token assign-left variable\">alist_password</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$ALIST_PASSWORD</span>\"</span>\n\n<span class=\"token comment\"># 使用curl发送POST请求获取token</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-k</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://&lt;服务器域名或IP地址>:&lt;端口号>/api/auth/login\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"&#123;<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>username<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_username</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>password<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$alist_password</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&#125;\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 解析响应获取token</span>\n<span class=\"token comment\"># 检查token是否成功获取</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Failed to get token\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Token retrieved successfully\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span> <span class=\"token operator\">></span> /tmp/alist_token.txt\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/get_token.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"上传备份文件\"><a class=\"headerlink\" href=\"#上传备份文件\"></a>上传备份文件</h2>\n<p>使用 PUT <code>/api/fs/put</code> API 上传备份文件。创建一个脚本自动执行备份和上传。</p>\n<h3 id=\"创建上传脚本\"><a class=\"headerlink\" href=\"#创建上传脚本\"></a>创建上传脚本</h3>\n<ul>\n<li><strong>脚本位置</strong>：在 <code>/opt/alist</code> 目录下创建 <code>upload_backup.sh</code> 脚本。</li>\n<li><strong>编辑脚本</strong>：使用 <code>Vim</code> 或任意文本编辑器创建和编辑 <code>upload_backup.sh</code> 文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /opt/alist/upload_backup.sh\n<span class=\"token function\">vim</span> /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>脚本内容</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 日志文件夹位置</span>\n<span class=\"token assign-left variable\">LOG_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/log/upload_back_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y%m%d%H%M%S'</span><span class=\"token variable\">)</span></span>.log\"</span>\n\n<span class=\"token comment\"># 函数：带时间戳的echo</span>\n<span class=\"token function-name function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"[<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token variable\">)</span></span>] <span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$LOG_FILE</span>\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 删除超过30天的日志文件</span>\n<span class=\"token function\">find</span> /opt/alist/log <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.log\"</span> <span class=\"token parameter variable\">-mtime</span> +30 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 目标 API URL</span>\n<span class=\"token assign-left variable\">API_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://&lt;alist服务器域名或IP地址>/api/fs/put\"</span>\n\n<span class=\"token comment\"># 要备份的目录</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/opt/alist/data\"</span>\n\n<span class=\"token comment\"># 备份文件存储位置，包含时间戳</span>\n<span class=\"token assign-left variable\">BACKUP_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/alist/alist_backup_<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%Y%m%d%H%M%S<span class=\"token variable\">)</span></span>.tar.gz\"</span>\n\n<span class=\"token comment\"># 创建备份文件</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span> <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># 获取文件大小</span>\n<span class=\"token assign-left variable\">CONTENT_LENGTH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">stat</span> <span class=\"token parameter variable\">-c</span> %s <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># URL编码的完整目标文件路径</span>\n<span class=\"token assign-left variable\">ENCODED_FILE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"&lt;alist上的路径><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $BACKUP_PATH<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-sRr</span> @uri<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 读取存储的token</span>\n<span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/alist_token.txt<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 使用curl PUT请求上传文件</span>\n<span class=\"token assign-left variable\">response</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$API_URL</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"File-Path: <span class=\"token variable\">$ENCODED_FILE_PATH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/octet-stream\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Length: <span class=\"token variable\">$CONTENT_LENGTH</span>\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-T</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 检查上传是否成功并记录日志</span>\nlog <span class=\"token string\">\"<span class=\"token variable\">$response</span>\"</span>\n<span class=\"token comment\"># 删除本地临时备份文件</span>\n<span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_PATH</span>\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    log <span class=\"token string\">\"Local backup file deleted\"</span>\n<span class=\"token keyword\">else</span>\n    log <span class=\"token string\">\"Failed to delete local backup file\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>赋予脚本执行权限</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"设置定时任务\"><a class=\"headerlink\" href=\"#设置定时任务\"></a>设置定时任务</h2>\n<p>使用 <code>crontab -e</code> 添加定时任务自动执行以上脚本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这将在每天凌晨 1 点自动获取新的 <code>Token</code>，并在五分钟后上传最新的备份文件。</p>\n<h2 id=\"日志记录\"><a class=\"headerlink\" href=\"#日志记录\"></a>日志记录</h2>\n<p>考虑将脚本的输出重定向到日志文件中，以便跟踪操作历史和错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> * * * /opt/alist/get_token.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n<span class=\"token number\">5</span> <span class=\"token number\">1</span> * * * /opt/alist/upload_backup.sh <span class=\"token operator\">>></span> /var/log/alist_backup.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这样，你就有了一个自动化的、具备日志记录功能的服务器文件备份系统，使用 <code>AList</code> 完成文件的存储和备份。</p>\n<hr>\n",
            "tags": [
                "Alist"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/",
            "url": "https://blog.aixcc.top/2024/06/16/Hexo%E5%A4%87%E4%BB%BD/",
            "title": "Hexo备份",
            "date_published": "2024-06-16T11:19:00.000Z",
            "content_html": "<h1 id=\"使用-Hexo-和-GitHub-实现多平台工作和数据备份\"><a class=\"headerlink\" href=\"#使用-Hexo-和-GitHub-实现多平台工作和数据备份\"></a>使用 Hexo 和 GitHub 实现多平台工作和数据备份</h1>\n<h2 id=\"目标\"><a class=\"headerlink\" href=\"#目标\"></a>目标</h2>\n<ul>\n<li><strong><code>master</code> 分支</strong>：保存 Hexo 生成的静态文件，用于部署到 GitHub Pages。</li>\n<li><strong><code>hexo</code> 分支</strong>：保存 Hexo 源文件，便于本地编辑和备份，并设置为默认分支。</li>\n</ul>\n<h2 id=\"为什么要这样做？\"><a class=\"headerlink\" href=\"#为什么要这样做？\"></a>为什么要这样做？</h2>\n<p>使用两个分支的目的是将生成的静态文件和源文件分开管理，以便在多个设备上编辑博客，同时保持数据的安全备份。<code>hexo</code> 分支保存源文件，方便我们在不同平台进行编辑；<code>master</code> 分支保存静态文件，用于发布到 GitHub Pages。</p>\n<h2 id=\"操作步骤\"><a class=\"headerlink\" href=\"#操作步骤\"></a>操作步骤</h2>\n<h3 id=\"1-初始化-Hexo-项目\"><a class=\"headerlink\" href=\"#1-初始化-Hexo-项目\"></a>1. 初始化 Hexo 项目</h3>\n<p>首先，在本地初始化你的 Hexo 项目。这一步会创建一个新的 Hexo 项目，并安装所需的依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init my-blog\n<span class=\"token builtin class-name\">cd</span> my-blog\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-初始化-Git-仓库\"><a class=\"headerlink\" href=\"#2-初始化-Git-仓库\"></a>2. 初始化 Git 仓库</h3>\n<p>在 Hexo 项目目录中初始化 Git 仓库，以便我们可以将项目推送到 GitHub。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-创建-hexo-分支\"><a class=\"headerlink\" href=\"#3-创建-hexo-分支\"></a>3. 创建 hexo 分支</h3>\n<p>创建一个新的分支 <code>hexo</code>，用于保存 Hexo 的源文件。默认情况下，我们会在这个分支上进行编辑和管理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-推送-hexo-分支到-GitHub\"><a class=\"headerlink\" href=\"#4-推送-hexo-分支到-GitHub\"></a>4. 推送 hexo 分支到 GitHub</h3>\n<p>将 <code>hexo</code> 分支推送到 GitHub，并设置为默认分支。这样可以确保我们的源文件在 GitHub 上有备份，并且可以在多个设备上同步编辑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/yourusername/yourrepo.git\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit with Hexo source files\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后，在 GitHub 仓库设置中，将 <code>hexo</code> 分支设置为默认分支：</p>\n<ol>\n<li>打开你的 GitHub 仓库。</li>\n<li>点击 “Settings”。</li>\n<li>在左侧菜单中点击 “Branches”。</li>\n<li>在 “Default branch” 下拉菜单中选择 <code>hexo</code>，然后点击 “Update”。</li>\n</ol>\n<h3 id=\"5-创建-master-分支\"><a class=\"headerlink\" href=\"#5-创建-master-分支\"></a>5. 创建 master 分支</h3>\n<p>切换到 <code>master</code> 分支，并将其用于保存 Hexo 生成的静态文件。这个分支将用于部署到 GitHub Pages。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">--orphan</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>删除所有文件，因为 <code>master</code> 分支只需要保存生成的静态文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个空的 README 文件并提交，以初始化 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# My Blog\"</span> <span class=\"token operator\">></span> README.md\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> README.md\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit for master branch\"</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"6-配置-Hexo-部署\"><a class=\"headerlink\" href=\"#6-配置-Hexo-部署\"></a>6. 配置 Hexo 部署</h3>\n<p>在 Hexo 项目根目录下的 <code>_config.yml</code> 文件中配置部署设置，使 Hexo 能将生成的静态文件推送到 <code>master</code> 分支。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourusername/yourrepo.git\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装 Hexo 部署插件 <code>hexo-deployer-git</code>，使 Hexo 能通过 Git 进行部署。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"7-生成和部署静态文件\"><a class=\"headerlink\" href=\"#7-生成和部署静态文件\"></a>7. 生成和部署静态文件</h3>\n<p>运行以下命令生成静态文件并部署到 <code>master</code> 分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>hexo clean</code>：清理生成的文件。</li>\n<li><code>hexo generate</code>：生成静态文件。</li>\n<li><code>hexo deploy</code>：将生成的静态文件部署到 GitHub 上的 <code>master</code> 分支。</li>\n</ul>\n<h3 id=\"8-推送-Hexo-源文件到-hexo-分支\"><a class=\"headerlink\" href=\"#8-推送-Hexo-源文件到-hexo-分支\"></a>8. 推送 Hexo 源文件到 hexo 分支</h3>\n<p>每次更新 Hexo 源文件后，将它们推送到 <code>hexo</code> 分支，以确保源文件有备份。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update Hexo source files\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"验证配置\"><a class=\"headerlink\" href=\"#验证配置\"></a>验证配置</h2>\n<ol>\n<li><strong>确认 <code>hexo</code> 分支为默认分支</strong>：保存 Hexo 源文件，并便于多平台编辑。</li>\n<li><strong>确认 <code>master</code> 分支保存生成的静态文件</strong>：用于部署到 GitHub Pages，并确保网站正常访问。</li>\n</ol>\n",
            "tags": [
                "Blog"
            ]
        }
    ]
}