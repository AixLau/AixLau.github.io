<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.aixcc.top</id>
    <title>陆时忤的博客 • Posts by &#34;笔记&#34; tag</title>
    <link href="https://blog.aixcc.top" />
    <updated>2024-06-22T08:48:56.000Z</updated>
    <category term="Blog" />
    <category term="Java" />
    <category term="笔记" />
    <category term="MySQL" />
    <category term="Linux" />
    <category term="Mac" />
    <category term="Maven" />
    <category term="MyBatis" />
    <category term="总结" />
    <category term="RabbitMQ" />
    <category term="Redis" />
    <category term="Spring" />
    <category term="Alist" />
    <category term="Homebrew" />
    <category term="Vue" />
    <category term="前端" />
    <category term="SSL" />
    <category term="域名" />
    <entry>
        <id>https://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>Java集合总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/22/Java%E9%9B%86%E5%90%88%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h1 id=&#34;Java集合&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Java集合&#34;&gt;&lt;/a&gt;Java集合&lt;/h1&gt;
&lt;h3 id=&#34;说说-List-Set-Queue-Map-四者的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#说说-List-Set-Queue-Map-四者的区别？&#34;&gt;&lt;/a&gt;说说 List, Set, Queue, Map 四者的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;：存储的元素是有序的、可重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Set&lt;/code&gt;：存储的元素不可重复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Queue&lt;/code&gt;：按特定的排队规则来确定先后顺序，存储的元素是 有序的、可重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt;：使用键值对存储，&lt;code&gt;key&lt;/code&gt;是无序的、不可重复的，&lt;code&gt;value&lt;/code&gt;是无序的、可重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;List&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#List&#34;&gt;&lt;/a&gt;List&lt;/h2&gt;
&lt;h3 id=&#34;ArrayList-和-Array-（数组）的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList-和-Array-（数组）的区别？&#34;&gt;&lt;/a&gt;ArrayList 和 Array （数组）的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList&lt;/strong&gt;：基于动态数组实现，提供了丰富的 API 方法，支持动态调整大小，适用于需要灵活增删元素的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array（数组）&lt;/strong&gt;：固定大小，提供基本的索引方式访问，适用于大小固定且对性能要求高的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ArrayList-可以添加-null-吗？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList-可以添加-null-吗？&#34;&gt;&lt;/a&gt;ArrayList 可以添加 null 吗？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;中可以存储任何类型的对象，包括&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;ArrayList和LinkedList的区别是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList和LinkedList的区别是什么？&#34;&gt;&lt;/a&gt;ArrayList和LinkedList的区别是什么？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList&lt;/strong&gt; 是基于动态数组实现的，适用于频繁访问元素的场景，插入和删除操作在中间位置性能比较差。&lt;/li&gt;
&lt;li&gt;**LinkedList **是基于双向链表实现的，适用于频繁插入和删除元素的场景，随机访问性能较差，但插入和删除操作性能好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ArrayList如何去重？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ArrayList如何去重？&#34;&gt;&lt;/a&gt;ArrayList如何去重？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用HashSet&lt;/strong&gt;：通过&lt;code&gt;HashSet&lt;/code&gt;的特性去重，然后转换回&lt;code&gt;ArrayList&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用Stream API&lt;/strong&gt;：使用Java 8引入的Stream的&lt;code&gt;distinct()&lt;/code&gt;方法去重。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手动遍历&lt;/strong&gt;：手动遍历&lt;code&gt;ArrayList&lt;/code&gt;并使用另一个&lt;code&gt;ArrayList&lt;/code&gt;存储不重复的元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Map&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Map&#34;&gt;&lt;/a&gt;Map&lt;/h2&gt;
&lt;h3 id=&#34;HashMap和LinkedHashMap的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#HashMap和LinkedHashMap的区别？&#34;&gt;&lt;/a&gt;HashMap和LinkedHashMap的区别？&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt;继承自&lt;code&gt;HashMap&lt;/code&gt;，在哈希表的基础上增加了一条双向链表，用于维护插入顺序和访问顺序。&lt;/p&gt;
&lt;h3 id=&#34;HashMap-和-HashTable-有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#HashMap-和-HashTable-有什么区别？&#34;&gt;&lt;/a&gt;HashMap 和 HashTable 有什么区别？&lt;/h3&gt;
&lt;p&gt;因为 HashMap 不支持同步操作，所以不是线程安全的，适用于单线程环境，HashTable是线程安全的，所有的方法都是同步的，适用于多线程环境，但是由于使用了同步机制，性能相对较低。&lt;/p&gt;
&lt;h4 id=&#34;初始化容量和扩容方式：&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#初始化容量和扩容方式：&#34;&gt;&lt;/a&gt;初始化容量和扩容方式：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HashMap&lt;/strong&gt;：默认初始容量为 16，负载因子为 0.75，扩容时，容量变为当前容量的两倍。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hashtable&lt;/strong&gt;：默认初始容量为 11，负载因子为 0.75，扩容时，容量变为当前容量的两倍+1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ConcurrentHashMap和Hashtable的区别&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#ConcurrentHashMap和Hashtable的区别&#34;&gt;&lt;/a&gt;ConcurrentHashMap和Hashtable的区别?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;和&lt;code&gt;Hashtable&lt;/code&gt;都是线程安全的Map实现，但它们在实现机制、性能和使用场景方面有显著区别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现机制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;采用分段锁（Segmented Locking）机制，将整个Map分为多个段，每个段独立加锁，从而提高并发性能。在Java 8中，使用了一种基于CAS（Compare-And-Swap）操作和细粒度锁的优化方案。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;使用全表锁（Synchronized），每次读写操作都需要获取整个Map的锁，确保线程安全性，但也导致性能瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;性能优越，特别适合高并发环境。读操作几乎无锁，写操作通过分段锁或细粒度锁减少锁竞争，适用于读多写少的场景。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;性能较差，因为每个操作都需要全表锁，多个线程争用同一个锁，容易导致锁竞争和性能下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;锁粒度&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;锁粒度小，允许更高的并发度，多个线程可以同时操作不同的段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;锁粒度大，所有操作都需要获取全表锁，降低了并发能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Null键和值&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;不允许存储&lt;code&gt;null&lt;/code&gt;键和&lt;code&gt;null&lt;/code&gt;值，尝试存储&lt;code&gt;null&lt;/code&gt;会抛出&lt;code&gt;NullPointerException&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;也不允许存储&lt;code&gt;null&lt;/code&gt;键和&lt;code&gt;null&lt;/code&gt;值，存储&lt;code&gt;null&lt;/code&gt;时会抛出&lt;code&gt;NullPointerException&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;迭代器安全性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;提供弱一致性迭代器（Weakly Consistent Iterator），可以在迭代过程中进行并发修改，不会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;，但不保证读取到的值是最新的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;提供快速失败的迭代器（Fail-Fast），在迭代过程中如果检测到结构性修改，会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结：&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结：&#34;&gt;&lt;/a&gt;总结：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ConcurrentHashMap&lt;/strong&gt;适用于高并发环境，性能优越，采用分段锁或细粒度锁机制，支持弱一致性迭代器，但不允许&lt;code&gt;null&lt;/code&gt;键和值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hashtable&lt;/strong&gt;适用于低并发或简单多线程场景，使用全表锁机制，性能较差，提供快速失败的迭代器，也不允许&lt;code&gt;null&lt;/code&gt;键和值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;HashMap-的底层原理&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#HashMap-的底层原理&#34;&gt;&lt;/a&gt;HashMap 的底层原理&lt;/h3&gt;
&lt;h5 id=&#34;1-数据结构&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#1-数据结构&#34;&gt;&lt;/a&gt;1. 数据结构&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;底层使用了数组和链表（在 Java 8 中引入了红黑树）来存储元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数组&lt;/strong&gt;：是用来存储 HashMap 的桶，每个桶是一个链表的头结点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链表&lt;/strong&gt;：是处理哈希冲突（多个键的哈希值相同）。当冲突较少时使用链表存储。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;红黑树&lt;/strong&gt;：是当链表长度超过一定阈值（默认是 8）时，将链表转换为红黑树，以提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2-插入元素&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#2-插入元素&#34;&gt;&lt;/a&gt;2. 插入元素&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;计算键的哈希值，并确定在数组中的索引位置。&lt;/li&gt;
&lt;li&gt;检查该位置是否已经有元素：
&lt;ul&gt;
&lt;li&gt;如果没有元素，直接插入。&lt;/li&gt;
&lt;li&gt;如果已经有元素，使用链表或红黑树来解决冲突。检查链表中是否存在相同的键，如果存在则更新值；如果不存在则将新节点插入链表或红黑树中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3-查找元素&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#3-查找元素&#34;&gt;&lt;/a&gt;3. 查找元素&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;计算键的哈希值，并确定在数组中的索引位置。&lt;/li&gt;
&lt;li&gt;在该位置的链表或红黑树中查找匹配键，返回对应的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;4-删除元素&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#4-删除元素&#34;&gt;&lt;/a&gt;4. 删除元素&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;计算键的哈希值，并确定在数组中的索引位置。&lt;/li&gt;
&lt;li&gt;在该位置的链表或红黑树中找到匹配的键，删除对应的节点，并调整链表或红黑树结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5-扩容机制&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#5-扩容机制&#34;&gt;&lt;/a&gt;5. 扩容机制&lt;/h5&gt;
&lt;p&gt;当&lt;code&gt;HashMap&lt;/code&gt;中的元素数量超过数组容量的阈值（默认是数组容量的 0.75 倍）时，会进行扩容操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新的数组，容量是原来的两倍。&lt;/li&gt;
&lt;li&gt;将原数组中的所有元素重新哈希并放入新数组中。&lt;/li&gt;
&lt;li&gt;重新调整链表或红黑树结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#总结&#34;&gt;&lt;/a&gt;总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据结构&lt;/strong&gt;：&lt;code&gt;HashMap&lt;/code&gt;使用数组、链表和红黑树存储元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;哈希算法&lt;/strong&gt;：通过键的&lt;code&gt;hashCode()&lt;/code&gt;计算哈希值，并通过哈希值确定数组索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插入元素&lt;/strong&gt;：根据哈希值确定插入位置，处理哈希冲突，必要时扩容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找元素&lt;/strong&gt;：根据哈希值快速定位到数组索引，再通过链表或红黑树查找具体元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除元素&lt;/strong&gt;：定位到数组索引，删除链表或红黑树中的节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩容机制&lt;/strong&gt;：当元素数量超过阈值时，&lt;code&gt;HashMap&lt;/code&gt;会自动扩容，重新分配数组并调整元素位置。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Java" />
        <category term="笔记" />
        <updated>2024-06-22T08:48:56.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aixcc.top/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/</id>
        <title>Java基础总结</title>
        <link rel="alternate" href="https://blog.aixcc.top/2024/06/21/Java%E5%9F%BA%E7%A1%80%E5%85%AB%E8%82%A1%E6%96%87/"/>
        <content type="html">&lt;h4 id=&#34;对象相等和引用相等的区别&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#对象相等和引用相等的区别&#34;&gt;&lt;/a&gt;对象相等和引用相等的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象相等&lt;/strong&gt;：比较的是内存中存放的内容是否相等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用相等&lt;/strong&gt;：比较的是它们指向的内存地址是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如果一个类没有声明构造方法，该程序能正确执行吗？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#如果一个类没有声明构造方法，该程序能正确执行吗？&#34;&gt;&lt;/a&gt;如果一个类没有声明构造方法，该程序能正确执行吗？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果一个类没有声明构造方法也可以执行，因为一个类没有声明构造方法也会有一个默认的不带参数的构造方法。&lt;/li&gt;
&lt;li&gt;如果添加了类的构造方法，无论是否有参，&lt;code&gt;Java&lt;/code&gt;都不会添加默认不带参数的构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造方法有哪些特点？是否可被重写？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#构造方法有哪些特点？是否可被重写？&#34;&gt;&lt;/a&gt;构造方法有哪些特点？是否可被重写？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构造方法的特点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;名字与类名相同。&lt;/li&gt;
&lt;li&gt;没有返回值。&lt;/li&gt;
&lt;li&gt;生成类的对象时自动执行，无需调用。&lt;br&gt;
构造方法不能被重写，但是可以被重载。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面向对象的三大特征&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#面向对象的三大特征&#34;&gt;&lt;/a&gt;面向对象的三大特征&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;：封装是指将对象的状态（属性）和行为（方法）绑定在一起，并将其内部实现细节隐藏起来，只通过公开的接口与外界进行交互。封装的目的是保护对象的内部状态，防止外部直接访问和修改，从而提高代码的安全性和可维护性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;：继承是指一个类（子类）继承另一个类（父类）的属性和方法，从而实现代码重用和逻辑扩展。通过继承，子类可以拥有父类的所有属性和方法，并可以对其进行扩展和修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多态&lt;/strong&gt;：多态是指同一个方法在不同的对象中具有不同的实现，从而实现接口的统一调用。多态性使得同一个方法调用可以根据对象的实际类型执行不同的操作。多态可以通过方法重载（编译时多态）和方法重写（运行时多态）来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接口和抽象类有什么共同点和区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#接口和抽象类有什么共同点和区别？&#34;&gt;&lt;/a&gt;接口和抽象类有什么共同点和区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;共同点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;都不能被实例化。&lt;/li&gt;
&lt;li&gt;都可以包含抽象方法。&lt;/li&gt;
&lt;li&gt;都可以有默认的实现方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区别&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;接口主要用于对类的行为进行约束，实现了某个接口就具有了对应的行为。&lt;/li&gt;
&lt;li&gt;抽象类主要用于代码的复用，强调所属关系。&lt;/li&gt;
&lt;li&gt;一个类只能继承一个类，但是可以实现多个接口。&lt;/li&gt;
&lt;li&gt;接口中的成员变量只能是静态常量，不能被修改且必须有初始值。&lt;/li&gt;
&lt;li&gt;抽象类的成员变量默认是包级私有的，可以在子类中被重新定义，也可以重新赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深拷贝和浅拷贝的区别？什么是引用拷贝？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#深拷贝和浅拷贝的区别？什么是引用拷贝？&#34;&gt;&lt;/a&gt;深拷贝和浅拷贝的区别？什么是引用拷贝？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;浅拷贝&lt;/strong&gt;：创建一个新对象，它只复制对象中的基本数据类型，而引用类型只是复制引用，指向的是原对象中的同一个对象。浅拷贝可以用&lt;code&gt;Object&lt;/code&gt;的&lt;code&gt;clone()&lt;/code&gt;方法来实现。浅拷贝修改新对象的引用类型字段时，原对象的对应字段也会被修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深拷贝&lt;/strong&gt;：不仅复制对象本身，还递归复制所有引用的对象，独立于原对象。深拷贝可以通过手动复制对象以及所有的引用对象，也可以使用序列化和反序列化来实现。修改新对象的引用类型字段时，原对象不会受到影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用拷贝&lt;/strong&gt;：直接复制对象的引用，使两个对象引用指向同一个内存地址。修改一个对象的内容，另一个对象也会同步变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;和-equals-的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#和-equals-的区别？&#34;&gt;&lt;/a&gt;== 和 equals()的区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对于基本数据类型，&lt;code&gt;==&lt;/code&gt; 比较的是值。&lt;/li&gt;
&lt;li&gt;对于引用数据类型，&lt;code&gt;==&lt;/code&gt; 比较的是对象的内存地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;没有重写时，等价于&lt;code&gt;==&lt;/code&gt;比较两个对象。&lt;/li&gt;
&lt;li&gt;被重写时，一般都重写&lt;code&gt;equals()&lt;/code&gt;方法用来比较两个对象中的属性是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hashCode-有什么用？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#hashCode-有什么用？&#34;&gt;&lt;/a&gt;hashCode() 有什么用？&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;hashCode()&lt;/code&gt;方法用于生成对象的哈希码，哈希码是一个整数，能够确定该对象在哈希表中的索引位置。&lt;/p&gt;
&lt;h4 id=&#34;为什么重写-equals-时必须重写-hashCode-方法？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#为什么重写-equals-时必须重写-hashCode-方法？&#34;&gt;&lt;/a&gt;为什么重写 equals() 时必须重写 hashCode() 方法？&lt;/h4&gt;
&lt;h5 id=&#34;equals-和hashCode-的合同（约定）&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#equals-和hashCode-的合同（约定）&#34;&gt;&lt;/a&gt;&lt;code&gt;equals()&lt;/code&gt;和&lt;code&gt;hashCode()&lt;/code&gt;的合同（约定）&lt;/h5&gt;
&lt;p&gt;如果两个对象根据&lt;code&gt;equals()&lt;/code&gt;方法是相等的，那么它们的&lt;code&gt;hashCode()&lt;/code&gt;值必须相同。&lt;/p&gt;
&lt;p&gt;如果两个对象的&lt;code&gt;hashCode()&lt;/code&gt;值相同，它们不一定是相等的（但它们有可能是相等的）。&lt;/p&gt;
&lt;h4 id=&#34;String、StringBuffer、StringBuilder-的区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#String、StringBuffer、StringBuilder-的区别？&#34;&gt;&lt;/a&gt;String、StringBuffer、StringBuilder 的区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;：不可变的，因为不可变，所以它是线程安全的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuffer&lt;/strong&gt;：可变的，允许对字符串进行修改，线程安全，所有的方法都被&lt;code&gt;synchronized&lt;/code&gt;修饰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuilder&lt;/strong&gt;：可变的，但不是线程安全的，没有被&lt;code&gt;synchronized&lt;/code&gt;修饰。由于没有同步机制，性能比&lt;code&gt;StringBuffer&lt;/code&gt;更高，适合单线程环境下使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;当字符串是固定不变的时候使用&lt;code&gt;String&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当需要对字符串进行大量修改且在多线程环境下使用&lt;code&gt;StringBuffer&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当需要对字符串进行大量修改且在单线程环境下使用&lt;code&gt;StringBuilder&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串常量池的作用了解吗？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#字符串常量池的作用了解吗？&#34;&gt;&lt;/a&gt;字符串常量池的作用了解吗？&lt;/h4&gt;
&lt;p&gt;字符串常量池的主要作用是优化内存使用和提高性能。字符串常量池是一块专门用来存储字符串常量的区域，主要目的是为了避免字符串的重复创建。当多个字符串具有相同内容时，&lt;code&gt;JVM&lt;/code&gt;会在常量池中共享相同的字符串实例，而不是为每个字符串创建新的对象。&lt;/p&gt;
&lt;h4 id=&#34;Exception-和-Error-有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Exception-和-Error-有什么区别？&#34;&gt;&lt;/a&gt;Exception 和 Error 有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Exception&lt;/strong&gt;和&lt;strong&gt;Error&lt;/strong&gt;都是&lt;strong&gt;Throwable&lt;/strong&gt;的子类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exception&lt;/code&gt;是程序本身可以处理的异常，可以通过&lt;code&gt;catch&lt;/code&gt;来捕获。&lt;code&gt;Exception&lt;/code&gt;还可以分为&lt;code&gt;checked Exception&lt;/code&gt;和&lt;code&gt;Unchecked Exception&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt;是程序无法处理的异常。通常是JVM无法处理的系统级错误，例如内存不足、栈溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Checked-Exception-和-Unchecked-Exception-有什么区别？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#Checked-Exception-和-Unchecked-Exception-有什么区别？&#34;&gt;&lt;/a&gt;Checked Exception 和 Unchecked Exception 有什么区别？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Checked Exception&lt;/strong&gt;必须被捕获或声明，否则编译器会报错。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unchecked Exception&lt;/strong&gt;也叫运行时异常，不强制要求处理，但最好捕获处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;什么是泛型？有什么作用？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是泛型？有什么作用？&#34;&gt;&lt;/a&gt;什么是泛型？有什么作用？&lt;/h4&gt;
&lt;p&gt;泛型是JDK5中引入的新特性，在编写类、接口和方法时可以使用类型参数，然后在使用时指定具体的类型。泛型允许在编译时检查类型，避免了运行时的类型错误。例如，创建一个List&lt;String&gt;(List集合指定了String类型参数)时，你就知道这个列表只能包含字符串。泛型消除强制类型转换，从集合中取出元素时不需要进行转换。Java编译器在编译时会移除所有的泛型类型信息&lt;/p&gt;
&lt;h4 id=&#34;反射是什么？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#反射是什么？&#34;&gt;&lt;/a&gt;反射是什么？&lt;/h4&gt;
&lt;p&gt;反射是&lt;code&gt;Java&lt;/code&gt;中的一种机制，允许程序在运行时获取有关自身的信息。并能动态地调用对象的方法、访问属性和创建对象实例。反射提供了动态操作类和对象的能力，是实现框架、工具和动态代理等技术的基础。&lt;/p&gt;
&lt;h4 id=&#34;反射的优缺点？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#反射的优缺点？&#34;&gt;&lt;/a&gt;反射的优缺点？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;反射的优点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;动态性和灵活性：反射允许我们在运行时加载和实例化类、调用方法和访问字段，让我们可以编写更通用和灵活的代码，特别是在插件系统或依赖注入框架中。&lt;/li&gt;
&lt;li&gt;很多流行的&lt;code&gt;Java&lt;/code&gt;框架如&lt;code&gt;Spring&lt;/code&gt;都依赖反射来实现动态代理、依赖注入。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反射的缺点&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;反射操作通常比直接调用方法或访问字段要慢，频繁使用反射可能会影响性能。&lt;/li&gt;
&lt;li&gt;反射可以绕过Java的访问控制机制，可能破坏类的封装性和安全性。&lt;/li&gt;
&lt;li&gt;使用反射的代码通常更复杂，反射相关的错误可能难以发现和修复。&lt;/li&gt;
&lt;li&gt;反射跳过了编译时的类型检查，许多问题只能在运行时发现，增加了出错风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;何谓注解？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#何谓注解？&#34;&gt;&lt;/a&gt;何谓注解？&lt;/h4&gt;
&lt;p&gt;注解是&lt;code&gt;Java&lt;/code&gt;中的一种元数据，用来提供代码的额外信息。注解不会直接影响代码的执行，但可以被编译器和运行环境使用，以进行编译检查、生成代码、动态处理等。注解使用@符号来声明，可以用于编译时的代码检查，例如&lt;code&gt;@Override&lt;/code&gt;注解可以确保方法重写。注解可以与工具结合使用，在编译时生成额外的代码，某些注解可以在运行时通过反射机制读取和处理，用于配置和控制程序行为。&lt;/p&gt;
&lt;h4 id=&#34;什么是序列化？什么是反序列化？&#34;&gt;&lt;a class=&#34;headerlink&#34; href=&#34;#什么是序列化？什么是反序列化？&#34;&gt;&lt;/a&gt;什么是序列化？什么是反序列化？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;序列化&lt;/strong&gt;：将一个Java对象转换成字节流的过程，可以将该对象保存到文件、数据库或者通过网络传输。序列化的主要目的是为了持久化对象状态和在不同Java虚拟机之间传输对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反序列化&lt;/strong&gt;：将字节流恢复为Java对象的过程。通过反序列化使其恢复到序列化之前的状态。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Java" />
        <category term="笔记" />
        <updated>2024-06-21T12:41:04.000Z</updated>
    </entry>
</feed>