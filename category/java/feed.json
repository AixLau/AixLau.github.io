{
    "version": "https://jsonfeed.org/version/1",
    "title": "陆时忤的博客 • All posts by \"java\" category",
    "description": "要再见 不要再见",
    "home_page_url": "https://blog.aixcc.top",
    "items": [
        {
            "id": "https://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "url": "https://blog.aixcc.top/2024/06/27/%E9%A1%B9%E7%9B%AE%E8%AE%B2%E8%A7%A3/",
            "title": "项目讲解",
            "date_published": "2024-06-27T07:34:31.000Z",
            "content_html": "<h1 id=\"随便写写\"><a class=\"headerlink\" href=\"#随便写写\"></a>随便写写</h1>\n<h3 id=\"登录注册模块\"><a class=\"headerlink\" href=\"#登录注册模块\"></a>登录注册模块</h3>\n<ul>\n<li><strong>注册</strong>：使用阿里云的短信服务将后端生成的验证码通过阿里云短信服务发送到用户手机号，并将前端传来的注册信息封装成一个 vo 类，根据用户的手机号对用户表进行查询，如果发现这个手机号已经注册，则抛出一个异常，前端显示“手机号已注册”，否则将该用户信息存入用户表。</li>\n<li>登录：将前端传来的登录信息与数据库中的信息进行比对，如果该数据库中有该信息则返回根据用户信息生成的一个 token 值，前端可以根据该 tokne 获取到用户名进行显示。</li>\n</ul>\n<h3 id=\"前后端分离项目中跨域问题是如何解决的？\"><a class=\"headerlink\" href=\"#前后端分离项目中跨域问题是如何解决的？\"></a>前后端分离项目中跨域问题是如何解决的？</h3>\n<ol>\n<li><strong>注解</strong>：可以通过使用<code>@CrossOrigin</code>注解来解决跨域问题。</li>\n<li><strong>Nginx</strong>：使用 Nginx 反向代理配置添加CORS头来解决跨域问题。</li>\n<li><strong>网关</strong>：使用 GetWay 网关中配置CORS规则，允许跨域请求</li>\n</ol>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/26/RabbitMQ%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "RabbitMQ应用与总结",
            "date_published": "2024-06-26T15:14:15.000Z",
            "content_html": "<h2 id=\"RabbitMQ常见面试题总结\"><a class=\"headerlink\" href=\"#RabbitMQ常见面试题总结\"></a>RabbitMQ常见面试题总结</h2>\n<h3 id=\"什么是-RabbitMQ？\"><a class=\"headerlink\" href=\"#什么是-RabbitMQ？\"></a>什么是 RabbitMQ？</h3>\n<p>RabbitMQ 是一个开源的消息代理软件，广泛用于消息队列中。它实现了高级消息队列协议（AMQP），支持多重消息模式，能够在分布式系统重提供可靠的消息传递。。RabbitMQ 用于不同系统或服务之间异步传递消息，从而解耦生产者和消费者，增强系统的可扩展性和容错能力。</p>\n<h3 id=\"RabbitMQ-的组件有哪些？\"><a class=\"headerlink\" href=\"#RabbitMQ-的组件有哪些？\"></a>RabbitMQ 的组件有哪些？</h3>\n<h4 id=\"1-Producer（生产者）\"><a class=\"headerlink\" href=\"#1-Producer（生产者）\"></a>1. Producer（生产者）</h4>\n<ul>\n<li>生产者是消息的发送方，它将消息发送到 RabbitMQ 交换器。</li>\n<li>生成者负责创建和发送消息，不直接与队列通信。</li>\n</ul>\n<h4 id=\"2-Exchange（交换器）\"><a class=\"headerlink\" href=\"#2-Exchange（交换器）\"></a>2. Exchange（交换器）</h4>\n<ul>\n<li>交换器接收来自生产者的消息，并根据绑定规则将消息路由到一个或多个队列。</li>\n<li>交换器有不同类型，主要包括：<code>direct</code>、<code>topic</code>、<code>fanout</code>和<code>headers</code>。</li>\n</ul>\n<h5 id=\"Exchange-类型\"><a class=\"headerlink\" href=\"#Exchange-类型\"></a>Exchange 类型</h5>\n<ul>\n<li><strong>Direct Exchange</strong>：根据消息的路由键完全匹配队列的绑定键进行路由。</li>\n<li><strong>Topic Exchange</strong>：根据消息的路由键模式（使用通配符）进行路由，适用于主题匹配的场景。</li>\n<li><strong>Fanout Exchange</strong>：将消息广播到所有与该交换器绑定的队列，不考虑路由键。</li>\n<li><strong>Headers Exchange</strong>：根据消息的头属性进行路由，相对较少使用。</li>\n</ul>\n<h4 id=\"3-Queue（队列）\"><a class=\"headerlink\" href=\"#3-Queue（队列）\"></a>3. Queue（队列）</h4>\n<ul>\n<li>队列是 RabbitMQ 存储消息的容器，消费者从队列中接收消息。</li>\n<li>队列按照先进先出的顺序存储消息，可以持久化、镜像等。</li>\n</ul>\n<h4 id=\"4-Bindng（绑定）\"><a class=\"headerlink\" href=\"#4-Bindng（绑定）\"></a>4. Bindng（绑定）</h4>\n<ul>\n<li>绑定是交换器与队列之间的连接，通过绑定将消息路由到特定的队列。</li>\n<li>绑定可以包含路由键和绑定参数，用于匹配消息的路由键。</li>\n</ul>\n<h4 id=\"5-Consumer（消费者）\"><a class=\"headerlink\" href=\"#5-Consumer（消费者）\"></a>5. Consumer（消费者）</h4>\n<ul>\n<li>\n<p>消费者是消息的接收方，它从 RabbitMQ 队列中接收和处理消息。</p>\n</li>\n<li>\n<p>消费者可以是主动拉取消息，也可以是被动推送消息。</p>\n</li>\n</ul>\n<h4 id=\"6-Connection（连接）和Channel（信道）\"><a class=\"headerlink\" href=\"#6-Connection（连接）和Channel（信道）\"></a>6. Connection（连接）和Channel（信道）</h4>\n<ul>\n<li>连接是应用程序与 RabbitMQ 之间的 TCP 连接。</li>\n<li>信道是建立在连接之上的虚拟连接，应用程序通过信道与 RabbitMQ 进行通信。信道是轻量级的，可以在一个连接上创建多个信道。</li>\n</ul>\n<h4 id=\"7-Virtual-Host（虚拟机）\"><a class=\"headerlink\" href=\"#7-Virtual-Host（虚拟机）\"></a>7. Virtual Host（虚拟机）</h4>\n<ul>\n<li>虚拟机用于隔离不同的应用，每个虚拟机都有自己的交换器、队列、绑定和权限。</li>\n</ul>\n<h4 id=\"8-Broker（代理服务器）\"><a class=\"headerlink\" href=\"#8-Broker（代理服务器）\"></a>8. Broker（代理服务器）</h4>\n<ul>\n<li>Broker 是 RabbitMQ 服务器实例，负责接收、存储和转发消息。</li>\n</ul>\n",
            "tags": [
                "Java",
                "总结",
                "RabbitMQ"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/26/Redis%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/26/Redis%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "Redis应用与总结",
            "date_published": "2024-06-26T12:18:49.000Z",
            "content_html": "<h2 id=\"Redis-常见面试题总结\"><a class=\"headerlink\" href=\"#Redis-常见面试题总结\"></a>Redis 常见面试题总结</h2>\n<h3 id=\"Redis-为什么这么快？\"><a class=\"headerlink\" href=\"#Redis-为什么这么快？\"></a>Redis 为什么这么快？</h3>\n<ol>\n<li>\n<p>Redis 基于内存，内存的访问速度比磁盘块很多；</p>\n</li>\n<li>\n<p>Redis 主要是单线程事件循环和 IO 多路复用；</p>\n</li>\n<li>\n<p>Redis 内置了多重优化过后的数据类型、结构实现，性能非常高</p>\n</li>\n<li>\n<p>Redis 通信协议实现简单且解析高效。</p>\n<h4 id=\"为什么不直接使用-Redis-当主数据库呢？\"><a class=\"headerlink\" href=\"#为什么不直接使用-Redis-当主数据库呢？\"></a>为什么不直接使用 Redis 当主数据库呢？</h4>\n<p>主要是因为内存成本太高且 Redis 提供的数据持久化仍然会有数据丢失风险。</p>\n</li>\n</ol>\n<h3 id=\"为什么用-Redis？\"><a class=\"headerlink\" href=\"#为什么用-Redis？\"></a>为什么用 Redis？</h3>\n<ol>\n<li>\n<p>访问速度更快</p>\n</li>\n<li>\n<p>高并发</p>\n</li>\n<li>\n<p>功能全面</p>\n<p>Redis 除了可以用作缓存之外，还可以用于分布式锁、限流、消息队列、延时队列等场景。</p>\n</li>\n</ol>\n<h3 id=\"Redis-除了做缓存，还能做什么？\"><a class=\"headerlink\" href=\"#Redis-除了做缓存，还能做什么？\"></a>Redis 除了做缓存，还能做什么？</h3>\n<ul>\n<li><strong>分布式锁</strong>：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。</li>\n<li><strong>限流</strong>：一半通过 Redis 和 Lua 脚本的方式来实现限流。如果不想写 Lua 脚本的话，也可以直接利用 Redisson中的<code>RRateLimiter</code>来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。</li>\n<li><strong>消息队列</strong>：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。</li>\n<li><strong>延时队列</strong>：Redisson 内置了延时队列（基于 Sorted Set 实现的）。</li>\n<li><strong>分布式 Session</strong>：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。</li>\n</ul>\n<h3 id=\"Redis-常用的数据类型有哪些？\"><a class=\"headerlink\" href=\"#Redis-常用的数据类型有哪些？\"></a>Redis 常用的数据类型有哪些？</h3>\n<ul>\n<li><strong>5 种基本数据类型</strong>：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</li>\n<li><strong>3 种特殊数据类型</strong>：HyperLogLog（基数统计）、Bitmap（位图）、Geospatial（地理位置）。</li>\n</ul>\n<h3 id=\"String-的应用场景有哪些？\"><a class=\"headerlink\" href=\"#String-的应用场景有哪些？\"></a>String 的应用场景有哪些？</h3>\n<p>String 是 Redis 中最简单同时也是最常用的一个数据类型。可以用来存储任何类型的数据。</p>\n<ul>\n<li>常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；</li>\n<li>计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；</li>\n<li>分布式锁（利用<code>SETNX key value</code>命令可以实现一个最简易的分布式锁）；</li>\n</ul>\n<h3 id=\"Redis-持久化机制\"><a class=\"headerlink\" href=\"#Redis-持久化机制\"></a>Redis 持久化机制</h3>\n<p>Redis提供了两种主要的持久化机制：RDB（Redis DataBase）快照和 AOF(Append Only File）日志。这两种机制各有特点，满足不同的持久化需求。</p>\n<ol>\n<li>\n<p><strong>RDB（Redis DataBase）快照</strong></p>\n<p>RDB 持久化是指在指定的时间间隔内将 Redis 的内存数据生成快照并保存到磁盘。它会创建一个二进制文件（通常是 dump.rdb），包含某个时间点上的数据。</p>\n<p>​\t<strong>优点：</strong></p>\n<p>​\tRDB 文件是一个紧凑的二进制文件，可以较快地进行备份和恢复。</p>\n<p>​\tRDB 文件保存时不会对 Redis 的性能产生显著的影响，适合用于大规模数据的冷备份。</p>\n<p>​\t<strong>缺点：</strong></p>\n<p>​\tRDB 快照是定期进行的，如果 Redis 意外宕机，可能会丢失最后一次快照之后的所有数据。</p>\n<p>​\tRDB 快照需要较长的时间进行，所以不适用于需要频繁备份的数据场景。</p>\n</li>\n<li>\n<p><strong>AOF（Append Only File）日志</strong></p>\n<p>AOF 持久化记录每个写操作到日志文件中（通常是 appendonly.aof），Redis 可以通过重新执行日志中的命令来恢复数据。AOF日志文件默认不定期压缩，以减小文件体积。</p>\n</li>\n</ol>\n<p>​\t\t<strong>优点：</strong></p>\n<p>​\t\tAOF可以提供更高的数据持久性，因为它记录每次写操作，数据丢失的窗口更小。</p>\n<p>​\t\tAOF 文件是可读的文本文件，便于分析和调试。</p>\n<p>​\t\t<strong>缺点：</strong></p>\n<p>​\t\tAOF 文件通常比 RDB 文件更大，恢复速度相对慢。</p>\n<p>​\t\tAOF在每次写操作时都会记录日志，可能会对 Redis 性能产生一定影响，特别是在写操作频繁的情况下。</p>\n<h4 id=\"混合持久化\"><a class=\"headerlink\" href=\"#混合持久化\"></a>混合持久化</h4>\n<p>Redis 4.0 引入了混合持久化（Hybid Persistence），结合了 RDB 和 AOF 的优点。在进行快照时，将当前的 RDB 快照和 AOF 日志混合存储，以提高数据恢复速度和性能。</p>\n<h3 id=\"缓存穿透\"><a class=\"headerlink\" href=\"#缓存穿透\"></a>缓存穿透</h3>\n<h4 id=\"什么是缓存穿透？\"><a class=\"headerlink\" href=\"#什么是缓存穿透？\"></a>什么是缓存穿透？</h4>\n<p>缓存穿透是指查询一个在缓存和数据库中都不存在的数据，每次请求都会穿透缓存直接查询数据库，可能导致数据库压力过大。</p>\n<h4 id=\"有哪些解决办法？\"><a class=\"headerlink\" href=\"#有哪些解决办法？\"></a>有哪些解决办法？</h4>\n<p>最基本的就是做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。</p>\n<p>比如查询数据库 id 不能小于 0、传入邮箱格式不对的时候直接返回错误信息给客户端等等。</p>\n<h5 id=\"1-使用缓存空值\"><a class=\"headerlink\" href=\"#1-使用缓存空值\"></a>1. 使用缓存空值</h5>\n<p>将查询结果为空的数据也缓存起来，但要设置一个较短的过期时间，防止缓存中大量的空值数据占用内存。</p>\n<h5 id=\"2-布隆过滤器\"><a class=\"headerlink\" href=\"#2-布隆过滤器\"></a>2. 布隆过滤器</h5>\n<p>布隆过滤器是一种概率型数据结构，可以用来判断一个元素是否在一个集合中。将所有可能存在查询条件都存入布隆过滤器，在查询缓存和数据库之前先通过布隆过滤器进行判断，如果布隆过滤器判断该元素不存在，则直接返回。</p>\n<h5 id=\"3-接口限流\"><a class=\"headerlink\" href=\"#3-接口限流\"></a>3. 接口限流</h5>\n<p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采用黑名单机制，例如将异常 IP 列入黑名单。</p>\n<h3 id=\"缓存击穿\"><a class=\"headerlink\" href=\"#缓存击穿\"></a>缓存击穿</h3>\n<h4 id=\"什么是缓存击穿？\"><a class=\"headerlink\" href=\"#什么是缓存击穿？\"></a>什么是缓存击穿？</h4>\n<p>缓存击穿是指某些缓存中的热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到了数据库，对数据库造成了巨大的压力，通常发生在缓存中存放的热门数据突然过期的情况下。</p>\n<h4 id=\"有哪些解决方法？\"><a class=\"headerlink\" href=\"#有哪些解决方法？\"></a>有哪些解决方法？</h4>\n<h5 id=\"1-永不过期\"><a class=\"headerlink\" href=\"#1-永不过期\"></a>1. 永不过期</h5>\n<p>将热点数据设置为永不过期，防止其被清除出缓存，从而避免缓存失效带来的问题。</p>\n<h5 id=\"2-提前预热\"><a class=\"headerlink\" href=\"#2-提前预热\"></a>2.提前预热</h5>\n<p>在系统启动或业务高峰期来临之前，提前将热点数据加载到缓存中，避免缓存过期。</p>\n<h5 id=\"3-加锁\"><a class=\"headerlink\" href=\"#3-加锁\"></a>3. 加锁</h5>\n<p>当缓存失效时，使用分布式锁来控制只有一个请求可以访问数据库并重建缓存，其余请求等待缓存重建完成后再访问缓存。</p>\n<h4 id=\"缓存穿透和缓存击穿有什么区别？\"><a class=\"headerlink\" href=\"#缓存穿透和缓存击穿有什么区别？\"></a>缓存穿透和缓存击穿有什么区别？</h4>\n<ul>\n<li>\n<p>缓存穿透是查询一个在缓存和数据中都不存在的数据。</p>\n</li>\n<li>\n<p>缓存击穿是缓存中热点数据在缓存失效后，大量并发请求同时到达缓存并穿透到数据库。</p>\n</li>\n</ul>\n<h3 id=\"缓存雪崩\"><a class=\"headerlink\" href=\"#缓存雪崩\"></a>缓存雪崩</h3>\n<h4 id=\"什么是缓存雪崩？\"><a class=\"headerlink\" href=\"#什么是缓存雪崩？\"></a>什么是缓存雪崩？</h4>\n<p>缓存雪崩是指缓存中大量数据在同一时间过期或者缓存服务器宕机了，导致大量请求直接访问数据库，与缓存击穿不同的是，缓存雪崩涉及大量缓存同时失效或缓存服务不可用。</p>\n<h4 id=\"有哪些解决方法？-2\"><a class=\"headerlink\" href=\"#有哪些解决方法？-2\"></a>有哪些解决方法？</h4>\n<h5 id=\"针对Redis-服务不可用的情况：\"><a class=\"headerlink\" href=\"#针对Redis-服务不可用的情况：\"></a>针对Redis 服务不可用的情况：</h5>\n<ol>\n<li><strong>Redis 集群</strong>：采用 Redis 集群，避免单机出现问题整个缓存服务器都无法使用。</li>\n<li><strong>多级缓存</strong>：通过构建多级缓存（如本地缓存和分布式缓存），在缓存失效时优先从本地缓存读取数据，减轻数据库压力。</li>\n</ol>\n<h5 id=\"针对大量缓存同时失效的情况\"><a class=\"headerlink\" href=\"#针对大量缓存同时失效的情况\"></a>针对大量缓存同时失效的情况:</h5>\n<ol>\n<li><strong>过期时间随机化</strong>：避免大量缓存在同一时间失效，可以设置缓存数据过期时间增加一个随机值，使缓存数据的过期时间分散。</li>\n<li><strong>缓存预热</strong>：在系统启动或流量高峰前，提前将热点数据加载到缓存中，避免缓存雪崩。</li>\n<li><strong>主动更新</strong>：对于经常更新的热点数据，可以在其过期之前主动更新缓存，确保缓存中的数据始终有效。</li>\n</ol>\n<h3 id=\"如何保证缓存和数据库数据一致性？\"><a class=\"headerlink\" href=\"#如何保证缓存和数据库数据一致性？\"></a>如何保证缓存和数据库数据一致性？</h3>\n<h4 id=\"1-Cache-Aside-Pattern（旁路缓存模式）\"><a class=\"headerlink\" href=\"#1-Cache-Aside-Pattern（旁路缓存模式）\"></a>1. Cache Aside Pattern（旁路缓存模式）</h4>\n<p>当需要读取数据时，先从缓存读取，若缓存未命中，再从数据库读取，并将数据写入缓存。当数据更新时，先更新数据库，然后使缓存失效。</p>\n<h4 id=\"2-Write-Through-Cache（写直达缓存）\"><a class=\"headerlink\" href=\"#2-Write-Through-Cache（写直达缓存）\"></a>2. Write Through Cache（写直达缓存）</h4>\n<p>所有的数据更新操作都会先写入缓存，再写入数据库，这样可以确保缓存和数据库的一致性，但写操作的性能会受到一定影响。</p>\n<h4 id=\"3-Write-Behind-Cache（异步写缓存）\"><a class=\"headerlink\" href=\"#3-Write-Behind-Cache（异步写缓存）\"></a>3. Write Behind Cache（异步写缓存）</h4>\n<p>写操作会先写入缓存，并在后台异步更新数据库。这种方式可以提高操作的性能，但实现和维护比较复杂。</p>\n<h4 id=\"4-Cache-and-Database-Double-Write（双写一致性）\"><a class=\"headerlink\" href=\"#4-Cache-and-Database-Double-Write（双写一致性）\"></a>4. Cache and Database Double Write（双写一致性）</h4>\n<p>确保每次写操作，同时更新缓存和数据库。需要通过合适的事务机制或分布式锁来保证这两个操作的原子性。</p>\n<h4 id=\"5-使用消息队列实现最终一致性\"><a class=\"headerlink\" href=\"#5-使用消息队列实现最终一致性\"></a>5. 使用消息队列实现最终一致性</h4>\n<p>写操作更新数据库后，将更新时间发送到消息队列，消费者接收消息后更新缓存，实现最终一致性。</p>\n<h4 id=\"总结\"><a class=\"headerlink\" href=\"#总结\"></a>总结</h4>\n<ul>\n<li><strong>Cache Aside Pattern（旁路缓存模式）</strong>：读操作先查缓存，缓存未命中再查数据库，写操作先更新数据库，再使缓存失效。</li>\n<li><strong>Write Through Cache（写直达缓存）</strong>：写操作先更新缓存，再同步更新数据库。</li>\n<li><strong>Write Behind Cache（异步写缓存）</strong>：写操作先更新缓存，再异步批量更新数据库。</li>\n<li><strong>双写一致性（Cache and Database Double Write）</strong>：写操作时同时更新缓存和数据库，确保原子性。</li>\n<li><strong>使用消息队列实现最终一致性</strong>：更新数据库后发送消息队列，消费者接收消息后更新缓存，实现最终一致性。</li>\n</ul>\n",
            "tags": [
                "总结",
                "Redis"
            ]
        },
        {
            "id": "https://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://blog.aixcc.top/2024/06/26/MyBatis%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "MyBatis应用与总结",
            "date_published": "2024-06-26T09:53:37.000Z",
            "content_html": "<h1 id=\"MyBatis常见面试题总结\"><a class=\"headerlink\" href=\"#MyBatis常见面试题总结\"></a>MyBatis常见面试题总结</h1>\n<h3 id=\"和-的区别是什么？\"><a class=\"headerlink\" href=\"#和-的区别是什么？\"></a>#{} 和 ${} 的区别是什么？</h3>\n<ul>\n<li><code>$&#123;&#125;</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 slq 内部，属于原样文本替换，可以替换任意内容。</li>\n<li><code>#&#123;&#125;</code>是 sql 的参数占位符，Mybatis 会将 sql 中<code>#&#123;&#125;</code>替换为？号，在 sql 执行前会使用PreparedStatement 的参数设置方法，按序给 sql 的 ？号占位符设置参数值。使用<code>#&#123;&#125;</code>可以有效防止 sql 注入。</li>\n</ul>\n",
            "tags": [
                "Java",
                "MyBatis",
                "总结"
            ]
        }
    ]
}